
20150708.001_H1_HeadCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000cc7c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000cc7c  0000cc7c  0001cc7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .configuration 0000002c  0003ff00  0003ff00  0002ff00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .relocate     00000170  20000000  0000cc84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00002870  20000170  0000ce00  00020170  2**4
                  ALLOC
  5 .stack        00002000  200029e0  0000f670  00020170  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  0002ff2c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002ff54  2**0
                  CONTENTS, READONLY
  8 .debug_info   000a307f  00000000  00000000  0002ffad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000b4ef  00000000  00000000  000d302c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00013913  00000000  00000000  000de51b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001598  00000000  00000000  000f1e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001bf0  00000000  00000000  000f33c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000283ce  00000000  00000000  000f4fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002ac62  00000000  00000000  0011d384  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00097e95  00000000  00000000  00147fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003bac  00000000  00000000  001dfe7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 49 00 20 e9 90 00 00 e5 90 00 00 e5 90 00 00     .I. ............
	...
      2c:	e5 90 00 00 00 00 00 00 00 00 00 00 e5 90 00 00     ................
      3c:	e5 90 00 00 e5 90 00 00 e5 90 00 00 f9 5b 00 00     .............[..
      4c:	e9 41 00 00 55 77 00 00 e5 90 00 00 3d 14 00 00     .A..Uw......=...
      5c:	49 68 00 00 e5 90 00 00 c1 74 00 00 d1 74 00 00     Ih.......t...t..
      6c:	e1 74 00 00 f1 74 00 00 01 75 00 00 11 75 00 00     .t...t...u...u..
      7c:	09 18 00 00 19 18 00 00 29 18 00 00 99 4b 00 00     ........)....K..
      8c:	a9 4b 00 00 b9 4b 00 00 00 00 00 00 00 00 00 00     .K...K..........
      9c:	25 11 00 00 0d 78 00 00 69 13 00 00 e5 90 00 00     %....x..i.......
      ac:	45 77 00 00 00 00 00 00                             Ew......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000170 	.word	0x20000170
      d4:	00000000 	.word	0x00000000
      d8:	0000cc84 	.word	0x0000cc84

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000174 	.word	0x20000174
     108:	0000cc84 	.word	0x0000cc84
     10c:	0003ff2c 	.word	0x0003ff2c
     110:	00000000 	.word	0x00000000

00000114 <ADC_ProcessToSend>:

    dma_descriptor_create(descriptor, &descriptor_config);
}

static void ADC_ProcessToSend(uint32_t src, uint32_t dst, uint32_t length)
{
     114:	b530      	push	{r4, r5, lr}
	int16_t *pDst = (void *)dst;
	int16_t *pSrc = (void*)src;
	int16_t value;

	while(length-- > 0)
     116:	e00e      	b.n	136 <ADC_ProcessToSend+0x22>
	{
		value =  *(pSrc + mic_idx) - Cfg_offset[mic_idx];
     118:	4a09      	ldr	r2, [pc, #36]	; (140 <ADC_ProcessToSend+0x2c>)
     11a:	6813      	ldr	r3, [r2, #0]
     11c:	005b      	lsls	r3, r3, #1
     11e:	5ac3      	ldrh	r3, [r0, r3]
     120:	6812      	ldr	r2, [r2, #0]
     122:	0052      	lsls	r2, r2, #1
     124:	4d07      	ldr	r5, [pc, #28]	; (144 <ADC_ProcessToSend+0x30>)
     126:	5b52      	ldrh	r2, [r2, r5]
     128:	1a9b      	subs	r3, r3, r2
     12a:	b21b      	sxth	r3, r3
		*(pDst++) = value;
     12c:	800b      	strh	r3, [r1, #0]
		*(pDst++) = value;
     12e:	804b      	strh	r3, [r1, #2]
		pSrc += NSCAN_CHN;
     130:	3006      	adds	r0, #6
		*(pDst++) = value;
     132:	3104      	adds	r1, #4
	while(length-- > 0)
     134:	0022      	movs	r2, r4
     136:	1e54      	subs	r4, r2, #1
     138:	2a00      	cmp	r2, #0
     13a:	d1ed      	bne.n	118 <ADC_ProcessToSend+0x4>
	}
}
     13c:	bd30      	pop	{r4, r5, pc}
     13e:	46c0      	nop			; (mov r8, r8)
     140:	20000dc4 	.word	0x20000dc4
     144:	20000000 	.word	0x20000000

00000148 <callback_function_ac>:
**********************************/

static struct ac_module ac_instance;

void callback_function_ac(struct ac_module *const module_inst)
{
     148:	b510      	push	{r4, lr}
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
     14a:	2240      	movs	r2, #64	; 0x40
     14c:	4b04      	ldr	r3, [pc, #16]	; (160 <callback_function_ac+0x18>)
     14e:	615a      	str	r2, [r3, #20]
	ioport_set_pin_level(SERVO_EN, 0);
	servo_recon_tm = GetTickCount();
     150:	4b04      	ldr	r3, [pc, #16]	; (164 <callback_function_ac+0x1c>)
     152:	4798      	blx	r3
     154:	4b04      	ldr	r3, [pc, #16]	; (168 <callback_function_ac+0x20>)
     156:	6018      	str	r0, [r3, #0]
	servo_overload = 1;
     158:	2201      	movs	r2, #1
     15a:	4b04      	ldr	r3, [pc, #16]	; (16c <callback_function_ac+0x24>)
     15c:	601a      	str	r2, [r3, #0]
}
     15e:	bd10      	pop	{r4, pc}
     160:	41004400 	.word	0x41004400
     164:	00002ead 	.word	0x00002ead
     168:	20000dcc 	.word	0x20000dcc
     16c:	20000dc8 	.word	0x20000dc8

00000170 <dma_ADC_tranfer_done>:
{
     170:	b570      	push	{r4, r5, r6, lr}
	l_buffer_idx = buffer_idx & 0x01;
     172:	4b2b      	ldr	r3, [pc, #172]	; (220 <dma_ADC_tranfer_done+0xb0>)
     174:	681a      	ldr	r2, [r3, #0]
     176:	2101      	movs	r1, #1
     178:	400a      	ands	r2, r1
     17a:	4c2a      	ldr	r4, [pc, #168]	; (224 <dma_ADC_tranfer_done+0xb4>)
     17c:	6022      	str	r2, [r4, #0]
	resource->descriptor->DSTADDR.reg = (uint32_t)&adc_buffer[buffer_idx++][0] + sizeof(adc_buffer)/2;
     17e:	6985      	ldr	r5, [r0, #24]
     180:	681a      	ldr	r2, [r3, #0]
     182:	1c50      	adds	r0, r2, #1
     184:	6018      	str	r0, [r3, #0]
     186:	0050      	lsls	r0, r2, #1
     188:	1880      	adds	r0, r0, r2
     18a:	0244      	lsls	r4, r0, #9
     18c:	4a26      	ldr	r2, [pc, #152]	; (228 <dma_ADC_tranfer_done+0xb8>)
     18e:	1912      	adds	r2, r2, r4
     190:	20c0      	movs	r0, #192	; 0xc0
     192:	00c0      	lsls	r0, r0, #3
     194:	4684      	mov	ip, r0
     196:	4462      	add	r2, ip
     198:	60aa      	str	r2, [r5, #8]
	buffer_idx &= 0x1;
     19a:	681a      	ldr	r2, [r3, #0]
     19c:	4011      	ands	r1, r2
     19e:	6019      	str	r1, [r3, #0]
	if(ADC->INTFLAG.bit.OVERRUN)
     1a0:	4b22      	ldr	r3, [pc, #136]	; (22c <dma_ADC_tranfer_done+0xbc>)
     1a2:	7e1b      	ldrb	r3, [r3, #24]
     1a4:	079b      	lsls	r3, r3, #30
     1a6:	d512      	bpl.n	1ce <dma_ADC_tranfer_done+0x5e>
		if (!(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY)) 
     1a8:	4b20      	ldr	r3, [pc, #128]	; (22c <dma_ADC_tranfer_done+0xbc>)
     1aa:	7e5b      	ldrb	r3, [r3, #25]
     1ac:	b25b      	sxtb	r3, r3
     1ae:	2b00      	cmp	r3, #0
     1b0:	db0d      	blt.n	1ce <dma_ADC_tranfer_done+0x5e>
			ADC->INPUTCTRL.bit.INPUTOFFSET = 0;
     1b2:	4b1e      	ldr	r3, [pc, #120]	; (22c <dma_ADC_tranfer_done+0xbc>)
     1b4:	6919      	ldr	r1, [r3, #16]
     1b6:	4a1e      	ldr	r2, [pc, #120]	; (230 <dma_ADC_tranfer_done+0xc0>)
     1b8:	400a      	ands	r2, r1
     1ba:	611a      	str	r2, [r3, #16]
			ADC->INTFLAG.reg |= ADC_INTFLAG_OVERRUN;
     1bc:	7e1a      	ldrb	r2, [r3, #24]
     1be:	2102      	movs	r1, #2
     1c0:	430a      	orrs	r2, r1
     1c2:	b2d2      	uxtb	r2, r2
     1c4:	761a      	strb	r2, [r3, #24]
			ADC->SWTRIG.bit.FLUSH = 1;
     1c6:	7b1a      	ldrb	r2, [r3, #12]
     1c8:	2101      	movs	r1, #1
     1ca:	430a      	orrs	r2, r1
     1cc:	731a      	strb	r2, [r3, #12]
	if(dma_start_transfer_job(&adc_dma_resource) == STATUS_BUSY)
     1ce:	4819      	ldr	r0, [pc, #100]	; (234 <dma_ADC_tranfer_done+0xc4>)
     1d0:	4b19      	ldr	r3, [pc, #100]	; (238 <dma_ADC_tranfer_done+0xc8>)
     1d2:	4798      	blx	r3
     1d4:	2805      	cmp	r0, #5
     1d6:	d01a      	beq.n	20e <dma_ADC_tranfer_done+0x9e>
	adc_dma_tm = GetTickCount();
     1d8:	4b18      	ldr	r3, [pc, #96]	; (23c <dma_ADC_tranfer_done+0xcc>)
     1da:	4798      	blx	r3
     1dc:	4b18      	ldr	r3, [pc, #96]	; (240 <dma_ADC_tranfer_done+0xd0>)
     1de:	6018      	str	r0, [r3, #0]
	ADC_ProcessToSend((uint32_t)&adc_buffer[l_buffer_idx][0], (uint32_t)(void *)GetI2S_TX_Buffer(l_buffer_idx), BUFFER_LENGTH);
     1e0:	4c10      	ldr	r4, [pc, #64]	; (224 <dma_ADC_tranfer_done+0xb4>)
     1e2:	6822      	ldr	r2, [r4, #0]
     1e4:	0053      	lsls	r3, r2, #1
     1e6:	189b      	adds	r3, r3, r2
     1e8:	025a      	lsls	r2, r3, #9
     1ea:	4d0f      	ldr	r5, [pc, #60]	; (228 <dma_ADC_tranfer_done+0xb8>)
     1ec:	18ad      	adds	r5, r5, r2
     1ee:	6820      	ldr	r0, [r4, #0]
     1f0:	4b14      	ldr	r3, [pc, #80]	; (244 <dma_ADC_tranfer_done+0xd4>)
     1f2:	4798      	blx	r3
     1f4:	0001      	movs	r1, r0
     1f6:	2280      	movs	r2, #128	; 0x80
     1f8:	0052      	lsls	r2, r2, #1
     1fa:	0028      	movs	r0, r5
     1fc:	4b12      	ldr	r3, [pc, #72]	; (248 <dma_ADC_tranfer_done+0xd8>)
     1fe:	4798      	blx	r3
	SendI2Sdata(l_buffer_idx);
     200:	6820      	ldr	r0, [r4, #0]
     202:	4b12      	ldr	r3, [pc, #72]	; (24c <dma_ADC_tranfer_done+0xdc>)
     204:	4798      	blx	r3
	transfer_is_done = true;
     206:	2201      	movs	r2, #1
     208:	4b11      	ldr	r3, [pc, #68]	; (250 <dma_ADC_tranfer_done+0xe0>)
     20a:	601a      	str	r2, [r3, #0]
}
     20c:	bd70      	pop	{r4, r5, r6, pc}
		dma_abort_job(&adc_dma_resource);
     20e:	4c09      	ldr	r4, [pc, #36]	; (234 <dma_ADC_tranfer_done+0xc4>)
     210:	0020      	movs	r0, r4
     212:	4b10      	ldr	r3, [pc, #64]	; (254 <dma_ADC_tranfer_done+0xe4>)
     214:	4798      	blx	r3
		dma_start_transfer_job(&adc_dma_resource);	
     216:	0020      	movs	r0, r4
     218:	4b07      	ldr	r3, [pc, #28]	; (238 <dma_ADC_tranfer_done+0xc8>)
     21a:	4798      	blx	r3
     21c:	e7dc      	b.n	1d8 <dma_ADC_tranfer_done+0x68>
     21e:	46c0      	nop			; (mov r8, r8)
     220:	20000dbc 	.word	0x20000dbc
     224:	20000dc0 	.word	0x20000dc0
     228:	200001b0 	.word	0x200001b0
     22c:	42004000 	.word	0x42004000
     230:	ff0fffff 	.word	0xff0fffff
     234:	20001118 	.word	0x20001118
     238:	000015b9 	.word	0x000015b9
     23c:	00002ead 	.word	0x00002ead
     240:	20000db4 	.word	0x20000db4
     244:	00002d09 	.word	0x00002d09
     248:	00000115 	.word	0x00000115
     24c:	00002d15 	.word	0x00002d15
     250:	20000dd0 	.word	0x20000dd0
     254:	00001645 	.word	0x00001645

00000258 <Compute_ADC_RMS>:
{
     258:	b5f0      	push	{r4, r5, r6, r7, lr}
     25a:	46d6      	mov	lr, sl
     25c:	464f      	mov	r7, r9
     25e:	4646      	mov	r6, r8
     260:	b5c0      	push	{r6, r7, lr}
     262:	b08a      	sub	sp, #40	; 0x28
     264:	9103      	str	r1, [sp, #12]
     266:	4691      	mov	r9, r2
	uint32_t x = 0, nItems = nSamples;
     268:	000e      	movs	r6, r1
	if(data == NULL || RMS_out == NULL)
     26a:	2800      	cmp	r0, #0
     26c:	d06b      	beq.n	346 <Compute_ADC_RMS+0xee>
     26e:	2a00      	cmp	r2, #0
     270:	d06b      	beq.n	34a <Compute_ADC_RMS+0xf2>
     272:	2100      	movs	r1, #0
     274:	e008      	b.n	288 <Compute_ADC_RMS+0x30>
		adder[x] = 0;
     276:	00cf      	lsls	r7, r1, #3
     278:	ab04      	add	r3, sp, #16
     27a:	469c      	mov	ip, r3
     27c:	4467      	add	r7, ip
     27e:	2200      	movs	r2, #0
     280:	2300      	movs	r3, #0
     282:	603a      	str	r2, [r7, #0]
     284:	607b      	str	r3, [r7, #4]
	for(x = 0; x <NSCAN_CHN ; x++) 
     286:	3101      	adds	r1, #1
     288:	2902      	cmp	r1, #2
     28a:	d9f4      	bls.n	276 <Compute_ADC_RMS+0x1e>
     28c:	e013      	b.n	2b6 <Compute_ADC_RMS+0x5e>
			adder[x] +=(uint64_t)((*pData) * (*pData));
     28e:	2200      	movs	r2, #0
     290:	5e83      	ldrsh	r3, [r0, r2]
     292:	435b      	muls	r3, r3
     294:	001c      	movs	r4, r3
     296:	17dd      	asrs	r5, r3, #31
     298:	00f1      	lsls	r1, r6, #3
     29a:	ab04      	add	r3, sp, #16
     29c:	469c      	mov	ip, r3
     29e:	4461      	add	r1, ip
     2a0:	680a      	ldr	r2, [r1, #0]
     2a2:	684b      	ldr	r3, [r1, #4]
     2a4:	1912      	adds	r2, r2, r4
     2a6:	416b      	adcs	r3, r5
     2a8:	600a      	str	r2, [r1, #0]
     2aa:	604b      	str	r3, [r1, #4]
			pData++;
     2ac:	3002      	adds	r0, #2
		for(x = 0; x<NSCAN_CHN; x++)
     2ae:	3601      	adds	r6, #1
     2b0:	2e02      	cmp	r6, #2
     2b2:	d9ec      	bls.n	28e <Compute_ADC_RMS+0x36>
	while(nItems--)
     2b4:	003e      	movs	r6, r7
     2b6:	1e77      	subs	r7, r6, #1
     2b8:	2e00      	cmp	r6, #0
     2ba:	d001      	beq.n	2c0 <Compute_ADC_RMS+0x68>
     2bc:	2600      	movs	r6, #0
     2be:	e7f7      	b.n	2b0 <Compute_ADC_RMS+0x58>
     2c0:	0037      	movs	r7, r6
     2c2:	e037      	b.n	334 <Compute_ADC_RMS+0xdc>
		adder[x] /= nSamples;
     2c4:	00fb      	lsls	r3, r7, #3
     2c6:	aa04      	add	r2, sp, #16
     2c8:	4694      	mov	ip, r2
     2ca:	4463      	add	r3, ip
     2cc:	4698      	mov	r8, r3
     2ce:	9a03      	ldr	r2, [sp, #12]
     2d0:	2300      	movs	r3, #0
     2d2:	4641      	mov	r1, r8
     2d4:	6808      	ldr	r0, [r1, #0]
     2d6:	6849      	ldr	r1, [r1, #4]
     2d8:	4c1d      	ldr	r4, [pc, #116]	; (350 <Compute_ADC_RMS+0xf8>)
     2da:	47a0      	blx	r4
     2dc:	0004      	movs	r4, r0
     2de:	000d      	movs	r5, r1
     2e0:	4643      	mov	r3, r8
     2e2:	601c      	str	r4, [r3, #0]
     2e4:	605d      	str	r5, [r3, #4]
		RMS_out[x] = (7 * RMS_out[x] + sqrtf((float)adder[x]) / 32767.0)/8;	// Divide 32767 results in 1V max RMS
     2e6:	00bb      	lsls	r3, r7, #2
     2e8:	444b      	add	r3, r9
     2ea:	4698      	mov	r8, r3
     2ec:	4919      	ldr	r1, [pc, #100]	; (354 <Compute_ADC_RMS+0xfc>)
     2ee:	6818      	ldr	r0, [r3, #0]
     2f0:	4b19      	ldr	r3, [pc, #100]	; (358 <Compute_ADC_RMS+0x100>)
     2f2:	4798      	blx	r3
     2f4:	4b19      	ldr	r3, [pc, #100]	; (35c <Compute_ADC_RMS+0x104>)
     2f6:	469a      	mov	sl, r3
     2f8:	4798      	blx	r3
     2fa:	9000      	str	r0, [sp, #0]
     2fc:	9101      	str	r1, [sp, #4]
     2fe:	0020      	movs	r0, r4
     300:	0029      	movs	r1, r5
     302:	4b17      	ldr	r3, [pc, #92]	; (360 <Compute_ADC_RMS+0x108>)
     304:	4798      	blx	r3
     306:	4b17      	ldr	r3, [pc, #92]	; (364 <Compute_ADC_RMS+0x10c>)
     308:	4798      	blx	r3
     30a:	47d0      	blx	sl
     30c:	2200      	movs	r2, #0
     30e:	4b16      	ldr	r3, [pc, #88]	; (368 <Compute_ADC_RMS+0x110>)
     310:	4c16      	ldr	r4, [pc, #88]	; (36c <Compute_ADC_RMS+0x114>)
     312:	47a0      	blx	r4
     314:	0002      	movs	r2, r0
     316:	000b      	movs	r3, r1
     318:	9800      	ldr	r0, [sp, #0]
     31a:	9901      	ldr	r1, [sp, #4]
     31c:	4c14      	ldr	r4, [pc, #80]	; (370 <Compute_ADC_RMS+0x118>)
     31e:	47a0      	blx	r4
     320:	2200      	movs	r2, #0
     322:	23ff      	movs	r3, #255	; 0xff
     324:	059b      	lsls	r3, r3, #22
     326:	4c13      	ldr	r4, [pc, #76]	; (374 <Compute_ADC_RMS+0x11c>)
     328:	47a0      	blx	r4
     32a:	4b13      	ldr	r3, [pc, #76]	; (378 <Compute_ADC_RMS+0x120>)
     32c:	4798      	blx	r3
     32e:	4643      	mov	r3, r8
     330:	6018      	str	r0, [r3, #0]
	for(x = 0; x<NSCAN_CHN; x++)
     332:	3701      	adds	r7, #1
     334:	2f02      	cmp	r7, #2
     336:	d9c5      	bls.n	2c4 <Compute_ADC_RMS+0x6c>
}
     338:	0030      	movs	r0, r6
     33a:	b00a      	add	sp, #40	; 0x28
     33c:	bc1c      	pop	{r2, r3, r4}
     33e:	4690      	mov	r8, r2
     340:	4699      	mov	r9, r3
     342:	46a2      	mov	sl, r4
     344:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_NO_CHANGE;
     346:	2602      	movs	r6, #2
     348:	e7f6      	b.n	338 <Compute_ADC_RMS+0xe0>
     34a:	2602      	movs	r6, #2
     34c:	e7f4      	b.n	338 <Compute_ADC_RMS+0xe0>
     34e:	46c0      	nop			; (mov r8, r8)
     350:	000098d9 	.word	0x000098d9
     354:	40e00000 	.word	0x40e00000
     358:	0000a269 	.word	0x0000a269
     35c:	0000c169 	.word	0x0000c169
     360:	0000999d 	.word	0x0000999d
     364:	0000939d 	.word	0x0000939d
     368:	40dfffc0 	.word	0x40dfffc0
     36c:	0000aefd 	.word	0x0000aefd
     370:	0000a8dd 	.word	0x0000a8dd
     374:	0000b565 	.word	0x0000b565
     378:	0000c20d 	.word	0x0000c20d

0000037c <fGetADCtransfertBUffer>:
	if(transfer_is_done)
     37c:	4b08      	ldr	r3, [pc, #32]	; (3a0 <fGetADCtransfertBUffer+0x24>)
     37e:	681b      	ldr	r3, [r3, #0]
     380:	2b00      	cmp	r3, #0
     382:	d00a      	beq.n	39a <fGetADCtransfertBUffer+0x1e>
		transfer_is_done = 0;
     384:	2200      	movs	r2, #0
     386:	4b06      	ldr	r3, [pc, #24]	; (3a0 <fGetADCtransfertBUffer+0x24>)
     388:	601a      	str	r2, [r3, #0]
		return (int16_t *)&adc_buffer[l_buffer_idx][0];
     38a:	4b06      	ldr	r3, [pc, #24]	; (3a4 <fGetADCtransfertBUffer+0x28>)
     38c:	681a      	ldr	r2, [r3, #0]
     38e:	0053      	lsls	r3, r2, #1
     390:	189b      	adds	r3, r3, r2
     392:	025a      	lsls	r2, r3, #9
     394:	4804      	ldr	r0, [pc, #16]	; (3a8 <fGetADCtransfertBUffer+0x2c>)
     396:	1880      	adds	r0, r0, r2
}
     398:	4770      	bx	lr
	return NULL;
     39a:	2000      	movs	r0, #0
     39c:	e7fc      	b.n	398 <fGetADCtransfertBUffer+0x1c>
     39e:	46c0      	nop			; (mov r8, r8)
     3a0:	20000dd0 	.word	0x20000dd0
     3a4:	20000dc0 	.word	0x20000dc0
     3a8:	200001b0 	.word	0x200001b0

000003ac <Compute_ADC_Offset>:
{
     3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ae:	b085      	sub	sp, #20
	int16_t *pData = fGetADCtransfertBUffer();
     3b0:	4b20      	ldr	r3, [pc, #128]	; (434 <Compute_ADC_Offset+0x88>)
     3b2:	4798      	blx	r3
     3b4:	1e01      	subs	r1, r0, #0
	if(pData == NULL)
     3b6:	d03a      	beq.n	42e <Compute_ADC_Offset+0x82>
     3b8:	2300      	movs	r3, #0
     3ba:	e004      	b.n	3c6 <Compute_ADC_Offset+0x1a>
		adder[x] = 0;
     3bc:	0098      	lsls	r0, r3, #2
     3be:	2400      	movs	r4, #0
     3c0:	aa01      	add	r2, sp, #4
     3c2:	5084      	str	r4, [r0, r2]
	for(x = 0; x <NSCAN_CHN ; x++)
     3c4:	3301      	adds	r3, #1
     3c6:	2b02      	cmp	r3, #2
     3c8:	d9f8      	bls.n	3bc <Compute_ADC_Offset+0x10>
     3ca:	2080      	movs	r0, #128	; 0x80
     3cc:	0040      	lsls	r0, r0, #1
     3ce:	e00c      	b.n	3ea <Compute_ADC_Offset+0x3e>
			adder[x] +=(int32_t)*(pData++);
     3d0:	2000      	movs	r0, #0
     3d2:	5e0a      	ldrsh	r2, [r1, r0]
     3d4:	a801      	add	r0, sp, #4
     3d6:	009c      	lsls	r4, r3, #2
     3d8:	5826      	ldr	r6, [r4, r0]
     3da:	46b4      	mov	ip, r6
     3dc:	4462      	add	r2, ip
     3de:	5022      	str	r2, [r4, r0]
		for(x = 0; x<NSCAN_CHN; x++)
     3e0:	3301      	adds	r3, #1
			adder[x] +=(int32_t)*(pData++);
     3e2:	3102      	adds	r1, #2
		for(x = 0; x<NSCAN_CHN; x++)
     3e4:	2b02      	cmp	r3, #2
     3e6:	d9f3      	bls.n	3d0 <Compute_ADC_Offset+0x24>
	while(nItems--)
     3e8:	0028      	movs	r0, r5
     3ea:	1e45      	subs	r5, r0, #1
     3ec:	2800      	cmp	r0, #0
     3ee:	d001      	beq.n	3f4 <Compute_ADC_Offset+0x48>
     3f0:	2300      	movs	r3, #0
     3f2:	e7f7      	b.n	3e4 <Compute_ADC_Offset+0x38>
     3f4:	0002      	movs	r2, r0
     3f6:	e016      	b.n	426 <Compute_ADC_Offset+0x7a>
		ADC_Offset[x] =(int16_t)((15 * ADC_Offset[x] + (adder[x] / BUFFER_LENGTH)) / 16);	// Result is in ADC counts
     3f8:	490f      	ldr	r1, [pc, #60]	; (438 <Compute_ADC_Offset+0x8c>)
     3fa:	0054      	lsls	r4, r2, #1
     3fc:	5a63      	ldrh	r3, [r4, r1]
     3fe:	b21b      	sxth	r3, r3
     400:	011d      	lsls	r5, r3, #4
     402:	1aed      	subs	r5, r5, r3
     404:	0096      	lsls	r6, r2, #2
     406:	ab01      	add	r3, sp, #4
     408:	58f6      	ldr	r6, [r6, r3]
     40a:	17f7      	asrs	r7, r6, #31
     40c:	23ff      	movs	r3, #255	; 0xff
     40e:	403b      	ands	r3, r7
     410:	199b      	adds	r3, r3, r6
     412:	121b      	asrs	r3, r3, #8
     414:	18ed      	adds	r5, r5, r3
     416:	17ee      	asrs	r6, r5, #31
     418:	230f      	movs	r3, #15
     41a:	4033      	ands	r3, r6
     41c:	195b      	adds	r3, r3, r5
     41e:	111b      	asrs	r3, r3, #4
     420:	b21b      	sxth	r3, r3
     422:	5263      	strh	r3, [r4, r1]
	for(x = 0; x<NSCAN_CHN; x++)
     424:	3201      	adds	r2, #1
     426:	2a02      	cmp	r2, #2
     428:	d9e6      	bls.n	3f8 <Compute_ADC_Offset+0x4c>
}
     42a:	b005      	add	sp, #20
     42c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_BUSY;
     42e:	2005      	movs	r0, #5
     430:	e7fb      	b.n	42a <Compute_ADC_Offset+0x7e>
     432:	46c0      	nop			; (mov r8, r8)
     434:	0000037d 	.word	0x0000037d
     438:	200010c0 	.word	0x200010c0

0000043c <GetRMSdata>:
}
     43c:	4800      	ldr	r0, [pc, #0]	; (440 <GetRMSdata+0x4>)
     43e:	4770      	bx	lr
     440:	2000110c 	.word	0x2000110c

00000444 <SetMicIndex>:
	if(index < 3)
     444:	2802      	cmp	r0, #2
     446:	d801      	bhi.n	44c <SetMicIndex+0x8>
		mic_idx = index;
     448:	4b02      	ldr	r3, [pc, #8]	; (454 <SetMicIndex+0x10>)
     44a:	6018      	str	r0, [r3, #0]
	return mic_idx;
     44c:	4b01      	ldr	r3, [pc, #4]	; (454 <SetMicIndex+0x10>)
     44e:	6818      	ldr	r0, [r3, #0]
}
     450:	4770      	bx	lr
     452:	46c0      	nop			; (mov r8, r8)
     454:	20000dc4 	.word	0x20000dc4

00000458 <configure_ADC_trigger>:
{
     458:	b530      	push	{r4, r5, lr}
     45a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     45c:	aa03      	add	r2, sp, #12
     45e:	2300      	movs	r3, #0
     460:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     462:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
     464:	2100      	movs	r1, #0
     466:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     468:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     46a:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     46c:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     46e:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     470:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     472:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     474:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     476:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     478:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     47a:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     47c:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     47e:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     480:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     482:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     484:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.wave_generation = TC_WAVE_GENERATION_MATCH_FREQ;
     486:	3320      	adds	r3, #32
     488:	7193      	strb	r3, [r2, #6]
	config_tc.counter_16_bit.compare_capture_channel[0] = 999;	 // 3 Channel * 16000 Hz = 48000Hz -> 48e6 / 48e3  = 1000
     48a:	4b28      	ldr	r3, [pc, #160]	; (52c <configure_ADC_trigger+0xd4>)
     48c:	8553      	strh	r3, [r2, #42]	; 0x2a
	config_events.generate_event_on_overflow = true;
     48e:	ad01      	add	r5, sp, #4
     490:	2301      	movs	r3, #1
     492:	70ab      	strb	r3, [r5, #2]
	tc_init(&tc_instance, TC3 , &config_tc);
     494:	4c26      	ldr	r4, [pc, #152]	; (530 <configure_ADC_trigger+0xd8>)
     496:	4927      	ldr	r1, [pc, #156]	; (534 <configure_ADC_trigger+0xdc>)
     498:	0020      	movs	r0, r4
     49a:	4b27      	ldr	r3, [pc, #156]	; (538 <configure_ADC_trigger+0xe0>)
     49c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(events);

	Tc *const tc_module = module_inst->hw;
     49e:	6824      	ldr	r4, [r4, #0]

	uint32_t event_mask = 0;

	if (events->invert_event_input == true) {
     4a0:	792b      	ldrb	r3, [r5, #4]
     4a2:	2b00      	cmp	r3, #0
     4a4:	d10f      	bne.n	4c6 <configure_ADC_trigger+0x6e>
	uint32_t event_mask = 0;
     4a6:	2100      	movs	r1, #0
		event_mask |= TC_EVCTRL_TCINV;
	}

	if (events->on_event_perform_action == true) {
     4a8:	ab01      	add	r3, sp, #4
     4aa:	78db      	ldrb	r3, [r3, #3]
     4ac:	2b00      	cmp	r3, #0
     4ae:	d001      	beq.n	4b4 <configure_ADC_trigger+0x5c>
		event_mask |= TC_EVCTRL_TCEI;
     4b0:	2320      	movs	r3, #32
     4b2:	4319      	orrs	r1, r3
	}

	if (events->generate_event_on_overflow == true) {
     4b4:	ab01      	add	r3, sp, #4
     4b6:	789b      	ldrb	r3, [r3, #2]
     4b8:	2b00      	cmp	r3, #0
     4ba:	d002      	beq.n	4c2 <configure_ADC_trigger+0x6a>
		event_mask |= TC_EVCTRL_OVFEO;
     4bc:	2380      	movs	r3, #128	; 0x80
     4be:	005b      	lsls	r3, r3, #1
     4c0:	4319      	orrs	r1, r3
		event_mask |= TC_EVCTRL_TCINV;
     4c2:	2300      	movs	r3, #0
     4c4:	e003      	b.n	4ce <configure_ADC_trigger+0x76>
     4c6:	2110      	movs	r1, #16
     4c8:	e7ee      	b.n	4a8 <configure_ADC_trigger+0x50>
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
     4ca:	3301      	adds	r3, #1
     4cc:	b2db      	uxtb	r3, r3
     4ce:	2b01      	cmp	r3, #1
     4d0:	d808      	bhi.n	4e4 <configure_ADC_trigger+0x8c>
		if (events->generate_event_on_compare_channel[i] == true) {
     4d2:	aa01      	add	r2, sp, #4
     4d4:	5cd2      	ldrb	r2, [r2, r3]
     4d6:	2a00      	cmp	r2, #0
     4d8:	d0f7      	beq.n	4ca <configure_ADC_trigger+0x72>
			event_mask |= (TC_EVCTRL_MCEO(1) << i);
     4da:	2280      	movs	r2, #128	; 0x80
     4dc:	0152      	lsls	r2, r2, #5
     4de:	409a      	lsls	r2, r3
     4e0:	4311      	orrs	r1, r2
     4e2:	e7f2      	b.n	4ca <configure_ADC_trigger+0x72>
		}
	}

	tc_module->COUNT8.EVCTRL.reg |= event_mask | events->event_action;
     4e4:	8960      	ldrh	r0, [r4, #10]
     4e6:	ab01      	add	r3, sp, #4
     4e8:	795a      	ldrb	r2, [r3, #5]
     4ea:	430a      	orrs	r2, r1
     4ec:	b293      	uxth	r3, r2
     4ee:	4303      	orrs	r3, r0
     4f0:	8163      	strh	r3, [r4, #10]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     4f2:	4b0f      	ldr	r3, [pc, #60]	; (530 <configure_ADC_trigger+0xd8>)
     4f4:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     4f6:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     4f8:	b25b      	sxtb	r3, r3
     4fa:	2b00      	cmp	r3, #0
     4fc:	dbfb      	blt.n	4f6 <configure_ADC_trigger+0x9e>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     4fe:	8813      	ldrh	r3, [r2, #0]
     500:	2102      	movs	r1, #2
     502:	430b      	orrs	r3, r1
     504:	b29b      	uxth	r3, r3
     506:	8013      	strh	r3, [r2, #0]
	adc_dma_timeout =(uint32_t)(((float)config_tc.counter_16_bit.compare_capture_channel[0]) * periode); 
     508:	ab03      	add	r3, sp, #12
     50a:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
     50c:	4b0b      	ldr	r3, [pc, #44]	; (53c <configure_ADC_trigger+0xe4>)
     50e:	4798      	blx	r3
     510:	490b      	ldr	r1, [pc, #44]	; (540 <configure_ADC_trigger+0xe8>)
     512:	4b0c      	ldr	r3, [pc, #48]	; (544 <configure_ADC_trigger+0xec>)
     514:	4798      	blx	r3
     516:	4b0c      	ldr	r3, [pc, #48]	; (548 <configure_ADC_trigger+0xf0>)
     518:	4798      	blx	r3
     51a:	4b0c      	ldr	r3, [pc, #48]	; (54c <configure_ADC_trigger+0xf4>)
     51c:	6018      	str	r0, [r3, #0]
	adc_dma_tm = GetTickCount();
     51e:	4b0c      	ldr	r3, [pc, #48]	; (550 <configure_ADC_trigger+0xf8>)
     520:	4798      	blx	r3
     522:	4b0c      	ldr	r3, [pc, #48]	; (554 <configure_ADC_trigger+0xfc>)
     524:	6018      	str	r0, [r3, #0]
}
     526:	b011      	add	sp, #68	; 0x44
     528:	bd30      	pop	{r4, r5, pc}
     52a:	46c0      	nop			; (mov r8, r8)
     52c:	000003e7 	.word	0x000003e7
     530:	20001134 	.word	0x20001134
     534:	42002c00 	.word	0x42002c00
     538:	00004bf9 	.word	0x00004bf9
     53c:	0000a851 	.word	0x0000a851
     540:	3ca3d70a 	.word	0x3ca3d70a
     544:	0000a269 	.word	0x0000a269
     548:	0000996d 	.word	0x0000996d
     54c:	20000db0 	.word	0x20000db0
     550:	00002ead 	.word	0x00002ead
     554:	20000db4 	.word	0x20000db4

00000558 <configure_ADC_dma_resource>:
{
     558:	b510      	push	{r4, lr}
     55a:	b082      	sub	sp, #8
     55c:	0004      	movs	r4, r0
    dma_get_config_defaults(&dma_res_config);
     55e:	4668      	mov	r0, sp
     560:	4b07      	ldr	r3, [pc, #28]	; (580 <configure_ADC_dma_resource+0x28>)
     562:	4798      	blx	r3
    dma_res_config.peripheral_trigger = ADC_DMAC_ID_RESRDY;
     564:	2327      	movs	r3, #39	; 0x27
     566:	466a      	mov	r2, sp
     568:	7053      	strb	r3, [r2, #1]
    dma_res_config.trigger_action = DMA_TRIGGER_ACTION_BEAT;
     56a:	3b25      	subs	r3, #37	; 0x25
     56c:	7093      	strb	r3, [r2, #2]
	dma_res_config.priority = DMA_PRIORITY_LEVEL_0;
     56e:	2300      	movs	r3, #0
     570:	7013      	strb	r3, [r2, #0]
    dma_allocate(resource, &dma_res_config);
     572:	4669      	mov	r1, sp
     574:	0020      	movs	r0, r4
     576:	4b03      	ldr	r3, [pc, #12]	; (584 <configure_ADC_dma_resource+0x2c>)
     578:	4798      	blx	r3
}
     57a:	b002      	add	sp, #8
     57c:	bd10      	pop	{r4, pc}
     57e:	46c0      	nop			; (mov r8, r8)
     580:	000014f1 	.word	0x000014f1
     584:	00001501 	.word	0x00001501

00000588 <setup_ADC_DMA_transfer_descriptor>:
{
     588:	b500      	push	{lr}
     58a:	b087      	sub	sp, #28
static inline void dma_descriptor_get_config_defaults(struct dma_descriptor_config *config)
{
	Assert(config);

	/* Set descriptor as valid */
	config->descriptor_valid = true;
     58c:	2201      	movs	r2, #1
     58e:	466b      	mov	r3, sp
     590:	701a      	strb	r2, [r3, #0]
	/* Disable event output */
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
     592:	2300      	movs	r3, #0
     594:	4669      	mov	r1, sp
     596:	704b      	strb	r3, [r1, #1]
	/* No block action */
	config->block_action = DMA_BLOCK_ACTION_NOACT;
     598:	708b      	strb	r3, [r1, #2]
	/* Set beat size to one byte */
	config->beat_size = DMA_BEAT_SIZE_BYTE;
	/* Enable source increment */
	config->src_increment_enable = true;
	/* Enable destination increment */
	config->dst_increment_enable = true;
     59a:	714a      	strb	r2, [r1, #5]
	/* Step size is applied to the destination address */
	config->step_selection = DMA_STEPSEL_DST;
     59c:	718b      	strb	r3, [r1, #6]
	/* Address increment is beat size multiplied by 1*/
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
     59e:	71cb      	strb	r3, [r1, #7]
	/* Default source address is set to NULL */
	config->source_address = (uint32_t)NULL;
	/* Default destination address is set to NULL */
	config->destination_address = (uint32_t)NULL;
	/** Next descriptor address set to 0 */
	config->next_descriptor_address = 0;
     5a0:	9305      	str	r3, [sp, #20]
    descriptor_config.beat_size = DMA_BEAT_SIZE_HWORD;
     5a2:	70ca      	strb	r2, [r1, #3]
    descriptor_config.src_increment_enable = false;
     5a4:	710b      	strb	r3, [r1, #4]
    descriptor_config.block_transfer_count = sizeof(adc_buffer)/4;
     5a6:	23c0      	movs	r3, #192	; 0xc0
     5a8:	009b      	lsls	r3, r3, #2
     5aa:	810b      	strh	r3, [r1, #8]
    descriptor_config.source_address = (uint32_t)(&adc_instance.hw->RESULT.reg);
     5ac:	4b06      	ldr	r3, [pc, #24]	; (5c8 <setup_ADC_DMA_transfer_descriptor+0x40>)
     5ae:	681b      	ldr	r3, [r3, #0]
     5b0:	331a      	adds	r3, #26
     5b2:	9303      	str	r3, [sp, #12]
    descriptor_config.destination_address = (uint32_t)&adc_buffer[0][0] + sizeof(adc_buffer)/2;
     5b4:	4b05      	ldr	r3, [pc, #20]	; (5cc <setup_ADC_DMA_transfer_descriptor+0x44>)
     5b6:	22c0      	movs	r2, #192	; 0xc0
     5b8:	00d2      	lsls	r2, r2, #3
     5ba:	4694      	mov	ip, r2
     5bc:	4463      	add	r3, ip
     5be:	9304      	str	r3, [sp, #16]
    dma_descriptor_create(descriptor, &descriptor_config);
     5c0:	4b03      	ldr	r3, [pc, #12]	; (5d0 <setup_ADC_DMA_transfer_descriptor+0x48>)
     5c2:	4798      	blx	r3
}
     5c4:	b007      	add	sp, #28
     5c6:	bd00      	pop	{pc}
     5c8:	20001150 	.word	0x20001150
     5cc:	200001b0 	.word	0x200001b0
     5d0:	000016f9 	.word	0x000016f9

000005d4 <configure_ADC_dma>:
{
     5d4:	b570      	push	{r4, r5, r6, lr}
	configure_ADC_dma_resource(&adc_dma_resource);
     5d6:	4c0f      	ldr	r4, [pc, #60]	; (614 <configure_ADC_dma+0x40>)
     5d8:	0020      	movs	r0, r4
     5da:	4b0f      	ldr	r3, [pc, #60]	; (618 <configure_ADC_dma+0x44>)
     5dc:	4798      	blx	r3
	setup_ADC_DMA_transfer_descriptor(&adc_dma_descriptor);
     5de:	4d0f      	ldr	r5, [pc, #60]	; (61c <configure_ADC_dma+0x48>)
     5e0:	0028      	movs	r0, r5
     5e2:	4b0f      	ldr	r3, [pc, #60]	; (620 <configure_ADC_dma+0x4c>)
     5e4:	4798      	blx	r3
	dma_add_descriptor(&adc_dma_resource, &adc_dma_descriptor);
     5e6:	0029      	movs	r1, r5
     5e8:	0020      	movs	r0, r4
     5ea:	4b0e      	ldr	r3, [pc, #56]	; (624 <configure_ADC_dma+0x50>)
     5ec:	4798      	blx	r3
	resource->callback[type] = callback;
     5ee:	4b0e      	ldr	r3, [pc, #56]	; (628 <configure_ADC_dma+0x54>)
     5f0:	60a3      	str	r3, [r4, #8]
	resource->callback_enable |= 1 << type;
     5f2:	2002      	movs	r0, #2
     5f4:	7c22      	ldrb	r2, [r4, #16]
     5f6:	4302      	orrs	r2, r0
     5f8:	7422      	strb	r2, [r4, #16]
	g_chan_interrupt_flag[resource->channel_id] |= (1UL << type);
     5fa:	7822      	ldrb	r2, [r4, #0]
     5fc:	490b      	ldr	r1, [pc, #44]	; (62c <configure_ADC_dma+0x58>)
     5fe:	5c8b      	ldrb	r3, [r1, r2]
     600:	4303      	orrs	r3, r0
     602:	548b      	strb	r3, [r1, r2]
	dma_start_transfer_job(&adc_dma_resource);
     604:	0020      	movs	r0, r4
     606:	4b0a      	ldr	r3, [pc, #40]	; (630 <configure_ADC_dma+0x5c>)
     608:	4798      	blx	r3
	adc_dma_timeout = GetTickCount();
     60a:	4b0a      	ldr	r3, [pc, #40]	; (634 <configure_ADC_dma+0x60>)
     60c:	4798      	blx	r3
     60e:	4b0a      	ldr	r3, [pc, #40]	; (638 <configure_ADC_dma+0x64>)
     610:	6018      	str	r0, [r3, #0]
}
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	20001118 	.word	0x20001118
     618:	00000559 	.word	0x00000559
     61c:	200010d0 	.word	0x200010d0
     620:	00000589 	.word	0x00000589
     624:	000017a5 	.word	0x000017a5
     628:	00000171 	.word	0x00000171
     62c:	20000e40 	.word	0x20000e40
     630:	000015b9 	.word	0x000015b9
     634:	00002ead 	.word	0x00002ead
     638:	20000db0 	.word	0x20000db0

0000063c <configure_adc>:
{
     63c:	b510      	push	{r4, lr}
     63e:	b08c      	sub	sp, #48	; 0x30
	adc_get_config_defaults(&config_adc);
     640:	4668      	mov	r0, sp
     642:	4b35      	ldr	r3, [pc, #212]	; (718 <configure_adc+0xdc>)
     644:	4798      	blx	r3
	config_adc.clock_source = GCLK_GENERATOR_3;
     646:	2103      	movs	r1, #3
     648:	466b      	mov	r3, sp
     64a:	7019      	strb	r1, [r3, #0]
	config_adc.reference = ADC_REFCTRL_REFSEL_INT1V;
     64c:	2300      	movs	r3, #0
     64e:	466a      	mov	r2, sp
     650:	7053      	strb	r3, [r2, #1]
	config_adc.differential_mode = true;
     652:	2201      	movs	r2, #1
     654:	4668      	mov	r0, sp
     656:	74c2      	strb	r2, [r0, #19]
	config_adc.gain_factor     = ADC_INPUTCTRL_GAIN_1X;
     658:	9302      	str	r3, [sp, #8]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV4;
     65a:	8043      	strh	r3, [r0, #2]
	config_adc.sample_length = 2;
     65c:	3302      	adds	r3, #2
     65e:	75c3      	strb	r3, [r0, #23]
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN2;
     660:	7303      	strb	r3, [r0, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_PIN1;
     662:	2080      	movs	r0, #128	; 0x80
     664:	0040      	lsls	r0, r0, #1
     666:	466c      	mov	r4, sp
     668:	81e0      	strh	r0, [r4, #14]
	config_adc.resolution = ADC_RESOLUTION_12BIT;
     66a:	2000      	movs	r0, #0
     66c:	7120      	strb	r0, [r4, #4]
	config_adc.accumulate_samples = ADC_ACCUMULATE_SAMPLES_4;
     66e:	7423      	strb	r3, [r4, #16]
	config_adc.divide_result = ADC_DIVIDE_RESULT_4;
     670:	7463      	strb	r3, [r4, #17]
	config_adc.pin_scan.inputs_to_scan = 3;
     672:	332a      	adds	r3, #42	; 0x2a
     674:	54e1      	strb	r1, [r4, r3]
	config_adc.pin_scan.offset_start_scan = 0;
     676:	3b01      	subs	r3, #1
     678:	2100      	movs	r1, #0
     67a:	54e1      	strb	r1, [r4, r3]
	config_adc.left_adjust = true;
     67c:	74a2      	strb	r2, [r4, #18]
	config_adc.event_action = ADC_EVENT_ACTION_START_CONV;
     67e:	232a      	movs	r3, #42	; 0x2a
     680:	54e2      	strb	r2, [r4, r3]
	adc_init(&adc_instance, ADC, &config_adc);
     682:	4c26      	ldr	r4, [pc, #152]	; (71c <configure_adc+0xe0>)
     684:	466a      	mov	r2, sp
     686:	0021      	movs	r1, r4
     688:	4825      	ldr	r0, [pc, #148]	; (720 <configure_adc+0xe4>)
     68a:	4b26      	ldr	r3, [pc, #152]	; (724 <configure_adc+0xe8>)
     68c:	4798      	blx	r3
	ADC->AVGCTRL.bit.ADJRES = 0x02;
     68e:	78a3      	ldrb	r3, [r4, #2]
     690:	2270      	movs	r2, #112	; 0x70
     692:	4393      	bics	r3, r2
     694:	2220      	movs	r2, #32
     696:	4313      	orrs	r3, r2
     698:	70a3      	strb	r3, [r4, #2]
	ADC->AVGCTRL.bit.SAMPLENUM = 0x02;
     69a:	78a3      	ldrb	r3, [r4, #2]
     69c:	220f      	movs	r2, #15
     69e:	4393      	bics	r3, r2
     6a0:	2202      	movs	r2, #2
     6a2:	4313      	orrs	r3, r2
     6a4:	70a3      	strb	r3, [r4, #2]
	if(pDID->REVISION > 3)
     6a6:	4b20      	ldr	r3, [pc, #128]	; (728 <configure_adc+0xec>)
     6a8:	785b      	ldrb	r3, [r3, #1]
     6aa:	071b      	lsls	r3, r3, #28
     6ac:	0f1b      	lsrs	r3, r3, #28
     6ae:	2b03      	cmp	r3, #3
     6b0:	dd05      	ble.n	6be <configure_adc+0x82>
	adc_instance.hw->AVGCTRL.bit.ADJRES = 0;
     6b2:	4b1b      	ldr	r3, [pc, #108]	; (720 <configure_adc+0xe4>)
     6b4:	681a      	ldr	r2, [r3, #0]
     6b6:	7893      	ldrb	r3, [r2, #2]
     6b8:	2170      	movs	r1, #112	; 0x70
     6ba:	438b      	bics	r3, r1
     6bc:	7093      	strb	r3, [r2, #2]
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     6be:	4b18      	ldr	r3, [pc, #96]	; (720 <configure_adc+0xe4>)
     6c0:	681a      	ldr	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     6c2:	7e53      	ldrb	r3, [r2, #25]
     6c4:	b25b      	sxtb	r3, r3
     6c6:	2b00      	cmp	r3, #0
     6c8:	db22      	blt.n	710 <configure_adc+0xd4>
		return true;
	}

	return false;
     6ca:	2100      	movs	r1, #0

	while (adc_is_syncing(module_inst)) {
     6cc:	2900      	cmp	r1, #0
     6ce:	d1f8      	bne.n	6c2 <configure_adc+0x86>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6d0:	2080      	movs	r0, #128	; 0x80
     6d2:	0400      	lsls	r0, r0, #16
     6d4:	4b15      	ldr	r3, [pc, #84]	; (72c <configure_adc+0xf0>)
     6d6:	6018      	str	r0, [r3, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     6d8:	230f      	movs	r3, #15
     6da:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     6dc:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     6de:	7813      	ldrb	r3, [r2, #0]
     6e0:	2002      	movs	r0, #2
     6e2:	4303      	orrs	r3, r0
     6e4:	b2db      	uxtb	r3, r3
     6e6:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
     6e8:	4b0d      	ldr	r3, [pc, #52]	; (720 <configure_adc+0xe4>)
     6ea:	681b      	ldr	r3, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     6ec:	7e5b      	ldrb	r3, [r3, #25]
     6ee:	b25b      	sxtb	r3, r3
     6f0:	2b00      	cmp	r3, #0
     6f2:	db0f      	blt.n	714 <configure_adc+0xd8>
	return false;
     6f4:	000b      	movs	r3, r1

	while (adc_is_syncing(module_inst)) {
     6f6:	2b00      	cmp	r3, #0
     6f8:	d1f6      	bne.n	6e8 <configure_adc+0xac>
	memset((void *)ADC_Offset,0,sizeof(ADC_Offset));
     6fa:	2206      	movs	r2, #6
     6fc:	2100      	movs	r1, #0
     6fe:	480c      	ldr	r0, [pc, #48]	; (730 <configure_adc+0xf4>)
     700:	4c0c      	ldr	r4, [pc, #48]	; (734 <configure_adc+0xf8>)
     702:	47a0      	blx	r4
	memset(RMS_data,0,sizeof(RMS_data));
     704:	220c      	movs	r2, #12
     706:	2100      	movs	r1, #0
     708:	480b      	ldr	r0, [pc, #44]	; (738 <configure_adc+0xfc>)
     70a:	47a0      	blx	r4
}
     70c:	b00c      	add	sp, #48	; 0x30
     70e:	bd10      	pop	{r4, pc}
		return true;
     710:	2101      	movs	r1, #1
     712:	e7db      	b.n	6cc <configure_adc+0x90>
     714:	2301      	movs	r3, #1
     716:	e7ee      	b.n	6f6 <configure_adc+0xba>
     718:	00000f71 	.word	0x00000f71
     71c:	42004000 	.word	0x42004000
     720:	20001150 	.word	0x20001150
     724:	00000fb9 	.word	0x00000fb9
     728:	41002018 	.word	0x41002018
     72c:	e000e100 	.word	0xe000e100
     730:	200010c0 	.word	0x200010c0
     734:	0000c39f 	.word	0x0000c39f
     738:	2000110c 	.word	0x2000110c

0000073c <configure_adc_trigger_event>:
{
     73c:	b530      	push	{r4, r5, lr}
     73e:	b083      	sub	sp, #12
	events_get_config_defaults(&config);
     740:	ac01      	add	r4, sp, #4
     742:	0020      	movs	r0, r4
     744:	4b09      	ldr	r3, [pc, #36]	; (76c <configure_adc_trigger_event+0x30>)
     746:	4798      	blx	r3
	config.generator      = EVSYS_ID_GEN_TC3_MCX_0;
     748:	2334      	movs	r3, #52	; 0x34
     74a:	70a3      	strb	r3, [r4, #2]
	config.edge_detect    = EVENTS_EDGE_DETECT_NONE;
     74c:	2300      	movs	r3, #0
     74e:	7023      	strb	r3, [r4, #0]
	config.path           = EVENTS_PATH_ASYNCHRONOUS;
     750:	2202      	movs	r2, #2
     752:	7062      	strb	r2, [r4, #1]
	config.clock_source   = GCLK_GENERATOR_0;
     754:	70e3      	strb	r3, [r4, #3]
	events_allocate(&config_tc_event_res, &config);
     756:	4d06      	ldr	r5, [pc, #24]	; (770 <configure_adc_trigger_event+0x34>)
     758:	0021      	movs	r1, r4
     75a:	0028      	movs	r0, r5
     75c:	4b05      	ldr	r3, [pc, #20]	; (774 <configure_adc_trigger_event+0x38>)
     75e:	4798      	blx	r3
	events_attach_user(&config_tc_event_res, EVSYS_ID_USER_ADC_START);
     760:	2117      	movs	r1, #23
     762:	0028      	movs	r0, r5
     764:	4b04      	ldr	r3, [pc, #16]	; (778 <configure_adc_trigger_event+0x3c>)
     766:	4798      	blx	r3
}
     768:	b003      	add	sp, #12
     76a:	bd30      	pop	{r4, r5, pc}
     76c:	000039d9 	.word	0x000039d9
     770:	20001104 	.word	0x20001104
     774:	000039e9 	.word	0x000039e9
     778:	00003a59 	.word	0x00003a59

0000077c <configure_dac>:
{
     77c:	b500      	push	{lr}
     77e:	b083      	sub	sp, #12
	dac_get_config_defaults(&config_dac);
     780:	4668      	mov	r0, sp
     782:	4b0a      	ldr	r3, [pc, #40]	; (7ac <configure_dac+0x30>)
     784:	4798      	blx	r3
	config_dac.clock_source = GCLK_GENERATOR_3;
     786:	2303      	movs	r3, #3
     788:	466a      	mov	r2, sp
     78a:	70d3      	strb	r3, [r2, #3]
	config_dac.reference = DAC_REFERENCE_AVCC;
     78c:	333d      	adds	r3, #61	; 0x3d
     78e:	7013      	strb	r3, [r2, #0]
	config_dac.output = DAC_OUTPUT_EXTERNAL;
     790:	3b3f      	subs	r3, #63	; 0x3f
     792:	7053      	strb	r3, [r2, #1]
	config_dac.databuf_protection_bypass = true;
     794:	7113      	strb	r3, [r2, #4]
	config_dac.left_adjust = true;
     796:	7093      	strb	r3, [r2, #2]
	dac_init(&dac_instance, DAC, &config_dac);
     798:	4905      	ldr	r1, [pc, #20]	; (7b0 <configure_dac+0x34>)
     79a:	4806      	ldr	r0, [pc, #24]	; (7b4 <configure_dac+0x38>)
     79c:	4b06      	ldr	r3, [pc, #24]	; (7b8 <configure_dac+0x3c>)
     79e:	4798      	blx	r3
	servo_recon_tm = GetTickCount();
     7a0:	4b06      	ldr	r3, [pc, #24]	; (7bc <configure_dac+0x40>)
     7a2:	4798      	blx	r3
     7a4:	4b06      	ldr	r3, [pc, #24]	; (7c0 <configure_dac+0x44>)
     7a6:	6018      	str	r0, [r3, #0]
}
     7a8:	b003      	add	sp, #12
     7aa:	bd00      	pop	{pc}
     7ac:	0000119d 	.word	0x0000119d
     7b0:	42004800 	.word	0x42004800
     7b4:	200010e0 	.word	0x200010e0
     7b8:	000011b1 	.word	0x000011b1
     7bc:	00002ead 	.word	0x00002ead
     7c0:	20000dcc 	.word	0x20000dcc

000007c4 <configure_dac_channel>:
{
     7c4:	b510      	push	{r4, lr}
	dac_chan_enable_output_buffer(&dac_instance, DAC_CHANNEL_0);
     7c6:	4c07      	ldr	r4, [pc, #28]	; (7e4 <configure_dac_channel+0x20>)
     7c8:	2100      	movs	r1, #0
     7ca:	0020      	movs	r0, r4
     7cc:	4b06      	ldr	r3, [pc, #24]	; (7e8 <configure_dac_channel+0x24>)
     7ce:	4798      	blx	r3
	dac_enable(&dac_instance);
     7d0:	0020      	movs	r0, r4
     7d2:	4b06      	ldr	r3, [pc, #24]	; (7ec <configure_dac_channel+0x28>)
     7d4:	4798      	blx	r3
	dac_chan_write(&dac_instance, DAC_CHANNEL_0, 0x8000);
     7d6:	2280      	movs	r2, #128	; 0x80
     7d8:	0212      	lsls	r2, r2, #8
     7da:	2100      	movs	r1, #0
     7dc:	0020      	movs	r0, r4
     7de:	4b04      	ldr	r3, [pc, #16]	; (7f0 <configure_dac_channel+0x2c>)
     7e0:	4798      	blx	r3
}
     7e2:	bd10      	pop	{r4, pc}
     7e4:	200010e0 	.word	0x200010e0
     7e8:	00001285 	.word	0x00001285
     7ec:	00001249 	.word	0x00001249
     7f0:	00001295 	.word	0x00001295

000007f4 <configure_ac>:

void configure_ac(void)
{
     7f4:	b570      	push	{r4, r5, r6, lr}
     7f6:	b088      	sub	sp, #32
{
	/* Sanity check arguments */
	Assert(config);
#ifdef FEATURE_AC_RUN_IN_STANDY_PAIR_COMPARATOR
	/* Default configuration values */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
     7f8:	2300      	movs	r3, #0
     7fa:	2b00      	cmp	r3, #0
     7fc:	d054      	beq.n	8a8 <configure_ac+0xb4>
		config->run_in_standby[i] = false;
	}
#endif
#if (SAMD) || (SAMHA1) || (SAMR21)
	config->dig_source_generator = GCLK_GENERATOR_0;
     7fe:	aa07      	add	r2, sp, #28
     800:	2500      	movs	r5, #0
     802:	7055      	strb	r5, [r2, #1]
	config->ana_source_generator = GCLK_GENERATOR_3;
     804:	2303      	movs	r3, #3
     806:	7093      	strb	r3, [r2, #2]
    struct ac_config config_ac;
    ac_get_config_defaults(&config_ac);
    ac_init(&ac_instance, AC, &config_ac);
     808:	4e2c      	ldr	r6, [pc, #176]	; (8bc <configure_ac+0xc8>)
     80a:	492d      	ldr	r1, [pc, #180]	; (8c0 <configure_ac+0xcc>)
     80c:	0030      	movs	r0, r6
     80e:	4b2d      	ldr	r3, [pc, #180]	; (8c4 <configure_ac+0xd0>)
     810:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->sample_mode         = AC_CHAN_MODE_CONTINUOUS;
     812:	ac01      	add	r4, sp, #4
     814:	7025      	strb	r5, [r4, #0]
	config->filter              = AC_CHAN_FILTER_MAJORITY_5;
	config->enable_hysteresis   = true;
     816:	2301      	movs	r3, #1
     818:	7223      	strb	r3, [r4, #8]
	config->run_in_standby      = false;
#endif
#ifdef FEATURE_AC_HYSTERESIS_LEVEL
	config->hysteresis_level    = AC_HYSTERESIS_LEVEL_50;
#endif
	config->output_mode         = AC_CHAN_OUTPUT_INTERNAL;
     81a:	9504      	str	r5, [sp, #16]
	config->positive_input      = AC_CHAN_POS_MUX_PIN0;
	config->negative_input      = AC_CHAN_NEG_MUX_SCALED_VCC;
     81c:	22a0      	movs	r2, #160	; 0xa0
     81e:	00d2      	lsls	r2, r2, #3
     820:	8262      	strh	r2, [r4, #18]
    ac_chan_get_config_defaults(&config_ac_chan);

    /* Set the Analog Comparator channel configuration settings */

    config_ac_chan.sample_mode         = AC_CHAN_MODE_CONTINUOUS;
    config_ac_chan.positive_input      = AC_CHAN_POS_MUX_PIN1;
     822:	2280      	movs	r2, #128	; 0x80
     824:	0152      	lsls	r2, r2, #5
     826:	8222      	strh	r2, [r4, #16]
    config_ac_chan.negative_input      = AC_CHAN_NEG_MUX_SCALED_VCC;
    config_ac_chan.vcc_scale_factor    = 16;	// Set to Vdd * (n + 1)/64 = 3.3*(4+1)/64 = 0.2578mV (with Rsense = 0.1mOhm  -> 2.5478 A)
     828:	2210      	movs	r2, #16
     82a:	7522      	strb	r2, [r4, #20]
    config_ac_chan.interrupt_selection = AC_CHAN_INTERRUPT_SELECTION_RISING;
     82c:	3210      	adds	r2, #16
     82e:	7562      	strb	r2, [r4, #21]
	config_ac_chan.filter = AC_CHAN_FILTER_MAJORITY_3;
     830:	2280      	movs	r2, #128	; 0x80
     832:	0452      	lsls	r2, r2, #17
     834:	9202      	str	r2, [sp, #8]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     836:	466a      	mov	r2, sp
     838:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     83a:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     83c:	70d5      	strb	r5, [r2, #3]
    /* Set up a pin as an AC channel input */

    struct system_pinmux_config ac0_pin_conf;
    system_pinmux_get_config_defaults(&ac0_pin_conf);
    ac0_pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    ac0_pin_conf.mux_position = I_SERVO_MUX;
     83e:	7013      	strb	r3, [r2, #0]
    system_pinmux_pin_set_config(PIN_I_SERVO, &ac0_pin_conf);
     840:	4669      	mov	r1, sp
     842:	2005      	movs	r0, #5
     844:	4b20      	ldr	r3, [pc, #128]	; (8c8 <configure_ac+0xd4>)
     846:	4798      	blx	r3

    /* Initialize and enable the Analog Comparator channel with the user settings */

    ac_chan_set_config(&ac_instance, AC_CHAN_CHANNEL_0, &config_ac_chan);
     848:	0022      	movs	r2, r4
     84a:	2100      	movs	r1, #0
     84c:	0030      	movs	r0, r6
     84e:	4b1f      	ldr	r3, [pc, #124]	; (8cc <configure_ac+0xd8>)
     850:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
     852:	6832      	ldr	r2, [r6, #0]
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
     854:	7a53      	ldrb	r3, [r2, #9]
     856:	b25b      	sxtb	r3, r3
     858:	2b00      	cmp	r3, #0
     85a:	db2a      	blt.n	8b2 <configure_ac+0xbe>
	return false;
     85c:	2500      	movs	r5, #0

	while (ac_is_syncing(module_inst)) {
     85e:	2d00      	cmp	r5, #0
     860:	d1f8      	bne.n	854 <configure_ac+0x60>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->COMPCTRL[(uint8_t)channel].reg |= AC_COMPCTRL_ENABLE;
     862:	6913      	ldr	r3, [r2, #16]
     864:	2601      	movs	r6, #1
     866:	4333      	orrs	r3, r6
     868:	6113      	str	r3, [r2, #16]
    ac_chan_enable(&ac_instance, AC_CHAN_CHANNEL_0);
	
	/* Configure analog comparator callback */

    ac_register_callback(&ac_instance, callback_function_ac, AC_CALLBACK_COMPARATOR_0);
     86a:	4c14      	ldr	r4, [pc, #80]	; (8bc <configure_ac+0xc8>)
     86c:	2200      	movs	r2, #0
     86e:	4918      	ldr	r1, [pc, #96]	; (8d0 <configure_ac+0xdc>)
     870:	0020      	movs	r0, r4
     872:	4b18      	ldr	r3, [pc, #96]	; (8d4 <configure_ac+0xe0>)
     874:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Set software flag for the callback */
	module->enable_callback_mask |= (1 << callback_type);
     876:	7e63      	ldrb	r3, [r4, #25]
     878:	2201      	movs	r2, #1
     87a:	4313      	orrs	r3, r2
     87c:	7663      	strb	r3, [r4, #25]
		default:
			break;
	}

	/* Enable the interrupt for the callback */
	module->hw->INTENSET.reg = inenset_temp;
     87e:	6823      	ldr	r3, [r4, #0]
     880:	715e      	strb	r6, [r3, #5]
     882:	2280      	movs	r2, #128	; 0x80
     884:	0452      	lsls	r2, r2, #17
     886:	4b14      	ldr	r3, [pc, #80]	; (8d8 <configure_ac+0xe4>)
     888:	601a      	str	r2, [r3, #0]
	Ac *const ac_module = module_inst->hw;
     88a:	6822      	ldr	r2, [r4, #0]
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
     88c:	7a53      	ldrb	r3, [r2, #9]
     88e:	b25b      	sxtb	r3, r3
     890:	2b00      	cmp	r3, #0
     892:	db10      	blt.n	8b6 <configure_ac+0xc2>
	return false;
     894:	002b      	movs	r3, r5
	while (ac_is_syncing(module_inst)) {
     896:	2b00      	cmp	r3, #0
     898:	d1f8      	bne.n	88c <configure_ac+0x98>
	ac_module->CTRLA.reg |= AC_CTRLA_ENABLE;
     89a:	7813      	ldrb	r3, [r2, #0]
     89c:	2102      	movs	r1, #2
     89e:	430b      	orrs	r3, r1
     8a0:	b2db      	uxtb	r3, r3
     8a2:	7013      	strb	r3, [r2, #0]
    ac_enable_callback(&ac_instance, AC_CALLBACK_COMPARATOR_0);
	ac_enable(&ac_instance);
	
}
     8a4:	b008      	add	sp, #32
     8a6:	bd70      	pop	{r4, r5, r6, pc}
		config->run_in_standby[i] = false;
     8a8:	2100      	movs	r1, #0
     8aa:	aa07      	add	r2, sp, #28
     8ac:	54d1      	strb	r1, [r2, r3]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
     8ae:	3301      	adds	r3, #1
     8b0:	e7a3      	b.n	7fa <configure_ac+0x6>
		return true;
     8b2:	2501      	movs	r5, #1
     8b4:	e7d3      	b.n	85e <configure_ac+0x6a>
     8b6:	2301      	movs	r3, #1
     8b8:	e7ed      	b.n	896 <configure_ac+0xa2>
     8ba:	46c0      	nop			; (mov r8, r8)
     8bc:	2000018c 	.word	0x2000018c
     8c0:	42004400 	.word	0x42004400
     8c4:	00000a4d 	.word	0x00000a4d
     8c8:	00009085 	.word	0x00009085
     8cc:	00000ae1 	.word	0x00000ae1
     8d0:	00000149 	.word	0x00000149
     8d4:	000077a5 	.word	0x000077a5
     8d8:	e000e100 	.word	0xe000e100

000008dc <SetDACReference>:

void SetDACReference(uint32_t ref)
{
	DAC->CTRLB.bit.REFSEL = (ref & 0x1);
     8dc:	2301      	movs	r3, #1
     8de:	4003      	ands	r3, r0
     8e0:	4a03      	ldr	r2, [pc, #12]	; (8f0 <SetDACReference+0x14>)
     8e2:	7851      	ldrb	r1, [r2, #1]
     8e4:	019b      	lsls	r3, r3, #6
     8e6:	203f      	movs	r0, #63	; 0x3f
     8e8:	4008      	ands	r0, r1
     8ea:	4318      	orrs	r0, r3
     8ec:	7050      	strb	r0, [r2, #1]
}
     8ee:	4770      	bx	lr
     8f0:	42004800 	.word	0x42004800

000008f4 <SetAdcReference>:

void SetAdcReference(uint32_t ref)
{
	if(ref < 3)
     8f4:	2802      	cmp	r0, #2
     8f6:	d802      	bhi.n	8fe <SetAdcReference+0xa>
		ADC->REFCTRL.reg = ref; 
     8f8:	b2c0      	uxtb	r0, r0
     8fa:	4b01      	ldr	r3, [pc, #4]	; (900 <SetAdcReference+0xc>)
     8fc:	7058      	strb	r0, [r3, #1]
}
     8fe:	4770      	bx	lr
     900:	42004000 	.word	0x42004000

00000904 <SetRMSorMEAN>:

void SetRMSorMEAN(uint32_t value)
{
	bCompute_offset = value;
     904:	4b01      	ldr	r3, [pc, #4]	; (90c <SetRMSorMEAN+0x8>)
     906:	6018      	str	r0, [r3, #0]
}
     908:	4770      	bx	lr
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	20000db8 	.word	0x20000db8

00000910 <Check_ADCDMA>:
void Check_ADCDMA(void)
{
	//  Code to check coherence between dma_resource & status of hardware registers
	// Sometimes dma complete interrupt was not fired
		 
	DMAC->CHINTENSET.reg = adc_dma_resource.channel_id;
     910:	4b06      	ldr	r3, [pc, #24]	; (92c <Check_ADCDMA+0x1c>)
     912:	781a      	ldrb	r2, [r3, #0]
     914:	4b06      	ldr	r3, [pc, #24]	; (930 <Check_ADCDMA+0x20>)
     916:	214d      	movs	r1, #77	; 0x4d
     918:	545a      	strb	r2, [r3, r1]
	if(!DMAC->CHSTATUS.bit.PEND)
     91a:	3102      	adds	r1, #2
     91c:	5c5b      	ldrb	r3, [r3, r1]
     91e:	07db      	lsls	r3, r3, #31
     920:	d403      	bmi.n	92a <Check_ADCDMA+0x1a>
	DMAC->SWTRIGCTRL.reg = 1 << adc_dma_resource.channel_id;
     922:	2301      	movs	r3, #1
     924:	4093      	lsls	r3, r2
     926:	4a02      	ldr	r2, [pc, #8]	; (930 <Check_ADCDMA+0x20>)
     928:	6113      	str	r3, [r2, #16]
}
     92a:	4770      	bx	lr
     92c:	20001118 	.word	0x20001118
     930:	41004800 	.word	0x41004800

00000934 <AnalogRuntime>:

void AnalogRuntime(void)
{
     934:	b510      	push	{r4, lr}

	if(TimeDiff(adc_dma_tm, GetTickCount()) > adc_dma_timeout )
     936:	4b28      	ldr	r3, [pc, #160]	; (9d8 <AnalogRuntime+0xa4>)
     938:	681c      	ldr	r4, [r3, #0]
     93a:	4b28      	ldr	r3, [pc, #160]	; (9dc <AnalogRuntime+0xa8>)
     93c:	4798      	blx	r3
     93e:	0001      	movs	r1, r0
     940:	0020      	movs	r0, r4
     942:	4b27      	ldr	r3, [pc, #156]	; (9e0 <AnalogRuntime+0xac>)
     944:	4798      	blx	r3
     946:	4b27      	ldr	r3, [pc, #156]	; (9e4 <AnalogRuntime+0xb0>)
     948:	681b      	ldr	r3, [r3, #0]
     94a:	4298      	cmp	r0, r3
     94c:	d80a      	bhi.n	964 <AnalogRuntime+0x30>
	{
		Check_ADCDMA();
		adc_dma_tm = GetTickCount();
	}

	if(bCompute_offset)
     94e:	4b26      	ldr	r3, [pc, #152]	; (9e8 <AnalogRuntime+0xb4>)
     950:	681b      	ldr	r3, [r3, #0]
     952:	2b00      	cmp	r3, #0
     954:	d00d      	beq.n	972 <AnalogRuntime+0x3e>
		Compute_ADC_Offset();
     956:	4b25      	ldr	r3, [pc, #148]	; (9ec <AnalogRuntime+0xb8>)
     958:	4798      	blx	r3
	else
		Compute_ADC_RMS(fGetADCtransfertBUffer(), BUFFER_LENGTH, GetRMSdata());
	
	// Restart servo  after overload 

	if(servo_overload && TimeDiff(servo_recon_tm, GetTickCount()) > ovl_recovery_tm)
     95a:	4b25      	ldr	r3, [pc, #148]	; (9f0 <AnalogRuntime+0xbc>)
     95c:	681b      	ldr	r3, [r3, #0]
     95e:	2b00      	cmp	r3, #0
     960:	d113      	bne.n	98a <AnalogRuntime+0x56>
		}
		servo_recon_tm = GetTickCount();
	}

		
}
     962:	bd10      	pop	{r4, pc}
		Check_ADCDMA();
     964:	4b23      	ldr	r3, [pc, #140]	; (9f4 <AnalogRuntime+0xc0>)
     966:	4798      	blx	r3
		adc_dma_tm = GetTickCount();
     968:	4b1c      	ldr	r3, [pc, #112]	; (9dc <AnalogRuntime+0xa8>)
     96a:	4798      	blx	r3
     96c:	4b1a      	ldr	r3, [pc, #104]	; (9d8 <AnalogRuntime+0xa4>)
     96e:	6018      	str	r0, [r3, #0]
     970:	e7ed      	b.n	94e <AnalogRuntime+0x1a>
		Compute_ADC_RMS(fGetADCtransfertBUffer(), BUFFER_LENGTH, GetRMSdata());
     972:	4b21      	ldr	r3, [pc, #132]	; (9f8 <AnalogRuntime+0xc4>)
     974:	4798      	blx	r3
     976:	0004      	movs	r4, r0
     978:	4b20      	ldr	r3, [pc, #128]	; (9fc <AnalogRuntime+0xc8>)
     97a:	4798      	blx	r3
     97c:	0002      	movs	r2, r0
     97e:	2180      	movs	r1, #128	; 0x80
     980:	0049      	lsls	r1, r1, #1
     982:	0020      	movs	r0, r4
     984:	4b1e      	ldr	r3, [pc, #120]	; (a00 <AnalogRuntime+0xcc>)
     986:	4798      	blx	r3
     988:	e7e7      	b.n	95a <AnalogRuntime+0x26>
	if(servo_overload && TimeDiff(servo_recon_tm, GetTickCount()) > ovl_recovery_tm)
     98a:	4b1e      	ldr	r3, [pc, #120]	; (a04 <AnalogRuntime+0xd0>)
     98c:	681c      	ldr	r4, [r3, #0]
     98e:	4b13      	ldr	r3, [pc, #76]	; (9dc <AnalogRuntime+0xa8>)
     990:	4798      	blx	r3
     992:	0001      	movs	r1, r0
     994:	0020      	movs	r0, r4
     996:	4b12      	ldr	r3, [pc, #72]	; (9e0 <AnalogRuntime+0xac>)
     998:	4798      	blx	r3
     99a:	4b1b      	ldr	r3, [pc, #108]	; (a08 <AnalogRuntime+0xd4>)
     99c:	681b      	ldr	r3, [r3, #0]
     99e:	4298      	cmp	r0, r3
     9a0:	d9df      	bls.n	962 <AnalogRuntime+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
     9a2:	2240      	movs	r2, #64	; 0x40
     9a4:	4b19      	ldr	r3, [pc, #100]	; (a0c <AnalogRuntime+0xd8>)
     9a6:	619a      	str	r2, [r3, #24]
		if(servo_overload < 3)
     9a8:	4b11      	ldr	r3, [pc, #68]	; (9f0 <AnalogRuntime+0xbc>)
     9aa:	681b      	ldr	r3, [r3, #0]
     9ac:	2b02      	cmp	r3, #2
     9ae:	d808      	bhi.n	9c2 <AnalogRuntime+0x8e>
			servo_overload++;
     9b0:	4a0f      	ldr	r2, [pc, #60]	; (9f0 <AnalogRuntime+0xbc>)
     9b2:	6813      	ldr	r3, [r2, #0]
     9b4:	3301      	adds	r3, #1
     9b6:	6013      	str	r3, [r2, #0]
		servo_recon_tm = GetTickCount();
     9b8:	4b08      	ldr	r3, [pc, #32]	; (9dc <AnalogRuntime+0xa8>)
     9ba:	4798      	blx	r3
     9bc:	4b11      	ldr	r3, [pc, #68]	; (a04 <AnalogRuntime+0xd0>)
     9be:	6018      	str	r0, [r3, #0]
}
     9c0:	e7cf      	b.n	962 <AnalogRuntime+0x2e>
		else if(servo_overload < 10)
     9c2:	4b0b      	ldr	r3, [pc, #44]	; (9f0 <AnalogRuntime+0xbc>)
     9c4:	681b      	ldr	r3, [r3, #0]
     9c6:	2b09      	cmp	r3, #9
     9c8:	d8f6      	bhi.n	9b8 <AnalogRuntime+0x84>
			ovl_recovery_tm = 9999;	// Increase time between reconnections to 10 sec
     9ca:	4a11      	ldr	r2, [pc, #68]	; (a10 <AnalogRuntime+0xdc>)
     9cc:	4b0e      	ldr	r3, [pc, #56]	; (a08 <AnalogRuntime+0xd4>)
     9ce:	601a      	str	r2, [r3, #0]
			servo_overload = 0;
     9d0:	2200      	movs	r2, #0
     9d2:	4b07      	ldr	r3, [pc, #28]	; (9f0 <AnalogRuntime+0xbc>)
     9d4:	601a      	str	r2, [r3, #0]
     9d6:	e7ef      	b.n	9b8 <AnalogRuntime+0x84>
     9d8:	20000db4 	.word	0x20000db4
     9dc:	00002ead 	.word	0x00002ead
     9e0:	00002eb9 	.word	0x00002eb9
     9e4:	20000db0 	.word	0x20000db0
     9e8:	20000db8 	.word	0x20000db8
     9ec:	000003ad 	.word	0x000003ad
     9f0:	20000dc8 	.word	0x20000dc8
     9f4:	00000911 	.word	0x00000911
     9f8:	0000037d 	.word	0x0000037d
     9fc:	0000043d 	.word	0x0000043d
     a00:	00000259 	.word	0x00000259
     a04:	20000dcc 	.word	0x20000dcc
     a08:	20000008 	.word	0x20000008
     a0c:	41004400 	.word	0x41004400
     a10:	0000270f 	.word	0x0000270f

00000a14 <_ac_set_config>:
#include "ac.h"

static enum status_code _ac_set_config(
		struct ac_module *const module_inst,
		struct ac_config *const config)
{
     a14:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
     a16:	6800      	ldr	r0, [r0, #0]

	/* Use a temporary register for computing the control bits */
	uint32_t ctrla_temp = 0;

	/* Check if the comparators should be enabled during sleep */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
     a18:	2300      	movs	r3, #0
	uint32_t ctrla_temp = 0;
     a1a:	2200      	movs	r2, #0
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
     a1c:	2b00      	cmp	r3, #0
     a1e:	d00a      	beq.n	a36 <_ac_set_config+0x22>
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
     a20:	7a43      	ldrb	r3, [r0, #9]
     a22:	b25b      	sxtb	r3, r3
     a24:	2b00      	cmp	r3, #0
     a26:	db0e      	blt.n	a46 <_ac_set_config+0x32>
	return false;
     a28:	2300      	movs	r3, #0
		if (config->run_in_standby[i] == true) {
			ctrla_temp |= (AC_CTRLA_RUNSTDBY_Msk << i);
		}
	}

	while (ac_is_syncing(module_inst)) {
     a2a:	2b00      	cmp	r3, #0
     a2c:	d1f8      	bne.n	a20 <_ac_set_config+0xc>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg = ctrla_temp;
     a2e:	b2d2      	uxtb	r2, r2
     a30:	7002      	strb	r2, [r0, #0]

	return STATUS_OK;
}
     a32:	2000      	movs	r0, #0
     a34:	bd10      	pop	{r4, pc}
		if (config->run_in_standby[i] == true) {
     a36:	5ccc      	ldrb	r4, [r1, r3]
     a38:	2c00      	cmp	r4, #0
     a3a:	d002      	beq.n	a42 <_ac_set_config+0x2e>
			ctrla_temp |= (AC_CTRLA_RUNSTDBY_Msk << i);
     a3c:	2404      	movs	r4, #4
     a3e:	409c      	lsls	r4, r3
     a40:	4322      	orrs	r2, r4
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
     a42:	3301      	adds	r3, #1
     a44:	e7ea      	b.n	a1c <_ac_set_config+0x8>
		return true;
     a46:	2301      	movs	r3, #1
     a48:	e7ef      	b.n	a2a <_ac_set_config+0x16>
	...

00000a4c <ac_init>:
 */
enum status_code ac_init(
		struct ac_module *const module_inst,
		Ac *const hw,
		struct ac_config *const config)
{
     a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a4e:	46c6      	mov	lr, r8
     a50:	b500      	push	{lr}
     a52:	b082      	sub	sp, #8
     a54:	0005      	movs	r5, r0
     a56:	0014      	movs	r4, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = hw;
     a58:	6001      	str	r1, [r0, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     a5a:	2200      	movs	r2, #0
     a5c:	ab01      	add	r3, sp, #4
     a5e:	701a      	strb	r2, [r3, #0]

	/* Turn on the digital interface clock and GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);

	if (hw == AC) {
     a60:	4b19      	ldr	r3, [pc, #100]	; (ac8 <ac_init+0x7c>)
     a62:	4299      	cmp	r1, r3
     a64:	d001      	beq.n	a6a <ac_init+0x1e>
{
     a66:	2300      	movs	r3, #0
     a68:	e01e      	b.n	aa8 <ac_init+0x5c>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     a6a:	4a18      	ldr	r2, [pc, #96]	; (acc <ac_init+0x80>)
     a6c:	6a11      	ldr	r1, [r2, #32]
     a6e:	2380      	movs	r3, #128	; 0x80
     a70:	029b      	lsls	r3, r3, #10
     a72:	430b      	orrs	r3, r1
     a74:	6213      	str	r3, [r2, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_AC);
		gclk_chan_conf.source_generator = config->dig_source_generator;
     a76:	7863      	ldrb	r3, [r4, #1]
     a78:	ae01      	add	r6, sp, #4
     a7a:	7033      	strb	r3, [r6, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_DIG, &gclk_chan_conf);
     a7c:	0031      	movs	r1, r6
     a7e:	201f      	movs	r0, #31
     a80:	4b13      	ldr	r3, [pc, #76]	; (ad0 <ac_init+0x84>)
     a82:	4698      	mov	r8, r3
     a84:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_DIG);
     a86:	201f      	movs	r0, #31
     a88:	4f12      	ldr	r7, [pc, #72]	; (ad4 <ac_init+0x88>)
     a8a:	47b8      	blx	r7
		gclk_chan_conf.source_generator = config->ana_source_generator;
     a8c:	78a3      	ldrb	r3, [r4, #2]
     a8e:	7033      	strb	r3, [r6, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_ANA, &gclk_chan_conf);
     a90:	0031      	movs	r1, r6
     a92:	2020      	movs	r0, #32
     a94:	47c0      	blx	r8
		system_gclk_chan_enable(AC_GCLK_ID_ANA);
     a96:	2020      	movs	r0, #32
     a98:	47b8      	blx	r7
     a9a:	e7e4      	b.n	a66 <ac_init+0x1a>
#endif

#if AC_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     a9c:	009a      	lsls	r2, r3, #2
     a9e:	18aa      	adds	r2, r5, r2
     aa0:	2100      	movs	r1, #0
     aa2:	6051      	str	r1, [r2, #4]
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
     aa4:	3301      	adds	r3, #1
     aa6:	b2db      	uxtb	r3, r3
     aa8:	2b04      	cmp	r3, #4
     aaa:	d9f7      	bls.n	a9c <ac_init+0x50>
	}

	/* Initialize software flags*/
	module_inst->register_callback_mask = 0x00;
     aac:	2300      	movs	r3, #0
     aae:	762b      	strb	r3, [r5, #24]
	module_inst->enable_callback_mask   = 0x00;
     ab0:	766b      	strb	r3, [r5, #25]

#  if (AC_INST_NUM == 1)
	_ac_instance[0] = module_inst;
     ab2:	4b09      	ldr	r3, [pc, #36]	; (ad8 <ac_init+0x8c>)
     ab4:	601d      	str	r5, [r3, #0]
	_ac_instance[_ac_get_inst_index(hw)] = module_inst;
#  endif
#endif

	/* Write configuration to module */
	return _ac_set_config(module_inst, config);
     ab6:	0021      	movs	r1, r4
     ab8:	0028      	movs	r0, r5
     aba:	4b08      	ldr	r3, [pc, #32]	; (adc <ac_init+0x90>)
     abc:	4798      	blx	r3
}
     abe:	b002      	add	sp, #8
     ac0:	bc04      	pop	{r2}
     ac2:	4690      	mov	r8, r2
     ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ac6:	46c0      	nop			; (mov r8, r8)
     ac8:	42004400 	.word	0x42004400
     acc:	40000400 	.word	0x40000400
     ad0:	00008fa1 	.word	0x00008fa1
     ad4:	00008f19 	.word	0x00008f19
     ad8:	200029d4 	.word	0x200029d4
     adc:	00000a15 	.word	0x00000a15

00000ae0 <ac_chan_set_config>:
 */
enum status_code ac_chan_set_config(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel,
		struct ac_chan_config *const config)
{
     ae0:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
     ae2:	6804      	ldr	r4, [r0, #0]

	/* Use a temporary variable to compute the comparator configuration */
	uint32_t compctrl_temp = 0;

	/* Enable output filter mode */
	compctrl_temp |= config->filter;
     ae4:	6853      	ldr	r3, [r2, #4]

	/* Enable output hysteresis if required */
	if (config->enable_hysteresis == true) {
     ae6:	7a10      	ldrb	r0, [r2, #8]
     ae8:	2800      	cmp	r0, #0
     aea:	d002      	beq.n	af2 <ac_chan_set_config+0x12>
		compctrl_temp |= AC_COMPCTRL_HYST;
     aec:	2080      	movs	r0, #128	; 0x80
     aee:	0300      	lsls	r0, r0, #12
     af0:	4303      	orrs	r3, r0
	}

	/* Set output signal routing mode */
	compctrl_temp |= config->output_mode;
     af2:	68d0      	ldr	r0, [r2, #12]
     af4:	4303      	orrs	r3, r0

	/* Configure comparator positive and negative pin MUX configurations */
	compctrl_temp |=
			(uint32_t)config->positive_input |
     af6:	8a10      	ldrh	r0, [r2, #16]
			(uint32_t)config->negative_input;
     af8:	8a55      	ldrh	r5, [r2, #18]
			(uint32_t)config->positive_input |
     afa:	4328      	orrs	r0, r5
	compctrl_temp |=
     afc:	4303      	orrs	r3, r0

	/* Set sampling mode (single shot or continuous) */
	compctrl_temp |= config->sample_mode;
     afe:	7810      	ldrb	r0, [r2, #0]
     b00:	4303      	orrs	r3, r0

	/* Set channel interrupt selection */
	compctrl_temp |= config->interrupt_selection;
     b02:	7d50      	ldrb	r0, [r2, #21]
     b04:	4303      	orrs	r3, r0
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
     b06:	7a60      	ldrb	r0, [r4, #9]
     b08:	b240      	sxtb	r0, r0
     b0a:	2800      	cmp	r0, #0
     b0c:	db0d      	blt.n	b2a <ac_chan_set_config+0x4a>
	return false;
     b0e:	2000      	movs	r0, #0

	while (ac_is_syncing(module_inst)) {
     b10:	2800      	cmp	r0, #0
     b12:	d1f8      	bne.n	b06 <ac_chan_set_config+0x26>
		/* Wait until synchronization is complete */
	}

	/* Write the final configuration to the module's control register */
	ac_module->COMPCTRL[(uint8_t)channel].reg = compctrl_temp;
     b14:	1d08      	adds	r0, r1, #4
     b16:	0080      	lsls	r0, r0, #2
     b18:	5103      	str	r3, [r0, r4]

	/* Configure VCC voltage scaling for the comparator */
	ac_module->SCALER[(uint8_t)channel].reg   = config->vcc_scale_factor - 1;
     b1a:	7d13      	ldrb	r3, [r2, #20]
     b1c:	3b01      	subs	r3, #1
     b1e:	b2db      	uxtb	r3, r3
     b20:	1864      	adds	r4, r4, r1
     b22:	3420      	adds	r4, #32
     b24:	7023      	strb	r3, [r4, #0]

	return STATUS_OK;
}
     b26:	2000      	movs	r0, #0
     b28:	bd30      	pop	{r4, r5, pc}
		return true;
     b2a:	2001      	movs	r0, #1
     b2c:	e7f0      	b.n	b10 <ac_chan_set_config+0x30>
	...

00000b30 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     b30:	b5f0      	push	{r4, r5, r6, r7, lr}
     b32:	46d6      	mov	lr, sl
     b34:	464f      	mov	r7, r9
     b36:	4646      	mov	r6, r8
     b38:	b5c0      	push	{r6, r7, lr}
     b3a:	b096      	sub	sp, #88	; 0x58
     b3c:	4682      	mov	sl, r0
     b3e:	000f      	movs	r7, r1
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     b40:	6803      	ldr	r3, [r0, #0]
     b42:	4699      	mov	r9, r3
     b44:	a915      	add	r1, sp, #84	; 0x54

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     b46:	783b      	ldrb	r3, [r7, #0]
     b48:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     b4a:	201e      	movs	r0, #30
     b4c:	4bb5      	ldr	r3, [pc, #724]	; (e24 <_adc_set_config+0x2f4>)
     b4e:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     b50:	201e      	movs	r0, #30
     b52:	4bb5      	ldr	r3, [pc, #724]	; (e28 <_adc_set_config+0x2f8>)
     b54:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     b56:	232c      	movs	r3, #44	; 0x2c
     b58:	5cfb      	ldrb	r3, [r7, r3]
     b5a:	2b00      	cmp	r3, #0
     b5c:	d054      	beq.n	c08 <_adc_set_config+0xd8>
		uint8_t offset = config->pin_scan.offset_start_scan;
     b5e:	222b      	movs	r2, #43	; 0x2b
     b60:	5cbe      	ldrb	r6, [r7, r2]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     b62:	7b3d      	ldrb	r5, [r7, #12]
		uint8_t start_pin =
     b64:	1975      	adds	r5, r6, r5
     b66:	b2ed      	uxtb	r5, r5
		uint8_t end_pin =
     b68:	195b      	adds	r3, r3, r5
     b6a:	b2db      	uxtb	r3, r3
     b6c:	4698      	mov	r8, r3
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     b6e:	e003      	b.n	b78 <_adc_set_config+0x48>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
     b70:	3501      	adds	r5, #1
     b72:	b2ed      	uxtb	r5, r5
			offset++;
     b74:	3601      	adds	r6, #1
     b76:	b2f6      	uxtb	r6, r6
		while (start_pin < end_pin) {
     b78:	4545      	cmp	r5, r8
     b7a:	d219      	bcs.n	bb0 <_adc_set_config+0x80>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     b7c:	240f      	movs	r4, #15
     b7e:	4034      	ands	r4, r6
     b80:	7b3b      	ldrb	r3, [r7, #12]
     b82:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     b84:	2250      	movs	r2, #80	; 0x50
     b86:	49a9      	ldr	r1, [pc, #676]	; (e2c <_adc_set_config+0x2fc>)
     b88:	a801      	add	r0, sp, #4
     b8a:	4ba9      	ldr	r3, [pc, #676]	; (e30 <_adc_set_config+0x300>)
     b8c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     b8e:	2c13      	cmp	r4, #19
     b90:	d8ee      	bhi.n	b70 <_adc_set_config+0x40>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     b92:	00a4      	lsls	r4, r4, #2
     b94:	ab01      	add	r3, sp, #4
     b96:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b98:	2300      	movs	r3, #0
     b9a:	466a      	mov	r2, sp
     b9c:	7053      	strb	r3, [r2, #1]
	config->powersave    = false;
     b9e:	70d3      	strb	r3, [r2, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     ba0:	7093      	strb	r3, [r2, #2]
		config.mux_position = 1;
     ba2:	3301      	adds	r3, #1
     ba4:	7013      	strb	r3, [r2, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     ba6:	b2c0      	uxtb	r0, r0
     ba8:	4669      	mov	r1, sp
     baa:	4ba2      	ldr	r3, [pc, #648]	; (e34 <_adc_set_config+0x304>)
     bac:	4798      	blx	r3
     bae:	e7df      	b.n	b70 <_adc_set_config+0x40>
		}
		_adc_configure_ain_pin(config->negative_input);
     bb0:	89fc      	ldrh	r4, [r7, #14]
	const uint32_t pinmapping[] = {
     bb2:	2250      	movs	r2, #80	; 0x50
     bb4:	499d      	ldr	r1, [pc, #628]	; (e2c <_adc_set_config+0x2fc>)
     bb6:	a801      	add	r0, sp, #4
     bb8:	4b9d      	ldr	r3, [pc, #628]	; (e30 <_adc_set_config+0x300>)
     bba:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     bbc:	2c13      	cmp	r4, #19
     bbe:	d914      	bls.n	bea <_adc_set_config+0xba>
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     bc0:	7d7b      	ldrb	r3, [r7, #21]
     bc2:	009b      	lsls	r3, r3, #2
     bc4:	b2db      	uxtb	r3, r3
     bc6:	464a      	mov	r2, r9
     bc8:	7013      	strb	r3, [r2, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     bca:	7dba      	ldrb	r2, [r7, #22]
     bcc:	01d2      	lsls	r2, r2, #7
			(config->reference);
     bce:	2301      	movs	r3, #1
     bd0:	56fb      	ldrsb	r3, [r7, r3]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     bd2:	4313      	orrs	r3, r2
     bd4:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     bd6:	464a      	mov	r2, r9
     bd8:	7053      	strb	r3, [r2, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     bda:	793b      	ldrb	r3, [r7, #4]
     bdc:	2b34      	cmp	r3, #52	; 0x34
     bde:	d900      	bls.n	be2 <_adc_set_config+0xb2>
     be0:	e1b9      	b.n	f56 <_adc_set_config+0x426>
     be2:	009b      	lsls	r3, r3, #2
     be4:	4a94      	ldr	r2, [pc, #592]	; (e38 <_adc_set_config+0x308>)
     be6:	58d3      	ldr	r3, [r2, r3]
     be8:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     bea:	00a4      	lsls	r4, r4, #2
     bec:	ab01      	add	r3, sp, #4
     bee:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     bf0:	2300      	movs	r3, #0
     bf2:	466a      	mov	r2, sp
     bf4:	7053      	strb	r3, [r2, #1]
	config->powersave    = false;
     bf6:	70d3      	strb	r3, [r2, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     bf8:	7093      	strb	r3, [r2, #2]
		config.mux_position = 1;
     bfa:	3301      	adds	r3, #1
     bfc:	7013      	strb	r3, [r2, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     bfe:	b2c0      	uxtb	r0, r0
     c00:	4669      	mov	r1, sp
     c02:	4b8c      	ldr	r3, [pc, #560]	; (e34 <_adc_set_config+0x304>)
     c04:	4798      	blx	r3
     c06:	e7db      	b.n	bc0 <_adc_set_config+0x90>
		_adc_configure_ain_pin(config->positive_input);
     c08:	7b3c      	ldrb	r4, [r7, #12]
	const uint32_t pinmapping[] = {
     c0a:	2250      	movs	r2, #80	; 0x50
     c0c:	4987      	ldr	r1, [pc, #540]	; (e2c <_adc_set_config+0x2fc>)
     c0e:	a801      	add	r0, sp, #4
     c10:	4b87      	ldr	r3, [pc, #540]	; (e30 <_adc_set_config+0x300>)
     c12:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     c14:	2c13      	cmp	r4, #19
     c16:	d916      	bls.n	c46 <_adc_set_config+0x116>
		_adc_configure_ain_pin(config->negative_input);
     c18:	89fc      	ldrh	r4, [r7, #14]
	const uint32_t pinmapping[] = {
     c1a:	2250      	movs	r2, #80	; 0x50
     c1c:	4983      	ldr	r1, [pc, #524]	; (e2c <_adc_set_config+0x2fc>)
     c1e:	a801      	add	r0, sp, #4
     c20:	4b83      	ldr	r3, [pc, #524]	; (e30 <_adc_set_config+0x300>)
     c22:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     c24:	2c13      	cmp	r4, #19
     c26:	d8cb      	bhi.n	bc0 <_adc_set_config+0x90>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     c28:	00a4      	lsls	r4, r4, #2
     c2a:	ab01      	add	r3, sp, #4
     c2c:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c2e:	2300      	movs	r3, #0
     c30:	466a      	mov	r2, sp
     c32:	7053      	strb	r3, [r2, #1]
	config->powersave    = false;
     c34:	70d3      	strb	r3, [r2, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     c36:	7093      	strb	r3, [r2, #2]
		config.mux_position = 1;
     c38:	3301      	adds	r3, #1
     c3a:	7013      	strb	r3, [r2, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     c3c:	b2c0      	uxtb	r0, r0
     c3e:	4669      	mov	r1, sp
     c40:	4b7c      	ldr	r3, [pc, #496]	; (e34 <_adc_set_config+0x304>)
     c42:	4798      	blx	r3
     c44:	e7bc      	b.n	bc0 <_adc_set_config+0x90>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     c46:	00a4      	lsls	r4, r4, #2
     c48:	ab01      	add	r3, sp, #4
     c4a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c4c:	2300      	movs	r3, #0
     c4e:	466a      	mov	r2, sp
     c50:	7053      	strb	r3, [r2, #1]
	config->powersave    = false;
     c52:	70d3      	strb	r3, [r2, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     c54:	7093      	strb	r3, [r2, #2]
		config.mux_position = 1;
     c56:	3301      	adds	r3, #1
     c58:	7013      	strb	r3, [r2, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     c5a:	b2c0      	uxtb	r0, r0
     c5c:	4669      	mov	r1, sp
     c5e:	4b75      	ldr	r3, [pc, #468]	; (e34 <_adc_set_config+0x304>)
     c60:	4798      	blx	r3
     c62:	e7d9      	b.n	c18 <_adc_set_config+0xe8>
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     c64:	2202      	movs	r2, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     c66:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
     c68:	2301      	movs	r3, #1
     c6a:	e01a      	b.n	ca2 <_adc_set_config+0x172>
		adjres = config->divide_result;
     c6c:	7c7b      	ldrb	r3, [r7, #17]
		accumulate = config->accumulate_samples;
     c6e:	7c3a      	ldrb	r2, [r7, #16]
		resolution = ADC_RESOLUTION_16BIT;
     c70:	2010      	movs	r0, #16
		break;
     c72:	e016      	b.n	ca2 <_adc_set_config+0x172>
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     c74:	2206      	movs	r2, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     c76:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
     c78:	2301      	movs	r3, #1
		break;
     c7a:	e012      	b.n	ca2 <_adc_set_config+0x172>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     c7c:	2208      	movs	r2, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     c7e:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     c80:	2300      	movs	r3, #0
		break;
     c82:	e00e      	b.n	ca2 <_adc_set_config+0x172>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     c84:	2200      	movs	r2, #0
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     c86:	2030      	movs	r0, #48	; 0x30
	uint8_t adjres = 0;
     c88:	2300      	movs	r3, #0
		break;
     c8a:	e00a      	b.n	ca2 <_adc_set_config+0x172>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     c8c:	2200      	movs	r2, #0
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     c8e:	2020      	movs	r0, #32
	uint8_t adjres = 0;
     c90:	2300      	movs	r3, #0
		break;
     c92:	e006      	b.n	ca2 <_adc_set_config+0x172>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     c94:	2200      	movs	r2, #0
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     c96:	2000      	movs	r0, #0
	uint8_t adjres = 0;
     c98:	2300      	movs	r3, #0
		break;
     c9a:	e002      	b.n	ca2 <_adc_set_config+0x172>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     c9c:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     c9e:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_4;
     ca0:	2302      	movs	r3, #2
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     ca2:	011b      	lsls	r3, r3, #4
     ca4:	2170      	movs	r1, #112	; 0x70
     ca6:	400b      	ands	r3, r1
     ca8:	4313      	orrs	r3, r2
     caa:	464a      	mov	r2, r9
     cac:	7093      	strb	r3, [r2, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     cae:	7dfb      	ldrb	r3, [r7, #23]
     cb0:	2b3f      	cmp	r3, #63	; 0x3f
     cb2:	d906      	bls.n	cc2 <_adc_set_config+0x192>
		return STATUS_ERR_INVALID_ARG;
     cb4:	2017      	movs	r0, #23
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
}
     cb6:	b016      	add	sp, #88	; 0x58
     cb8:	bc1c      	pop	{r2, r3, r4}
     cba:	4690      	mov	r8, r2
     cbc:	4699      	mov	r9, r3
     cbe:	46a2      	mov	sl, r4
     cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		adc_module->SAMPCTRL.reg =
     cc2:	70d3      	strb	r3, [r2, #3]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     cc4:	4653      	mov	r3, sl
     cc6:	681b      	ldr	r3, [r3, #0]
     cc8:	7e5b      	ldrb	r3, [r3, #25]
     cca:	b25b      	sxtb	r3, r3
     ccc:	2b00      	cmp	r3, #0
     cce:	db27      	blt.n	d20 <_adc_set_config+0x1f0>
	return false;
     cd0:	2200      	movs	r2, #0
	while (adc_is_syncing(module_inst)) {
     cd2:	2a00      	cmp	r2, #0
     cd4:	d1f6      	bne.n	cc4 <_adc_set_config+0x194>
			config->clock_prescaler |
     cd6:	887b      	ldrh	r3, [r7, #2]
     cd8:	4303      	orrs	r3, r0
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     cda:	2124      	movs	r1, #36	; 0x24
     cdc:	5c79      	ldrb	r1, [r7, r1]
     cde:	00c9      	lsls	r1, r1, #3
			resolution |
     ce0:	430b      	orrs	r3, r1
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     ce2:	7d39      	ldrb	r1, [r7, #20]
     ce4:	0089      	lsls	r1, r1, #2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     ce6:	430b      	orrs	r3, r1
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     ce8:	7cb9      	ldrb	r1, [r7, #18]
     cea:	0049      	lsls	r1, r1, #1
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     cec:	430b      	orrs	r3, r1
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     cee:	7cf9      	ldrb	r1, [r7, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     cf0:	430b      	orrs	r3, r1
	adc_module->CTRLB.reg =
     cf2:	4649      	mov	r1, r9
     cf4:	808b      	strh	r3, [r1, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     cf6:	7e3b      	ldrb	r3, [r7, #24]
     cf8:	2b00      	cmp	r3, #0
     cfa:	d100      	bne.n	cfe <_adc_set_config+0x1ce>
     cfc:	e0b0      	b.n	e60 <_adc_set_config+0x330>
		switch (resolution) {
     cfe:	2810      	cmp	r0, #16
     d00:	d06c      	beq.n	ddc <_adc_set_config+0x2ac>
     d02:	d90f      	bls.n	d24 <_adc_set_config+0x1f4>
     d04:	2820      	cmp	r0, #32
     d06:	d030      	beq.n	d6a <_adc_set_config+0x23a>
     d08:	2830      	cmp	r0, #48	; 0x30
     d0a:	d000      	beq.n	d0e <_adc_set_config+0x1de>
     d0c:	e0a8      	b.n	e60 <_adc_set_config+0x330>
			if (config->differential_mode &&
     d0e:	7cf9      	ldrb	r1, [r7, #19]
     d10:	2900      	cmp	r1, #0
     d12:	d020      	beq.n	d56 <_adc_set_config+0x226>
					(config->window.window_lower_value > 127 ||
     d14:	69f9      	ldr	r1, [r7, #28]
     d16:	3180      	adds	r1, #128	; 0x80
			if (config->differential_mode &&
     d18:	29ff      	cmp	r1, #255	; 0xff
     d1a:	d913      	bls.n	d44 <_adc_set_config+0x214>
				return STATUS_ERR_INVALID_ARG;
     d1c:	2017      	movs	r0, #23
     d1e:	e7ca      	b.n	cb6 <_adc_set_config+0x186>
		return true;
     d20:	2201      	movs	r2, #1
     d22:	e7d6      	b.n	cd2 <_adc_set_config+0x1a2>
		switch (resolution) {
     d24:	2800      	cmp	r0, #0
     d26:	d000      	beq.n	d2a <_adc_set_config+0x1fa>
     d28:	e09a      	b.n	e60 <_adc_set_config+0x330>
			if (config->differential_mode &&
     d2a:	7cf9      	ldrb	r1, [r7, #19]
     d2c:	2900      	cmp	r1, #0
     d2e:	d04a      	beq.n	dc6 <_adc_set_config+0x296>
					(config->window.window_lower_value > 2047 ||
     d30:	69f9      	ldr	r1, [r7, #28]
     d32:	2080      	movs	r0, #128	; 0x80
     d34:	0100      	lsls	r0, r0, #4
     d36:	4684      	mov	ip, r0
     d38:	4461      	add	r1, ip
			if (config->differential_mode &&
     d3a:	4840      	ldr	r0, [pc, #256]	; (e3c <_adc_set_config+0x30c>)
     d3c:	4281      	cmp	r1, r0
     d3e:	d937      	bls.n	db0 <_adc_set_config+0x280>
				return STATUS_ERR_INVALID_ARG;
     d40:	2017      	movs	r0, #23
     d42:	e7b8      	b.n	cb6 <_adc_set_config+0x186>
					config->window.window_upper_value > 127 ||
     d44:	6a39      	ldr	r1, [r7, #32]
					config->window.window_lower_value < -128 ||
     d46:	297f      	cmp	r1, #127	; 0x7f
     d48:	dd01      	ble.n	d4e <_adc_set_config+0x21e>
				return STATUS_ERR_INVALID_ARG;
     d4a:	2017      	movs	r0, #23
     d4c:	e7b3      	b.n	cb6 <_adc_set_config+0x186>
					config->window.window_upper_value > 127 ||
     d4e:	3180      	adds	r1, #128	; 0x80
     d50:	da01      	bge.n	d56 <_adc_set_config+0x226>
				return STATUS_ERR_INVALID_ARG;
     d52:	2017      	movs	r0, #23
     d54:	e7af      	b.n	cb6 <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 255 ||
     d56:	69f9      	ldr	r1, [r7, #28]
     d58:	29ff      	cmp	r1, #255	; 0xff
     d5a:	dd01      	ble.n	d60 <_adc_set_config+0x230>
				return STATUS_ERR_INVALID_ARG;
     d5c:	2017      	movs	r0, #23
     d5e:	e7aa      	b.n	cb6 <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 255 ||
     d60:	6a39      	ldr	r1, [r7, #32]
     d62:	29ff      	cmp	r1, #255	; 0xff
     d64:	dd7c      	ble.n	e60 <_adc_set_config+0x330>
				return STATUS_ERR_INVALID_ARG;
     d66:	2017      	movs	r0, #23
     d68:	e7a5      	b.n	cb6 <_adc_set_config+0x186>
			if (config->differential_mode &&
     d6a:	7cf9      	ldrb	r1, [r7, #19]
     d6c:	2900      	cmp	r1, #0
     d6e:	d014      	beq.n	d9a <_adc_set_config+0x26a>
					(config->window.window_lower_value > 511 ||
     d70:	69f9      	ldr	r1, [r7, #28]
     d72:	2080      	movs	r0, #128	; 0x80
     d74:	0080      	lsls	r0, r0, #2
     d76:	4684      	mov	ip, r0
     d78:	4461      	add	r1, ip
			if (config->differential_mode &&
     d7a:	4831      	ldr	r0, [pc, #196]	; (e40 <_adc_set_config+0x310>)
     d7c:	4281      	cmp	r1, r0
     d7e:	d901      	bls.n	d84 <_adc_set_config+0x254>
				return STATUS_ERR_INVALID_ARG;
     d80:	2017      	movs	r0, #23
     d82:	e798      	b.n	cb6 <_adc_set_config+0x186>
					config->window.window_upper_value > 511 ||
     d84:	6a39      	ldr	r1, [r7, #32]
					config->window.window_lower_value < -512 ||
     d86:	482f      	ldr	r0, [pc, #188]	; (e44 <_adc_set_config+0x314>)
     d88:	4281      	cmp	r1, r0
     d8a:	dd01      	ble.n	d90 <_adc_set_config+0x260>
				return STATUS_ERR_INVALID_ARG;
     d8c:	2017      	movs	r0, #23
     d8e:	e792      	b.n	cb6 <_adc_set_config+0x186>
					config->window.window_upper_value > 511 ||
     d90:	482d      	ldr	r0, [pc, #180]	; (e48 <_adc_set_config+0x318>)
     d92:	4281      	cmp	r1, r0
     d94:	da01      	bge.n	d9a <_adc_set_config+0x26a>
				return STATUS_ERR_INVALID_ARG;
     d96:	2017      	movs	r0, #23
     d98:	e78d      	b.n	cb6 <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 1023 ||
     d9a:	4929      	ldr	r1, [pc, #164]	; (e40 <_adc_set_config+0x310>)
     d9c:	69f8      	ldr	r0, [r7, #28]
     d9e:	4288      	cmp	r0, r1
     da0:	dd01      	ble.n	da6 <_adc_set_config+0x276>
				return STATUS_ERR_INVALID_ARG;
     da2:	2017      	movs	r0, #23
     da4:	e787      	b.n	cb6 <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 1023 ||
     da6:	6a38      	ldr	r0, [r7, #32]
     da8:	4288      	cmp	r0, r1
     daa:	dd59      	ble.n	e60 <_adc_set_config+0x330>
				return STATUS_ERR_INVALID_ARG;
     dac:	2017      	movs	r0, #23
     dae:	e782      	b.n	cb6 <_adc_set_config+0x186>
					config->window.window_upper_value > 2047 ||
     db0:	6a39      	ldr	r1, [r7, #32]
					config->window.window_lower_value < -2048 ||
     db2:	4826      	ldr	r0, [pc, #152]	; (e4c <_adc_set_config+0x31c>)
     db4:	4281      	cmp	r1, r0
     db6:	dd01      	ble.n	dbc <_adc_set_config+0x28c>
				return STATUS_ERR_INVALID_ARG;
     db8:	2017      	movs	r0, #23
     dba:	e77c      	b.n	cb6 <_adc_set_config+0x186>
					config->window.window_upper_value > 2047 ||
     dbc:	4824      	ldr	r0, [pc, #144]	; (e50 <_adc_set_config+0x320>)
     dbe:	4281      	cmp	r1, r0
     dc0:	da01      	bge.n	dc6 <_adc_set_config+0x296>
				return STATUS_ERR_INVALID_ARG;
     dc2:	2017      	movs	r0, #23
     dc4:	e777      	b.n	cb6 <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 4095 ||
     dc6:	491d      	ldr	r1, [pc, #116]	; (e3c <_adc_set_config+0x30c>)
     dc8:	69f8      	ldr	r0, [r7, #28]
     dca:	4288      	cmp	r0, r1
     dcc:	dd01      	ble.n	dd2 <_adc_set_config+0x2a2>
				return STATUS_ERR_INVALID_ARG;
     dce:	2017      	movs	r0, #23
     dd0:	e771      	b.n	cb6 <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 4095 ||
     dd2:	6a38      	ldr	r0, [r7, #32]
     dd4:	4288      	cmp	r0, r1
     dd6:	dd43      	ble.n	e60 <_adc_set_config+0x330>
				return STATUS_ERR_INVALID_ARG;
     dd8:	2017      	movs	r0, #23
     dda:	e76c      	b.n	cb6 <_adc_set_config+0x186>
			if (config->differential_mode &&
     ddc:	7cf9      	ldrb	r1, [r7, #19]
     dde:	2900      	cmp	r1, #0
     de0:	d014      	beq.n	e0c <_adc_set_config+0x2dc>
					(config->window.window_lower_value > 32767 ||
     de2:	69f9      	ldr	r1, [r7, #28]
     de4:	2080      	movs	r0, #128	; 0x80
     de6:	0200      	lsls	r0, r0, #8
     de8:	4684      	mov	ip, r0
     dea:	4461      	add	r1, ip
			if (config->differential_mode &&
     dec:	4819      	ldr	r0, [pc, #100]	; (e54 <_adc_set_config+0x324>)
     dee:	4281      	cmp	r1, r0
     df0:	d901      	bls.n	df6 <_adc_set_config+0x2c6>
				return STATUS_ERR_INVALID_ARG;
     df2:	2017      	movs	r0, #23
     df4:	e75f      	b.n	cb6 <_adc_set_config+0x186>
					config->window.window_upper_value > 32767 ||
     df6:	6a39      	ldr	r1, [r7, #32]
					config->window.window_lower_value < -32768 ||
     df8:	4817      	ldr	r0, [pc, #92]	; (e58 <_adc_set_config+0x328>)
     dfa:	4281      	cmp	r1, r0
     dfc:	dd01      	ble.n	e02 <_adc_set_config+0x2d2>
				return STATUS_ERR_INVALID_ARG;
     dfe:	2017      	movs	r0, #23
     e00:	e759      	b.n	cb6 <_adc_set_config+0x186>
					config->window.window_upper_value > 32767 ||
     e02:	4816      	ldr	r0, [pc, #88]	; (e5c <_adc_set_config+0x32c>)
     e04:	4281      	cmp	r1, r0
     e06:	da01      	bge.n	e0c <_adc_set_config+0x2dc>
				return STATUS_ERR_INVALID_ARG;
     e08:	2017      	movs	r0, #23
     e0a:	e754      	b.n	cb6 <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 65535 ||
     e0c:	4911      	ldr	r1, [pc, #68]	; (e54 <_adc_set_config+0x324>)
     e0e:	69f8      	ldr	r0, [r7, #28]
     e10:	4288      	cmp	r0, r1
     e12:	dd01      	ble.n	e18 <_adc_set_config+0x2e8>
				return STATUS_ERR_INVALID_ARG;
     e14:	2017      	movs	r0, #23
     e16:	e74e      	b.n	cb6 <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 65535 ||
     e18:	6a38      	ldr	r0, [r7, #32]
     e1a:	4288      	cmp	r0, r1
     e1c:	dd20      	ble.n	e60 <_adc_set_config+0x330>
				return STATUS_ERR_INVALID_ARG;
     e1e:	2017      	movs	r0, #23
     e20:	e749      	b.n	cb6 <_adc_set_config+0x186>
     e22:	46c0      	nop			; (mov r8, r8)
     e24:	00008fa1 	.word	0x00008fa1
     e28:	00008f19 	.word	0x00008f19
     e2c:	0000c484 	.word	0x0000c484
     e30:	0000c38d 	.word	0x0000c38d
     e34:	00009085 	.word	0x00009085
     e38:	0000c3b0 	.word	0x0000c3b0
     e3c:	00000fff 	.word	0x00000fff
     e40:	000003ff 	.word	0x000003ff
     e44:	000001ff 	.word	0x000001ff
     e48:	fffffe00 	.word	0xfffffe00
     e4c:	000007ff 	.word	0x000007ff
     e50:	fffff800 	.word	0xfffff800
     e54:	0000ffff 	.word	0x0000ffff
     e58:	00007fff 	.word	0x00007fff
     e5c:	ffff8000 	.word	0xffff8000
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     e60:	4651      	mov	r1, sl
     e62:	6809      	ldr	r1, [r1, #0]
     e64:	7e49      	ldrb	r1, [r1, #25]
     e66:	b249      	sxtb	r1, r1
     e68:	2900      	cmp	r1, #0
     e6a:	db26      	blt.n	eba <_adc_set_config+0x38a>
	return false;
     e6c:	0011      	movs	r1, r2
	while (adc_is_syncing(module_inst)) {
     e6e:	2900      	cmp	r1, #0
     e70:	d1f6      	bne.n	e60 <_adc_set_config+0x330>
	adc_module->WINCTRL.reg = config->window.window_mode;
     e72:	464a      	mov	r2, r9
     e74:	7213      	strb	r3, [r2, #8]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     e76:	4653      	mov	r3, sl
     e78:	681b      	ldr	r3, [r3, #0]
     e7a:	7e5b      	ldrb	r3, [r3, #25]
     e7c:	b25b      	sxtb	r3, r3
     e7e:	2b00      	cmp	r3, #0
     e80:	db1d      	blt.n	ebe <_adc_set_config+0x38e>
	return false;
     e82:	000a      	movs	r2, r1
	while (adc_is_syncing(module_inst)) {
     e84:	2a00      	cmp	r2, #0
     e86:	d1f6      	bne.n	e76 <_adc_set_config+0x346>
	adc_module->WINLT.reg =
     e88:	8bbb      	ldrh	r3, [r7, #28]
     e8a:	4649      	mov	r1, r9
     e8c:	838b      	strh	r3, [r1, #28]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     e8e:	4653      	mov	r3, sl
     e90:	681b      	ldr	r3, [r3, #0]
     e92:	7e5b      	ldrb	r3, [r3, #25]
     e94:	b25b      	sxtb	r3, r3
     e96:	2b00      	cmp	r3, #0
     e98:	db13      	blt.n	ec2 <_adc_set_config+0x392>
	return false;
     e9a:	0011      	movs	r1, r2
	while (adc_is_syncing(module_inst)) {
     e9c:	2900      	cmp	r1, #0
     e9e:	d1f6      	bne.n	e8e <_adc_set_config+0x35e>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     ea0:	8c3b      	ldrh	r3, [r7, #32]
     ea2:	464a      	mov	r2, r9
     ea4:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     ea6:	232c      	movs	r3, #44	; 0x2c
     ea8:	5cfb      	ldrb	r3, [r7, r3]
	if (inputs_to_scan > 0) {
     eaa:	2b00      	cmp	r3, #0
     eac:	d001      	beq.n	eb2 <_adc_set_config+0x382>
		inputs_to_scan--;
     eae:	3b01      	subs	r3, #1
     eb0:	b2db      	uxtb	r3, r3
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     eb2:	2b0f      	cmp	r3, #15
     eb4:	d907      	bls.n	ec6 <_adc_set_config+0x396>
		return STATUS_ERR_INVALID_ARG;
     eb6:	2017      	movs	r0, #23
     eb8:	e6fd      	b.n	cb6 <_adc_set_config+0x186>
		return true;
     eba:	2101      	movs	r1, #1
     ebc:	e7d7      	b.n	e6e <_adc_set_config+0x33e>
     ebe:	2201      	movs	r2, #1
     ec0:	e7e0      	b.n	e84 <_adc_set_config+0x354>
     ec2:	2101      	movs	r1, #1
     ec4:	e7ea      	b.n	e9c <_adc_set_config+0x36c>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     ec6:	222b      	movs	r2, #43	; 0x2b
     ec8:	5cba      	ldrb	r2, [r7, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     eca:	2a0f      	cmp	r2, #15
     ecc:	d901      	bls.n	ed2 <_adc_set_config+0x3a2>
		return STATUS_ERR_INVALID_ARG;
     ece:	2017      	movs	r0, #23
     ed0:	e6f1      	b.n	cb6 <_adc_set_config+0x186>
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     ed2:	4650      	mov	r0, sl
     ed4:	6800      	ldr	r0, [r0, #0]
     ed6:	7e40      	ldrb	r0, [r0, #25]
     ed8:	b240      	sxtb	r0, r0
     eda:	2800      	cmp	r0, #0
     edc:	da39      	bge.n	f52 <_adc_set_config+0x422>
		return true;
     ede:	2001      	movs	r0, #1
	while (adc_is_syncing(module_inst)) {
     ee0:	2800      	cmp	r0, #0
     ee2:	d1f6      	bne.n	ed2 <_adc_set_config+0x3a2>
			(config->pin_scan.offset_start_scan <<
     ee4:	0512      	lsls	r2, r2, #20
			config->gain_factor |
     ee6:	68b9      	ldr	r1, [r7, #8]
     ee8:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     eea:	041b      	lsls	r3, r3, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     eec:	4313      	orrs	r3, r2
			config->negative_input |
     eee:	89fa      	ldrh	r2, [r7, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     ef0:	4313      	orrs	r3, r2
			config->positive_input;
     ef2:	7b3a      	ldrb	r2, [r7, #12]
			config->negative_input |
     ef4:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     ef6:	464a      	mov	r2, r9
     ef8:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     efa:	232a      	movs	r3, #42	; 0x2a
     efc:	5cfb      	ldrb	r3, [r7, r3]
     efe:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     f00:	230f      	movs	r3, #15
     f02:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     f04:	3315      	adds	r3, #21
     f06:	5cfb      	ldrb	r3, [r7, r3]
     f08:	2b00      	cmp	r3, #0
     f0a:	d00f      	beq.n	f2c <_adc_set_config+0x3fc>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     f0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     f0e:	4a15      	ldr	r2, [pc, #84]	; (f64 <_adc_set_config+0x434>)
     f10:	4293      	cmp	r3, r2
     f12:	d822      	bhi.n	f5a <_adc_set_config+0x42a>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     f14:	464a      	mov	r2, r9
     f16:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     f18:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
     f1a:	2380      	movs	r3, #128	; 0x80
     f1c:	011b      	lsls	r3, r3, #4
     f1e:	18d3      	adds	r3, r2, r3
     f20:	b29b      	uxth	r3, r3
     f22:	4910      	ldr	r1, [pc, #64]	; (f64 <_adc_set_config+0x434>)
     f24:	428b      	cmp	r3, r1
     f26:	d81a      	bhi.n	f5e <_adc_set_config+0x42e>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     f28:	464b      	mov	r3, r9
     f2a:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     f2c:	4b0e      	ldr	r3, [pc, #56]	; (f68 <_adc_set_config+0x438>)
     f2e:	681b      	ldr	r3, [r3, #0]
     f30:	08db      	lsrs	r3, r3, #3
     f32:	021b      	lsls	r3, r3, #8
     f34:	22e0      	movs	r2, #224	; 0xe0
     f36:	00d2      	lsls	r2, r2, #3
     f38:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     f3a:	490c      	ldr	r1, [pc, #48]	; (f6c <_adc_set_config+0x43c>)
     f3c:	680a      	ldr	r2, [r1, #0]
     f3e:	6849      	ldr	r1, [r1, #4]
     f40:	0149      	lsls	r1, r1, #5
     f42:	0ed2      	lsrs	r2, r2, #27
     f44:	430a      	orrs	r2, r1
     f46:	b2d2      	uxtb	r2, r2
			) |
     f48:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     f4a:	464a      	mov	r2, r9
     f4c:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     f4e:	2000      	movs	r0, #0
     f50:	e6b1      	b.n	cb6 <_adc_set_config+0x186>
	return false;
     f52:	0008      	movs	r0, r1
     f54:	e7c4      	b.n	ee0 <_adc_set_config+0x3b0>
		return STATUS_ERR_INVALID_ARG;
     f56:	2017      	movs	r0, #23
     f58:	e6ad      	b.n	cb6 <_adc_set_config+0x186>
			return STATUS_ERR_INVALID_ARG;
     f5a:	2017      	movs	r0, #23
     f5c:	e6ab      	b.n	cb6 <_adc_set_config+0x186>
			return STATUS_ERR_INVALID_ARG;
     f5e:	2017      	movs	r0, #23
     f60:	e6a9      	b.n	cb6 <_adc_set_config+0x186>
     f62:	46c0      	nop			; (mov r8, r8)
     f64:	00000fff 	.word	0x00000fff
     f68:	00806024 	.word	0x00806024
     f6c:	00806020 	.word	0x00806020

00000f70 <adc_get_config_defaults>:
{
     f70:	b510      	push	{r4, lr}
	config->clock_source                  = GCLK_GENERATOR_0;
     f72:	2200      	movs	r2, #0
     f74:	2300      	movs	r3, #0
     f76:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     f78:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     f7a:	2100      	movs	r1, #0
     f7c:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     f7e:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     f80:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     f82:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     f84:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     f86:	6082      	str	r2, [r0, #8]
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     f88:	7303      	strb	r3, [r0, #12]
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     f8a:	24c0      	movs	r4, #192	; 0xc0
     f8c:	0164      	lsls	r4, r4, #5
     f8e:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     f90:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     f92:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     f94:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     f96:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     f98:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     f9a:	242a      	movs	r4, #42	; 0x2a
     f9c:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     f9e:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     fa0:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     fa2:	3c06      	subs	r4, #6
     fa4:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     fa6:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     fa8:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     faa:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     fac:	232b      	movs	r3, #43	; 0x2b
     fae:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     fb0:	3301      	adds	r3, #1
     fb2:	54c1      	strb	r1, [r0, r3]
}
     fb4:	bd10      	pop	{r4, pc}
	...

00000fb8 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     fb8:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     fba:	6001      	str	r1, [r0, #0]
     fbc:	4c1c      	ldr	r4, [pc, #112]	; (1030 <adc_init+0x78>)
     fbe:	6a25      	ldr	r5, [r4, #32]
     fc0:	2380      	movs	r3, #128	; 0x80
     fc2:	025b      	lsls	r3, r3, #9
     fc4:	432b      	orrs	r3, r5
     fc6:	6223      	str	r3, [r4, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     fc8:	780b      	ldrb	r3, [r1, #0]
     fca:	07db      	lsls	r3, r3, #31
     fcc:	d501      	bpl.n	fd2 <adc_init+0x1a>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     fce:	2005      	movs	r0, #5
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     fd0:	bd70      	pop	{r4, r5, r6, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     fd2:	780b      	ldrb	r3, [r1, #0]
     fd4:	079b      	lsls	r3, r3, #30
     fd6:	d501      	bpl.n	fdc <adc_init+0x24>
		return STATUS_ERR_DENIED;
     fd8:	201c      	movs	r0, #28
     fda:	e7f9      	b.n	fd0 <adc_init+0x18>
	module_inst->reference = config->reference;
     fdc:	7853      	ldrb	r3, [r2, #1]
     fde:	7103      	strb	r3, [r0, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     fe0:	2b00      	cmp	r3, #0
     fe2:	d104      	bne.n	fee <adc_init+0x36>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     fe4:	4913      	ldr	r1, [pc, #76]	; (1034 <adc_init+0x7c>)
     fe6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
     fe8:	2404      	movs	r4, #4
     fea:	4323      	orrs	r3, r4
     fec:	640b      	str	r3, [r1, #64]	; 0x40
{
     fee:	2300      	movs	r3, #0
     ff0:	e005      	b.n	ffe <adc_init+0x46>
		module_inst->callback[i] = NULL;
     ff2:	1c99      	adds	r1, r3, #2
     ff4:	0089      	lsls	r1, r1, #2
     ff6:	2400      	movs	r4, #0
     ff8:	500c      	str	r4, [r1, r0]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
     ffa:	3301      	adds	r3, #1
     ffc:	b2db      	uxtb	r3, r3
     ffe:	2b02      	cmp	r3, #2
    1000:	d9f7      	bls.n	ff2 <adc_init+0x3a>
	module_inst->registered_callback_mask = 0;
    1002:	2300      	movs	r3, #0
    1004:	7683      	strb	r3, [r0, #26]
	module_inst->enabled_callback_mask = 0;
    1006:	76c3      	strb	r3, [r0, #27]
	module_inst->remaining_conversions = 0;
    1008:	8303      	strh	r3, [r0, #24]
	module_inst->job_status = STATUS_OK;
    100a:	7703      	strb	r3, [r0, #28]
	_adc_instances[0] = module_inst;
    100c:	4b0a      	ldr	r3, [pc, #40]	; (1038 <adc_init+0x80>)
    100e:	6018      	str	r0, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    1010:	232a      	movs	r3, #42	; 0x2a
    1012:	5cd3      	ldrb	r3, [r2, r3]
    1014:	2b00      	cmp	r3, #0
    1016:	d105      	bne.n	1024 <adc_init+0x6c>
			!config->freerunning) {
    1018:	7d13      	ldrb	r3, [r2, #20]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    101a:	2b00      	cmp	r3, #0
    101c:	d102      	bne.n	1024 <adc_init+0x6c>
		module_inst->software_trigger = true;
    101e:	3301      	adds	r3, #1
    1020:	7743      	strb	r3, [r0, #29]
    1022:	e001      	b.n	1028 <adc_init+0x70>
		module_inst->software_trigger = false;
    1024:	2300      	movs	r3, #0
    1026:	7743      	strb	r3, [r0, #29]
	return _adc_set_config(module_inst, config);
    1028:	0011      	movs	r1, r2
    102a:	4b04      	ldr	r3, [pc, #16]	; (103c <adc_init+0x84>)
    102c:	4798      	blx	r3
    102e:	e7cf      	b.n	fd0 <adc_init+0x18>
    1030:	40000400 	.word	0x40000400
    1034:	40000800 	.word	0x40000800
    1038:	20001170 	.word	0x20001170
    103c:	00000b31 	.word	0x00000b31

00001040 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    1040:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    1042:	0080      	lsls	r0, r0, #2
    1044:	4b36      	ldr	r3, [pc, #216]	; (1120 <_adc_interrupt_handler+0xe0>)
    1046:	58c4      	ldr	r4, [r0, r3]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    1048:	6823      	ldr	r3, [r4, #0]
    104a:	7e1d      	ldrb	r5, [r3, #24]
    104c:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
    104e:	07ea      	lsls	r2, r5, #31
    1050:	d505      	bpl.n	105e <_adc_interrupt_handler+0x1e>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    1052:	7ee2      	ldrb	r2, [r4, #27]
    1054:	07d2      	lsls	r2, r2, #31
    1056:	d502      	bpl.n	105e <_adc_interrupt_handler+0x1e>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
    1058:	7ea2      	ldrb	r2, [r4, #26]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    105a:	07d2      	lsls	r2, r2, #31
    105c:	d416      	bmi.n	108c <_adc_interrupt_handler+0x4c>
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    105e:	076b      	lsls	r3, r5, #29
    1060:	d508      	bpl.n	1074 <_adc_interrupt_handler+0x34>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    1062:	2304      	movs	r3, #4
    1064:	6822      	ldr	r2, [r4, #0]
    1066:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    1068:	7ee3      	ldrb	r3, [r4, #27]
    106a:	079b      	lsls	r3, r3, #30
    106c:	d502      	bpl.n	1074 <_adc_interrupt_handler+0x34>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    106e:	7ea3      	ldrb	r3, [r4, #26]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    1070:	079b      	lsls	r3, r3, #30
    1072:	d44c      	bmi.n	110e <_adc_interrupt_handler+0xce>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    1074:	07ab      	lsls	r3, r5, #30
    1076:	d508      	bpl.n	108a <_adc_interrupt_handler+0x4a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    1078:	2302      	movs	r3, #2
    107a:	6822      	ldr	r2, [r4, #0]
    107c:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    107e:	7ee3      	ldrb	r3, [r4, #27]
    1080:	075b      	lsls	r3, r3, #29
    1082:	d502      	bpl.n	108a <_adc_interrupt_handler+0x4a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    1084:	7ea3      	ldrb	r3, [r4, #26]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    1086:	075b      	lsls	r3, r3, #29
    1088:	d445      	bmi.n	1116 <_adc_interrupt_handler+0xd6>
			(module->callback[ADC_CALLBACK_ERROR])(module);
		}
	}
}
    108a:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    108c:	2201      	movs	r2, #1
    108e:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    1090:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1092:	7e53      	ldrb	r3, [r2, #25]
    1094:	b25b      	sxtb	r3, r3
    1096:	2b00      	cmp	r3, #0
    1098:	db27      	blt.n	10ea <_adc_interrupt_handler+0xaa>
	return false;
    109a:	2100      	movs	r1, #0
			while (adc_is_syncing(module)) {
    109c:	2900      	cmp	r1, #0
    109e:	d1f7      	bne.n	1090 <_adc_interrupt_handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
    10a0:	6960      	ldr	r0, [r4, #20]
    10a2:	1c83      	adds	r3, r0, #2
    10a4:	6163      	str	r3, [r4, #20]
    10a6:	8b53      	ldrh	r3, [r2, #26]
    10a8:	b29b      	uxth	r3, r3
    10aa:	8003      	strh	r3, [r0, #0]
			if (--module->remaining_conversions > 0) {
    10ac:	8b23      	ldrh	r3, [r4, #24]
    10ae:	3b01      	subs	r3, #1
    10b0:	b29b      	uxth	r3, r3
    10b2:	8323      	strh	r3, [r4, #24]
    10b4:	2b00      	cmp	r3, #0
    10b6:	d01e      	beq.n	10f6 <_adc_interrupt_handler+0xb6>
				if (module->software_trigger == true) {
    10b8:	7f63      	ldrb	r3, [r4, #29]
    10ba:	2b00      	cmp	r3, #0
    10bc:	d0cf      	beq.n	105e <_adc_interrupt_handler+0x1e>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    10be:	6826      	ldr	r6, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    10c0:	7e72      	ldrb	r2, [r6, #25]
    10c2:	b252      	sxtb	r2, r2
    10c4:	2a00      	cmp	r2, #0
    10c6:	db12      	blt.n	10ee <_adc_interrupt_handler+0xae>
	return false;
    10c8:	0008      	movs	r0, r1

	while (adc_is_syncing(module_inst)) {
    10ca:	2800      	cmp	r0, #0
    10cc:	d1f8      	bne.n	10c0 <_adc_interrupt_handler+0x80>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    10ce:	7b32      	ldrb	r2, [r6, #12]
    10d0:	2102      	movs	r1, #2
    10d2:	430a      	orrs	r2, r1
    10d4:	b2d2      	uxtb	r2, r2
    10d6:	7332      	strb	r2, [r6, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    10d8:	6822      	ldr	r2, [r4, #0]
    10da:	7e52      	ldrb	r2, [r2, #25]
    10dc:	b252      	sxtb	r2, r2
    10de:	2a00      	cmp	r2, #0
    10e0:	db07      	blt.n	10f2 <_adc_interrupt_handler+0xb2>
	return false;
    10e2:	0002      	movs	r2, r0

	while (adc_is_syncing(module_inst)) {
    10e4:	2a00      	cmp	r2, #0
    10e6:	d1f7      	bne.n	10d8 <_adc_interrupt_handler+0x98>
    10e8:	e7b9      	b.n	105e <_adc_interrupt_handler+0x1e>
		return true;
    10ea:	2101      	movs	r1, #1
    10ec:	e7d6      	b.n	109c <_adc_interrupt_handler+0x5c>
    10ee:	0018      	movs	r0, r3
    10f0:	e7eb      	b.n	10ca <_adc_interrupt_handler+0x8a>
    10f2:	001a      	movs	r2, r3
    10f4:	e7f6      	b.n	10e4 <_adc_interrupt_handler+0xa4>
				if (module->job_status == STATUS_BUSY) {
    10f6:	7f23      	ldrb	r3, [r4, #28]
    10f8:	2b05      	cmp	r3, #5
    10fa:	d1b0      	bne.n	105e <_adc_interrupt_handler+0x1e>
					module->job_status = STATUS_OK;
    10fc:	2300      	movs	r3, #0
    10fe:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    1100:	3301      	adds	r3, #1
    1102:	6822      	ldr	r2, [r4, #0]
    1104:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    1106:	0020      	movs	r0, r4
    1108:	68a3      	ldr	r3, [r4, #8]
    110a:	4798      	blx	r3
    110c:	e7a7      	b.n	105e <_adc_interrupt_handler+0x1e>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    110e:	0020      	movs	r0, r4
    1110:	68e3      	ldr	r3, [r4, #12]
    1112:	4798      	blx	r3
    1114:	e7ae      	b.n	1074 <_adc_interrupt_handler+0x34>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    1116:	6923      	ldr	r3, [r4, #16]
    1118:	0020      	movs	r0, r4
    111a:	4798      	blx	r3
}
    111c:	e7b5      	b.n	108a <_adc_interrupt_handler+0x4a>
    111e:	46c0      	nop			; (mov r8, r8)
    1120:	20001170 	.word	0x20001170

00001124 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    1124:	b510      	push	{r4, lr}
	_adc_interrupt_handler(0);
    1126:	2000      	movs	r0, #0
    1128:	4b01      	ldr	r3, [pc, #4]	; (1130 <ADC_Handler+0xc>)
    112a:	4798      	blx	r3
}
    112c:	bd10      	pop	{r4, pc}
    112e:	46c0      	nop			; (mov r8, r8)
    1130:	00001041 	.word	0x00001041

00001134 <dac_is_syncing>:
		struct dac_module *const dev_inst)
{
	/* Sanity check arguments */
	Assert(dev_inst);

	Dac *const dac_module = dev_inst->hw;
    1134:	6803      	ldr	r3, [r0, #0]

#if (SAMC21)
	if (dac_module->SYNCBUSY.reg) {
#else
	if (dac_module->STATUS.reg & DAC_STATUS_SYNCBUSY) {
    1136:	79db      	ldrb	r3, [r3, #7]
    1138:	b25b      	sxtb	r3, r3
    113a:	2b00      	cmp	r3, #0
    113c:	db01      	blt.n	1142 <dac_is_syncing+0xe>
#endif
		return true;
	}

	return false;
    113e:	2000      	movs	r0, #0
}
    1140:	4770      	bx	lr
		return true;
    1142:	2001      	movs	r0, #1
    1144:	e7fc      	b.n	1140 <dac_is_syncing+0xc>
	...

00001148 <_dac_set_config>:
{
    1148:	b570      	push	{r4, r5, r6, lr}
    114a:	0004      	movs	r4, r0
	Dac *const dac_module = module_inst->hw;
    114c:	6806      	ldr	r6, [r0, #0]
	module_inst->output = config->output;
    114e:	784b      	ldrb	r3, [r1, #1]
    1150:	7103      	strb	r3, [r0, #4]
	module_inst->start_on_event = false;
    1152:	2300      	movs	r3, #0
    1154:	7183      	strb	r3, [r0, #6]
	if (config->run_in_standby) {
    1156:	798b      	ldrb	r3, [r1, #6]
    1158:	2b00      	cmp	r3, #0
    115a:	d000      	beq.n	115e <_dac_set_config+0x16>
		new_ctrla |= DAC_CTRLA_RUNSTDBY;
    115c:	2304      	movs	r3, #4
	new_ctrlb |= config->reference;
    115e:	780a      	ldrb	r2, [r1, #0]
    1160:	0015      	movs	r5, r2
	if (config->left_adjust) {
    1162:	7888      	ldrb	r0, [r1, #2]
    1164:	2800      	cmp	r0, #0
    1166:	d002      	beq.n	116e <_dac_set_config+0x26>
		new_ctrlb |= DAC_CTRLB_LEFTADJ;
    1168:	2504      	movs	r5, #4
    116a:	4315      	orrs	r5, r2
    116c:	b2ed      	uxtb	r5, r5
	if (config->databuf_protection_bypass) {
    116e:	790a      	ldrb	r2, [r1, #4]
    1170:	2a00      	cmp	r2, #0
    1172:	d001      	beq.n	1178 <_dac_set_config+0x30>
		new_ctrlb |= DAC_CTRLB_BDWP;
    1174:	2210      	movs	r2, #16
    1176:	4315      	orrs	r5, r2
	if (config->voltage_pump_disable) {
    1178:	794a      	ldrb	r2, [r1, #5]
    117a:	2a00      	cmp	r2, #0
    117c:	d001      	beq.n	1182 <_dac_set_config+0x3a>
		new_ctrlb |= DAC_CTRLB_VPD;
    117e:	2208      	movs	r2, #8
    1180:	4315      	orrs	r5, r2
	dac_module->CTRLA.reg = new_ctrla;
    1182:	b2db      	uxtb	r3, r3
    1184:	7033      	strb	r3, [r6, #0]
	while (dac_is_syncing(module_inst)) {
    1186:	0020      	movs	r0, r4
    1188:	4b03      	ldr	r3, [pc, #12]	; (1198 <_dac_set_config+0x50>)
    118a:	4798      	blx	r3
    118c:	2800      	cmp	r0, #0
    118e:	d1fa      	bne.n	1186 <_dac_set_config+0x3e>
	dac_module->CTRLB.reg = new_ctrlb;
    1190:	b2ed      	uxtb	r5, r5
    1192:	7075      	strb	r5, [r6, #1]
}
    1194:	bd70      	pop	{r4, r5, r6, pc}
    1196:	46c0      	nop			; (mov r8, r8)
    1198:	00001135 	.word	0x00001135

0000119c <dac_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->reference      = DAC_REFERENCE_INT1V;
    119c:	2300      	movs	r3, #0
    119e:	7003      	strb	r3, [r0, #0]
	config->output         = DAC_OUTPUT_EXTERNAL;
    11a0:	2201      	movs	r2, #1
    11a2:	7042      	strb	r2, [r0, #1]
	config->left_adjust    = false;
    11a4:	7083      	strb	r3, [r0, #2]
#ifdef FEATURE_DAC_DATABUF_WRITE_PROTECTION
	config->databuf_protection_bypass = false;
    11a6:	7103      	strb	r3, [r0, #4]
#endif
	config->voltage_pump_disable = false;
    11a8:	7143      	strb	r3, [r0, #5]
	config->clock_source   = GCLK_GENERATOR_0;
    11aa:	70c3      	strb	r3, [r0, #3]
	config->run_in_standby = false;
    11ac:	7183      	strb	r3, [r0, #6]
#if (SAMC21)
	config->dither_mode    = false;
#endif
}
    11ae:	4770      	bx	lr

000011b0 <dac_init>:
 */
enum status_code dac_init(
		struct dac_module *const module_inst,
		Dac *const module,
		struct dac_config *const config)
{
    11b0:	b530      	push	{r4, r5, lr}
    11b2:	b083      	sub	sp, #12
    11b4:	0005      	movs	r5, r0
    11b6:	0014      	movs	r4, r2
	Assert(module_inst);
	Assert(module);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = module;
    11b8:	6001      	str	r1, [r0, #0]
    11ba:	4a1d      	ldr	r2, [pc, #116]	; (1230 <dac_init+0x80>)
    11bc:	6a10      	ldr	r0, [r2, #32]
    11be:	2380      	movs	r3, #128	; 0x80
    11c0:	02db      	lsls	r3, r3, #11
    11c2:	4303      	orrs	r3, r0
    11c4:	6213      	str	r3, [r2, #32]
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_DAC);
#endif

	/* Check if module is enabled. */
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
    11c6:	780b      	ldrb	r3, [r1, #0]
    11c8:	079b      	lsls	r3, r3, #30
    11ca:	d502      	bpl.n	11d2 <dac_init+0x22>
		return STATUS_ERR_DENIED;
    11cc:	201c      	movs	r0, #28

	_dac_instances[0] = module_inst;
#endif

	return STATUS_OK;
}
    11ce:	b003      	add	sp, #12
    11d0:	bd30      	pop	{r4, r5, pc}
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
    11d2:	780b      	ldrb	r3, [r1, #0]
    11d4:	07db      	lsls	r3, r3, #31
    11d6:	d501      	bpl.n	11dc <dac_init+0x2c>
		return STATUS_BUSY;
    11d8:	2005      	movs	r0, #5
    11da:	e7f8      	b.n	11ce <dac_init+0x1e>
	gclk_chan_conf.source_generator = config->clock_source;
    11dc:	78e3      	ldrb	r3, [r4, #3]
    11de:	a901      	add	r1, sp, #4
    11e0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(DAC_GCLK_ID, &gclk_chan_conf);
    11e2:	2021      	movs	r0, #33	; 0x21
    11e4:	4b13      	ldr	r3, [pc, #76]	; (1234 <dac_init+0x84>)
    11e6:	4798      	blx	r3
	system_gclk_chan_enable(DAC_GCLK_ID);
    11e8:	2021      	movs	r0, #33	; 0x21
    11ea:	4b13      	ldr	r3, [pc, #76]	; (1238 <dac_init+0x88>)
    11ec:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    11ee:	2300      	movs	r3, #0
    11f0:	466a      	mov	r2, sp
    11f2:	7053      	strb	r3, [r2, #1]
	config->powersave    = false;
    11f4:	70d3      	strb	r3, [r2, #3]
	pin_conf.mux_position = MUX_PA02B_DAC_VOUT;
    11f6:	2201      	movs	r2, #1
    11f8:	4669      	mov	r1, sp
    11fa:	700a      	strb	r2, [r1, #0]
	pin_conf.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    11fc:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(PIN_PA02B_DAC_VOUT, &pin_conf);
    11fe:	2002      	movs	r0, #2
    1200:	4b0e      	ldr	r3, [pc, #56]	; (123c <dac_init+0x8c>)
    1202:	4798      	blx	r3
	_dac_set_config(module_inst, config);
    1204:	0021      	movs	r1, r4
    1206:	0028      	movs	r0, r5
    1208:	4b0d      	ldr	r3, [pc, #52]	; (1240 <dac_init+0x90>)
    120a:	4798      	blx	r3
	module_inst->reference = config->reference;
    120c:	7823      	ldrb	r3, [r4, #0]
    120e:	716b      	strb	r3, [r5, #5]
	for (uint8_t i = 0; i < DAC_CALLBACK_N; i++) {
    1210:	2300      	movs	r3, #0
    1212:	e006      	b.n	1222 <dac_init+0x72>
		module_inst->callback[i] = NULL;
    1214:	1d1a      	adds	r2, r3, #4
    1216:	0092      	lsls	r2, r2, #2
    1218:	18aa      	adds	r2, r5, r2
    121a:	2100      	movs	r1, #0
    121c:	6051      	str	r1, [r2, #4]
	for (uint8_t i = 0; i < DAC_CALLBACK_N; i++) {
    121e:	3301      	adds	r3, #1
    1220:	b2db      	uxtb	r3, r3
    1222:	2b02      	cmp	r3, #2
    1224:	d9f6      	bls.n	1214 <dac_init+0x64>
	_dac_instances[0] = module_inst;
    1226:	4b07      	ldr	r3, [pc, #28]	; (1244 <dac_init+0x94>)
    1228:	601d      	str	r5, [r3, #0]
	return STATUS_OK;
    122a:	2000      	movs	r0, #0
    122c:	e7cf      	b.n	11ce <dac_init+0x1e>
    122e:	46c0      	nop			; (mov r8, r8)
    1230:	40000400 	.word	0x40000400
    1234:	00008fa1 	.word	0x00008fa1
    1238:	00008f19 	.word	0x00008f19
    123c:	00009085 	.word	0x00009085
    1240:	00001149 	.word	0x00001149
    1244:	20001174 	.word	0x20001174

00001248 <dac_enable>:
 * \param[in] module_inst  Pointer to the DAC software instance struct
 *
 */
void dac_enable(
		struct dac_module *const module_inst)
{
    1248:	b570      	push	{r4, r5, r6, lr}
    124a:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
    124c:	6805      	ldr	r5, [r0, #0]

	/* Enable selected output */
	dac_module->CTRLB.reg |= module_inst->output;
    124e:	786b      	ldrb	r3, [r5, #1]
    1250:	7902      	ldrb	r2, [r0, #4]
    1252:	4313      	orrs	r3, r2
    1254:	706b      	strb	r3, [r5, #1]

	while (dac_is_syncing(module_inst)) {
    1256:	0020      	movs	r0, r4
    1258:	4b08      	ldr	r3, [pc, #32]	; (127c <dac_enable+0x34>)
    125a:	4798      	blx	r3
    125c:	2800      	cmp	r0, #0
    125e:	d1fa      	bne.n	1256 <dac_enable+0xe>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	dac_module->CTRLA.reg |= DAC_CTRLA_ENABLE;
    1260:	782b      	ldrb	r3, [r5, #0]
    1262:	2202      	movs	r2, #2
    1264:	4313      	orrs	r3, r2
    1266:	b2db      	uxtb	r3, r3
    1268:	702b      	strb	r3, [r5, #0]

	/* Enable internal bandgap reference if selected in the configuration */
	if (module_inst->reference == DAC_REFERENCE_INT1V) {
    126a:	7963      	ldrb	r3, [r4, #5]
    126c:	2b00      	cmp	r3, #0
    126e:	d104      	bne.n	127a <dac_enable+0x32>
    1270:	4a03      	ldr	r2, [pc, #12]	; (1280 <dac_enable+0x38>)
    1272:	6c13      	ldr	r3, [r2, #64]	; 0x40
    1274:	2104      	movs	r1, #4
    1276:	430b      	orrs	r3, r1
    1278:	6413      	str	r3, [r2, #64]	; 0x40
#else
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#endif
}
    127a:	bd70      	pop	{r4, r5, r6, pc}
    127c:	00001135 	.word	0x00001135
    1280:	40000800 	.word	0x40000800

00001284 <dac_chan_enable_output_buffer>:
	Assert(module_inst->hw);

	/* No channel support yet */
	UNUSED(channel);

	Dac *const dac_module = module_inst->hw;
    1284:	6802      	ldr	r2, [r0, #0]

	/* Enable output buffer */
	dac_module->CTRLB.reg |= DAC_OUTPUT_EXTERNAL;
    1286:	7853      	ldrb	r3, [r2, #1]
    1288:	2101      	movs	r1, #1
    128a:	430b      	orrs	r3, r1
    128c:	b2db      	uxtb	r3, r3
    128e:	7053      	strb	r3, [r2, #1]
}
    1290:	4770      	bx	lr
	...

00001294 <dac_chan_write>:
 */
enum status_code dac_chan_write(
		struct dac_module *const module_inst,
		enum dac_channel channel,
		const uint16_t data)
{
    1294:	b570      	push	{r4, r5, r6, lr}
    1296:	0004      	movs	r4, r0
    1298:	0016      	movs	r6, r2
	Assert(module_inst->hw);

	/* No channel support yet */
	UNUSED(channel);

	Dac *const dac_module = module_inst->hw;
    129a:	6805      	ldr	r5, [r0, #0]

	/* Wait until the synchronization is complete */
	while (dac_is_syncing(module_inst)) {
    129c:	0020      	movs	r0, r4
    129e:	4b06      	ldr	r3, [pc, #24]	; (12b8 <dac_chan_write+0x24>)
    12a0:	4798      	blx	r3
    12a2:	2800      	cmp	r0, #0
    12a4:	d1fa      	bne.n	129c <dac_chan_write+0x8>
	};

	if (module_inst->start_on_event) {
    12a6:	79a3      	ldrb	r3, [r4, #6]
    12a8:	2b00      	cmp	r3, #0
    12aa:	d102      	bne.n	12b2 <dac_chan_write+0x1e>
		/* Write the new value to the buffered DAC data register */
		dac_module->DATABUF.reg = data;
	} else {
		/* Write the new value to the DAC data register */
		dac_module->DATA.reg = data;
    12ac:	812e      	strh	r6, [r5, #8]
	}

	return STATUS_OK;
}
    12ae:	2000      	movs	r0, #0
    12b0:	bd70      	pop	{r4, r5, r6, pc}
		dac_module->DATABUF.reg = data;
    12b2:	81ae      	strh	r6, [r5, #12]
    12b4:	e7fb      	b.n	12ae <dac_chan_write+0x1a>
    12b6:	46c0      	nop			; (mov r8, r8)
    12b8:	00001135 	.word	0x00001135

000012bc <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
    12bc:	b570      	push	{r4, r5, r6, lr}
	struct dac_module *module = _dac_instances[instance];
    12be:	0080      	lsls	r0, r0, #2
    12c0:	4b27      	ldr	r3, [pc, #156]	; (1360 <_dac_interrupt_handler+0xa4>)
    12c2:	58c4      	ldr	r4, [r0, r3]
	Dac *const dac_hw = module->hw;
    12c4:	6825      	ldr	r5, [r4, #0]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
    12c6:	79ab      	ldrb	r3, [r5, #6]
    12c8:	07db      	lsls	r3, r3, #31
    12ca:	d507      	bpl.n	12dc <_dac_interrupt_handler+0x20>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
    12cc:	2301      	movs	r3, #1
    12ce:	71ab      	strb	r3, [r5, #6]

		if ((module->callback) &&
    12d0:	0023      	movs	r3, r4
    12d2:	3314      	adds	r3, #20
    12d4:	d002      	beq.n	12dc <_dac_interrupt_handler+0x20>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
    12d6:	7c63      	ldrb	r3, [r4, #17]
		if ((module->callback) &&
    12d8:	2b00      	cmp	r3, #0
    12da:	d134      	bne.n	1346 <_dac_interrupt_handler+0x8a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
    12dc:	79ab      	ldrb	r3, [r5, #6]
    12de:	079b      	lsls	r3, r3, #30
    12e0:	d530      	bpl.n	1344 <_dac_interrupt_handler+0x88>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    12e2:	2302      	movs	r3, #2
    12e4:	71ab      	strb	r3, [r5, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
    12e6:	89a3      	ldrh	r3, [r4, #12]
    12e8:	b29b      	uxth	r3, r3
    12ea:	2b00      	cmp	r3, #0
    12ec:	d024      	beq.n	1338 <_dac_interrupt_handler+0x7c>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
    12ee:	89e3      	ldrh	r3, [r4, #14]
    12f0:	b29b      	uxth	r3, r3
    12f2:	1c5a      	adds	r2, r3, #1
    12f4:	b292      	uxth	r2, r2
    12f6:	81e2      	strh	r2, [r4, #14]
    12f8:	005b      	lsls	r3, r3, #1
    12fa:	68a2      	ldr	r2, [r4, #8]
    12fc:	4694      	mov	ip, r2
    12fe:	4463      	add	r3, ip
    1300:	881b      	ldrh	r3, [r3, #0]
    1302:	b29b      	uxth	r3, r3
			dac_hw->DATABUF.reg =
    1304:	81ab      	strh	r3, [r5, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
    1306:	89a3      	ldrh	r3, [r4, #12]
    1308:	3b01      	subs	r3, #1
    130a:	b29b      	uxth	r3, r3
    130c:	81a3      	strh	r3, [r4, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
    130e:	89a3      	ldrh	r3, [r4, #12]
    1310:	b29b      	uxth	r3, r3
    1312:	2b00      	cmp	r3, #0
    1314:	d110      	bne.n	1338 <_dac_interrupt_handler+0x7c>
				module->job_status = STATUS_OK;
    1316:	2200      	movs	r2, #0
    1318:	3320      	adds	r3, #32
    131a:	54e2      	strb	r2, [r4, r3]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
    131c:	3b1e      	subs	r3, #30
    131e:	712b      	strb	r3, [r5, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    1320:	71ab      	strb	r3, [r5, #6]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1322:	2180      	movs	r1, #128	; 0x80
    1324:	0489      	lsls	r1, r1, #18
    1326:	337e      	adds	r3, #126	; 0x7e
    1328:	4a0e      	ldr	r2, [pc, #56]	; (1364 <_dac_interrupt_handler+0xa8>)
    132a:	50d1      	str	r1, [r2, r3]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);

				if ((module->callback) &&
    132c:	0023      	movs	r3, r4
    132e:	3314      	adds	r3, #20
    1330:	d002      	beq.n	1338 <_dac_interrupt_handler+0x7c>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
    1332:	7ca3      	ldrb	r3, [r4, #18]
				if ((module->callback) &&
    1334:	2b00      	cmp	r3, #0
    1336:	d10a      	bne.n	134e <_dac_interrupt_handler+0x92>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
				}
			}
		}

		if ((module->callback) &&
    1338:	0023      	movs	r3, r4
    133a:	3314      	adds	r3, #20
    133c:	d002      	beq.n	1344 <_dac_interrupt_handler+0x88>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
    133e:	7c23      	ldrb	r3, [r4, #16]
		if ((module->callback) &&
    1340:	2b00      	cmp	r3, #0
    1342:	d108      	bne.n	1356 <_dac_interrupt_handler+0x9a>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
		}
	}
}
    1344:	bd70      	pop	{r4, r5, r6, pc}
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
    1346:	2000      	movs	r0, #0
    1348:	69a3      	ldr	r3, [r4, #24]
    134a:	4798      	blx	r3
    134c:	e7c6      	b.n	12dc <_dac_interrupt_handler+0x20>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
    134e:	2000      	movs	r0, #0
    1350:	69e3      	ldr	r3, [r4, #28]
    1352:	4798      	blx	r3
    1354:	e7f0      	b.n	1338 <_dac_interrupt_handler+0x7c>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
    1356:	6963      	ldr	r3, [r4, #20]
    1358:	2000      	movs	r0, #0
    135a:	4798      	blx	r3
}
    135c:	e7f2      	b.n	1344 <_dac_interrupt_handler+0x88>
    135e:	46c0      	nop			; (mov r8, r8)
    1360:	20001174 	.word	0x20001174
    1364:	e000e100 	.word	0xe000e100

00001368 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
    1368:	b510      	push	{r4, lr}
	_dac_interrupt_handler(0);
    136a:	2000      	movs	r0, #0
    136c:	4b01      	ldr	r3, [pc, #4]	; (1374 <DAC_Handler+0xc>)
    136e:	4798      	blx	r3
}
    1370:	bd10      	pop	{r4, pc}
    1372:	46c0      	nop			; (mov r8, r8)
    1374:	000012bd 	.word	0x000012bd

00001378 <_dma_find_first_free_channel_and_allocate>:
 * \return Status of channel allocation.
 * \retval DMA_INVALID_CHANNEL  No channel available
 * \retval count          Allocated channel for the DMA resource
 */
static uint8_t _dma_find_first_free_channel_and_allocate(void)
{
    1378:	b570      	push	{r4, r5, r6, lr}
	cpu_irq_enter_critical();
    137a:	4b10      	ldr	r3, [pc, #64]	; (13bc <_dma_find_first_free_channel_and_allocate+0x44>)
    137c:	4798      	blx	r3
	uint32_t tmp;
	bool allocated = false;

	system_interrupt_enter_critical_section();

	tmp = _dma_inst.allocated_channels;
    137e:	4b10      	ldr	r3, [pc, #64]	; (13c0 <_dma_find_first_free_channel_and_allocate+0x48>)
    1380:	685b      	ldr	r3, [r3, #4]

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
    1382:	2400      	movs	r4, #0
    1384:	2c04      	cmp	r4, #4
    1386:	d810      	bhi.n	13aa <_dma_find_first_free_channel_and_allocate+0x32>
		if (!(tmp & 0x00000001)) {
    1388:	07da      	lsls	r2, r3, #31
    138a:	d503      	bpl.n	1394 <_dma_find_first_free_channel_and_allocate+0x1c>
			allocated = true;

			break;
		}

		tmp = tmp >> 1;
    138c:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
    138e:	3401      	adds	r4, #1
    1390:	b2e4      	uxtb	r4, r4
    1392:	e7f7      	b.n	1384 <_dma_find_first_free_channel_and_allocate+0xc>
			_dma_inst.allocated_channels |= 1 << count;
    1394:	4b0a      	ldr	r3, [pc, #40]	; (13c0 <_dma_find_first_free_channel_and_allocate+0x48>)
    1396:	685a      	ldr	r2, [r3, #4]
    1398:	2101      	movs	r1, #1
    139a:	40a1      	lsls	r1, r4
    139c:	430a      	orrs	r2, r1
    139e:	605a      	str	r2, [r3, #4]
			_dma_inst.free_channels--;
    13a0:	7a1a      	ldrb	r2, [r3, #8]
    13a2:	3a01      	subs	r2, #1
    13a4:	721a      	strb	r2, [r3, #8]
			allocated = true;
    13a6:	2501      	movs	r5, #1
			break;
    13a8:	e000      	b.n	13ac <_dma_find_first_free_channel_and_allocate+0x34>
	bool allocated = false;
    13aa:	2500      	movs	r5, #0
	cpu_irq_leave_critical();
    13ac:	4b05      	ldr	r3, [pc, #20]	; (13c4 <_dma_find_first_free_channel_and_allocate+0x4c>)
    13ae:	4798      	blx	r3
	}

	system_interrupt_leave_critical_section();

	if (!allocated) {
    13b0:	2d00      	cmp	r5, #0
    13b2:	d100      	bne.n	13b6 <_dma_find_first_free_channel_and_allocate+0x3e>
		return DMA_INVALID_CHANNEL;
    13b4:	24ff      	movs	r4, #255	; 0xff
	} else {
		return count;
	}
}
    13b6:	0020      	movs	r0, r4
    13b8:	bd70      	pop	{r4, r5, r6, pc}
    13ba:	46c0      	nop			; (mov r8, r8)
    13bc:	000087ed 	.word	0x000087ed
    13c0:	2000000c 	.word	0x2000000c
    13c4:	0000882d 	.word	0x0000882d

000013c8 <_dma_set_config>:
 * \param[out] resource_config Configurations of the DMA resource
 *
 */
static void _dma_set_config(struct dma_resource *resource,
		struct dma_resource_config *resource_config)
{
    13c8:	b570      	push	{r4, r5, r6, lr}
    13ca:	0005      	movs	r5, r0
    13cc:	000c      	movs	r4, r1
	cpu_irq_enter_critical();
    13ce:	4b18      	ldr	r3, [pc, #96]	; (1430 <_dma_set_config+0x68>)
    13d0:	4798      	blx	r3
	Assert(resource_config);
	uint32_t temp_CHCTRLB_reg;
	system_interrupt_enter_critical_section();

	/** Select the DMA channel and clear software trigger */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    13d2:	782b      	ldrb	r3, [r5, #0]
    13d4:	220f      	movs	r2, #15
    13d6:	401a      	ands	r2, r3
    13d8:	4b16      	ldr	r3, [pc, #88]	; (1434 <_dma_set_config+0x6c>)
    13da:	213f      	movs	r1, #63	; 0x3f
    13dc:	545a      	strb	r2, [r3, r1]
	DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << resource->channel_id));
    13de:	691a      	ldr	r2, [r3, #16]
    13e0:	7828      	ldrb	r0, [r5, #0]
    13e2:	393e      	subs	r1, #62	; 0x3e
    13e4:	4081      	lsls	r1, r0
    13e6:	438a      	bics	r2, r1
    13e8:	611a      	str	r2, [r3, #16]

	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
    13ea:	7822      	ldrb	r2, [r4, #0]
    13ec:	0152      	lsls	r2, r2, #5
    13ee:	2360      	movs	r3, #96	; 0x60
    13f0:	4013      	ands	r3, r2
			DMAC_CHCTRLB_TRIGSRC(resource_config->peripheral_trigger) | \
    13f2:	7862      	ldrb	r2, [r4, #1]
    13f4:	0212      	lsls	r2, r2, #8
    13f6:	21fc      	movs	r1, #252	; 0xfc
    13f8:	0189      	lsls	r1, r1, #6
    13fa:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
    13fc:	4313      	orrs	r3, r2
			DMAC_CHCTRLB_TRIGACT(resource_config->trigger_action);
    13fe:	78a2      	ldrb	r2, [r4, #2]
    1400:	0592      	lsls	r2, r2, #22
    1402:	21c0      	movs	r1, #192	; 0xc0
    1404:	0409      	lsls	r1, r1, #16
    1406:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
    1408:	4313      	orrs	r3, r2


	if(resource_config->event_config.input_action){
    140a:	78e2      	ldrb	r2, [r4, #3]
    140c:	2a00      	cmp	r2, #0
    140e:	d004      	beq.n	141a <_dma_set_config+0x52>
	temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVIE | DMAC_CHCTRLB_EVACT(
    1410:	2107      	movs	r1, #7
    1412:	400a      	ands	r2, r1
    1414:	4313      	orrs	r3, r2
    1416:	2208      	movs	r2, #8
    1418:	4313      	orrs	r3, r2
				resource_config->event_config.input_action);
	}

	/** Enable event output, the event output selection is configured in
	 * each transfer descriptor  */
	if (resource_config->event_config.event_output_enable) {
    141a:	7922      	ldrb	r2, [r4, #4]
    141c:	2a00      	cmp	r2, #0
    141e:	d001      	beq.n	1424 <_dma_set_config+0x5c>
		temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVOE;
    1420:	2210      	movs	r2, #16
    1422:	4313      	orrs	r3, r2
	}

	/* Write config to CTRLB register */
	DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
    1424:	4a03      	ldr	r2, [pc, #12]	; (1434 <_dma_set_config+0x6c>)
    1426:	6453      	str	r3, [r2, #68]	; 0x44
	cpu_irq_leave_critical();
    1428:	4b03      	ldr	r3, [pc, #12]	; (1438 <_dma_set_config+0x70>)
    142a:	4798      	blx	r3



	system_interrupt_leave_critical_section();
}
    142c:	bd70      	pop	{r4, r5, r6, pc}
    142e:	46c0      	nop			; (mov r8, r8)
    1430:	000087ed 	.word	0x000087ed
    1434:	41004800 	.word	0x41004800
    1438:	0000882d 	.word	0x0000882d

0000143c <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
    143c:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    143e:	4b26      	ldr	r3, [pc, #152]	; (14d8 <DMAC_Handler+0x9c>)
    1440:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    1442:	4926      	ldr	r1, [pc, #152]	; (14dc <DMAC_Handler+0xa0>)
    1444:	8c0b      	ldrh	r3, [r1, #32]
    1446:	220f      	movs	r2, #15
    1448:	4013      	ands	r3, r2

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
    144a:	009b      	lsls	r3, r3, #2
    144c:	4824      	ldr	r0, [pc, #144]	; (14e0 <DMAC_Handler+0xa4>)
    144e:	5818      	ldr	r0, [r3, r0]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    1450:	7803      	ldrb	r3, [r0, #0]
    1452:	401a      	ands	r2, r3
    1454:	233f      	movs	r3, #63	; 0x3f
    1456:	54ca      	strb	r2, [r1, r3]
	isr = DMAC->CHINTFLAG.reg;
    1458:	330f      	adds	r3, #15
    145a:	5cca      	ldrb	r2, [r1, r3]
    145c:	b2d2      	uxtb	r2, r2

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    145e:	7803      	ldrb	r3, [r0, #0]
    1460:	011b      	lsls	r3, r3, #4
    1462:	4920      	ldr	r1, [pc, #128]	; (14e4 <DMAC_Handler+0xa8>)
    1464:	18c9      	adds	r1, r1, r3
    1466:	8849      	ldrh	r1, [r1, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    1468:	4c1f      	ldr	r4, [pc, #124]	; (14e8 <DMAC_Handler+0xac>)
    146a:	18e3      	adds	r3, r4, r3
    146c:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
    146e:	1acb      	subs	r3, r1, r3
    1470:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
    1472:	07d3      	lsls	r3, r2, #31
    1474:	d50f      	bpl.n	1496 <DMAC_Handler+0x5a>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
    1476:	2101      	movs	r1, #1
    1478:	234e      	movs	r3, #78	; 0x4e
    147a:	4a18      	ldr	r2, [pc, #96]	; (14dc <DMAC_Handler+0xa0>)
    147c:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
    147e:	3b3e      	subs	r3, #62	; 0x3e
    1480:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    1482:	7c03      	ldrb	r3, [r0, #16]
    1484:	07db      	lsls	r3, r3, #31
    1486:	d503      	bpl.n	1490 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
    1488:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    148a:	2b00      	cmp	r3, #0
    148c:	d000      	beq.n	1490 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
    148e:	4798      	blx	r3
	cpu_irq_leave_critical();
    1490:	4b16      	ldr	r3, [pc, #88]	; (14ec <DMAC_Handler+0xb0>)
    1492:	4798      	blx	r3
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
		}
	}

	system_interrupt_leave_critical_section();
}
    1494:	bd10      	pop	{r4, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
    1496:	0793      	lsls	r3, r2, #30
    1498:	d50d      	bpl.n	14b6 <DMAC_Handler+0x7a>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
    149a:	2102      	movs	r1, #2
    149c:	234e      	movs	r3, #78	; 0x4e
    149e:	4a0f      	ldr	r2, [pc, #60]	; (14dc <DMAC_Handler+0xa0>)
    14a0:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_OK;
    14a2:	2300      	movs	r3, #0
    14a4:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    14a6:	7c03      	ldrb	r3, [r0, #16]
    14a8:	079b      	lsls	r3, r3, #30
    14aa:	d5f1      	bpl.n	1490 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
    14ac:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    14ae:	2b00      	cmp	r3, #0
    14b0:	d0ee      	beq.n	1490 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
    14b2:	4798      	blx	r3
    14b4:	e7ec      	b.n	1490 <DMAC_Handler+0x54>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
    14b6:	0753      	lsls	r3, r2, #29
    14b8:	d5ea      	bpl.n	1490 <DMAC_Handler+0x54>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
    14ba:	2104      	movs	r1, #4
    14bc:	234e      	movs	r3, #78	; 0x4e
    14be:	4a07      	ldr	r2, [pc, #28]	; (14dc <DMAC_Handler+0xa0>)
    14c0:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_SUSPEND;
    14c2:	3b48      	subs	r3, #72	; 0x48
    14c4:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    14c6:	7c03      	ldrb	r3, [r0, #16]
    14c8:	075b      	lsls	r3, r3, #29
    14ca:	d5e1      	bpl.n	1490 <DMAC_Handler+0x54>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
    14cc:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    14ce:	2b00      	cmp	r3, #0
    14d0:	d0de      	beq.n	1490 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    14d2:	4798      	blx	r3
    14d4:	e7dc      	b.n	1490 <DMAC_Handler+0x54>
    14d6:	46c0      	nop			; (mov r8, r8)
    14d8:	000087ed 	.word	0x000087ed
    14dc:	41004800 	.word	0x41004800
    14e0:	20000dd4 	.word	0x20000dd4
    14e4:	20001180 	.word	0x20001180
    14e8:	20000df0 	.word	0x20000df0
    14ec:	0000882d 	.word	0x0000882d

000014f0 <dma_get_config_defaults>:
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
	Assert(config);
	/* Set as priority 0 */
	config->priority = DMA_PRIORITY_LEVEL_0;
    14f0:	2300      	movs	r3, #0
    14f2:	7003      	strb	r3, [r0, #0]
	/* Only software/event trigger */
	config->peripheral_trigger = 0;
    14f4:	7043      	strb	r3, [r0, #1]
	/* Transaction trigger */
	config->trigger_action = DMA_TRIGGER_ACTION_TRANSACTION;
    14f6:	2203      	movs	r2, #3
    14f8:	7082      	strb	r2, [r0, #2]

	/* Event configurations, no event input/output */
	config->event_config.input_action = DMA_EVENT_INPUT_NOACT;
    14fa:	70c3      	strb	r3, [r0, #3]
	config->event_config.event_output_enable = false;
    14fc:	7103      	strb	r3, [r0, #4]
#ifdef FEATURE_DMA_CHANNEL_STANDBY
	config->run_in_standby = false;
#endif
}
    14fe:	4770      	bx	lr

00001500 <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
    1500:	b570      	push	{r4, r5, r6, lr}
    1502:	0004      	movs	r4, r0
    1504:	000d      	movs	r5, r1
	cpu_irq_enter_critical();
    1506:	4b21      	ldr	r3, [pc, #132]	; (158c <dma_allocate+0x8c>)
    1508:	4798      	blx	r3

	Assert(resource);

	system_interrupt_enter_critical_section();

	if (!_dma_inst._dma_init) {
    150a:	4b21      	ldr	r3, [pc, #132]	; (1590 <dma_allocate+0x90>)
    150c:	781b      	ldrb	r3, [r3, #0]
    150e:	2b00      	cmp	r3, #0
    1510:	d118      	bne.n	1544 <dma_allocate+0x44>
	PM->AHBMASK.reg |= ahb_mask;
    1512:	4b20      	ldr	r3, [pc, #128]	; (1594 <dma_allocate+0x94>)
    1514:	695a      	ldr	r2, [r3, #20]
    1516:	2120      	movs	r1, #32
    1518:	430a      	orrs	r2, r1
    151a:	615a      	str	r2, [r3, #20]
			PM->APBBMASK.reg |= mask;
    151c:	69da      	ldr	r2, [r3, #28]
    151e:	3910      	subs	r1, #16
    1520:	430a      	orrs	r2, r1
    1522:	61da      	str	r2, [r3, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB,
				PM_APBBMASK_DMAC);
#endif

		/* Perform a software reset before enable DMA controller */
		DMAC->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    1524:	4b1c      	ldr	r3, [pc, #112]	; (1598 <dma_allocate+0x98>)
    1526:	881a      	ldrh	r2, [r3, #0]
    1528:	390e      	subs	r1, #14
    152a:	438a      	bics	r2, r1
    152c:	801a      	strh	r2, [r3, #0]
		DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    152e:	2201      	movs	r2, #1
    1530:	801a      	strh	r2, [r3, #0]

		/* Setup descriptor base address and write back section base
		 * address */
		DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
    1532:	4a1a      	ldr	r2, [pc, #104]	; (159c <dma_allocate+0x9c>)
    1534:	635a      	str	r2, [r3, #52]	; 0x34
		DMAC->WRBADDR.reg = (uint32_t)_write_back_section;
    1536:	4a1a      	ldr	r2, [pc, #104]	; (15a0 <dma_allocate+0xa0>)
    1538:	639a      	str	r2, [r3, #56]	; 0x38

		/* Enable all priority level at the same time */
		DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    153a:	4a1a      	ldr	r2, [pc, #104]	; (15a4 <dma_allocate+0xa4>)
    153c:	801a      	strh	r2, [r3, #0]

		_dma_inst._dma_init = true;
    153e:	4b14      	ldr	r3, [pc, #80]	; (1590 <dma_allocate+0x90>)
    1540:	2201      	movs	r2, #1
    1542:	701a      	strb	r2, [r3, #0]
	}

	/* Find the proper channel */
	new_channel = _dma_find_first_free_channel_and_allocate();
    1544:	4b18      	ldr	r3, [pc, #96]	; (15a8 <dma_allocate+0xa8>)
    1546:	4798      	blx	r3

	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
    1548:	28ff      	cmp	r0, #255	; 0xff
    154a:	d01a      	beq.n	1582 <dma_allocate+0x82>

		return STATUS_ERR_NOT_FOUND;
	}

	/* Set the channel */
	resource->channel_id = new_channel;
    154c:	7020      	strb	r0, [r4, #0]

	/** Perform a reset for the allocated channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    154e:	230f      	movs	r3, #15
    1550:	4018      	ands	r0, r3
    1552:	4b11      	ldr	r3, [pc, #68]	; (1598 <dma_allocate+0x98>)
    1554:	223f      	movs	r2, #63	; 0x3f
    1556:	5498      	strb	r0, [r3, r2]
	DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    1558:	3201      	adds	r2, #1
    155a:	5c99      	ldrb	r1, [r3, r2]
    155c:	2002      	movs	r0, #2
    155e:	4381      	bics	r1, r0
    1560:	5499      	strb	r1, [r3, r2]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    1562:	2101      	movs	r1, #1
    1564:	5499      	strb	r1, [r3, r2]
		DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_RUNSTDBY;
	}
#endif

	/** Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);
    1566:	0029      	movs	r1, r5
    1568:	0020      	movs	r0, r4
    156a:	4b10      	ldr	r3, [pc, #64]	; (15ac <dma_allocate+0xac>)
    156c:	4798      	blx	r3

	resource->descriptor = NULL;
    156e:	2300      	movs	r3, #0
    1570:	61a3      	str	r3, [r4, #24]

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
    1572:	7823      	ldrb	r3, [r4, #0]
    1574:	009b      	lsls	r3, r3, #2
    1576:	4a0e      	ldr	r2, [pc, #56]	; (15b0 <dma_allocate+0xb0>)
    1578:	509c      	str	r4, [r3, r2]
	cpu_irq_leave_critical();
    157a:	4b0e      	ldr	r3, [pc, #56]	; (15b4 <dma_allocate+0xb4>)
    157c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	return STATUS_OK;
    157e:	2000      	movs	r0, #0
}
    1580:	bd70      	pop	{r4, r5, r6, pc}
    1582:	4b0c      	ldr	r3, [pc, #48]	; (15b4 <dma_allocate+0xb4>)
    1584:	4798      	blx	r3
		return STATUS_ERR_NOT_FOUND;
    1586:	2014      	movs	r0, #20
    1588:	e7fa      	b.n	1580 <dma_allocate+0x80>
    158a:	46c0      	nop			; (mov r8, r8)
    158c:	000087ed 	.word	0x000087ed
    1590:	2000000c 	.word	0x2000000c
    1594:	40000400 	.word	0x40000400
    1598:	41004800 	.word	0x41004800
    159c:	20001180 	.word	0x20001180
    15a0:	20000df0 	.word	0x20000df0
    15a4:	00000f02 	.word	0x00000f02
    15a8:	00001379 	.word	0x00001379
    15ac:	000013c9 	.word	0x000013c9
    15b0:	20000dd4 	.word	0x20000dd4
    15b4:	0000882d 	.word	0x0000882d

000015b8 <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
    15b8:	b570      	push	{r4, r5, r6, lr}
    15ba:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    15bc:	4b1a      	ldr	r3, [pc, #104]	; (1628 <dma_start_transfer_job+0x70>)
    15be:	4798      	blx	r3
	Assert(resource->channel_id != DMA_INVALID_CHANNEL);

	system_interrupt_enter_critical_section();

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
    15c0:	7c63      	ldrb	r3, [r4, #17]
    15c2:	2b05      	cmp	r3, #5
    15c4:	d008      	beq.n	15d8 <dma_start_transfer_job+0x20>
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->BTCNT.reg == 0) {
    15c6:	69a3      	ldr	r3, [r4, #24]
    15c8:	885b      	ldrh	r3, [r3, #2]
    15ca:	b29b      	uxth	r3, r3
    15cc:	2b00      	cmp	r3, #0
    15ce:	d107      	bne.n	15e0 <dma_start_transfer_job+0x28>
	cpu_irq_leave_critical();
    15d0:	4b16      	ldr	r3, [pc, #88]	; (162c <dma_start_transfer_job+0x74>)
    15d2:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_ERR_INVALID_ARG;
    15d4:	2017      	movs	r0, #23
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;

	system_interrupt_leave_critical_section();

	return STATUS_OK;
}
    15d6:	bd70      	pop	{r4, r5, r6, pc}
    15d8:	4b14      	ldr	r3, [pc, #80]	; (162c <dma_start_transfer_job+0x74>)
    15da:	4798      	blx	r3
		return STATUS_BUSY;
    15dc:	2005      	movs	r0, #5
    15de:	e7fa      	b.n	15d6 <dma_start_transfer_job+0x1e>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    15e0:	2640      	movs	r6, #64	; 0x40
    15e2:	4b13      	ldr	r3, [pc, #76]	; (1630 <dma_start_transfer_job+0x78>)
    15e4:	601e      	str	r6, [r3, #0]
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    15e6:	7822      	ldrb	r2, [r4, #0]
    15e8:	230f      	movs	r3, #15
    15ea:	4013      	ands	r3, r2
    15ec:	4d11      	ldr	r5, [pc, #68]	; (1634 <dma_start_transfer_job+0x7c>)
    15ee:	223f      	movs	r2, #63	; 0x3f
    15f0:	54ab      	strb	r3, [r5, r2]
	DMAC->CHINTENSET.reg = (DMAC_CHINTENSET_MASK & g_chan_interrupt_flag[resource->channel_id]);
    15f2:	7823      	ldrb	r3, [r4, #0]
    15f4:	4a10      	ldr	r2, [pc, #64]	; (1638 <dma_start_transfer_job+0x80>)
    15f6:	5cd2      	ldrb	r2, [r2, r3]
    15f8:	2307      	movs	r3, #7
    15fa:	4013      	ands	r3, r2
    15fc:	224d      	movs	r2, #77	; 0x4d
    15fe:	54ab      	strb	r3, [r5, r2]
	resource->job_status = STATUS_BUSY;
    1600:	2305      	movs	r3, #5
    1602:	7463      	strb	r3, [r4, #17]
	memcpy(&descriptor_section[resource->channel_id], resource->descriptor,
    1604:	7820      	ldrb	r0, [r4, #0]
    1606:	0100      	lsls	r0, r0, #4
    1608:	4b0c      	ldr	r3, [pc, #48]	; (163c <dma_start_transfer_job+0x84>)
    160a:	18c0      	adds	r0, r0, r3
    160c:	69a1      	ldr	r1, [r4, #24]
    160e:	3a3d      	subs	r2, #61	; 0x3d
    1610:	4b0b      	ldr	r3, [pc, #44]	; (1640 <dma_start_transfer_job+0x88>)
    1612:	4798      	blx	r3
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    1614:	5dab      	ldrb	r3, [r5, r6]
    1616:	2202      	movs	r2, #2
    1618:	4313      	orrs	r3, r2
    161a:	b2db      	uxtb	r3, r3
    161c:	55ab      	strb	r3, [r5, r6]
	cpu_irq_leave_critical();
    161e:	4b03      	ldr	r3, [pc, #12]	; (162c <dma_start_transfer_job+0x74>)
    1620:	4798      	blx	r3
	return STATUS_OK;
    1622:	2000      	movs	r0, #0
    1624:	e7d7      	b.n	15d6 <dma_start_transfer_job+0x1e>
    1626:	46c0      	nop			; (mov r8, r8)
    1628:	000087ed 	.word	0x000087ed
    162c:	0000882d 	.word	0x0000882d
    1630:	e000e100 	.word	0xe000e100
    1634:	41004800 	.word	0x41004800
    1638:	20000e40 	.word	0x20000e40
    163c:	20001180 	.word	0x20001180
    1640:	0000c38d 	.word	0x0000c38d

00001644 <dma_abort_job>:
 *
 * \param[in,out] resource Pointer to the DMA resource
 *
 */
void dma_abort_job(struct dma_resource *resource)
{
    1644:	b510      	push	{r4, lr}
    1646:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1648:	4b0c      	ldr	r3, [pc, #48]	; (167c <dma_abort_job+0x38>)
    164a:	4798      	blx	r3
	Assert(resource);
	Assert(resource->channel_id != DMA_INVALID_CHANNEL);

	system_interrupt_enter_critical_section();

	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    164c:	7822      	ldrb	r2, [r4, #0]
    164e:	230f      	movs	r3, #15
    1650:	4013      	ands	r3, r2
    1652:	4a0b      	ldr	r2, [pc, #44]	; (1680 <dma_abort_job+0x3c>)
    1654:	213f      	movs	r1, #63	; 0x3f
    1656:	5453      	strb	r3, [r2, r1]
	DMAC->CHCTRLA.reg = 0;
    1658:	2100      	movs	r1, #0
    165a:	2340      	movs	r3, #64	; 0x40
    165c:	54d1      	strb	r1, [r2, r3]
	cpu_irq_leave_critical();
    165e:	4b09      	ldr	r3, [pc, #36]	; (1684 <dma_abort_job+0x40>)
    1660:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Get transferred size */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    1662:	7823      	ldrb	r3, [r4, #0]
    1664:	011b      	lsls	r3, r3, #4
    1666:	4a08      	ldr	r2, [pc, #32]	; (1688 <dma_abort_job+0x44>)
    1668:	18d2      	adds	r2, r2, r3
    166a:	8852      	ldrh	r2, [r2, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    166c:	4907      	ldr	r1, [pc, #28]	; (168c <dma_abort_job+0x48>)
    166e:	18cb      	adds	r3, r1, r3
    1670:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
    1672:	1ad3      	subs	r3, r2, r3
    1674:	6163      	str	r3, [r4, #20]

	resource->job_status = STATUS_ABORTED;
    1676:	2304      	movs	r3, #4
    1678:	7463      	strb	r3, [r4, #17]
}
    167a:	bd10      	pop	{r4, pc}
    167c:	000087ed 	.word	0x000087ed
    1680:	41004800 	.word	0x41004800
    1684:	0000882d 	.word	0x0000882d
    1688:	20001180 	.word	0x20001180
    168c:	20000df0 	.word	0x20000df0

00001690 <dma_resume_job>:
 *
 * \param[in] resource Pointer to the DMA resource
 *
 */
void dma_resume_job(struct dma_resource *resource)
{
    1690:	b570      	push	{r4, r5, r6, lr}
    1692:	0005      	movs	r5, r0

	Assert(resource);
	Assert(resource->channel_id != DMA_INVALID_CHANNEL);

	/* Get bitmap of the allocated DMA channel */
	bitmap_channel = (1 << resource->channel_id);
    1694:	7803      	ldrb	r3, [r0, #0]
    1696:	2401      	movs	r4, #1
    1698:	409c      	lsls	r4, r3

	/* Check if channel was suspended */
	if (resource->job_status != STATUS_SUSPEND) {
    169a:	7c43      	ldrb	r3, [r0, #17]
    169c:	2b06      	cmp	r3, #6
    169e:	d000      	beq.n	16a2 <dma_resume_job+0x12>
		resource->job_status = STATUS_BUSY;
	} else {
		/* Job resume timeout */
		resource->job_status = STATUS_ERR_TIMEOUT;
	}
}
    16a0:	bd70      	pop	{r4, r5, r6, pc}
	cpu_irq_enter_critical();
    16a2:	4b11      	ldr	r3, [pc, #68]	; (16e8 <dma_resume_job+0x58>)
    16a4:	4798      	blx	r3
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    16a6:	782b      	ldrb	r3, [r5, #0]
    16a8:	220f      	movs	r2, #15
    16aa:	401a      	ands	r2, r3
    16ac:	4b0f      	ldr	r3, [pc, #60]	; (16ec <dma_resume_job+0x5c>)
    16ae:	213f      	movs	r1, #63	; 0x3f
    16b0:	545a      	strb	r2, [r3, r1]
	DMAC->CHCTRLB.reg |= DMAC_CHCTRLB_CMD_RESUME;
    16b2:	6c59      	ldr	r1, [r3, #68]	; 0x44
    16b4:	2280      	movs	r2, #128	; 0x80
    16b6:	0492      	lsls	r2, r2, #18
    16b8:	430a      	orrs	r2, r1
    16ba:	645a      	str	r2, [r3, #68]	; 0x44
	cpu_irq_leave_critical();
    16bc:	4b0c      	ldr	r3, [pc, #48]	; (16f0 <dma_resume_job+0x60>)
    16be:	4798      	blx	r3
	for (count = 0; count < MAX_JOB_RESUME_COUNT; count++) {
    16c0:	2200      	movs	r2, #0
    16c2:	4b0c      	ldr	r3, [pc, #48]	; (16f4 <dma_resume_job+0x64>)
    16c4:	429a      	cmp	r2, r3
    16c6:	d806      	bhi.n	16d6 <dma_resume_job+0x46>
		if ((DMAC->BUSYCH.reg & bitmap_channel) == bitmap_channel) {
    16c8:	4b08      	ldr	r3, [pc, #32]	; (16ec <dma_resume_job+0x5c>)
    16ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16cc:	4023      	ands	r3, r4
    16ce:	429c      	cmp	r4, r3
    16d0:	d001      	beq.n	16d6 <dma_resume_job+0x46>
	for (count = 0; count < MAX_JOB_RESUME_COUNT; count++) {
    16d2:	3201      	adds	r2, #1
    16d4:	e7f5      	b.n	16c2 <dma_resume_job+0x32>
	if (count < MAX_JOB_RESUME_COUNT) {
    16d6:	4b07      	ldr	r3, [pc, #28]	; (16f4 <dma_resume_job+0x64>)
    16d8:	429a      	cmp	r2, r3
    16da:	d902      	bls.n	16e2 <dma_resume_job+0x52>
		resource->job_status = STATUS_ERR_TIMEOUT;
    16dc:	2312      	movs	r3, #18
    16de:	746b      	strb	r3, [r5, #17]
    16e0:	e7de      	b.n	16a0 <dma_resume_job+0x10>
		resource->job_status = STATUS_BUSY;
    16e2:	2305      	movs	r3, #5
    16e4:	746b      	strb	r3, [r5, #17]
    16e6:	e7db      	b.n	16a0 <dma_resume_job+0x10>
    16e8:	000087ed 	.word	0x000087ed
    16ec:	41004800 	.word	0x41004800
    16f0:	0000882d 	.word	0x0000882d
    16f4:	0000270f 	.word	0x0000270f

000016f8 <dma_descriptor_create>:
 * \param[in] config Pointer to the descriptor configuration structure
 *
 */
void dma_descriptor_create(DmacDescriptor* descriptor,
	struct dma_descriptor_config *config)
{
    16f8:	b570      	push	{r4, r5, r6, lr}
	/* Set block transfer control */
	descriptor->BTCTRL.bit.VALID = config->descriptor_valid;
    16fa:	780c      	ldrb	r4, [r1, #0]
    16fc:	8802      	ldrh	r2, [r0, #0]
    16fe:	2301      	movs	r3, #1
    1700:	401c      	ands	r4, r3
    1702:	2501      	movs	r5, #1
    1704:	43aa      	bics	r2, r5
    1706:	4322      	orrs	r2, r4
    1708:	8002      	strh	r2, [r0, #0]
	descriptor->BTCTRL.bit.EVOSEL = config->event_output_selection;
    170a:	784d      	ldrb	r5, [r1, #1]
    170c:	2203      	movs	r2, #3
    170e:	4015      	ands	r5, r2
    1710:	8804      	ldrh	r4, [r0, #0]
    1712:	006d      	lsls	r5, r5, #1
    1714:	2606      	movs	r6, #6
    1716:	43b4      	bics	r4, r6
    1718:	432c      	orrs	r4, r5
    171a:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BLOCKACT = config->block_action;
    171c:	788d      	ldrb	r5, [r1, #2]
    171e:	4015      	ands	r5, r2
    1720:	8804      	ldrh	r4, [r0, #0]
    1722:	00ed      	lsls	r5, r5, #3
    1724:	3612      	adds	r6, #18
    1726:	43b4      	bics	r4, r6
    1728:	432c      	orrs	r4, r5
    172a:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BEATSIZE = config->beat_size;
    172c:	78cd      	ldrb	r5, [r1, #3]
    172e:	8804      	ldrh	r4, [r0, #0]
    1730:	402a      	ands	r2, r5
    1732:	0212      	lsls	r2, r2, #8
    1734:	4d17      	ldr	r5, [pc, #92]	; (1794 <dma_descriptor_create+0x9c>)
    1736:	402c      	ands	r4, r5
    1738:	4322      	orrs	r2, r4
    173a:	8002      	strh	r2, [r0, #0]
	descriptor->BTCTRL.bit.SRCINC = config->src_increment_enable;
    173c:	790c      	ldrb	r4, [r1, #4]
    173e:	8802      	ldrh	r2, [r0, #0]
    1740:	401c      	ands	r4, r3
    1742:	02a4      	lsls	r4, r4, #10
    1744:	4d14      	ldr	r5, [pc, #80]	; (1798 <dma_descriptor_create+0xa0>)
    1746:	402a      	ands	r2, r5
    1748:	4322      	orrs	r2, r4
    174a:	8002      	strh	r2, [r0, #0]
	descriptor->BTCTRL.bit.DSTINC = config->dst_increment_enable;
    174c:	794c      	ldrb	r4, [r1, #5]
    174e:	8802      	ldrh	r2, [r0, #0]
    1750:	401c      	ands	r4, r3
    1752:	02e4      	lsls	r4, r4, #11
    1754:	4d11      	ldr	r5, [pc, #68]	; (179c <dma_descriptor_create+0xa4>)
    1756:	402a      	ands	r2, r5
    1758:	4322      	orrs	r2, r4
    175a:	8002      	strh	r2, [r0, #0]
	descriptor->BTCTRL.bit.STEPSEL = config->step_selection;
    175c:	798a      	ldrb	r2, [r1, #6]
    175e:	2401      	movs	r4, #1
    1760:	4014      	ands	r4, r2
    1762:	8802      	ldrh	r2, [r0, #0]
    1764:	4023      	ands	r3, r4
    1766:	031b      	lsls	r3, r3, #12
    1768:	4c0d      	ldr	r4, [pc, #52]	; (17a0 <dma_descriptor_create+0xa8>)
    176a:	4022      	ands	r2, r4
    176c:	4313      	orrs	r3, r2
    176e:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.STEPSIZE = config->step_size;
    1770:	79cb      	ldrb	r3, [r1, #7]
    1772:	2207      	movs	r2, #7
    1774:	401a      	ands	r2, r3
    1776:	8803      	ldrh	r3, [r0, #0]
    1778:	0352      	lsls	r2, r2, #13
    177a:	04db      	lsls	r3, r3, #19
    177c:	0cdb      	lsrs	r3, r3, #19
    177e:	4313      	orrs	r3, r2
    1780:	8003      	strh	r3, [r0, #0]

	/* Set transfer size, source address and destination address */
	descriptor->BTCNT.reg = config->block_transfer_count;
    1782:	890b      	ldrh	r3, [r1, #8]
    1784:	8043      	strh	r3, [r0, #2]
	descriptor->SRCADDR.reg = config->source_address;
    1786:	68cb      	ldr	r3, [r1, #12]
    1788:	6043      	str	r3, [r0, #4]
	descriptor->DSTADDR.reg = config->destination_address;
    178a:	690b      	ldr	r3, [r1, #16]
    178c:	6083      	str	r3, [r0, #8]

	/* Set next transfer descriptor address */
	descriptor->DESCADDR.reg = config->next_descriptor_address;
    178e:	694b      	ldr	r3, [r1, #20]
    1790:	60c3      	str	r3, [r0, #12]
}
    1792:	bd70      	pop	{r4, r5, r6, pc}
    1794:	fffffcff 	.word	0xfffffcff
    1798:	fffffbff 	.word	0xfffffbff
    179c:	fffff7ff 	.word	0xfffff7ff
    17a0:	ffffefff 	.word	0xffffefff

000017a4 <dma_add_descriptor>:
 * \retval STATUS_BUSY The DMA resource was busy and the descriptor is not added
 */
enum status_code dma_add_descriptor(struct dma_resource *resource,
		DmacDescriptor* descriptor)
{
	DmacDescriptor* desc = resource->descriptor;
    17a4:	6983      	ldr	r3, [r0, #24]

	if (resource->job_status == STATUS_BUSY) {
    17a6:	7c42      	ldrb	r2, [r0, #17]
    17a8:	2a05      	cmp	r2, #5
    17aa:	d00b      	beq.n	17c4 <dma_add_descriptor+0x20>
		return STATUS_BUSY;
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
    17ac:	2b00      	cmp	r3, #0
    17ae:	d103      	bne.n	17b8 <dma_add_descriptor+0x14>
		resource->descriptor = descriptor;
    17b0:	6181      	str	r1, [r0, #24]

		/* Set to the end of descriptor list */
		desc->DESCADDR.reg = (uint32_t)descriptor;
	}

	return STATUS_OK;
    17b2:	2000      	movs	r0, #0
    17b4:	e005      	b.n	17c2 <dma_add_descriptor+0x1e>
			desc = (DmacDescriptor*)(desc->DESCADDR.reg);
    17b6:	68db      	ldr	r3, [r3, #12]
		while(desc->DESCADDR.reg != 0) {
    17b8:	68da      	ldr	r2, [r3, #12]
    17ba:	2a00      	cmp	r2, #0
    17bc:	d1fb      	bne.n	17b6 <dma_add_descriptor+0x12>
		desc->DESCADDR.reg = (uint32_t)descriptor;
    17be:	60d9      	str	r1, [r3, #12]
	return STATUS_OK;
    17c0:	2000      	movs	r0, #0
}
    17c2:	4770      	bx	lr
		return STATUS_BUSY;
    17c4:	2005      	movs	r0, #5
    17c6:	e7fc      	b.n	17c2 <dma_add_descriptor+0x1e>

000017c8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    17c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    17ca:	0080      	lsls	r0, r0, #2
    17cc:	4b0c      	ldr	r3, [pc, #48]	; (1800 <_tcc_interrupt_handler+0x38>)
    17ce:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    17d0:	683b      	ldr	r3, [r7, #0]
    17d2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    17d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    17d6:	401e      	ands	r6, r3
    17d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    17da:	401e      	ands	r6, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    17dc:	2400      	movs	r4, #0
    17de:	e000      	b.n	17e2 <_tcc_interrupt_handler+0x1a>
    17e0:	3401      	adds	r4, #1
    17e2:	2c0b      	cmp	r4, #11
    17e4:	dc0b      	bgt.n	17fe <_tcc_interrupt_handler+0x36>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    17e6:	00a3      	lsls	r3, r4, #2
    17e8:	4a06      	ldr	r2, [pc, #24]	; (1804 <_tcc_interrupt_handler+0x3c>)
    17ea:	589d      	ldr	r5, [r3, r2]
    17ec:	4235      	tst	r5, r6
    17ee:	d0f7      	beq.n	17e0 <_tcc_interrupt_handler+0x18>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    17f0:	18fb      	adds	r3, r7, r3
    17f2:	685b      	ldr	r3, [r3, #4]
    17f4:	0038      	movs	r0, r7
    17f6:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    17f8:	683b      	ldr	r3, [r7, #0]
    17fa:	62dd      	str	r5, [r3, #44]	; 0x2c
    17fc:	e7f0      	b.n	17e0 <_tcc_interrupt_handler+0x18>
		}
	}
}
    17fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1800:	200011d0 	.word	0x200011d0
    1804:	0000c4d4 	.word	0x0000c4d4

00001808 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1808:	b510      	push	{r4, lr}
    180a:	2000      	movs	r0, #0
    180c:	4b01      	ldr	r3, [pc, #4]	; (1814 <TCC0_Handler+0xc>)
    180e:	4798      	blx	r3
    1810:	bd10      	pop	{r4, pc}
    1812:	46c0      	nop			; (mov r8, r8)
    1814:	000017c9 	.word	0x000017c9

00001818 <TCC1_Handler>:
    1818:	b510      	push	{r4, lr}
    181a:	2001      	movs	r0, #1
    181c:	4b01      	ldr	r3, [pc, #4]	; (1824 <TCC1_Handler+0xc>)
    181e:	4798      	blx	r3
    1820:	bd10      	pop	{r4, pc}
    1822:	46c0      	nop			; (mov r8, r8)
    1824:	000017c9 	.word	0x000017c9

00001828 <TCC2_Handler>:
    1828:	b510      	push	{r4, lr}
    182a:	2002      	movs	r0, #2
    182c:	4b01      	ldr	r3, [pc, #4]	; (1834 <TCC2_Handler+0xc>)
    182e:	4798      	blx	r3
    1830:	bd10      	pop	{r4, pc}
    1832:	46c0      	nop			; (mov r8, r8)
    1834:	000017c9 	.word	0x000017c9

00001838 <CAP1203_Write>:
    return ((manu << 8)|id);
}


void CAP1203_Write(uint8_t reg, uint8_t data)
{
    1838:	b500      	push	{lr}
    183a:	b083      	sub	sp, #12
    183c:	0003      	movs	r3, r0
    183e:	466a      	mov	r2, sp
    1840:	1dd0      	adds	r0, r2, #7
    1842:	7001      	strb	r1, [r0, #0]
    //I2C_WriteByteRegister(reg,data);                //Write data to register reg
	I2C_WriteData(&data, reg, 1);
    1844:	b299      	uxth	r1, r3
    1846:	2201      	movs	r2, #1
    1848:	4b01      	ldr	r3, [pc, #4]	; (1850 <CAP1203_Write+0x18>)
    184a:	4798      	blx	r3
}
    184c:	b003      	add	sp, #12
    184e:	bd00      	pop	{pc}
    1850:	0000300d 	.word	0x0000300d

00001854 <CAP1203_Config>:
{
    1854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1856:	0005      	movs	r5, r0
    1858:	000e      	movs	r6, r1
    185a:	0017      	movs	r7, r2
    CAP1203_Write(SENSINPUTEN, en_channels & 0x03);     //Set active inputs
    185c:	2103      	movs	r1, #3
    185e:	4001      	ands	r1, r0
    1860:	2021      	movs	r0, #33	; 0x21
    1862:	4c06      	ldr	r4, [pc, #24]	; (187c <CAP1203_Config+0x28>)
    1864:	47a0      	blx	r4
	CAP1203_Write(CAL_ACTIV, en_channels);
    1866:	0029      	movs	r1, r5
    1868:	2026      	movs	r0, #38	; 0x26
    186a:	47a0      	blx	r4
    CAP1203_Write(AVERAGE_SAMP_CONF, sample);			//Setup averaging and sampling time
    186c:	0039      	movs	r1, r7
    186e:	2024      	movs	r0, #36	; 0x24
    1870:	47a0      	blx	r4
	CAP1203_Write(SENSITIVITY, sensitivity);
    1872:	0031      	movs	r1, r6
    1874:	201f      	movs	r0, #31
    1876:	47a0      	blx	r4
}
    1878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    187a:	46c0      	nop			; (mov r8, r8)
    187c:	00001839 	.word	0x00001839

00001880 <CAP1203_Read>:

uint8_t CAP1203_Read(uint8_t reg)
{
    1880:	b510      	push	{r4, lr}
    1882:	b082      	sub	sp, #8
    //uint8_t value = I2C_ReadByteRegister(reg);
	uint8_t value;
	I2C_ReadData(&value, reg, 1);
    1884:	b281      	uxth	r1, r0
    1886:	466b      	mov	r3, sp
    1888:	1ddc      	adds	r4, r3, #7
    188a:	2201      	movs	r2, #1
    188c:	0020      	movs	r0, r4
    188e:	4b02      	ldr	r3, [pc, #8]	; (1898 <CAP1203_Read+0x18>)
    1890:	4798      	blx	r3
    return value;
    1892:	7820      	ldrb	r0, [r4, #0]
}
    1894:	b002      	add	sp, #8
    1896:	bd10      	pop	{r4, pc}
    1898:	00002f95 	.word	0x00002f95

0000189c <CAP1203_ActiveMode>:
{
    189c:	b510      	push	{r4, lr}
    uint8_t status = CAP1203_Read(MAIN_CTRL_REG);
    189e:	2000      	movs	r0, #0
    18a0:	4c05      	ldr	r4, [pc, #20]	; (18b8 <CAP1203_ActiveMode+0x1c>)
    18a2:	47a0      	blx	r4
    status &= ~STBY;
    18a4:	2320      	movs	r3, #32
    18a6:	4398      	bics	r0, r3
    18a8:	b2c1      	uxtb	r1, r0
    CAP1203_Write(MAIN_CTRL_REG,status);
    18aa:	2000      	movs	r0, #0
    18ac:	4b03      	ldr	r3, [pc, #12]	; (18bc <CAP1203_ActiveMode+0x20>)
    18ae:	4798      	blx	r3
    return CAP1203_Read(MAIN_CTRL_REG);
    18b0:	2000      	movs	r0, #0
    18b2:	47a0      	blx	r4
}
    18b4:	bd10      	pop	{r4, pc}
    18b6:	46c0      	nop			; (mov r8, r8)
    18b8:	00001881 	.word	0x00001881
    18bc:	00001839 	.word	0x00001839

000018c0 <CAP1203_GetStatusReg>:
{
    18c0:	b510      	push	{r4, lr}
    uint8_t status = CAP1203_Read(GEN_STATUS);
    18c2:	2002      	movs	r0, #2
    18c4:	4b01      	ldr	r3, [pc, #4]	; (18cc <CAP1203_GetStatusReg+0xc>)
    18c6:	4798      	blx	r3
}
    18c8:	bd10      	pop	{r4, pc}
    18ca:	46c0      	nop			; (mov r8, r8)
    18cc:	00001881 	.word	0x00001881

000018d0 <CAP1203_ReadPressedButton>:
{
    18d0:	b530      	push	{r4, r5, lr}
    18d2:	b083      	sub	sp, #12
    volatile uint8_t status = CAP1203_GetStatusReg();      //Check if touch bit was registered
    18d4:	4b10      	ldr	r3, [pc, #64]	; (1918 <CAP1203_ReadPressedButton+0x48>)
    18d6:	4798      	blx	r3
    18d8:	466b      	mov	r3, sp
    18da:	71d8      	strb	r0, [r3, #7]
    18dc:	3307      	adds	r3, #7
    if (status & TOUCH)
    18de:	781b      	ldrb	r3, [r3, #0]
    18e0:	07db      	lsls	r3, r3, #31
    18e2:	d403      	bmi.n	18ec <CAP1203_ReadPressedButton+0x1c>
    uint8_t buttonPressed = 0;
    18e4:	2400      	movs	r4, #0
}
    18e6:	0020      	movs	r0, r4
    18e8:	b003      	add	sp, #12
    18ea:	bd30      	pop	{r4, r5, pc}
        uint8_t button = CAP1203_Read(SENSOR_INPUTS);
    18ec:	2003      	movs	r0, #3
    18ee:	4b0b      	ldr	r3, [pc, #44]	; (191c <CAP1203_ReadPressedButton+0x4c>)
    18f0:	4798      	blx	r3
    18f2:	1e04      	subs	r4, r0, #0
        switch(button)
    18f4:	d00d      	beq.n	1912 <CAP1203_ReadPressedButton+0x42>
    18f6:	2802      	cmp	r0, #2
    18f8:	d807      	bhi.n	190a <CAP1203_ReadPressedButton+0x3a>
		CAP1203_Write(MAIN_CTRL_REG,0x00);      //Clear interrupt
    18fa:	2100      	movs	r1, #0
    18fc:	2000      	movs	r0, #0
    18fe:	4d08      	ldr	r5, [pc, #32]	; (1920 <CAP1203_ReadPressedButton+0x50>)
    1900:	47a8      	blx	r5
		CAP1203_Write(CAL_ACTIV, 7);
    1902:	2107      	movs	r1, #7
    1904:	2026      	movs	r0, #38	; 0x26
    1906:	47a8      	blx	r5
    1908:	e7ed      	b.n	18e6 <CAP1203_ReadPressedButton+0x16>
        switch(button)
    190a:	2804      	cmp	r0, #4
    190c:	d101      	bne.n	1912 <CAP1203_ReadPressedButton+0x42>
                    buttonPressed = 3;
    190e:	3c01      	subs	r4, #1
                break;
    1910:	e7f3      	b.n	18fa <CAP1203_ReadPressedButton+0x2a>
                    buttonPressed = 0;
    1912:	2400      	movs	r4, #0
                break;
    1914:	e7f1      	b.n	18fa <CAP1203_ReadPressedButton+0x2a>
    1916:	46c0      	nop			; (mov r8, r8)
    1918:	000018c1 	.word	0x000018c1
    191c:	00001881 	.word	0x00001881
    1920:	00001839 	.word	0x00001839

00001924 <CAP1203_ReadID>:
{
    1924:	b570      	push	{r4, r5, r6, lr}
    uint8_t id = CAP1203_Read(PRODUCT_ID);
    1926:	20fd      	movs	r0, #253	; 0xfd
    1928:	4c04      	ldr	r4, [pc, #16]	; (193c <CAP1203_ReadID+0x18>)
    192a:	47a0      	blx	r4
    192c:	0005      	movs	r5, r0
    uint8_t manu = CAP1203_Read(MAN_ID);
    192e:	20fe      	movs	r0, #254	; 0xfe
    1930:	47a0      	blx	r4
    return ((manu << 8)|id);
    1932:	0200      	lsls	r0, r0, #8
    1934:	4328      	orrs	r0, r5
    1936:	b280      	uxth	r0, r0
}
    1938:	bd70      	pop	{r4, r5, r6, pc}
    193a:	46c0      	nop			; (mov r8, r8)
    193c:	00001881 	.word	0x00001881

00001940 <CAP1203_Initialize>:
{
    1940:	b510      	push	{r4, lr}
    CAP1203_ActiveMode();                       //All three sensors are monitored in Active mode
    1942:	4b0a      	ldr	r3, [pc, #40]	; (196c <CAP1203_Initialize+0x2c>)
    1944:	4798      	blx	r3
	device_ID = CAP1203_ReadID();
    1946:	4b0a      	ldr	r3, [pc, #40]	; (1970 <CAP1203_Initialize+0x30>)
    1948:	4798      	blx	r3
    194a:	b2c0      	uxtb	r0, r0
    194c:	4b09      	ldr	r3, [pc, #36]	; (1974 <CAP1203_Initialize+0x34>)
    194e:	7018      	strb	r0, [r3, #0]
	CAP1203_Write(MULTITOUCH, 0);
    1950:	2100      	movs	r1, #0
    1952:	202a      	movs	r0, #42	; 0x2a
    1954:	4b08      	ldr	r3, [pc, #32]	; (1978 <CAP1203_Initialize+0x38>)
    1956:	4798      	blx	r3
	CAP1203_Config(CS1|CS2|CS3, 0x6f, SMPAVG128 | STM320us| T140ms);
    1958:	2273      	movs	r2, #115	; 0x73
    195a:	216f      	movs	r1, #111	; 0x6f
    195c:	2007      	movs	r0, #7
    195e:	4b07      	ldr	r3, [pc, #28]	; (197c <CAP1203_Initialize+0x3c>)
    1960:	4798      	blx	r3
	touch_tm = GetTickCount();
    1962:	4b07      	ldr	r3, [pc, #28]	; (1980 <CAP1203_Initialize+0x40>)
    1964:	4798      	blx	r3
    1966:	4b07      	ldr	r3, [pc, #28]	; (1984 <CAP1203_Initialize+0x44>)
    1968:	6018      	str	r0, [r3, #0]
}
    196a:	bd10      	pop	{r4, pc}
    196c:	0000189d 	.word	0x0000189d
    1970:	00001925 	.word	0x00001925
    1974:	20000e45 	.word	0x20000e45
    1978:	00001839 	.word	0x00001839
    197c:	00001855 	.word	0x00001855
    1980:	00002ead 	.word	0x00002ead
    1984:	20000e5c 	.word	0x20000e5c

00001988 <GetPressedButton>:

uint8_t GetPressedButton(void)
{
	uint8_t aux = pressed_button;
    1988:	4b02      	ldr	r3, [pc, #8]	; (1994 <GetPressedButton+0xc>)
    198a:	7818      	ldrb	r0, [r3, #0]
    198c:	b2c0      	uxtb	r0, r0
	pressed_button = 0;
    198e:	2200      	movs	r2, #0
    1990:	701a      	strb	r2, [r3, #0]
	return aux;
}
    1992:	4770      	bx	lr
    1994:	20000e54 	.word	0x20000e54

00001998 <SetServoMovingFlag>:

void SetServoMovingFlag(uint8_t id)
{
    1998:	b510      	push	{r4, lr}
    199a:	0004      	movs	r4, r0
	servo_moving = id;
    199c:	4b0b      	ldr	r3, [pc, #44]	; (19cc <SetServoMovingFlag+0x34>)
    199e:	7018      	strb	r0, [r3, #0]
	if(id & 0x1)
    19a0:	07c3      	lsls	r3, r0, #31
    19a2:	d402      	bmi.n	19aa <SetServoMovingFlag+0x12>
	{
		setServoLED(1, 1);
		Delay_ms(2);
	}
	if(id & 0x2)
    19a4:	07a3      	lsls	r3, r4, #30
    19a6:	d408      	bmi.n	19ba <SetServoMovingFlag+0x22>
	{
		setServoLED(2, 1);
		Delay_ms(2);
	}
}
    19a8:	bd10      	pop	{r4, pc}
		setServoLED(1, 1);
    19aa:	2101      	movs	r1, #1
    19ac:	2001      	movs	r0, #1
    19ae:	4b08      	ldr	r3, [pc, #32]	; (19d0 <SetServoMovingFlag+0x38>)
    19b0:	4798      	blx	r3
		Delay_ms(2);
    19b2:	2002      	movs	r0, #2
    19b4:	4b07      	ldr	r3, [pc, #28]	; (19d4 <SetServoMovingFlag+0x3c>)
    19b6:	4798      	blx	r3
    19b8:	e7f4      	b.n	19a4 <SetServoMovingFlag+0xc>
		setServoLED(2, 1);
    19ba:	2101      	movs	r1, #1
    19bc:	2002      	movs	r0, #2
    19be:	4b04      	ldr	r3, [pc, #16]	; (19d0 <SetServoMovingFlag+0x38>)
    19c0:	4798      	blx	r3
		Delay_ms(2);
    19c2:	2002      	movs	r0, #2
    19c4:	4b03      	ldr	r3, [pc, #12]	; (19d4 <SetServoMovingFlag+0x3c>)
    19c6:	4798      	blx	r3
}
    19c8:	e7ee      	b.n	19a8 <SetServoMovingFlag+0x10>
    19ca:	46c0      	nop			; (mov r8, r8)
    19cc:	20000e55 	.word	0x20000e55
    19d0:	00003891 	.word	0x00003891
    19d4:	00002ec5 	.word	0x00002ec5

000019d8 <SetServoMovingDelay>:

void SetServoMovingDelay(uint32_t value)
{
	servo_off_delay = value;
    19d8:	4b01      	ldr	r3, [pc, #4]	; (19e0 <SetServoMovingDelay+0x8>)
    19da:	6018      	str	r0, [r3, #0]
} 
    19dc:	4770      	bx	lr
    19de:	46c0      	nop			; (mov r8, r8)
    19e0:	2000001c 	.word	0x2000001c

000019e4 <GetTouch_runtime>:

uint8_t GetTouch_runtime(void)
{
    19e4:	b510      	push	{r4, lr}
	uint8_t value = 0, is_moving = 0;
	
	if(TimeDiff(touch_tm, GetTickCount()) > TOUCH_SAMPLETIME)
    19e6:	4b43      	ldr	r3, [pc, #268]	; (1af4 <GetTouch_runtime+0x110>)
    19e8:	681c      	ldr	r4, [r3, #0]
    19ea:	4b43      	ldr	r3, [pc, #268]	; (1af8 <GetTouch_runtime+0x114>)
    19ec:	4798      	blx	r3
    19ee:	0001      	movs	r1, r0
    19f0:	0020      	movs	r0, r4
    19f2:	4b42      	ldr	r3, [pc, #264]	; (1afc <GetTouch_runtime+0x118>)
    19f4:	4798      	blx	r3
    19f6:	2864      	cmp	r0, #100	; 0x64
    19f8:	d800      	bhi.n	19fc <GetTouch_runtime+0x18>
    19fa:	e079      	b.n	1af0 <GetTouch_runtime+0x10c>
	{
		if(servo_moving)
    19fc:	4b40      	ldr	r3, [pc, #256]	; (1b00 <GetTouch_runtime+0x11c>)
    19fe:	781b      	ldrb	r3, [r3, #0]
    1a00:	2b00      	cmp	r3, #0
    1a02:	d063      	beq.n	1acc <GetTouch_runtime+0xe8>
		{
			if(servo_moving & 0x01)
    1a04:	4b3e      	ldr	r3, [pc, #248]	; (1b00 <GetTouch_runtime+0x11c>)
    1a06:	781b      	ldrb	r3, [r3, #0]
    1a08:	07db      	lsls	r3, r3, #31
    1a0a:	d428      	bmi.n	1a5e <GetTouch_runtime+0x7a>
				is_moving = ReadRegister(1, eXLCMD_READ, XL_MOVING);
			else if(servo_moving & 0x02)
    1a0c:	4b3c      	ldr	r3, [pc, #240]	; (1b00 <GetTouch_runtime+0x11c>)
    1a0e:	781b      	ldrb	r3, [r3, #0]
    1a10:	079b      	lsls	r3, r3, #30
    1a12:	d42b      	bmi.n	1a6c <GetTouch_runtime+0x88>
	uint8_t value = 0, is_moving = 0;
    1a14:	2000      	movs	r0, #0
				is_moving = ReadRegister(2, eXLCMD_READ, XL_MOVING) << 1;

			if(is_moving)
    1a16:	2800      	cmp	r0, #0
    1a18:	d131      	bne.n	1a7e <GetTouch_runtime+0x9a>
				servo_off_tm = GetTickCount();
			else if(servo_moving && TimeDiff(servo_off_tm, GetTickCount()) > servo_off_delay)
    1a1a:	4b39      	ldr	r3, [pc, #228]	; (1b00 <GetTouch_runtime+0x11c>)
    1a1c:	781b      	ldrb	r3, [r3, #0]
    1a1e:	2b00      	cmp	r3, #0
    1a20:	d132      	bne.n	1a88 <GetTouch_runtime+0xa4>
					setServoLED(1, 0);
				if(servo_moving & 0x2)
					setServoLED(2, 0);
				servo_moving = 0;
			}
			CAP1203_ReadPressedButton();
    1a22:	4b38      	ldr	r3, [pc, #224]	; (1b04 <GetTouch_runtime+0x120>)
    1a24:	4798      	blx	r3
	uint8_t value = 0, is_moving = 0;
    1a26:	2000      	movs	r0, #0
		}
		else 
			value = CAP1203_ReadPressedButton();

		if(value)
    1a28:	2800      	cmp	r0, #0
    1a2a:	d05f      	beq.n	1aec <GetTouch_runtime+0x108>
		{
			uint32_t idx = (value & 0x03) - 1;
    1a2c:	2303      	movs	r3, #3
    1a2e:	4003      	ands	r3, r0
    1a30:	3b01      	subs	r3, #1

			if(++press_cnt[idx] > press_thd)
    1a32:	4935      	ldr	r1, [pc, #212]	; (1b08 <GetTouch_runtime+0x124>)
    1a34:	009c      	lsls	r4, r3, #2
    1a36:	5862      	ldr	r2, [r4, r1]
    1a38:	3201      	adds	r2, #1
    1a3a:	5062      	str	r2, [r4, r1]
    1a3c:	4933      	ldr	r1, [pc, #204]	; (1b0c <GetTouch_runtime+0x128>)
    1a3e:	6809      	ldr	r1, [r1, #0]
    1a40:	428a      	cmp	r2, r1
    1a42:	d904      	bls.n	1a4e <GetTouch_runtime+0x6a>
			{
				pressed_button = value;
    1a44:	4a32      	ldr	r2, [pc, #200]	; (1b10 <GetTouch_runtime+0x12c>)
    1a46:	7010      	strb	r0, [r2, #0]
				press_cnt[idx] = 0;
    1a48:	2100      	movs	r1, #0
    1a4a:	4a2f      	ldr	r2, [pc, #188]	; (1b08 <GetTouch_runtime+0x124>)
    1a4c:	50a1      	str	r1, [r4, r2]
		else
			for(uint32_t x = 0; x < 3; x++)
				if(press_cnt[x])
					press_cnt[x]--;
			
		touch_tm = GetTickCount();
    1a4e:	4b2a      	ldr	r3, [pc, #168]	; (1af8 <GetTouch_runtime+0x114>)
    1a50:	4798      	blx	r3
    1a52:	4b28      	ldr	r3, [pc, #160]	; (1af4 <GetTouch_runtime+0x110>)
    1a54:	6018      	str	r0, [r3, #0]
		return pressed_button;
    1a56:	4b2e      	ldr	r3, [pc, #184]	; (1b10 <GetTouch_runtime+0x12c>)
    1a58:	7818      	ldrb	r0, [r3, #0]
    1a5a:	b2c0      	uxtb	r0, r0
	}
	return 0;
    1a5c:	bd10      	pop	{r4, pc}
				is_moving = ReadRegister(1, eXLCMD_READ, XL_MOVING);
    1a5e:	2231      	movs	r2, #49	; 0x31
    1a60:	2102      	movs	r1, #2
    1a62:	2001      	movs	r0, #1
    1a64:	4b2b      	ldr	r3, [pc, #172]	; (1b14 <GetTouch_runtime+0x130>)
    1a66:	4798      	blx	r3
    1a68:	b2c0      	uxtb	r0, r0
    1a6a:	e7d4      	b.n	1a16 <GetTouch_runtime+0x32>
				is_moving = ReadRegister(2, eXLCMD_READ, XL_MOVING) << 1;
    1a6c:	2231      	movs	r2, #49	; 0x31
    1a6e:	2102      	movs	r1, #2
    1a70:	2002      	movs	r0, #2
    1a72:	4b28      	ldr	r3, [pc, #160]	; (1b14 <GetTouch_runtime+0x130>)
    1a74:	4798      	blx	r3
    1a76:	b2c0      	uxtb	r0, r0
    1a78:	0040      	lsls	r0, r0, #1
    1a7a:	b2c0      	uxtb	r0, r0
    1a7c:	e7cb      	b.n	1a16 <GetTouch_runtime+0x32>
				servo_off_tm = GetTickCount();
    1a7e:	4b1e      	ldr	r3, [pc, #120]	; (1af8 <GetTouch_runtime+0x114>)
    1a80:	4798      	blx	r3
    1a82:	4b25      	ldr	r3, [pc, #148]	; (1b18 <GetTouch_runtime+0x134>)
    1a84:	6018      	str	r0, [r3, #0]
    1a86:	e7cc      	b.n	1a22 <GetTouch_runtime+0x3e>
			else if(servo_moving && TimeDiff(servo_off_tm, GetTickCount()) > servo_off_delay)
    1a88:	4b23      	ldr	r3, [pc, #140]	; (1b18 <GetTouch_runtime+0x134>)
    1a8a:	681c      	ldr	r4, [r3, #0]
    1a8c:	4b1a      	ldr	r3, [pc, #104]	; (1af8 <GetTouch_runtime+0x114>)
    1a8e:	4798      	blx	r3
    1a90:	0001      	movs	r1, r0
    1a92:	0020      	movs	r0, r4
    1a94:	4b19      	ldr	r3, [pc, #100]	; (1afc <GetTouch_runtime+0x118>)
    1a96:	4798      	blx	r3
    1a98:	4b20      	ldr	r3, [pc, #128]	; (1b1c <GetTouch_runtime+0x138>)
    1a9a:	681b      	ldr	r3, [r3, #0]
    1a9c:	4298      	cmp	r0, r3
    1a9e:	d9c0      	bls.n	1a22 <GetTouch_runtime+0x3e>
				if(servo_moving & 0x1)
    1aa0:	4b17      	ldr	r3, [pc, #92]	; (1b00 <GetTouch_runtime+0x11c>)
    1aa2:	781b      	ldrb	r3, [r3, #0]
    1aa4:	07db      	lsls	r3, r3, #31
    1aa6:	d407      	bmi.n	1ab8 <GetTouch_runtime+0xd4>
				if(servo_moving & 0x2)
    1aa8:	4b15      	ldr	r3, [pc, #84]	; (1b00 <GetTouch_runtime+0x11c>)
    1aaa:	781b      	ldrb	r3, [r3, #0]
    1aac:	079b      	lsls	r3, r3, #30
    1aae:	d408      	bmi.n	1ac2 <GetTouch_runtime+0xde>
				servo_moving = 0;
    1ab0:	2200      	movs	r2, #0
    1ab2:	4b13      	ldr	r3, [pc, #76]	; (1b00 <GetTouch_runtime+0x11c>)
    1ab4:	701a      	strb	r2, [r3, #0]
    1ab6:	e7b4      	b.n	1a22 <GetTouch_runtime+0x3e>
					setServoLED(1, 0);
    1ab8:	2100      	movs	r1, #0
    1aba:	2001      	movs	r0, #1
    1abc:	4b18      	ldr	r3, [pc, #96]	; (1b20 <GetTouch_runtime+0x13c>)
    1abe:	4798      	blx	r3
    1ac0:	e7f2      	b.n	1aa8 <GetTouch_runtime+0xc4>
					setServoLED(2, 0);
    1ac2:	2100      	movs	r1, #0
    1ac4:	2002      	movs	r0, #2
    1ac6:	4b16      	ldr	r3, [pc, #88]	; (1b20 <GetTouch_runtime+0x13c>)
    1ac8:	4798      	blx	r3
    1aca:	e7f1      	b.n	1ab0 <GetTouch_runtime+0xcc>
			value = CAP1203_ReadPressedButton();
    1acc:	4b0d      	ldr	r3, [pc, #52]	; (1b04 <GetTouch_runtime+0x120>)
    1ace:	4798      	blx	r3
    1ad0:	e7aa      	b.n	1a28 <GetTouch_runtime+0x44>
			for(uint32_t x = 0; x < 3; x++)
    1ad2:	3301      	adds	r3, #1
    1ad4:	2b02      	cmp	r3, #2
    1ad6:	d8ba      	bhi.n	1a4e <GetTouch_runtime+0x6a>
				if(press_cnt[x])
    1ad8:	009a      	lsls	r2, r3, #2
    1ada:	490b      	ldr	r1, [pc, #44]	; (1b08 <GetTouch_runtime+0x124>)
    1adc:	5852      	ldr	r2, [r2, r1]
    1ade:	2a00      	cmp	r2, #0
    1ae0:	d0f7      	beq.n	1ad2 <GetTouch_runtime+0xee>
					press_cnt[x]--;
    1ae2:	0098      	lsls	r0, r3, #2
    1ae4:	5842      	ldr	r2, [r0, r1]
    1ae6:	3a01      	subs	r2, #1
    1ae8:	5042      	str	r2, [r0, r1]
    1aea:	e7f2      	b.n	1ad2 <GetTouch_runtime+0xee>
    1aec:	2300      	movs	r3, #0
    1aee:	e7f1      	b.n	1ad4 <GetTouch_runtime+0xf0>
	return 0;
    1af0:	2000      	movs	r0, #0
    1af2:	e7b3      	b.n	1a5c <GetTouch_runtime+0x78>
    1af4:	20000e5c 	.word	0x20000e5c
    1af8:	00002ead 	.word	0x00002ead
    1afc:	00002eb9 	.word	0x00002eb9
    1b00:	20000e55 	.word	0x20000e55
    1b04:	000018d1 	.word	0x000018d1
    1b08:	20000e48 	.word	0x20000e48
    1b0c:	20000018 	.word	0x20000018
    1b10:	20000e54 	.word	0x20000e54
    1b14:	00003701 	.word	0x00003701
    1b18:	20000e58 	.word	0x20000e58
    1b1c:	2000001c 	.word	0x2000001c
    1b20:	00003891 	.word	0x00003891

00001b24 <update_crc>:
extern void uDelay(uint32 uTime);
extern void nDelay(uint32 nTime);*/


unsigned short update_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size)
{
    1b24:	b571      	push	{r0, r4, r5, r6, lr}
    1b26:	b0ff      	sub	sp, #508	; 0x1fc
    1b28:	0004      	movs	r4, r0
    1b2a:	000d      	movs	r5, r1
    1b2c:	0016      	movs	r6, r2
	uint i, j;
	unsigned short crc_table[256] = {0x0000,
    1b2e:	2280      	movs	r2, #128	; 0x80
    1b30:	0092      	lsls	r2, r2, #2
    1b32:	490b      	ldr	r1, [pc, #44]	; (1b60 <update_crc+0x3c>)
    1b34:	4668      	mov	r0, sp
    1b36:	4b0b      	ldr	r3, [pc, #44]	; (1b64 <update_crc+0x40>)
    1b38:	4798      	blx	r3
	                                0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264,
	                                0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E,
	                                0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219, 0x0208,
	                                0x820D, 0x8207, 0x0202 };

	for(j = 0; j < data_blk_size; j++)
    1b3a:	2200      	movs	r2, #0
    1b3c:	e00a      	b.n	1b54 <update_crc+0x30>
	{
		i = ((unsigned short)(crc_accum >> 8) ^ *data_blk_ptr++) & 0xFF;
    1b3e:	0a23      	lsrs	r3, r4, #8
    1b40:	7829      	ldrb	r1, [r5, #0]
    1b42:	404b      	eors	r3, r1
		crc_accum = (crc_accum << 8) ^ crc_table[i];
    1b44:	0224      	lsls	r4, r4, #8
    1b46:	005b      	lsls	r3, r3, #1
    1b48:	4669      	mov	r1, sp
    1b4a:	5e5b      	ldrsh	r3, [r3, r1]
    1b4c:	405c      	eors	r4, r3
    1b4e:	b2a4      	uxth	r4, r4
	for(j = 0; j < data_blk_size; j++)
    1b50:	3201      	adds	r2, #1
		i = ((unsigned short)(crc_accum >> 8) ^ *data_blk_ptr++) & 0xFF;
    1b52:	3501      	adds	r5, #1
	for(j = 0; j < data_blk_size; j++)
    1b54:	42b2      	cmp	r2, r6
    1b56:	d3f2      	bcc.n	1b3e <update_crc+0x1a>
	}

	return crc_accum;
}
    1b58:	0020      	movs	r0, r4
    1b5a:	b07f      	add	sp, #508	; 0x1fc
    1b5c:	bd72      	pop	{r1, r4, r5, r6, pc}
    1b5e:	46c0      	nop			; (mov r8, r8)
    1b60:	0000c504 	.word	0x0000c504
    1b64:	0000c38d 	.word	0x0000c38d

00001b68 <fLedConfigDefault>:
#include "LedFlash.h"

stLedConfig stLED[LEDS_NUMBER];

void fLedConfigDefault(stLedConfig *stLed)
{
    1b68:	b510      	push	{r4, lr}
    1b6a:	0004      	movs	r4, r0
	// Led flashing default configuring
	
	stLed->Counter = 1;
    1b6c:	2301      	movs	r3, #1
    1b6e:	7003      	strb	r3, [r0, #0]
	stLed->InvertOut = 0;
    1b70:	78c3      	ldrb	r3, [r0, #3]
	stLed->LedPin = 0xff;
    1b72:	22ff      	movs	r2, #255	; 0xff
    1b74:	7082      	strb	r2, [r0, #2]
	stLed->LedState = 0;
    1b76:	3abf      	subs	r2, #191	; 0xbf
    1b78:	4393      	bics	r3, r2
	stLed->Loop = 0;
    1b7a:	3a38      	subs	r2, #56	; 0x38
    1b7c:	4393      	bics	r3, r2
    1b7e:	3218      	adds	r2, #24
    1b80:	4393      	bics	r3, r2
    1b82:	70c3      	strb	r3, [r0, #3]
	stLed->Off_Time = 200;
    1b84:	23c8      	movs	r3, #200	; 0xc8
    1b86:	80c3      	strh	r3, [r0, #6]
	stLed->On_Time = 20;
    1b88:	3bb4      	subs	r3, #180	; 0xb4
    1b8a:	8083      	strh	r3, [r0, #4]
	stLed->StartTime = GetTickCount();
    1b8c:	4b01      	ldr	r3, [pc, #4]	; (1b94 <fLedConfigDefault+0x2c>)
    1b8e:	4798      	blx	r3
    1b90:	60a0      	str	r0, [r4, #8]
}
    1b92:	bd10      	pop	{r4, pc}
    1b94:	00002ead 	.word	0x00002ead

00001b98 <fSetLedPeriod>:

// Set flashing period (frequency) and duty (0 to period)

void fSetLedPeriod(stLedConfig *stLed, uint32_t period, uint32_t duty)
{
	stLed->On_Time = duty;
    1b98:	b292      	uxth	r2, r2
    1b9a:	8082      	strh	r2, [r0, #4]
	stLed->Off_Time = period-duty;
    1b9c:	1a8a      	subs	r2, r1, r2
    1b9e:	80c2      	strh	r2, [r0, #6]
}
    1ba0:	4770      	bx	lr
	...

00001ba4 <fStartLedFlash>:

void fStartLedFlash(stLedConfig *stLed, uint32_t nTimes)
{
    1ba4:	b570      	push	{r4, r5, r6, lr}
    1ba6:	0004      	movs	r4, r0
    1ba8:	000d      	movs	r5, r1
	stLed->StartTime = GetTickCount();
    1baa:	4b08      	ldr	r3, [pc, #32]	; (1bcc <fStartLedFlash+0x28>)
    1bac:	4798      	blx	r3
    1bae:	60a0      	str	r0, [r4, #8]
	stLed->LedState = 1;
    1bb0:	78e3      	ldrb	r3, [r4, #3]
    1bb2:	2208      	movs	r2, #8
    1bb4:	4313      	orrs	r3, r2
    1bb6:	70e3      	strb	r3, [r4, #3]
	if(nTimes > 0xff)stLed->Loop = 1;
    1bb8:	2dff      	cmp	r5, #255	; 0xff
    1bba:	d801      	bhi.n	1bc0 <fStartLedFlash+0x1c>
	else stLed->Counter = nTimes;
    1bbc:	7025      	strb	r5, [r4, #0]
}
    1bbe:	bd70      	pop	{r4, r5, r6, pc}
	if(nTimes > 0xff)stLed->Loop = 1;
    1bc0:	b2db      	uxtb	r3, r3
    1bc2:	2220      	movs	r2, #32
    1bc4:	4313      	orrs	r3, r2
    1bc6:	70e3      	strb	r3, [r4, #3]
    1bc8:	e7f9      	b.n	1bbe <fStartLedFlash+0x1a>
    1bca:	46c0      	nop			; (mov r8, r8)
    1bcc:	00002ead 	.word	0x00002ead

00001bd0 <fProcessLed>:
	}
	else return NULL;
}

void fProcessLed(stLedConfig *stLed)
{
    1bd0:	b570      	push	{r4, r5, r6, lr}
    1bd2:	0004      	movs	r4, r0
	uint32_t PresentTm , EllapsedTm;
	if(!stLed->Enable)return;
    1bd4:	2303      	movs	r3, #3
    1bd6:	56c3      	ldrsb	r3, [r0, r3]
    1bd8:	2b00      	cmp	r3, #0
    1bda:	db00      	blt.n	1bde <fProcessLed+0xe>
				stLed->LedOut = 0;
			}
		}
		
	}
}
    1bdc:	bd70      	pop	{r4, r5, r6, pc}
	if(stLed->Counter || stLed->Loop)
    1bde:	4b31      	ldr	r3, [pc, #196]	; (1ca4 <fProcessLed+0xd4>)
    1be0:	6802      	ldr	r2, [r0, #0]
    1be2:	421a      	tst	r2, r3
    1be4:	d0fa      	beq.n	1bdc <fProcessLed+0xc>
		PresentTm = GetTickCount();
    1be6:	4b30      	ldr	r3, [pc, #192]	; (1ca8 <fProcessLed+0xd8>)
    1be8:	4798      	blx	r3
    1bea:	0005      	movs	r5, r0
		EllapsedTm = TimeDiff(stLed->StartTime, PresentTm);
    1bec:	0001      	movs	r1, r0
    1bee:	68a0      	ldr	r0, [r4, #8]
    1bf0:	4b2e      	ldr	r3, [pc, #184]	; (1cac <fProcessLed+0xdc>)
    1bf2:	4798      	blx	r3
		if(stLed->LedState)
    1bf4:	78e3      	ldrb	r3, [r4, #3]
    1bf6:	071a      	lsls	r2, r3, #28
    1bf8:	d524      	bpl.n	1c44 <fProcessLed+0x74>
			if(EllapsedTm > stLed->On_Time)
    1bfa:	88a2      	ldrh	r2, [r4, #4]
    1bfc:	4290      	cmp	r0, r2
    1bfe:	d818      	bhi.n	1c32 <fProcessLed+0x62>
			else if(!stLed->LedOut)
    1c00:	06db      	lsls	r3, r3, #27
    1c02:	d4eb      	bmi.n	1bdc <fProcessLed+0xc>
				stLed->LedOut = 1;
    1c04:	78e3      	ldrb	r3, [r4, #3]
    1c06:	2210      	movs	r2, #16
    1c08:	4313      	orrs	r3, r2
    1c0a:	70e3      	strb	r3, [r4, #3]
				port_pin_set_output_level((uint32_t)stLed->LedPin, !stLed->InvertOut);
    1c0c:	78a1      	ldrb	r1, [r4, #2]
    1c0e:	2240      	movs	r2, #64	; 0x40
    1c10:	4013      	ands	r3, r2
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
    1c12:	09c8      	lsrs	r0, r1, #7
	uint8_t group_index = (gpio_pin / 32);
    1c14:	094a      	lsrs	r2, r1, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1c16:	2800      	cmp	r0, #0
    1c18:	d110      	bne.n	1c3c <fProcessLed+0x6c>
		return &(ports[port_index]->Group[group_index]);
    1c1a:	01d2      	lsls	r2, r2, #7
    1c1c:	4824      	ldr	r0, [pc, #144]	; (1cb0 <fProcessLed+0xe0>)
    1c1e:	4684      	mov	ip, r0
    1c20:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1c22:	201f      	movs	r0, #31
    1c24:	4008      	ands	r0, r1
    1c26:	2101      	movs	r1, #1
    1c28:	4081      	lsls	r1, r0

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	d108      	bne.n	1c40 <fProcessLed+0x70>
		port_base->OUTSET.reg = pin_mask;
    1c2e:	6191      	str	r1, [r2, #24]
    1c30:	e7d4      	b.n	1bdc <fProcessLed+0xc>
				stLed->StartTime = PresentTm;
    1c32:	60a5      	str	r5, [r4, #8]
				stLed->LedState = 0;
    1c34:	2208      	movs	r2, #8
    1c36:	4393      	bics	r3, r2
    1c38:	70e3      	strb	r3, [r4, #3]
    1c3a:	e7cf      	b.n	1bdc <fProcessLed+0xc>
	} else {
		Assert(false);
		return NULL;
    1c3c:	2200      	movs	r2, #0
    1c3e:	e7f0      	b.n	1c22 <fProcessLed+0x52>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1c40:	6151      	str	r1, [r2, #20]
    1c42:	e7cb      	b.n	1bdc <fProcessLed+0xc>
			if(EllapsedTm > stLed->Off_Time)
    1c44:	88e2      	ldrh	r2, [r4, #6]
    1c46:	4290      	cmp	r0, r2
    1c48:	d90e      	bls.n	1c68 <fProcessLed+0x98>
				if(stLed->Counter)stLed->Counter--;
    1c4a:	7823      	ldrb	r3, [r4, #0]
    1c4c:	2b00      	cmp	r3, #0
    1c4e:	d001      	beq.n	1c54 <fProcessLed+0x84>
    1c50:	3b01      	subs	r3, #1
    1c52:	7023      	strb	r3, [r4, #0]
				stLed->StartTime = PresentTm;
    1c54:	60a5      	str	r5, [r4, #8]
				if(stLed->Counter || stLed->Loop)stLed->LedState = 1;
    1c56:	4b13      	ldr	r3, [pc, #76]	; (1ca4 <fProcessLed+0xd4>)
    1c58:	6822      	ldr	r2, [r4, #0]
    1c5a:	421a      	tst	r2, r3
    1c5c:	d0be      	beq.n	1bdc <fProcessLed+0xc>
    1c5e:	78e3      	ldrb	r3, [r4, #3]
    1c60:	2208      	movs	r2, #8
    1c62:	4313      	orrs	r3, r2
    1c64:	70e3      	strb	r3, [r4, #3]
    1c66:	e7b9      	b.n	1bdc <fProcessLed+0xc>
			else if(stLed->LedOut)
    1c68:	06db      	lsls	r3, r3, #27
    1c6a:	d5b7      	bpl.n	1bdc <fProcessLed+0xc>
				port_pin_set_output_level((uint32_t)stLed->LedPin, stLed->InvertOut);
    1c6c:	78a0      	ldrb	r0, [r4, #2]
    1c6e:	78e3      	ldrb	r3, [r4, #3]
    1c70:	065b      	lsls	r3, r3, #25
    1c72:	0fdb      	lsrs	r3, r3, #31
	uint8_t port_index  = (gpio_pin / 128);
    1c74:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
    1c76:	0942      	lsrs	r2, r0, #5
	if (port_index < PORT_INST_NUM) {
    1c78:	2900      	cmp	r1, #0
    1c7a:	d10f      	bne.n	1c9c <fProcessLed+0xcc>
		return &(ports[port_index]->Group[group_index]);
    1c7c:	01d2      	lsls	r2, r2, #7
    1c7e:	490c      	ldr	r1, [pc, #48]	; (1cb0 <fProcessLed+0xe0>)
    1c80:	468c      	mov	ip, r1
    1c82:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1c84:	211f      	movs	r1, #31
    1c86:	4001      	ands	r1, r0
    1c88:	2001      	movs	r0, #1
    1c8a:	4088      	lsls	r0, r1
	if (level) {
    1c8c:	2b00      	cmp	r3, #0
    1c8e:	d007      	beq.n	1ca0 <fProcessLed+0xd0>
		port_base->OUTSET.reg = pin_mask;
    1c90:	6190      	str	r0, [r2, #24]
				stLed->LedOut = 0;
    1c92:	78e3      	ldrb	r3, [r4, #3]
    1c94:	2210      	movs	r2, #16
    1c96:	4393      	bics	r3, r2
    1c98:	70e3      	strb	r3, [r4, #3]
    1c9a:	e79f      	b.n	1bdc <fProcessLed+0xc>
		return NULL;
    1c9c:	2200      	movs	r2, #0
    1c9e:	e7f1      	b.n	1c84 <fProcessLed+0xb4>
		port_base->OUTCLR.reg = pin_mask;
    1ca0:	6150      	str	r0, [r2, #20]
    1ca2:	e7f6      	b.n	1c92 <fProcessLed+0xc2>
    1ca4:	200000ff 	.word	0x200000ff
    1ca8:	00002ead 	.word	0x00002ead
    1cac:	00002eb9 	.word	0x00002eb9
    1cb0:	41004400 	.word	0x41004400

00001cb4 <LedRunTime>:

void LedRunTime(void)
{
    1cb4:	b510      	push	{r4, lr}
	for(uint32_t x = 0; x < LEDS_NUMBER; x++)
    1cb6:	2400      	movs	r4, #0
    1cb8:	2c00      	cmp	r4, #0
    1cba:	d000      	beq.n	1cbe <LedRunTime+0xa>
		fProcessLed(&stLED[x]);
}
    1cbc:	bd10      	pop	{r4, pc}
		fProcessLed(&stLED[x]);
    1cbe:	0063      	lsls	r3, r4, #1
    1cc0:	191b      	adds	r3, r3, r4
    1cc2:	0098      	lsls	r0, r3, #2
    1cc4:	4b02      	ldr	r3, [pc, #8]	; (1cd0 <LedRunTime+0x1c>)
    1cc6:	18c0      	adds	r0, r0, r3
    1cc8:	4b02      	ldr	r3, [pc, #8]	; (1cd4 <LedRunTime+0x20>)
    1cca:	4798      	blx	r3
	for(uint32_t x = 0; x < LEDS_NUMBER; x++)
    1ccc:	3401      	adds	r4, #1
    1cce:	e7f3      	b.n	1cb8 <LedRunTime+0x4>
    1cd0:	200013e8 	.word	0x200013e8
    1cd4:	00001bd1 	.word	0x00001bd1

00001cd8 <InitLedFlash>:

void InitLedFlash(void)
{
    1cd8:	b510      	push	{r4, lr}
	fLedConfigDefault(stLED);
    1cda:	4c0d      	ldr	r4, [pc, #52]	; (1d10 <InitLedFlash+0x38>)
    1cdc:	0020      	movs	r0, r4
    1cde:	4b0d      	ldr	r3, [pc, #52]	; (1d14 <InitLedFlash+0x3c>)
    1ce0:	4798      	blx	r3
	stLED[0].LedPin = (uint8_t)LED_RX;
    1ce2:	2323      	movs	r3, #35	; 0x23
    1ce4:	70a3      	strb	r3, [r4, #2]
	stLED[0].InvertOut = 1;
    1ce6:	78e3      	ldrb	r3, [r4, #3]
    1ce8:	2240      	movs	r2, #64	; 0x40
    1cea:	4313      	orrs	r3, r2
	stLED[0].Loop = 1;
    1cec:	b2db      	uxtb	r3, r3
    1cee:	2220      	movs	r2, #32
    1cf0:	4313      	orrs	r3, r2
	stLED[0].Enable = 1;
    1cf2:	b2db      	uxtb	r3, r3
    1cf4:	2280      	movs	r2, #128	; 0x80
    1cf6:	4252      	negs	r2, r2
    1cf8:	4313      	orrs	r3, r2
    1cfa:	70e3      	strb	r3, [r4, #3]

	fSetLedPeriod(&stLED[0], 990, 10);
    1cfc:	328a      	adds	r2, #138	; 0x8a
    1cfe:	4906      	ldr	r1, [pc, #24]	; (1d18 <InitLedFlash+0x40>)
    1d00:	0020      	movs	r0, r4
    1d02:	4b06      	ldr	r3, [pc, #24]	; (1d1c <InitLedFlash+0x44>)
    1d04:	4798      	blx	r3
	fStartLedFlash(&stLED[0], 1);
    1d06:	2101      	movs	r1, #1
    1d08:	0020      	movs	r0, r4
    1d0a:	4b05      	ldr	r3, [pc, #20]	; (1d20 <InitLedFlash+0x48>)
    1d0c:	4798      	blx	r3
}
    1d0e:	bd10      	pop	{r4, pc}
    1d10:	200013e8 	.word	0x200013e8
    1d14:	00001b69 	.word	0x00001b69
    1d18:	000003de 	.word	0x000003de
    1d1c:	00001b99 	.word	0x00001b99
    1d20:	00001ba5 	.word	0x00001ba5

00001d24 <fsetMouth>:

volatile stMouth Mouth __attribute__ ((aligned (4)));

void fsetMouth(uint8_t Rows, uint8_t Collumns)
{
	uint32_t port_data = (Rows & 0x0f) << 17;
    1d24:	0440      	lsls	r0, r0, #17
    1d26:	23f0      	movs	r3, #240	; 0xf0
    1d28:	035b      	lsls	r3, r3, #13
    1d2a:	4018      	ands	r0, r3
	port_data |= (~Collumns & 0x1f) << 12;
    1d2c:	43c9      	mvns	r1, r1
    1d2e:	0309      	lsls	r1, r1, #12
    1d30:	23f8      	movs	r3, #248	; 0xf8
    1d32:	025b      	lsls	r3, r3, #9
    1d34:	4019      	ands	r1, r3
    1d36:	4308      	orrs	r0, r1
	PORT->Group[0].OUTSET.reg = port_data & 0x001FF000;		// Set active leds
    1d38:	4b03      	ldr	r3, [pc, #12]	; (1d48 <fsetMouth+0x24>)
    1d3a:	0001      	movs	r1, r0
    1d3c:	4019      	ands	r1, r3
    1d3e:	4a03      	ldr	r2, [pc, #12]	; (1d4c <fsetMouth+0x28>)
    1d40:	6191      	str	r1, [r2, #24]
	PORT->Group[0].OUTCLR.reg = ~port_data & 0x001FF000;	// clear idle leds
    1d42:	4383      	bics	r3, r0
    1d44:	6153      	str	r3, [r2, #20]
}
    1d46:	4770      	bx	lr
    1d48:	001ff000 	.word	0x001ff000
    1d4c:	41004400 	.word	0x41004400

00001d50 <fAnimation_Runtime>:

//	Runtime machine must be called periodically at refresh frequency

void fAnimation_Runtime(void)
{
    1d50:	b510      	push	{r4, lr}
	if(Mouth.FrameCnt++ > Mouth.FramePeriode && Mouth.Ctrl.frame_Sync == 1)
    1d52:	4a1b      	ldr	r2, [pc, #108]	; (1dc0 <fAnimation_Runtime+0x70>)
    1d54:	8893      	ldrh	r3, [r2, #4]
    1d56:	b29b      	uxth	r3, r3
    1d58:	1c59      	adds	r1, r3, #1
    1d5a:	b289      	uxth	r1, r1
    1d5c:	8091      	strh	r1, [r2, #4]
    1d5e:	88d2      	ldrh	r2, [r2, #6]
    1d60:	b292      	uxth	r2, r2
    1d62:	4293      	cmp	r3, r2
    1d64:	d903      	bls.n	1d6e <fAnimation_Runtime+0x1e>
    1d66:	4b16      	ldr	r3, [pc, #88]	; (1dc0 <fAnimation_Runtime+0x70>)
    1d68:	681b      	ldr	r3, [r3, #0]
    1d6a:	051b      	lsls	r3, r3, #20
    1d6c:	d400      	bmi.n	1d70 <fAnimation_Runtime+0x20>
				Mouth.Ctrl.frame_idx =0;
				Mouth.Ctrl.Anim_En = Mouth.Ctrl.Anim_Rpt;
			}
		}
	}
}
    1d6e:	bd10      	pop	{r4, pc}
		Mouth.FrameCnt = 0;
    1d70:	4b13      	ldr	r3, [pc, #76]	; (1dc0 <fAnimation_Runtime+0x70>)
    1d72:	2200      	movs	r2, #0
    1d74:	809a      	strh	r2, [r3, #4]
		if(Mouth.Ctrl.Anim_En)
    1d76:	681b      	ldr	r3, [r3, #0]
    1d78:	025b      	lsls	r3, r3, #9
    1d7a:	d5f8      	bpl.n	1d6e <fAnimation_Runtime+0x1e>
			if(++Mouth.Ctrl.frame_idx > Mouth.Ctrl.nFrames)
    1d7c:	4910      	ldr	r1, [pc, #64]	; (1dc0 <fAnimation_Runtime+0x70>)
    1d7e:	680b      	ldr	r3, [r1, #0]
    1d80:	03db      	lsls	r3, r3, #15
    1d82:	0edb      	lsrs	r3, r3, #27
    1d84:	3301      	adds	r3, #1
    1d86:	321f      	adds	r2, #31
    1d88:	4013      	ands	r3, r2
    1d8a:	6808      	ldr	r0, [r1, #0]
    1d8c:	031a      	lsls	r2, r3, #12
    1d8e:	4c0d      	ldr	r4, [pc, #52]	; (1dc4 <fAnimation_Runtime+0x74>)
    1d90:	4020      	ands	r0, r4
    1d92:	4302      	orrs	r2, r0
    1d94:	600a      	str	r2, [r1, #0]
    1d96:	680a      	ldr	r2, [r1, #0]
    1d98:	0292      	lsls	r2, r2, #10
    1d9a:	0ed2      	lsrs	r2, r2, #27
    1d9c:	4293      	cmp	r3, r2
    1d9e:	dde6      	ble.n	1d6e <fAnimation_Runtime+0x1e>
				Mouth.Ctrl.frame_idx =0;
    1da0:	000a      	movs	r2, r1
    1da2:	6809      	ldr	r1, [r1, #0]
    1da4:	0023      	movs	r3, r4
    1da6:	400b      	ands	r3, r1
    1da8:	6013      	str	r3, [r2, #0]
				Mouth.Ctrl.Anim_En = Mouth.Ctrl.Anim_Rpt;
    1daa:	6813      	ldr	r3, [r2, #0]
    1dac:	021b      	lsls	r3, r3, #8
    1dae:	6811      	ldr	r1, [r2, #0]
    1db0:	0fdb      	lsrs	r3, r3, #31
    1db2:	059b      	lsls	r3, r3, #22
    1db4:	4804      	ldr	r0, [pc, #16]	; (1dc8 <fAnimation_Runtime+0x78>)
    1db6:	4001      	ands	r1, r0
    1db8:	430b      	orrs	r3, r1
    1dba:	6013      	str	r3, [r2, #0]
}
    1dbc:	e7d7      	b.n	1d6e <fAnimation_Runtime+0x1e>
    1dbe:	46c0      	nop			; (mov r8, r8)
    1dc0:	200013f4 	.word	0x200013f4
    1dc4:	fffe0fff 	.word	0xfffe0fff
    1dc8:	ffbfffff 	.word	0xffbfffff

00001dcc <fMouth_Main>:

uint32_t fMouth_Main(void)
{
    1dcc:	b570      	push	{r4, r5, r6, lr}

	 Mouth.Ctrl.Row_idx <<= 1;
    1dce:	4921      	ldr	r1, [pc, #132]	; (1e54 <fMouth_Main+0x88>)
    1dd0:	680b      	ldr	r3, [r1, #0]
    1dd2:	071b      	lsls	r3, r3, #28
    1dd4:	0eda      	lsrs	r2, r3, #27
    1dd6:	230f      	movs	r3, #15
    1dd8:	4013      	ands	r3, r2
    1dda:	680a      	ldr	r2, [r1, #0]
    1ddc:	200f      	movs	r0, #15
    1dde:	4382      	bics	r2, r0
    1de0:	4313      	orrs	r3, r2
    1de2:	600b      	str	r3, [r1, #0]
	 if(Mouth.Ctrl.Row_idx == 0)
    1de4:	680b      	ldr	r3, [r1, #0]
    1de6:	071b      	lsls	r3, r3, #28
    1de8:	d022      	beq.n	1e30 <fMouth_Main+0x64>
		 Mouth.Ctrl.Column_idx=0;
		 Mouth.Ctrl.frame_Sync = 1;
	 }
	 else
	 {
		 Mouth.Ctrl.frame_Sync = 0;
    1dea:	4a1a      	ldr	r2, [pc, #104]	; (1e54 <fMouth_Main+0x88>)
    1dec:	6811      	ldr	r1, [r2, #0]
    1dee:	4b1a      	ldr	r3, [pc, #104]	; (1e58 <fMouth_Main+0x8c>)
    1df0:	400b      	ands	r3, r1
    1df2:	6013      	str	r3, [r2, #0]
	 }

	 fAnimation_Runtime();
    1df4:	4b19      	ldr	r3, [pc, #100]	; (1e5c <fMouth_Main+0x90>)
    1df6:	4798      	blx	r3
	 fsetMouth(Mouth.Ctrl.Row_idx, Mouth.Mouth_Data[Mouth.Ctrl.frame_idx][Mouth.Ctrl.Column_idx++]);
    1df8:	4c16      	ldr	r4, [pc, #88]	; (1e54 <fMouth_Main+0x88>)
    1dfa:	6820      	ldr	r0, [r4, #0]
    1dfc:	0700      	lsls	r0, r0, #28
    1dfe:	0f00      	lsrs	r0, r0, #28
    1e00:	6823      	ldr	r3, [r4, #0]
    1e02:	03db      	lsls	r3, r3, #15
    1e04:	0eda      	lsrs	r2, r3, #27
    1e06:	6823      	ldr	r3, [r4, #0]
    1e08:	061b      	lsls	r3, r3, #24
    1e0a:	0f19      	lsrs	r1, r3, #28
    1e0c:	1c4e      	adds	r6, r1, #1
    1e0e:	6825      	ldr	r5, [r4, #0]
    1e10:	230f      	movs	r3, #15
    1e12:	4033      	ands	r3, r6
    1e14:	011b      	lsls	r3, r3, #4
    1e16:	26f0      	movs	r6, #240	; 0xf0
    1e18:	43b5      	bics	r5, r6
    1e1a:	432b      	orrs	r3, r5
    1e1c:	6023      	str	r3, [r4, #0]
    1e1e:	0093      	lsls	r3, r2, #2
    1e20:	18e3      	adds	r3, r4, r3
    1e22:	185b      	adds	r3, r3, r1
    1e24:	7a19      	ldrb	r1, [r3, #8]
    1e26:	b2c9      	uxtb	r1, r1
    1e28:	4b0d      	ldr	r3, [pc, #52]	; (1e60 <fMouth_Main+0x94>)
    1e2a:	4798      	blx	r3
	 return Mouth.dwCtrl;
    1e2c:	6820      	ldr	r0, [r4, #0]
}
    1e2e:	bd70      	pop	{r4, r5, r6, pc}
		 Mouth.Ctrl.Row_idx = 1;
    1e30:	000b      	movs	r3, r1
    1e32:	6809      	ldr	r1, [r1, #0]
    1e34:	220f      	movs	r2, #15
    1e36:	4391      	bics	r1, r2
    1e38:	3a0e      	subs	r2, #14
    1e3a:	430a      	orrs	r2, r1
    1e3c:	601a      	str	r2, [r3, #0]
		 Mouth.Ctrl.Column_idx=0;
    1e3e:	6819      	ldr	r1, [r3, #0]
    1e40:	22f0      	movs	r2, #240	; 0xf0
    1e42:	4391      	bics	r1, r2
    1e44:	6019      	str	r1, [r3, #0]
		 Mouth.Ctrl.frame_Sync = 1;
    1e46:	6819      	ldr	r1, [r3, #0]
    1e48:	2280      	movs	r2, #128	; 0x80
    1e4a:	0112      	lsls	r2, r2, #4
    1e4c:	430a      	orrs	r2, r1
    1e4e:	601a      	str	r2, [r3, #0]
    1e50:	e7d0      	b.n	1df4 <fMouth_Main+0x28>
    1e52:	46c0      	nop			; (mov r8, r8)
    1e54:	200013f4 	.word	0x200013f4
    1e58:	fffff7ff 	.word	0xfffff7ff
    1e5c:	00001d51 	.word	0x00001d51
    1e60:	00001d25 	.word	0x00001d25

00001e64 <fMouth_SetNoseColor>:
	if (level) {
    1e64:	07c3      	lsls	r3, r0, #31
    1e66:	d40f      	bmi.n	1e88 <fMouth_SetNoseColor+0x24>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    1e68:	2204      	movs	r2, #4
    1e6a:	4b0e      	ldr	r3, [pc, #56]	; (1ea4 <fMouth_SetNoseColor+0x40>)
    1e6c:	619a      	str	r2, [r3, #24]
	if (level) {
    1e6e:	0783      	lsls	r3, r0, #30
    1e70:	d40e      	bmi.n	1e90 <fMouth_SetNoseColor+0x2c>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    1e72:	2280      	movs	r2, #128	; 0x80
    1e74:	0112      	lsls	r2, r2, #4
    1e76:	4b0b      	ldr	r3, [pc, #44]	; (1ea4 <fMouth_SetNoseColor+0x40>)
    1e78:	619a      	str	r2, [r3, #24]
	if (level) {
    1e7a:	0743      	lsls	r3, r0, #29
    1e7c:	d50d      	bpl.n	1e9a <fMouth_SetNoseColor+0x36>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    1e7e:	2280      	movs	r2, #128	; 0x80
    1e80:	0392      	lsls	r2, r2, #14
    1e82:	4b09      	ldr	r3, [pc, #36]	; (1ea8 <fMouth_SetNoseColor+0x44>)
    1e84:	615a      	str	r2, [r3, #20]
void fMouth_SetNoseColor(uint8_t value)
{
	ioport_set_pin_level(G_NOSE_B,!(value & 0x01));
	ioport_set_pin_level(G_NOSE_R,!(value & 0x02));
	ioport_set_pin_level(G_NOSE_G,!(value & 0x04));
}
    1e86:	4770      	bx	lr
    1e88:	2204      	movs	r2, #4
    1e8a:	4b06      	ldr	r3, [pc, #24]	; (1ea4 <fMouth_SetNoseColor+0x40>)
    1e8c:	615a      	str	r2, [r3, #20]
    1e8e:	e7ee      	b.n	1e6e <fMouth_SetNoseColor+0xa>
    1e90:	2280      	movs	r2, #128	; 0x80
    1e92:	0112      	lsls	r2, r2, #4
    1e94:	4b03      	ldr	r3, [pc, #12]	; (1ea4 <fMouth_SetNoseColor+0x40>)
    1e96:	615a      	str	r2, [r3, #20]
    1e98:	e7ef      	b.n	1e7a <fMouth_SetNoseColor+0x16>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    1e9a:	2280      	movs	r2, #128	; 0x80
    1e9c:	0392      	lsls	r2, r2, #14
    1e9e:	4b02      	ldr	r3, [pc, #8]	; (1ea8 <fMouth_SetNoseColor+0x44>)
    1ea0:	619a      	str	r2, [r3, #24]
    1ea2:	e7f0      	b.n	1e86 <fMouth_SetNoseColor+0x22>
    1ea4:	41004480 	.word	0x41004480
    1ea8:	41004400 	.word	0x41004400

00001eac <fMouth_SetData>:

void fMouth_SetData(uint32_t data)
{
	Mouth.Mouth_Data[0][0] = (data >> 24) & 0x1f;
    1eac:	0e01      	lsrs	r1, r0, #24
    1eae:	231f      	movs	r3, #31
    1eb0:	4019      	ands	r1, r3
    1eb2:	4a05      	ldr	r2, [pc, #20]	; (1ec8 <fMouth_SetData+0x1c>)
    1eb4:	7211      	strb	r1, [r2, #8]
	Mouth.Mouth_Data[0][1] = (data >> 16) & 0x1f;
    1eb6:	0c01      	lsrs	r1, r0, #16
    1eb8:	4019      	ands	r1, r3
    1eba:	7251      	strb	r1, [r2, #9]
	Mouth.Mouth_Data[0][2] = (data >> 8) & 0x1f;
    1ebc:	0a01      	lsrs	r1, r0, #8
    1ebe:	4019      	ands	r1, r3
    1ec0:	7291      	strb	r1, [r2, #10]
	Mouth.Mouth_Data[0][3] = data & 0x1f;
    1ec2:	4003      	ands	r3, r0
    1ec4:	72d3      	strb	r3, [r2, #11]
}
    1ec6:	4770      	bx	lr
    1ec8:	200013f4 	.word	0x200013f4

00001ecc <fTrig_Animation>:
	Mouth.Ctrl.Anim_En = 1;
}

void fTrig_Animation(void)
{
	Mouth.Ctrl.Anim_En = 1;
    1ecc:	4a03      	ldr	r2, [pc, #12]	; (1edc <fTrig_Animation+0x10>)
    1ece:	6811      	ldr	r1, [r2, #0]
    1ed0:	2380      	movs	r3, #128	; 0x80
    1ed2:	03db      	lsls	r3, r3, #15
    1ed4:	430b      	orrs	r3, r1
    1ed6:	6013      	str	r3, [r2, #0]
}
    1ed8:	4770      	bx	lr
    1eda:	46c0      	nop			; (mov r8, r8)
    1edc:	200013f4 	.word	0x200013f4

00001ee0 <fInit_Mouth>:

void fInit_Mouth(void)
{
    1ee0:	b510      	push	{r4, lr}

	uint32_t x = 0;
	memset((uint8_t *)&Mouth, 0, sizeof(Mouth));
    1ee2:	4c24      	ldr	r4, [pc, #144]	; (1f74 <fInit_Mouth+0x94>)
    1ee4:	2238      	movs	r2, #56	; 0x38
    1ee6:	2100      	movs	r1, #0
    1ee8:	0020      	movs	r0, r4
    1eea:	4b23      	ldr	r3, [pc, #140]	; (1f78 <fInit_Mouth+0x98>)
    1eec:	4798      	blx	r3
	fMouth_SetNoseColor(0);
    1eee:	2000      	movs	r0, #0
    1ef0:	4b22      	ldr	r3, [pc, #136]	; (1f7c <fInit_Mouth+0x9c>)
    1ef2:	4798      	blx	r3

	Mouth.Ctrl.Row_idx = 0x01;	// Set first Row active
    1ef4:	6822      	ldr	r2, [r4, #0]
    1ef6:	230f      	movs	r3, #15
    1ef8:	439a      	bics	r2, r3
    1efa:	3b0e      	subs	r3, #14
    1efc:	4313      	orrs	r3, r2
    1efe:	6023      	str	r3, [r4, #0]
	Mouth.Ctrl.Column_idx = 0x00;	// Set first Row active
    1f00:	6822      	ldr	r2, [r4, #0]
    1f02:	23f0      	movs	r3, #240	; 0xf0
    1f04:	439a      	bics	r2, r3
    1f06:	6022      	str	r2, [r4, #0]
	Mouth.Ctrl.Anim_En = 0;
    1f08:	6822      	ldr	r2, [r4, #0]
    1f0a:	4b1d      	ldr	r3, [pc, #116]	; (1f80 <fInit_Mouth+0xa0>)
    1f0c:	4013      	ands	r3, r2
    1f0e:	6023      	str	r3, [r4, #0]
	Mouth.Ctrl.Anim_Rpt = 0;
    1f10:	6822      	ldr	r2, [r4, #0]
    1f12:	4b1c      	ldr	r3, [pc, #112]	; (1f84 <fInit_Mouth+0xa4>)
    1f14:	4013      	ands	r3, r2
    1f16:	6023      	str	r3, [r4, #0]
	Mouth.FramePeriode = 50;
    1f18:	2332      	movs	r3, #50	; 0x32
    1f1a:	80e3      	strh	r3, [r4, #6]

	Mouth.Mouth_Data[x][3]= 0b00000;
    1f1c:	2300      	movs	r3, #0
    1f1e:	72e3      	strb	r3, [r4, #11]
	Mouth.Mouth_Data[x][2]= 0b00000;
    1f20:	72a3      	strb	r3, [r4, #10]
	Mouth.Mouth_Data[x][1]= 0b00000;
    1f22:	7263      	strb	r3, [r4, #9]
	Mouth.Mouth_Data[x][0]= 0b00000;
    1f24:	7223      	strb	r3, [r4, #8]
	x++;

	Mouth.Mouth_Data[x][3]= 0b11111;
    1f26:	221f      	movs	r2, #31
    1f28:	73e2      	strb	r2, [r4, #15]
	Mouth.Mouth_Data[x][2]= 0b10001;
    1f2a:	2011      	movs	r0, #17
    1f2c:	73a0      	strb	r0, [r4, #14]
	Mouth.Mouth_Data[x][1]= 0b01110;
    1f2e:	210e      	movs	r1, #14
    1f30:	7361      	strb	r1, [r4, #13]
	Mouth.Mouth_Data[x][0]= 0b00000;
    1f32:	7323      	strb	r3, [r4, #12]
	x++;


	Mouth.Mouth_Data[x][3]= 0b11111;
    1f34:	74e2      	strb	r2, [r4, #19]
	Mouth.Mouth_Data[x][2]= 0b10001;
    1f36:	74a0      	strb	r0, [r4, #18]
	Mouth.Mouth_Data[x][1]= 0b10001;
    1f38:	7460      	strb	r0, [r4, #17]
	Mouth.Mouth_Data[x][0]= 0b01110;
    1f3a:	7421      	strb	r1, [r4, #16]
	x++;

	Mouth.Mouth_Data[x][3]= 0b11111;
    1f3c:	75e2      	strb	r2, [r4, #23]
	Mouth.Mouth_Data[x][2]= 0b11111;
    1f3e:	75a2      	strb	r2, [r4, #22]
	Mouth.Mouth_Data[x][1]= 0b11111;
    1f40:	7562      	strb	r2, [r4, #21]
	Mouth.Mouth_Data[x][0]= 0b01110;
    1f42:	7521      	strb	r1, [r4, #20]
	x++;

	Mouth.Mouth_Data[x][3]= 0b11111;
    1f44:	76e2      	strb	r2, [r4, #27]
	Mouth.Mouth_Data[x][2]= 0b11111;
    1f46:	76a2      	strb	r2, [r4, #26]
	Mouth.Mouth_Data[x][1]= 0b01110;
    1f48:	7661      	strb	r1, [r4, #25]
	Mouth.Mouth_Data[x][0]= 0b00000;
    1f4a:	7623      	strb	r3, [r4, #24]
	x++;

	Mouth.Mouth_Data[x][3]= 0b00000;
    1f4c:	77e3      	strb	r3, [r4, #31]
	Mouth.Mouth_Data[x][2]= 0b11111;
    1f4e:	77a2      	strb	r2, [r4, #30]
	Mouth.Mouth_Data[x][1]= 0b00000;
    1f50:	7763      	strb	r3, [r4, #29]
	Mouth.Mouth_Data[x][0]= 0b00000;
    1f52:	7723      	strb	r3, [r4, #28]
	x++;

	Mouth.Ctrl.nFrames = x;
    1f54:	6822      	ldr	r2, [r4, #0]
    1f56:	4b0c      	ldr	r3, [pc, #48]	; (1f88 <fInit_Mouth+0xa8>)
    1f58:	401a      	ands	r2, r3
    1f5a:	23c0      	movs	r3, #192	; 0xc0
    1f5c:	031b      	lsls	r3, r3, #12
    1f5e:	4313      	orrs	r3, r2
    1f60:	6023      	str	r3, [r4, #0]
	
	fsetMouth(Mouth.Ctrl.Row_idx, Mouth.Mouth_Data[0][0]);
    1f62:	6820      	ldr	r0, [r4, #0]
    1f64:	0700      	lsls	r0, r0, #28
    1f66:	0f00      	lsrs	r0, r0, #28
    1f68:	7a21      	ldrb	r1, [r4, #8]
    1f6a:	b2c9      	uxtb	r1, r1
    1f6c:	4b07      	ldr	r3, [pc, #28]	; (1f8c <fInit_Mouth+0xac>)
    1f6e:	4798      	blx	r3
	

}
    1f70:	bd10      	pop	{r4, pc}
    1f72:	46c0      	nop			; (mov r8, r8)
    1f74:	200013f4 	.word	0x200013f4
    1f78:	0000c39f 	.word	0x0000c39f
    1f7c:	00001e65 	.word	0x00001e65
    1f80:	ffbfffff 	.word	0xffbfffff
    1f84:	ff7fffff 	.word	0xff7fffff
    1f88:	ffc1ffff 	.word	0xffc1ffff
    1f8c:	00001d25 	.word	0x00001d25

00001f90 <pearson>:

struct usart_module *UART_SerialPort_Instance = NULL;


uint8_t pearson(uint8_t *key, uint8_t len)
{
    1f90:	b530      	push	{r4, r5, lr}
    1f92:	0005      	movs	r5, r0
	uint8_t hash = 0;
	for (uint8_t i = 0; i < len; i++)
    1f94:	2300      	movs	r3, #0
	uint8_t hash = 0;
    1f96:	2200      	movs	r2, #0
	for (uint8_t i = 0; i < len; i++)
    1f98:	e005      	b.n	1fa6 <pearson+0x16>
		hash = pearsondata[hash ^ key[i]];
    1f9a:	5ce8      	ldrb	r0, [r5, r3]
    1f9c:	4042      	eors	r2, r0
    1f9e:	4c04      	ldr	r4, [pc, #16]	; (1fb0 <pearson+0x20>)
    1fa0:	5ca2      	ldrb	r2, [r4, r2]
	for (uint8_t i = 0; i < len; i++)
    1fa2:	3301      	adds	r3, #1
    1fa4:	b2db      	uxtb	r3, r3
    1fa6:	428b      	cmp	r3, r1
    1fa8:	d3f7      	bcc.n	1f9a <pearson+0xa>
	return (hash);
}
    1faa:	0010      	movs	r0, r2
    1fac:	bd30      	pop	{r4, r5, pc}
    1fae:	46c0      	nop			; (mov r8, r8)
    1fb0:	0000c874 	.word	0x0000c874

00001fb4 <fSerial_InitSerialProtocol>:

void fSerial_InitSerialProtocol(uint32_t *MasterCom_Idx)
{
    1fb4:	b510      	push	{r4, lr}
	command_.commandNumber = 0;
    1fb6:	4b0a      	ldr	r3, [pc, #40]	; (1fe0 <fSerial_InitSerialProtocol+0x2c>)
    1fb8:	2200      	movs	r2, #0
    1fba:	701a      	strb	r2, [r3, #0]
	command_.nInputData = 0;
    1fbc:	705a      	strb	r2, [r3, #1]
	command_.nOutputData = 0;
    1fbe:	2182      	movs	r1, #130	; 0x82
    1fc0:	545a      	strb	r2, [r3, r1]
	UART_SerialPort_Instance =(void *) MasterCom_Idx;
    1fc2:	4b08      	ldr	r3, [pc, #32]	; (1fe4 <fSerial_InitSerialProtocol+0x30>)
    1fc4:	6018      	str	r0, [r3, #0]
	if(UART_SerialPort_Instance != NULL)
    1fc6:	2800      	cmp	r0, #0
    1fc8:	d009      	beq.n	1fde <fSerial_InitSerialProtocol+0x2a>
	{
		usart_read_buffer_job(UART_SerialPort_Instance, Serial_RXBuf, 128);
    1fca:	4c07      	ldr	r4, [pc, #28]	; (1fe8 <fSerial_InitSerialProtocol+0x34>)
    1fcc:	3280      	adds	r2, #128	; 0x80
    1fce:	0021      	movs	r1, r4
    1fd0:	4b06      	ldr	r3, [pc, #24]	; (1fec <fSerial_InitSerialProtocol+0x38>)
    1fd2:	4798      	blx	r3
		rx_start = Serial_RXBuf;
    1fd4:	4b06      	ldr	r3, [pc, #24]	; (1ff0 <fSerial_InitSerialProtocol+0x3c>)
    1fd6:	601c      	str	r4, [r3, #0]
		lRX_bytes = 128;
    1fd8:	2280      	movs	r2, #128	; 0x80
    1fda:	4b06      	ldr	r3, [pc, #24]	; (1ff4 <fSerial_InitSerialProtocol+0x40>)
    1fdc:	601a      	str	r2, [r3, #0]
	}
}
    1fde:	bd10      	pop	{r4, pc}
    1fe0:	200011e0 	.word	0x200011e0
    1fe4:	20000e60 	.word	0x20000e60
    1fe8:	20001430 	.word	0x20001430
    1fec:	00006ef1 	.word	0x00006ef1
    1ff0:	2000142c 	.word	0x2000142c
    1ff4:	200014b0 	.word	0x200014b0

00001ff8 <fSerial_procesaEntrada>:

bool fSerial_procesaEntrada(uint8_t* buf, uint8_t nBytes)
{
    1ff8:	b570      	push	{r4, r5, r6, lr}
    1ffa:	0004      	movs	r4, r0
    1ffc:	000d      	movs	r5, r1
	if (nBytes < 5)
    1ffe:	2904      	cmp	r1, #4
    2000:	d931      	bls.n	2066 <STACK_SIZE+0x66>
		return false;
	if (buf[0] != INPUT_FLAG)
    2002:	7803      	ldrb	r3, [r0, #0]
    2004:	2bff      	cmp	r3, #255	; 0xff
    2006:	d001      	beq.n	200c <STACK_SIZE+0xc>
		return false;
    2008:	2000      	movs	r0, #0
    200a:	e02d      	b.n	2068 <STACK_SIZE+0x68>
	if (buf[nBytes - 1] != OUTPUT_FLAG)
    200c:	1843      	adds	r3, r0, r1
    200e:	3b01      	subs	r3, #1
    2010:	781b      	ldrb	r3, [r3, #0]
    2012:	2bfe      	cmp	r3, #254	; 0xfe
    2014:	d001      	beq.n	201a <STACK_SIZE+0x1a>
		return false;
    2016:	2000      	movs	r0, #0
    2018:	e026      	b.n	2068 <STACK_SIZE+0x68>
	/* Disabled checksum for debug purposes
	 */
	uint8_t check = pearson(buf + 1, nBytes - 3);
    201a:	3001      	adds	r0, #1
    201c:	3903      	subs	r1, #3
    201e:	b2c9      	uxtb	r1, r1
    2020:	4b13      	ldr	r3, [pc, #76]	; (2070 <STACK_SIZE+0x70>)
    2022:	4798      	blx	r3
	uint8_t inCheck = buf[nBytes - 2];
    2024:	1eab      	subs	r3, r5, #2
    2026:	5ce3      	ldrb	r3, [r4, r3]

	if (check != inCheck)
    2028:	4298      	cmp	r0, r3
    202a:	d001      	beq.n	2030 <STACK_SIZE+0x30>
		return false;
    202c:	2000      	movs	r0, #0
    202e:	e01b      	b.n	2068 <STACK_SIZE+0x68>
	
	if (buf[2] != nBytes - 5)
    2030:	78a3      	ldrb	r3, [r4, #2]
    2032:	002e      	movs	r6, r5
    2034:	1f6a      	subs	r2, r5, #5
    2036:	4293      	cmp	r3, r2
    2038:	d001      	beq.n	203e <STACK_SIZE+0x3e>
		return false;
    203a:	2000      	movs	r0, #0
    203c:	e014      	b.n	2068 <STACK_SIZE+0x68>
	if (buf[2] > 50)
    203e:	2b32      	cmp	r3, #50	; 0x32
    2040:	d813      	bhi.n	206a <STACK_SIZE+0x6a>
		return false;
	command_.commandNumber = buf[1];
    2042:	4b0c      	ldr	r3, [pc, #48]	; (2074 <STACK_SIZE+0x74>)
    2044:	7862      	ldrb	r2, [r4, #1]
    2046:	701a      	strb	r2, [r3, #0]
	command_.nInputData = nBytes - 5;
    2048:	3d05      	subs	r5, #5
    204a:	705d      	strb	r5, [r3, #1]
	for (int i = 3; i < nBytes - 2; i++)
    204c:	2303      	movs	r3, #3
    204e:	e005      	b.n	205c <STACK_SIZE+0x5c>
		command_.inputData[i - 3] = buf[i];
    2050:	1ed8      	subs	r0, r3, #3
    2052:	5ce1      	ldrb	r1, [r4, r3]
    2054:	4a07      	ldr	r2, [pc, #28]	; (2074 <STACK_SIZE+0x74>)
    2056:	1812      	adds	r2, r2, r0
    2058:	7091      	strb	r1, [r2, #2]
	for (int i = 3; i < nBytes - 2; i++)
    205a:	3301      	adds	r3, #1
    205c:	1eb2      	subs	r2, r6, #2
    205e:	4293      	cmp	r3, r2
    2060:	dbf6      	blt.n	2050 <STACK_SIZE+0x50>
	return true;
    2062:	2001      	movs	r0, #1
    2064:	e000      	b.n	2068 <STACK_SIZE+0x68>
		return false;
    2066:	2000      	movs	r0, #0
}
    2068:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    206a:	2000      	movs	r0, #0
    206c:	e7fc      	b.n	2068 <STACK_SIZE+0x68>
    206e:	46c0      	nop			; (mov r8, r8)
    2070:	00001f91 	.word	0x00001f91
    2074:	200011e0 	.word	0x200011e0

00002078 <fSerial_processCommands>:
		return;						//y vamos a por el siguiente dato
	}
}

void fSerial_processCommands()
{
    2078:	b5f0      	push	{r4, r5, r6, r7, lr}
    207a:	b085      	sub	sp, #20
	isInputCorrect_ = true;
    207c:	2201      	movs	r2, #1
    207e:	4bcb      	ldr	r3, [pc, #812]	; (23ac <fSerial_processCommands+0x334>)
    2080:	701a      	strb	r2, [r3, #0]
	switch (command_.commandNumber)
    2082:	4bcb      	ldr	r3, [pc, #812]	; (23b0 <fSerial_processCommands+0x338>)
    2084:	781a      	ldrb	r2, [r3, #0]
    2086:	0013      	movs	r3, r2
    2088:	3b40      	subs	r3, #64	; 0x40
    208a:	b2d9      	uxtb	r1, r3
    208c:	2950      	cmp	r1, #80	; 0x50
    208e:	d900      	bls.n	2092 <fSerial_processCommands+0x1a>
    2090:	e309      	b.n	26a6 <fSerial_processCommands+0x62e>
    2092:	008b      	lsls	r3, r1, #2
    2094:	49c7      	ldr	r1, [pc, #796]	; (23b4 <fSerial_processCommands+0x33c>)
    2096:	58cb      	ldr	r3, [r1, r3]
    2098:	469f      	mov	pc, r3
	{
	case GET_VERSION:
		if (command_.nInputData != 0)
    209a:	4bc5      	ldr	r3, [pc, #788]	; (23b0 <fSerial_processCommands+0x338>)
    209c:	785b      	ldrb	r3, [r3, #1]
    209e:	2b00      	cmp	r3, #0
    20a0:	d003      	beq.n	20aa <fSerial_processCommands+0x32>
		{
			isInputCorrect_ = false;
    20a2:	2200      	movs	r2, #0
    20a4:	4bc1      	ldr	r3, [pc, #772]	; (23ac <fSerial_processCommands+0x334>)
    20a6:	701a      	strb	r2, [r3, #0]
    20a8:	e146      	b.n	2338 <fSerial_processCommands+0x2c0>
		}
		else
		{
			command_.nOutputData = 2;
    20aa:	4bc1      	ldr	r3, [pc, #772]	; (23b0 <fSerial_processCommands+0x338>)
    20ac:	2102      	movs	r1, #2
    20ae:	2282      	movs	r2, #130	; 0x82
    20b0:	5499      	strb	r1, [r3, r2]
			command_.outputData[0] = BOARD_ID;
    20b2:	3a81      	subs	r2, #129	; 0x81
    20b4:	3181      	adds	r1, #129	; 0x81
    20b6:	545a      	strb	r2, [r3, r1]
			command_.outputData[1] = LIBRARY_VERSION;
    20b8:	3101      	adds	r1, #1
    20ba:	545a      	strb	r2, [r3, r1]
    20bc:	e13c      	b.n	2338 <fSerial_processCommands+0x2c0>
		}
		break;
	case SET_MOUTH_VALUE:
		if (command_.nInputData != 4)
    20be:	4bbc      	ldr	r3, [pc, #752]	; (23b0 <fSerial_processCommands+0x338>)
    20c0:	785b      	ldrb	r3, [r3, #1]
    20c2:	2b04      	cmp	r3, #4
    20c4:	d003      	beq.n	20ce <fSerial_processCommands+0x56>
		{
			isInputCorrect_ = false;
    20c6:	2200      	movs	r2, #0
    20c8:	4bb8      	ldr	r3, [pc, #736]	; (23ac <fSerial_processCommands+0x334>)
    20ca:	701a      	strb	r2, [r3, #0]
    20cc:	e134      	b.n	2338 <fSerial_processCommands+0x2c0>
		}
		else
		{
			// uint32_t data = command_.inputData[0] <<24 | command_.inputData[1] <<16 | command_.inputData[2] <<8 | command_.inputData[3];
			command_.nOutputData = 0;
    20ce:	4bb8      	ldr	r3, [pc, #736]	; (23b0 <fSerial_processCommands+0x338>)
    20d0:	2100      	movs	r1, #0
    20d2:	2282      	movs	r2, #130	; 0x82
    20d4:	5499      	strb	r1, [r3, r2]
			fMouth_SetData(*((uint32_t *)command_.inputData));
    20d6:	1c9a      	adds	r2, r3, #2
    20d8:	7898      	ldrb	r0, [r3, #2]
    20da:	78db      	ldrb	r3, [r3, #3]
    20dc:	021b      	lsls	r3, r3, #8
    20de:	4303      	orrs	r3, r0
    20e0:	7890      	ldrb	r0, [r2, #2]
    20e2:	0400      	lsls	r0, r0, #16
    20e4:	4303      	orrs	r3, r0
    20e6:	78d0      	ldrb	r0, [r2, #3]
    20e8:	0600      	lsls	r0, r0, #24
    20ea:	4318      	orrs	r0, r3
    20ec:	4bb2      	ldr	r3, [pc, #712]	; (23b8 <fSerial_processCommands+0x340>)
    20ee:	4798      	blx	r3
    20f0:	e122      	b.n	2338 <fSerial_processCommands+0x2c0>
		}
		break;
	case SET_STATE:
		if (command_.nInputData != 1)
    20f2:	4baf      	ldr	r3, [pc, #700]	; (23b0 <fSerial_processCommands+0x338>)
    20f4:	785b      	ldrb	r3, [r3, #1]
    20f6:	2b01      	cmp	r3, #1
    20f8:	d003      	beq.n	2102 <fSerial_processCommands+0x8a>
		{
			isInputCorrect_ = false;
    20fa:	2200      	movs	r2, #0
    20fc:	4bab      	ldr	r3, [pc, #684]	; (23ac <fSerial_processCommands+0x334>)
    20fe:	701a      	strb	r2, [r3, #0]
    2100:	e11a      	b.n	2338 <fSerial_processCommands+0x2c0>
		}
		else
		{
			command_.nOutputData = 0;
    2102:	4bab      	ldr	r3, [pc, #684]	; (23b0 <fSerial_processCommands+0x338>)
    2104:	2100      	movs	r1, #0
    2106:	2282      	movs	r2, #130	; 0x82
    2108:	5499      	strb	r1, [r3, r2]
			fMouth_SetNoseColor(command_.inputData[0]);
    210a:	7898      	ldrb	r0, [r3, #2]
    210c:	4bab      	ldr	r3, [pc, #684]	; (23bc <fSerial_processCommands+0x344>)
    210e:	4798      	blx	r3
    2110:	e112      	b.n	2338 <fSerial_processCommands+0x2c0>
		}
		break;
	
	case GET_TOUCH: 
		if (command_.nInputData != 0)
    2112:	4ba7      	ldr	r3, [pc, #668]	; (23b0 <fSerial_processCommands+0x338>)
    2114:	785b      	ldrb	r3, [r3, #1]
    2116:	2b00      	cmp	r3, #0
    2118:	d003      	beq.n	2122 <fSerial_processCommands+0xaa>
			isInputCorrect_ = false;
    211a:	2200      	movs	r2, #0
    211c:	4ba3      	ldr	r3, [pc, #652]	; (23ac <fSerial_processCommands+0x334>)
    211e:	701a      	strb	r2, [r3, #0]
    2120:	e10a      	b.n	2338 <fSerial_processCommands+0x2c0>
		else
		{
			command_.nOutputData = 1;
    2122:	4ca3      	ldr	r4, [pc, #652]	; (23b0 <fSerial_processCommands+0x338>)
    2124:	2201      	movs	r2, #1
    2126:	2382      	movs	r3, #130	; 0x82
    2128:	54e2      	strb	r2, [r4, r3]
			command_.outputData[0] = GetPressedButton();
    212a:	4ba5      	ldr	r3, [pc, #660]	; (23c0 <fSerial_processCommands+0x348>)
    212c:	4798      	blx	r3
    212e:	2383      	movs	r3, #131	; 0x83
    2130:	54e0      	strb	r0, [r4, r3]
    2132:	e101      	b.n	2338 <fSerial_processCommands+0x2c0>
		}
		break;
	case SET_TOUCH_PARAMS:
		if (command_.nInputData != 3)
    2134:	4b9e      	ldr	r3, [pc, #632]	; (23b0 <fSerial_processCommands+0x338>)
    2136:	785b      	ldrb	r3, [r3, #1]
    2138:	2b03      	cmp	r3, #3
    213a:	d003      	beq.n	2144 <fSerial_processCommands+0xcc>
		{
			isInputCorrect_ = false;
    213c:	2200      	movs	r2, #0
    213e:	4b9b      	ldr	r3, [pc, #620]	; (23ac <fSerial_processCommands+0x334>)
    2140:	701a      	strb	r2, [r3, #0]
    2142:	e0f9      	b.n	2338 <fSerial_processCommands+0x2c0>
		}
		else
		{
			command_.nOutputData = 0;
    2144:	4b9a      	ldr	r3, [pc, #616]	; (23b0 <fSerial_processCommands+0x338>)
    2146:	2100      	movs	r1, #0
    2148:	2282      	movs	r2, #130	; 0x82
    214a:	5499      	strb	r1, [r3, r2]
			CAP1203_Config(command_.inputData[0], command_.inputData[1], command_.inputData[2]);
    214c:	791a      	ldrb	r2, [r3, #4]
    214e:	78d9      	ldrb	r1, [r3, #3]
    2150:	7898      	ldrb	r0, [r3, #2]
    2152:	4b9c      	ldr	r3, [pc, #624]	; (23c4 <fSerial_processCommands+0x34c>)
    2154:	4798      	blx	r3
    2156:	e0ef      	b.n	2338 <fSerial_processCommands+0x2c0>
		}
		break;
	case SET_MIC_INPUT:
		if (command_.nInputData != 1)
    2158:	4b95      	ldr	r3, [pc, #596]	; (23b0 <fSerial_processCommands+0x338>)
    215a:	785b      	ldrb	r3, [r3, #1]
    215c:	2b01      	cmp	r3, #1
    215e:	d003      	beq.n	2168 <fSerial_processCommands+0xf0>
		{
			isInputCorrect_ = false;
    2160:	2200      	movs	r2, #0
    2162:	4b92      	ldr	r3, [pc, #584]	; (23ac <fSerial_processCommands+0x334>)
    2164:	701a      	strb	r2, [r3, #0]
    2166:	e0e7      	b.n	2338 <fSerial_processCommands+0x2c0>
		}
		else
		{
			command_.nOutputData = 0;
    2168:	4b91      	ldr	r3, [pc, #580]	; (23b0 <fSerial_processCommands+0x338>)
    216a:	2100      	movs	r1, #0
    216c:	2282      	movs	r2, #130	; 0x82
    216e:	5499      	strb	r1, [r3, r2]
			if(command_.inputData[0] != SetMicIndex(command_.inputData[0]))
    2170:	789c      	ldrb	r4, [r3, #2]
    2172:	0020      	movs	r0, r4
    2174:	4b94      	ldr	r3, [pc, #592]	; (23c8 <fSerial_processCommands+0x350>)
    2176:	4798      	blx	r3
    2178:	4284      	cmp	r4, r0
    217a:	d100      	bne.n	217e <fSerial_processCommands+0x106>
    217c:	e0dc      	b.n	2338 <fSerial_processCommands+0x2c0>
				isInputCorrect_ = false;
    217e:	2200      	movs	r2, #0
    2180:	4b8a      	ldr	r3, [pc, #552]	; (23ac <fSerial_processCommands+0x334>)
    2182:	701a      	strb	r2, [r3, #0]
    2184:	e0d8      	b.n	2338 <fSerial_processCommands+0x2c0>
		}
		break;

	case GET_MIC_REPORT:
		if (command_.nInputData != 0)
    2186:	4b8a      	ldr	r3, [pc, #552]	; (23b0 <fSerial_processCommands+0x338>)
    2188:	785b      	ldrb	r3, [r3, #1]
    218a:	2b00      	cmp	r3, #0
    218c:	d003      	beq.n	2196 <fSerial_processCommands+0x11e>
		{
			isInputCorrect_ = false;
    218e:	2200      	movs	r2, #0
    2190:	4b86      	ldr	r3, [pc, #536]	; (23ac <fSerial_processCommands+0x334>)
    2192:	701a      	strb	r2, [r3, #0]
    2194:	e0d0      	b.n	2338 <fSerial_processCommands+0x2c0>
		}
		else
		{
			uint16_t *pData = (uint16_t *)&command_.outputData[0];
			float *pRMS = GetRMSdata();
    2196:	4b8d      	ldr	r3, [pc, #564]	; (23cc <fSerial_processCommands+0x354>)
    2198:	4798      	blx	r3
    219a:	0007      	movs	r7, r0
			command_.nOutputData = 6;
    219c:	4c84      	ldr	r4, [pc, #528]	; (23b0 <fSerial_processCommands+0x338>)
    219e:	2206      	movs	r2, #6
    21a0:	2382      	movs	r3, #130	; 0x82
    21a2:	54e2      	strb	r2, [r4, r3]

			*pData++ = (uint16_t)(*pRMS++ * 10000);
    21a4:	4e8a      	ldr	r6, [pc, #552]	; (23d0 <fSerial_processCommands+0x358>)
    21a6:	498b      	ldr	r1, [pc, #556]	; (23d4 <fSerial_processCommands+0x35c>)
    21a8:	6800      	ldr	r0, [r0, #0]
    21aa:	47b0      	blx	r6
    21ac:	4d8a      	ldr	r5, [pc, #552]	; (23d8 <fSerial_processCommands+0x360>)
    21ae:	47a8      	blx	r5
    21b0:	b280      	uxth	r0, r0
    21b2:	2383      	movs	r3, #131	; 0x83
    21b4:	54e0      	strb	r0, [r4, r3]
    21b6:	0a00      	lsrs	r0, r0, #8
    21b8:	0023      	movs	r3, r4
    21ba:	3383      	adds	r3, #131	; 0x83
    21bc:	7058      	strb	r0, [r3, #1]
			*pData++ = (uint16_t)(*pRMS++ * 10000);
    21be:	4985      	ldr	r1, [pc, #532]	; (23d4 <fSerial_processCommands+0x35c>)
    21c0:	6878      	ldr	r0, [r7, #4]
    21c2:	47b0      	blx	r6
    21c4:	47a8      	blx	r5
    21c6:	b280      	uxth	r0, r0
    21c8:	2385      	movs	r3, #133	; 0x85
    21ca:	54e0      	strb	r0, [r4, r3]
    21cc:	0a00      	lsrs	r0, r0, #8
    21ce:	0023      	movs	r3, r4
    21d0:	3385      	adds	r3, #133	; 0x85
    21d2:	7058      	strb	r0, [r3, #1]
			*pData++ = (uint16_t)(*pRMS++ * 10000);
    21d4:	68b8      	ldr	r0, [r7, #8]
    21d6:	497f      	ldr	r1, [pc, #508]	; (23d4 <fSerial_processCommands+0x35c>)
    21d8:	47b0      	blx	r6
    21da:	47a8      	blx	r5
    21dc:	b280      	uxth	r0, r0
    21de:	2387      	movs	r3, #135	; 0x87
    21e0:	54e0      	strb	r0, [r4, r3]
    21e2:	0a00      	lsrs	r0, r0, #8
    21e4:	3487      	adds	r4, #135	; 0x87
    21e6:	7060      	strb	r0, [r4, #1]
    21e8:	e0a6      	b.n	2338 <fSerial_processCommands+0x2c0>
		}
		break;

	case RESET_SERVO:
		if (command_.nInputData != 1)
    21ea:	4b71      	ldr	r3, [pc, #452]	; (23b0 <fSerial_processCommands+0x338>)
    21ec:	785b      	ldrb	r3, [r3, #1]
    21ee:	2b01      	cmp	r3, #1
    21f0:	d003      	beq.n	21fa <fSerial_processCommands+0x182>
			isInputCorrect_ = false;
    21f2:	2200      	movs	r2, #0
    21f4:	4b6d      	ldr	r3, [pc, #436]	; (23ac <fSerial_processCommands+0x334>)
    21f6:	701a      	strb	r2, [r3, #0]
    21f8:	e09e      	b.n	2338 <fSerial_processCommands+0x2c0>
		else
		{
			command_.nOutputData = 0;
    21fa:	4b6d      	ldr	r3, [pc, #436]	; (23b0 <fSerial_processCommands+0x338>)
    21fc:	2100      	movs	r1, #0
    21fe:	2282      	movs	r2, #130	; 0x82
    2200:	5499      	strb	r1, [r3, r2]
			ResetServo(command_.inputData[0]);
    2202:	7898      	ldrb	r0, [r3, #2]
    2204:	4b75      	ldr	r3, [pc, #468]	; (23dc <fSerial_processCommands+0x364>)
    2206:	4798      	blx	r3
    2208:	e096      	b.n	2338 <fSerial_processCommands+0x2c0>
		}
		break;

	case SET_SERVO:
		if (command_.nInputData != 5)
    220a:	4b69      	ldr	r3, [pc, #420]	; (23b0 <fSerial_processCommands+0x338>)
    220c:	785b      	ldrb	r3, [r3, #1]
    220e:	2b05      	cmp	r3, #5
    2210:	d003      	beq.n	221a <fSerial_processCommands+0x1a2>
		{
			isInputCorrect_ = false;
    2212:	2200      	movs	r2, #0
    2214:	4b65      	ldr	r3, [pc, #404]	; (23ac <fSerial_processCommands+0x334>)
    2216:	701a      	strb	r2, [r3, #0]
    2218:	e08e      	b.n	2338 <fSerial_processCommands+0x2c0>
		}
		else
		{

			uint16_t angleMilliseconds = *(command_.inputData + 1) | *(command_.inputData + 2) <<8;
    221a:	4c65      	ldr	r4, [pc, #404]	; (23b0 <fSerial_processCommands+0x338>)
    221c:	78e5      	ldrb	r5, [r4, #3]
    221e:	7923      	ldrb	r3, [r4, #4]
    2220:	021b      	lsls	r3, r3, #8
    2222:	431d      	orrs	r5, r3
			uint16_t servoSpeed = *(command_.inputData + 3)  | *(command_.inputData + 4) << 8;
    2224:	7966      	ldrb	r6, [r4, #5]
    2226:	79a3      	ldrb	r3, [r4, #6]
    2228:	021b      	lsls	r3, r3, #8
    222a:	431e      	orrs	r6, r3

			command_.nOutputData = 0;
    222c:	2200      	movs	r2, #0
    222e:	2382      	movs	r3, #130	; 0x82
    2230:	54e2      	strb	r2, [r4, r3]

			SetServoMovingFlag(command_.inputData[0] & touch_auto_off);
    2232:	78a3      	ldrb	r3, [r4, #2]
    2234:	4a6a      	ldr	r2, [pc, #424]	; (23e0 <fSerial_processCommands+0x368>)
    2236:	7810      	ldrb	r0, [r2, #0]
    2238:	4018      	ands	r0, r3
    223a:	4b6a      	ldr	r3, [pc, #424]	; (23e4 <fSerial_processCommands+0x36c>)
    223c:	4798      	blx	r3

			setServoSpeed(command_.inputData[0], servoSpeed);
    223e:	78a0      	ldrb	r0, [r4, #2]
    2240:	0031      	movs	r1, r6
    2242:	4b69      	ldr	r3, [pc, #420]	; (23e8 <fSerial_processCommands+0x370>)
    2244:	4798      	blx	r3
			Delay_ms(2);
    2246:	2002      	movs	r0, #2
    2248:	4b68      	ldr	r3, [pc, #416]	; (23ec <fSerial_processCommands+0x374>)
    224a:	4798      	blx	r3
			moveServo(command_.inputData[0], angleMilliseconds);
    224c:	78a0      	ldrb	r0, [r4, #2]
    224e:	0029      	movs	r1, r5
    2250:	4b67      	ldr	r3, [pc, #412]	; (23f0 <fSerial_processCommands+0x378>)
    2252:	4798      	blx	r3
    2254:	e070      	b.n	2338 <fSerial_processCommands+0x2c0>
		}
		break;
		
	case SET_SERVO_ANGLE_REL:  // tres parametros: axis, angle_0, angle_1.
		if (command_.nInputData != 3)
    2256:	4b56      	ldr	r3, [pc, #344]	; (23b0 <fSerial_processCommands+0x338>)
    2258:	785b      	ldrb	r3, [r3, #1]
    225a:	2b03      	cmp	r3, #3
    225c:	d003      	beq.n	2266 <fSerial_processCommands+0x1ee>
		{
			isInputCorrect_ = false;
    225e:	2200      	movs	r2, #0
    2260:	4b52      	ldr	r3, [pc, #328]	; (23ac <fSerial_processCommands+0x334>)
    2262:	701a      	strb	r2, [r3, #0]
    2264:	e068      	b.n	2338 <fSerial_processCommands+0x2c0>
		}
		else
		{
			int16_t rel_angle, dest_angle;
			command_.nOutputData = 0;
    2266:	4b52      	ldr	r3, [pc, #328]	; (23b0 <fSerial_processCommands+0x338>)
    2268:	2100      	movs	r1, #0
    226a:	2282      	movs	r2, #130	; 0x82
    226c:	5499      	strb	r1, [r3, r2]
			
			rel_angle = (int16_t)((command_.inputData[2] << 8) | command_.inputData[1]);
    226e:	791c      	ldrb	r4, [r3, #4]
    2270:	0224      	lsls	r4, r4, #8
    2272:	b224      	sxth	r4, r4
    2274:	78d9      	ldrb	r1, [r3, #3]
    2276:	430c      	orrs	r4, r1

			// If relative movement is <trig_angle then auto touch off isn´t trigger 
			if(abs(rel_angle) > trig_angle)
    2278:	17e3      	asrs	r3, r4, #31
    227a:	18e2      	adds	r2, r4, r3
    227c:	405a      	eors	r2, r3
    227e:	4b5d      	ldr	r3, [pc, #372]	; (23f4 <fSerial_processCommands+0x37c>)
    2280:	881b      	ldrh	r3, [r3, #0]
    2282:	429a      	cmp	r2, r3
    2284:	dc0b      	bgt.n	229e <fSerial_processCommands+0x226>
				SetServoMovingFlag(command_.inputData[0] & touch_auto_off);

			// get current servo position.
			dest_angle = ReadRegister(command_.inputData[0], eXLCMD_READ, XL_PRESENT_POSITION);
    2286:	4d4a      	ldr	r5, [pc, #296]	; (23b0 <fSerial_processCommands+0x338>)
    2288:	78a8      	ldrb	r0, [r5, #2]
    228a:	2225      	movs	r2, #37	; 0x25
    228c:	2102      	movs	r1, #2
    228e:	4b5a      	ldr	r3, [pc, #360]	; (23f8 <fSerial_processCommands+0x380>)
    2290:	4798      	blx	r3
			dest_angle += rel_angle;
    2292:	1904      	adds	r4, r0, r4
    2294:	b2a1      	uxth	r1, r4
			moveServo(command_.inputData[0], dest_angle);
    2296:	78a8      	ldrb	r0, [r5, #2]
    2298:	4b55      	ldr	r3, [pc, #340]	; (23f0 <fSerial_processCommands+0x378>)
    229a:	4798      	blx	r3
    229c:	e04c      	b.n	2338 <fSerial_processCommands+0x2c0>
				SetServoMovingFlag(command_.inputData[0] & touch_auto_off);
    229e:	4b44      	ldr	r3, [pc, #272]	; (23b0 <fSerial_processCommands+0x338>)
    22a0:	789b      	ldrb	r3, [r3, #2]
    22a2:	4a4f      	ldr	r2, [pc, #316]	; (23e0 <fSerial_processCommands+0x368>)
    22a4:	7810      	ldrb	r0, [r2, #0]
    22a6:	4018      	ands	r0, r3
    22a8:	4b4e      	ldr	r3, [pc, #312]	; (23e4 <fSerial_processCommands+0x36c>)
    22aa:	4798      	blx	r3
    22ac:	e7eb      	b.n	2286 <fSerial_processCommands+0x20e>
		}
		break;

	case SET_SERVO_ENABLE:
		{
			if (command_.nInputData != 2)
    22ae:	4b40      	ldr	r3, [pc, #256]	; (23b0 <fSerial_processCommands+0x338>)
    22b0:	785b      	ldrb	r3, [r3, #1]
    22b2:	2b02      	cmp	r3, #2
    22b4:	d003      	beq.n	22be <fSerial_processCommands+0x246>
			isInputCorrect_ = false;
    22b6:	2200      	movs	r2, #0
    22b8:	4b3c      	ldr	r3, [pc, #240]	; (23ac <fSerial_processCommands+0x334>)
    22ba:	701a      	strb	r2, [r3, #0]
    22bc:	e03c      	b.n	2338 <fSerial_processCommands+0x2c0>
			else
			{
				command_.nOutputData = 0;
    22be:	4b3c      	ldr	r3, [pc, #240]	; (23b0 <fSerial_processCommands+0x338>)
    22c0:	2100      	movs	r1, #0
    22c2:	2282      	movs	r2, #130	; 0x82
    22c4:	5499      	strb	r1, [r3, r2]
				ServoEnableTorque(command_.inputData[0], command_.inputData[1]);
    22c6:	78d9      	ldrb	r1, [r3, #3]
    22c8:	7898      	ldrb	r0, [r3, #2]
    22ca:	4b4c      	ldr	r3, [pc, #304]	; (23fc <fSerial_processCommands+0x384>)
    22cc:	4798      	blx	r3
    22ce:	e033      	b.n	2338 <fSerial_processCommands+0x2c0>

	case SET_SERVO_ANGLE:
	case SET_SERVO_SPEED:        
	case SET_SERVO_CW_LIM:
	case SET_SERVO_CCW_LIM:
		if (command_.nInputData != 3)
    22d0:	4b37      	ldr	r3, [pc, #220]	; (23b0 <fSerial_processCommands+0x338>)
    22d2:	785b      	ldrb	r3, [r3, #1]
    22d4:	2b03      	cmp	r3, #3
    22d6:	d003      	beq.n	22e0 <fSerial_processCommands+0x268>
			isInputCorrect_ = false;
    22d8:	2200      	movs	r2, #0
    22da:	4b34      	ldr	r3, [pc, #208]	; (23ac <fSerial_processCommands+0x334>)
    22dc:	701a      	strb	r2, [r3, #0]
    22de:	e02b      	b.n	2338 <fSerial_processCommands+0x2c0>
		else
		{
			uint8_t getReg = XL_CW_ANGLE_LIMIT_L;

			if(command_.commandNumber == SET_SERVO_CCW_LIM)
    22e0:	2a4d      	cmp	r2, #77	; 0x4d
    22e2:	d01a      	beq.n	231a <fSerial_processCommands+0x2a2>
				getReg = XL_CCW_ANGLE_LIMIT_L;
			else if(command_.commandNumber == SET_SERVO_ANGLE)
    22e4:	2a71      	cmp	r2, #113	; 0x71
    22e6:	d00f      	beq.n	2308 <fSerial_processCommands+0x290>
			{
				getReg = XL_GOAL_POSITION;
				SetServoMovingFlag(command_.inputData[0] & touch_auto_off);
			}
			else if(command_.commandNumber == SET_SERVO_SPEED)
    22e8:	2a72      	cmp	r2, #114	; 0x72
    22ea:	d018      	beq.n	231e <fSerial_processCommands+0x2a6>
			uint8_t getReg = XL_CW_ANGLE_LIMIT_L;
    22ec:	2206      	movs	r2, #6
				getReg = XL_GOAL_SPEED;

			command_.nOutputData = 0;
    22ee:	4930      	ldr	r1, [pc, #192]	; (23b0 <fSerial_processCommands+0x338>)
    22f0:	2000      	movs	r0, #0
    22f2:	2382      	movs	r3, #130	; 0x82
    22f4:	54c8      	strb	r0, [r1, r3]
			sendPacket(command_.inputData[0], eXLCMD_WRITE, getReg, &command_.inputData[1], 2);
    22f6:	1ccb      	adds	r3, r1, #3
    22f8:	b292      	uxth	r2, r2
    22fa:	7888      	ldrb	r0, [r1, #2]
    22fc:	2102      	movs	r1, #2
    22fe:	9100      	str	r1, [sp, #0]
    2300:	3101      	adds	r1, #1
    2302:	4c3f      	ldr	r4, [pc, #252]	; (2400 <fSerial_processCommands+0x388>)
    2304:	47a0      	blx	r4
    2306:	e017      	b.n	2338 <fSerial_processCommands+0x2c0>
				SetServoMovingFlag(command_.inputData[0] & touch_auto_off);
    2308:	4b29      	ldr	r3, [pc, #164]	; (23b0 <fSerial_processCommands+0x338>)
    230a:	789b      	ldrb	r3, [r3, #2]
    230c:	4a34      	ldr	r2, [pc, #208]	; (23e0 <fSerial_processCommands+0x368>)
    230e:	7810      	ldrb	r0, [r2, #0]
    2310:	4018      	ands	r0, r3
    2312:	4b34      	ldr	r3, [pc, #208]	; (23e4 <fSerial_processCommands+0x36c>)
    2314:	4798      	blx	r3
				getReg = XL_GOAL_POSITION;
    2316:	221e      	movs	r2, #30
    2318:	e7e9      	b.n	22ee <fSerial_processCommands+0x276>
				getReg = XL_CCW_ANGLE_LIMIT_L;
    231a:	2208      	movs	r2, #8
    231c:	e7e7      	b.n	22ee <fSerial_processCommands+0x276>
				getReg = XL_GOAL_SPEED;
    231e:	2220      	movs	r2, #32
    2320:	e7e5      	b.n	22ee <fSerial_processCommands+0x276>
		}
		break;

	case SET_SERVO_ID:
		if(command_.inputData[1] > 252)
    2322:	4b23      	ldr	r3, [pc, #140]	; (23b0 <fSerial_processCommands+0x338>)
    2324:	78db      	ldrb	r3, [r3, #3]
    2326:	2bfc      	cmp	r3, #252	; 0xfc
    2328:	d808      	bhi.n	233c <fSerial_processCommands+0x2c4>
			break;
		} 

	case SET_SERVO_BAUD:

		if (command_.nInputData != 2)
    232a:	4b21      	ldr	r3, [pc, #132]	; (23b0 <fSerial_processCommands+0x338>)
    232c:	785b      	ldrb	r3, [r3, #1]
    232e:	2b02      	cmp	r3, #2
    2330:	d008      	beq.n	2344 <fSerial_processCommands+0x2cc>
			isInputCorrect_ = false;
    2332:	2200      	movs	r2, #0
    2334:	4b1d      	ldr	r3, [pc, #116]	; (23ac <fSerial_processCommands+0x334>)
    2336:	701a      	strb	r2, [r3, #0]
	default:
		command_.nOutputData = 0;
		isInputCorrect_ = false;
		break;
	}
}
    2338:	b005      	add	sp, #20
    233a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			isInputCorrect_ = false;
    233c:	2200      	movs	r2, #0
    233e:	4b1b      	ldr	r3, [pc, #108]	; (23ac <fSerial_processCommands+0x334>)
    2340:	701a      	strb	r2, [r3, #0]
			break;
    2342:	e7f9      	b.n	2338 <fSerial_processCommands+0x2c0>
			if(command_.commandNumber == SET_SERVO_BAUD)
    2344:	2a4f      	cmp	r2, #79	; 0x4f
    2346:	d00d      	beq.n	2364 <fSerial_processCommands+0x2ec>
			uint8_t getReg = XL_ID;
    2348:	2203      	movs	r2, #3
			command_.nOutputData = 0;
    234a:	4919      	ldr	r1, [pc, #100]	; (23b0 <fSerial_processCommands+0x338>)
    234c:	2000      	movs	r0, #0
    234e:	2382      	movs	r3, #130	; 0x82
    2350:	54c8      	strb	r0, [r1, r3]
			sendPacket(command_.inputData[0], eXLCMD_WRITE, getReg, &command_.inputData[1], 1);
    2352:	1ccb      	adds	r3, r1, #3
    2354:	b292      	uxth	r2, r2
    2356:	7888      	ldrb	r0, [r1, #2]
    2358:	2101      	movs	r1, #1
    235a:	9100      	str	r1, [sp, #0]
    235c:	3102      	adds	r1, #2
    235e:	4c28      	ldr	r4, [pc, #160]	; (2400 <fSerial_processCommands+0x388>)
    2360:	47a0      	blx	r4
    2362:	e7e9      	b.n	2338 <fSerial_processCommands+0x2c0>
				command_.inputData[1] &= 0x03;
    2364:	4a12      	ldr	r2, [pc, #72]	; (23b0 <fSerial_processCommands+0x338>)
    2366:	78d1      	ldrb	r1, [r2, #3]
    2368:	2303      	movs	r3, #3
    236a:	400b      	ands	r3, r1
    236c:	70d3      	strb	r3, [r2, #3]
				getReg = XL_BAUD_RATE;
    236e:	2204      	movs	r2, #4
    2370:	e7eb      	b.n	234a <fSerial_processCommands+0x2d2>
		if (command_.nInputData != 4)
    2372:	4b0f      	ldr	r3, [pc, #60]	; (23b0 <fSerial_processCommands+0x338>)
    2374:	785b      	ldrb	r3, [r3, #1]
    2376:	2b04      	cmp	r3, #4
    2378:	d003      	beq.n	2382 <fSerial_processCommands+0x30a>
			isInputCorrect_ = false;
    237a:	2200      	movs	r2, #0
    237c:	4b0b      	ldr	r3, [pc, #44]	; (23ac <fSerial_processCommands+0x334>)
    237e:	701a      	strb	r2, [r3, #0]
    2380:	e7da      	b.n	2338 <fSerial_processCommands+0x2c0>
			command_.nOutputData = 0;
    2382:	4a0b      	ldr	r2, [pc, #44]	; (23b0 <fSerial_processCommands+0x338>)
    2384:	2100      	movs	r1, #0
    2386:	2382      	movs	r3, #130	; 0x82
    2388:	54d1      	strb	r1, [r2, r3]
			sendPacket(command_.inputData[0], eXLCMD_WRITE, XL_D_GAIN, &command_.inputData[1], 3);
    238a:	1cd3      	adds	r3, r2, #3
    238c:	7890      	ldrb	r0, [r2, #2]
    238e:	2203      	movs	r2, #3
    2390:	9200      	str	r2, [sp, #0]
    2392:	3218      	adds	r2, #24
    2394:	3103      	adds	r1, #3
    2396:	4c1a      	ldr	r4, [pc, #104]	; (2400 <fSerial_processCommands+0x388>)
    2398:	47a0      	blx	r4
    239a:	e7cd      	b.n	2338 <fSerial_processCommands+0x2c0>
		if (command_.nInputData != 2)
    239c:	4b04      	ldr	r3, [pc, #16]	; (23b0 <fSerial_processCommands+0x338>)
    239e:	785b      	ldrb	r3, [r3, #1]
    23a0:	2b02      	cmp	r3, #2
    23a2:	d02f      	beq.n	2404 <fSerial_processCommands+0x38c>
		isInputCorrect_ = false;
    23a4:	2200      	movs	r2, #0
    23a6:	4b01      	ldr	r3, [pc, #4]	; (23ac <fSerial_processCommands+0x334>)
    23a8:	701a      	strb	r2, [r3, #0]
    23aa:	e7c5      	b.n	2338 <fSerial_processCommands+0x2c0>
    23ac:	20001364 	.word	0x20001364
    23b0:	200011e0 	.word	0x200011e0
    23b4:	0000c704 	.word	0x0000c704
    23b8:	00001ead 	.word	0x00001ead
    23bc:	00001e65 	.word	0x00001e65
    23c0:	00001989 	.word	0x00001989
    23c4:	00001855 	.word	0x00001855
    23c8:	00000445 	.word	0x00000445
    23cc:	0000043d 	.word	0x0000043d
    23d0:	0000a269 	.word	0x0000a269
    23d4:	461c4000 	.word	0x461c4000
    23d8:	0000996d 	.word	0x0000996d
    23dc:	00003909 	.word	0x00003909
    23e0:	20000020 	.word	0x20000020
    23e4:	00001999 	.word	0x00001999
    23e8:	00003861 	.word	0x00003861
    23ec:	00002ec5 	.word	0x00002ec5
    23f0:	0000381d 	.word	0x0000381d
    23f4:	20000022 	.word	0x20000022
    23f8:	00003701 	.word	0x00003701
    23fc:	000037e9 	.word	0x000037e9
    2400:	0000363d 	.word	0x0000363d
			command_.nOutputData = 0;
    2404:	4bab      	ldr	r3, [pc, #684]	; (26b4 <fSerial_processCommands+0x63c>)
    2406:	2100      	movs	r1, #0
    2408:	2282      	movs	r2, #130	; 0x82
    240a:	5499      	strb	r1, [r3, r2]
			setServoLED(command_.inputData[0], command_.inputData[1]);
    240c:	78d9      	ldrb	r1, [r3, #3]
    240e:	7898      	ldrb	r0, [r3, #2]
    2410:	4ba9      	ldr	r3, [pc, #676]	; (26b8 <fSerial_processCommands+0x640>)
    2412:	4798      	blx	r3
    2414:	e790      	b.n	2338 <fSerial_processCommands+0x2c0>
		if (command_.nInputData != 1)
    2416:	4ba7      	ldr	r3, [pc, #668]	; (26b4 <fSerial_processCommands+0x63c>)
    2418:	785b      	ldrb	r3, [r3, #1]
    241a:	2b01      	cmp	r3, #1
    241c:	d003      	beq.n	2426 <fSerial_processCommands+0x3ae>
			isInputCorrect_ = false;
    241e:	2200      	movs	r2, #0
    2420:	4ba6      	ldr	r3, [pc, #664]	; (26bc <fSerial_processCommands+0x644>)
    2422:	701a      	strb	r2, [r3, #0]
    2424:	e788      	b.n	2338 <fSerial_processCommands+0x2c0>
			switch(command_.commandNumber)
    2426:	3a56      	subs	r2, #86	; 0x56
    2428:	b2d3      	uxtb	r3, r2
    242a:	2b09      	cmp	r3, #9
    242c:	d809      	bhi.n	2442 <fSerial_processCommands+0x3ca>
    242e:	009a      	lsls	r2, r3, #2
    2430:	4ba3      	ldr	r3, [pc, #652]	; (26c0 <fSerial_processCommands+0x648>)
    2432:	589b      	ldr	r3, [r3, r2]
    2434:	469f      	mov	pc, r3
					getReg = XL_PRESENT_LOAD;
    2436:	2229      	movs	r2, #41	; 0x29
					break;
    2438:	e00d      	b.n	2456 <fSerial_processCommands+0x3de>
					getReg = XL_CW_ANGLE_LIMIT_L;
    243a:	2206      	movs	r2, #6
					break;
    243c:	e00b      	b.n	2456 <fSerial_processCommands+0x3de>
					getReg = XL_CCW_ANGLE_LIMIT_L;
    243e:	2208      	movs	r2, #8
					break;
    2440:	e009      	b.n	2456 <fSerial_processCommands+0x3de>
					command_.nOutputData = 0;
    2442:	2300      	movs	r3, #0
    2444:	2282      	movs	r2, #130	; 0x82
    2446:	499b      	ldr	r1, [pc, #620]	; (26b4 <fSerial_processCommands+0x63c>)
    2448:	548b      	strb	r3, [r1, r2]
					isInputCorrect_ = false;
    244a:	4a9c      	ldr	r2, [pc, #624]	; (26bc <fSerial_processCommands+0x644>)
    244c:	7013      	strb	r3, [r2, #0]
    244e:	e773      	b.n	2338 <fSerial_processCommands+0x2c0>
					getReg = XL_PRESENT_POSITION;
    2450:	2225      	movs	r2, #37	; 0x25
    2452:	e000      	b.n	2456 <fSerial_processCommands+0x3de>
					getReg = XL_PRESENT_SPEED;
    2454:	2227      	movs	r2, #39	; 0x27
			value = ReadRegister(command_.inputData[0], eXLCMD_READ, getReg);
    2456:	4b97      	ldr	r3, [pc, #604]	; (26b4 <fSerial_processCommands+0x63c>)
    2458:	7898      	ldrb	r0, [r3, #2]
    245a:	2102      	movs	r1, #2
    245c:	4b99      	ldr	r3, [pc, #612]	; (26c4 <fSerial_processCommands+0x64c>)
    245e:	4798      	blx	r3
    2460:	9003      	str	r0, [sp, #12]
			if(value != -1)
    2462:	1c43      	adds	r3, r0, #1
    2464:	d00b      	beq.n	247e <fSerial_processCommands+0x406>
				command_.nOutputData = 2;
    2466:	4b93      	ldr	r3, [pc, #588]	; (26b4 <fSerial_processCommands+0x63c>)
    2468:	2102      	movs	r1, #2
    246a:	2282      	movs	r2, #130	; 0x82
    246c:	5499      	strb	r1, [r3, r2]
				command_.outputData[0] = intToBytes[0];
    246e:	aa03      	add	r2, sp, #12
    2470:	7810      	ldrb	r0, [r2, #0]
    2472:	3181      	adds	r1, #129	; 0x81
    2474:	5458      	strb	r0, [r3, r1]
				command_.outputData[1] = intToBytes[1];
    2476:	7851      	ldrb	r1, [r2, #1]
    2478:	2284      	movs	r2, #132	; 0x84
    247a:	5499      	strb	r1, [r3, r2]
    247c:	e75c      	b.n	2338 <fSerial_processCommands+0x2c0>
				isInputCorrect_ = false;
    247e:	2200      	movs	r2, #0
    2480:	4b8e      	ldr	r3, [pc, #568]	; (26bc <fSerial_processCommands+0x644>)
    2482:	701a      	strb	r2, [r3, #0]
    2484:	e758      	b.n	2338 <fSerial_processCommands+0x2c0>
		if (command_.nInputData != 1)
    2486:	4b8b      	ldr	r3, [pc, #556]	; (26b4 <fSerial_processCommands+0x63c>)
    2488:	785b      	ldrb	r3, [r3, #1]
    248a:	2b01      	cmp	r3, #1
    248c:	d003      	beq.n	2496 <fSerial_processCommands+0x41e>
			isInputCorrect_ = false;
    248e:	2200      	movs	r2, #0
    2490:	4b8a      	ldr	r3, [pc, #552]	; (26bc <fSerial_processCommands+0x644>)
    2492:	701a      	strb	r2, [r3, #0]
    2494:	e750      	b.n	2338 <fSerial_processCommands+0x2c0>
			switch(command_.commandNumber)
    2496:	2a59      	cmp	r2, #89	; 0x59
    2498:	d005      	beq.n	24a6 <fSerial_processCommands+0x42e>
    249a:	2a5a      	cmp	r2, #90	; 0x5a
    249c:	d015      	beq.n	24ca <fSerial_processCommands+0x452>
    249e:	2a58      	cmp	r2, #88	; 0x58
    24a0:	d015      	beq.n	24ce <fSerial_processCommands+0x456>
					getReg = XL_HARDWARE_ERROR;
    24a2:	2232      	movs	r2, #50	; 0x32
    24a4:	e000      	b.n	24a8 <fSerial_processCommands+0x430>
					getReg = XL_PRESENT_VOLTAGE;
    24a6:	222d      	movs	r2, #45	; 0x2d
			value = ReadRegister(command_.inputData[0], eXLCMD_READ, getReg);
    24a8:	4b82      	ldr	r3, [pc, #520]	; (26b4 <fSerial_processCommands+0x63c>)
    24aa:	7898      	ldrb	r0, [r3, #2]
    24ac:	2102      	movs	r1, #2
    24ae:	4b85      	ldr	r3, [pc, #532]	; (26c4 <fSerial_processCommands+0x64c>)
    24b0:	4798      	blx	r3
    24b2:	9003      	str	r0, [sp, #12]
			if(value != -1)
    24b4:	1c43      	adds	r3, r0, #1
    24b6:	d00c      	beq.n	24d2 <fSerial_processCommands+0x45a>
				command_.nOutputData = 1;
    24b8:	4b7e      	ldr	r3, [pc, #504]	; (26b4 <fSerial_processCommands+0x63c>)
    24ba:	2101      	movs	r1, #1
    24bc:	2282      	movs	r2, #130	; 0x82
    24be:	5499      	strb	r1, [r3, r2]
				command_.outputData[0] = intToBytes[0];
    24c0:	aa03      	add	r2, sp, #12
    24c2:	7811      	ldrb	r1, [r2, #0]
    24c4:	2283      	movs	r2, #131	; 0x83
    24c6:	5499      	strb	r1, [r3, r2]
    24c8:	e736      	b.n	2338 <fSerial_processCommands+0x2c0>
					getReg = XL_MOVING;
    24ca:	2231      	movs	r2, #49	; 0x31
					break;
    24cc:	e7ec      	b.n	24a8 <fSerial_processCommands+0x430>
					getReg = XL_PRESENT_TEMPERATURE;
    24ce:	222e      	movs	r2, #46	; 0x2e
    24d0:	e7ea      	b.n	24a8 <fSerial_processCommands+0x430>
				isInputCorrect_ = false;
    24d2:	2200      	movs	r2, #0
    24d4:	4b79      	ldr	r3, [pc, #484]	; (26bc <fSerial_processCommands+0x644>)
    24d6:	701a      	strb	r2, [r3, #0]
    24d8:	e72e      	b.n	2338 <fSerial_processCommands+0x2c0>
		if (command_.nInputData != 2)
    24da:	4b76      	ldr	r3, [pc, #472]	; (26b4 <fSerial_processCommands+0x63c>)
    24dc:	785b      	ldrb	r3, [r3, #1]
    24de:	2b02      	cmp	r3, #2
    24e0:	d003      	beq.n	24ea <fSerial_processCommands+0x472>
			isInputCorrect_ = false;
    24e2:	2200      	movs	r2, #0
    24e4:	4b75      	ldr	r3, [pc, #468]	; (26bc <fSerial_processCommands+0x644>)
    24e6:	701a      	strb	r2, [r3, #0]
    24e8:	e726      	b.n	2338 <fSerial_processCommands+0x2c0>
		else if(command_.inputData[1] < 52)
    24ea:	4b72      	ldr	r3, [pc, #456]	; (26b4 <fSerial_processCommands+0x63c>)
    24ec:	78da      	ldrb	r2, [r3, #3]
    24ee:	2a33      	cmp	r2, #51	; 0x33
    24f0:	d900      	bls.n	24f4 <fSerial_processCommands+0x47c>
    24f2:	e721      	b.n	2338 <fSerial_processCommands+0x2c0>
			int32_t value  = ReadRegister(command_.inputData[0], eXLCMD_READ, command_.inputData[1]);;
    24f4:	7898      	ldrb	r0, [r3, #2]
    24f6:	2102      	movs	r1, #2
    24f8:	4b72      	ldr	r3, [pc, #456]	; (26c4 <fSerial_processCommands+0x64c>)
    24fa:	4798      	blx	r3
    24fc:	9003      	str	r0, [sp, #12]
			if(value != -1)
    24fe:	1c43      	adds	r3, r0, #1
    2500:	d100      	bne.n	2504 <fSerial_processCommands+0x48c>
    2502:	e719      	b.n	2338 <fSerial_processCommands+0x2c0>
				if(command_.commandNumber == GET_SERVO_BYTE_REG)
    2504:	4b6b      	ldr	r3, [pc, #428]	; (26b4 <fSerial_processCommands+0x63c>)
    2506:	781b      	ldrb	r3, [r3, #0]
    2508:	2b6f      	cmp	r3, #111	; 0x6f
    250a:	d005      	beq.n	2518 <fSerial_processCommands+0x4a0>
				else if(command_.commandNumber == GET_SERVO_WORD_REG)
    250c:	2b70      	cmp	r3, #112	; 0x70
    250e:	d00c      	beq.n	252a <fSerial_processCommands+0x4b2>
					isInputCorrect_ = false;
    2510:	2200      	movs	r2, #0
    2512:	4b6a      	ldr	r3, [pc, #424]	; (26bc <fSerial_processCommands+0x644>)
    2514:	701a      	strb	r2, [r3, #0]
    2516:	e70f      	b.n	2338 <fSerial_processCommands+0x2c0>
					command_.nOutputData = 1;
    2518:	4b66      	ldr	r3, [pc, #408]	; (26b4 <fSerial_processCommands+0x63c>)
    251a:	2101      	movs	r1, #1
    251c:	2282      	movs	r2, #130	; 0x82
    251e:	5499      	strb	r1, [r3, r2]
					command_.outputData[0] = intToBytes[0];
    2520:	aa03      	add	r2, sp, #12
    2522:	7811      	ldrb	r1, [r2, #0]
    2524:	2283      	movs	r2, #131	; 0x83
    2526:	5499      	strb	r1, [r3, r2]
    2528:	e706      	b.n	2338 <fSerial_processCommands+0x2c0>
					command_.nOutputData = 2;
    252a:	4b62      	ldr	r3, [pc, #392]	; (26b4 <fSerial_processCommands+0x63c>)
    252c:	2102      	movs	r1, #2
    252e:	2282      	movs	r2, #130	; 0x82
    2530:	5499      	strb	r1, [r3, r2]
					command_.outputData[0] = intToBytes[0];
    2532:	aa03      	add	r2, sp, #12
    2534:	7810      	ldrb	r0, [r2, #0]
    2536:	3181      	adds	r1, #129	; 0x81
    2538:	5458      	strb	r0, [r3, r1]
					command_.outputData[1] = intToBytes[1];
    253a:	7851      	ldrb	r1, [r2, #1]
    253c:	2284      	movs	r2, #132	; 0x84
    253e:	5499      	strb	r1, [r3, r2]
    2540:	e6fa      	b.n	2338 <fSerial_processCommands+0x2c0>
		if (command_.nInputData != 0)
    2542:	4b5c      	ldr	r3, [pc, #368]	; (26b4 <fSerial_processCommands+0x63c>)
    2544:	785b      	ldrb	r3, [r3, #1]
    2546:	2b00      	cmp	r3, #0
    2548:	d003      	beq.n	2552 <fSerial_processCommands+0x4da>
			isInputCorrect_ = false;
    254a:	2200      	movs	r2, #0
    254c:	4b5b      	ldr	r3, [pc, #364]	; (26bc <fSerial_processCommands+0x644>)
    254e:	701a      	strb	r2, [r3, #0]
    2550:	e6f2      	b.n	2338 <fSerial_processCommands+0x2c0>
			volatile int16_t servoPosition = 0;  
    2552:	ac03      	add	r4, sp, #12
    2554:	2300      	movs	r3, #0
    2556:	8023      	strh	r3, [r4, #0]
			command_.nOutputData = 4;
    2558:	4d56      	ldr	r5, [pc, #344]	; (26b4 <fSerial_processCommands+0x63c>)
    255a:	2204      	movs	r2, #4
    255c:	3382      	adds	r3, #130	; 0x82
    255e:	54ea      	strb	r2, [r5, r3]
			servoPosition = ReadRegister(1, eXLCMD_READ, XL_PRESENT_POSITION);
    2560:	3221      	adds	r2, #33	; 0x21
    2562:	2102      	movs	r1, #2
    2564:	2001      	movs	r0, #1
    2566:	4e57      	ldr	r6, [pc, #348]	; (26c4 <fSerial_processCommands+0x64c>)
    2568:	47b0      	blx	r6
    256a:	b200      	sxth	r0, r0
    256c:	8020      	strh	r0, [r4, #0]
			command_.outputData[0] = intToBytes[0];
    256e:	7822      	ldrb	r2, [r4, #0]
    2570:	2383      	movs	r3, #131	; 0x83
    2572:	54ea      	strb	r2, [r5, r3]
			command_.outputData[1] = intToBytes[1];
    2574:	7862      	ldrb	r2, [r4, #1]
    2576:	3301      	adds	r3, #1
    2578:	54ea      	strb	r2, [r5, r3]
			servoPosition = ReadRegister(2, eXLCMD_READ, XL_PRESENT_POSITION);
    257a:	2225      	movs	r2, #37	; 0x25
    257c:	2102      	movs	r1, #2
    257e:	2002      	movs	r0, #2
    2580:	47b0      	blx	r6
    2582:	b200      	sxth	r0, r0
    2584:	8020      	strh	r0, [r4, #0]
			command_.outputData[2] = intToBytes[0];
    2586:	7822      	ldrb	r2, [r4, #0]
    2588:	2385      	movs	r3, #133	; 0x85
    258a:	54ea      	strb	r2, [r5, r3]
			command_.outputData[3] = intToBytes[1];
    258c:	7862      	ldrb	r2, [r4, #1]
    258e:	3301      	adds	r3, #1
    2590:	54ea      	strb	r2, [r5, r3]
    2592:	e6d1      	b.n	2338 <fSerial_processCommands+0x2c0>
		if (command_.nInputData != 1)
    2594:	4b47      	ldr	r3, [pc, #284]	; (26b4 <fSerial_processCommands+0x63c>)
    2596:	785b      	ldrb	r3, [r3, #1]
    2598:	2b01      	cmp	r3, #1
    259a:	d003      	beq.n	25a4 <fSerial_processCommands+0x52c>
			isInputCorrect_ = false;
    259c:	2200      	movs	r2, #0
    259e:	4b47      	ldr	r3, [pc, #284]	; (26bc <fSerial_processCommands+0x644>)
    25a0:	701a      	strb	r2, [r3, #0]
    25a2:	e6c9      	b.n	2338 <fSerial_processCommands+0x2c0>
			command_.nOutputData = 0;
    25a4:	4b43      	ldr	r3, [pc, #268]	; (26b4 <fSerial_processCommands+0x63c>)
    25a6:	2100      	movs	r1, #0
    25a8:	2282      	movs	r2, #130	; 0x82
    25aa:	5499      	strb	r1, [r3, r2]
			ioport_set_pin_level(SERVO_EN, command_.inputData[0]);
    25ac:	789b      	ldrb	r3, [r3, #2]
	if (level) {
    25ae:	2b00      	cmp	r3, #0
    25b0:	d003      	beq.n	25ba <fSerial_processCommands+0x542>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    25b2:	3a42      	subs	r2, #66	; 0x42
    25b4:	4b44      	ldr	r3, [pc, #272]	; (26c8 <fSerial_processCommands+0x650>)
    25b6:	619a      	str	r2, [r3, #24]
    25b8:	e6be      	b.n	2338 <fSerial_processCommands+0x2c0>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    25ba:	2240      	movs	r2, #64	; 0x40
    25bc:	4b42      	ldr	r3, [pc, #264]	; (26c8 <fSerial_processCommands+0x650>)
    25be:	615a      	str	r2, [r3, #20]
    25c0:	e6ba      	b.n	2338 <fSerial_processCommands+0x2c0>
		if (command_.nInputData != 1)
    25c2:	4b3c      	ldr	r3, [pc, #240]	; (26b4 <fSerial_processCommands+0x63c>)
    25c4:	785b      	ldrb	r3, [r3, #1]
    25c6:	2b01      	cmp	r3, #1
    25c8:	d003      	beq.n	25d2 <fSerial_processCommands+0x55a>
			isInputCorrect_ = false;
    25ca:	2200      	movs	r2, #0
    25cc:	4b3b      	ldr	r3, [pc, #236]	; (26bc <fSerial_processCommands+0x644>)
    25ce:	701a      	strb	r2, [r3, #0]
    25d0:	e6b2      	b.n	2338 <fSerial_processCommands+0x2c0>
			command_.nOutputData = 0;
    25d2:	4b38      	ldr	r3, [pc, #224]	; (26b4 <fSerial_processCommands+0x63c>)
    25d4:	2100      	movs	r1, #0
    25d6:	2282      	movs	r2, #130	; 0x82
    25d8:	5499      	strb	r1, [r3, r2]
			ioport_set_pin_level(SPK_EN, command_.inputData[0]);
    25da:	789b      	ldrb	r3, [r3, #2]
	if (level) {
    25dc:	2b00      	cmp	r3, #0
    25de:	d004      	beq.n	25ea <fSerial_processCommands+0x572>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    25e0:	2280      	movs	r2, #128	; 0x80
    25e2:	0512      	lsls	r2, r2, #20
    25e4:	4b38      	ldr	r3, [pc, #224]	; (26c8 <fSerial_processCommands+0x650>)
    25e6:	619a      	str	r2, [r3, #24]
    25e8:	e6a6      	b.n	2338 <fSerial_processCommands+0x2c0>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    25ea:	2280      	movs	r2, #128	; 0x80
    25ec:	0512      	lsls	r2, r2, #20
    25ee:	4b36      	ldr	r3, [pc, #216]	; (26c8 <fSerial_processCommands+0x650>)
    25f0:	615a      	str	r2, [r3, #20]
    25f2:	e6a1      	b.n	2338 <fSerial_processCommands+0x2c0>
		if (command_.nInputData != 1)
    25f4:	4b2f      	ldr	r3, [pc, #188]	; (26b4 <fSerial_processCommands+0x63c>)
    25f6:	785b      	ldrb	r3, [r3, #1]
    25f8:	2b01      	cmp	r3, #1
    25fa:	d003      	beq.n	2604 <fSerial_processCommands+0x58c>
			isInputCorrect_ = false;
    25fc:	2200      	movs	r2, #0
    25fe:	4b2f      	ldr	r3, [pc, #188]	; (26bc <fSerial_processCommands+0x644>)
    2600:	701a      	strb	r2, [r3, #0]
    2602:	e699      	b.n	2338 <fSerial_processCommands+0x2c0>
			command_.nOutputData = 0;
    2604:	4b2b      	ldr	r3, [pc, #172]	; (26b4 <fSerial_processCommands+0x63c>)
    2606:	2100      	movs	r1, #0
    2608:	2282      	movs	r2, #130	; 0x82
    260a:	5499      	strb	r1, [r3, r2]
			SetRMSorMEAN((uint32_t)command_.inputData[0]);
    260c:	7898      	ldrb	r0, [r3, #2]
    260e:	4b2f      	ldr	r3, [pc, #188]	; (26cc <fSerial_processCommands+0x654>)
    2610:	4798      	blx	r3
    2612:	e691      	b.n	2338 <fSerial_processCommands+0x2c0>
		if (command_.nInputData != 1)
    2614:	4b27      	ldr	r3, [pc, #156]	; (26b4 <fSerial_processCommands+0x63c>)
    2616:	785b      	ldrb	r3, [r3, #1]
    2618:	2b01      	cmp	r3, #1
    261a:	d003      	beq.n	2624 <fSerial_processCommands+0x5ac>
			isInputCorrect_ = false;
    261c:	2200      	movs	r2, #0
    261e:	4b27      	ldr	r3, [pc, #156]	; (26bc <fSerial_processCommands+0x644>)
    2620:	701a      	strb	r2, [r3, #0]
    2622:	e689      	b.n	2338 <fSerial_processCommands+0x2c0>
			command_.nOutputData = 0;
    2624:	4b23      	ldr	r3, [pc, #140]	; (26b4 <fSerial_processCommands+0x63c>)
    2626:	2100      	movs	r1, #0
    2628:	2282      	movs	r2, #130	; 0x82
    262a:	5499      	strb	r1, [r3, r2]
			EnableUSBPortForwarding((uint32_t)command_.inputData[0]);
    262c:	7898      	ldrb	r0, [r3, #2]
    262e:	4b28      	ldr	r3, [pc, #160]	; (26d0 <fSerial_processCommands+0x658>)
    2630:	4798      	blx	r3
    2632:	e681      	b.n	2338 <fSerial_processCommands+0x2c0>
		if (command_.nInputData != 1)
    2634:	4b1f      	ldr	r3, [pc, #124]	; (26b4 <fSerial_processCommands+0x63c>)
    2636:	785b      	ldrb	r3, [r3, #1]
    2638:	2b01      	cmp	r3, #1
    263a:	d003      	beq.n	2644 <fSerial_processCommands+0x5cc>
			isInputCorrect_ = false;
    263c:	2200      	movs	r2, #0
    263e:	4b1f      	ldr	r3, [pc, #124]	; (26bc <fSerial_processCommands+0x644>)
    2640:	701a      	strb	r2, [r3, #0]
    2642:	e679      	b.n	2338 <fSerial_processCommands+0x2c0>
			command_.nOutputData = 0;
    2644:	4b1b      	ldr	r3, [pc, #108]	; (26b4 <fSerial_processCommands+0x63c>)
    2646:	2100      	movs	r1, #0
    2648:	2282      	movs	r2, #130	; 0x82
    264a:	5499      	strb	r1, [r3, r2]
			SetAdcReference((uint32_t)command_.inputData[0]);
    264c:	7898      	ldrb	r0, [r3, #2]
    264e:	4b21      	ldr	r3, [pc, #132]	; (26d4 <fSerial_processCommands+0x65c>)
    2650:	4798      	blx	r3
    2652:	e671      	b.n	2338 <fSerial_processCommands+0x2c0>
		if (command_.nInputData != 1)
    2654:	4b17      	ldr	r3, [pc, #92]	; (26b4 <fSerial_processCommands+0x63c>)
    2656:	785b      	ldrb	r3, [r3, #1]
    2658:	2b01      	cmp	r3, #1
    265a:	d003      	beq.n	2664 <fSerial_processCommands+0x5ec>
			isInputCorrect_ = false;
    265c:	2200      	movs	r2, #0
    265e:	4b17      	ldr	r3, [pc, #92]	; (26bc <fSerial_processCommands+0x644>)
    2660:	701a      	strb	r2, [r3, #0]
    2662:	e669      	b.n	2338 <fSerial_processCommands+0x2c0>
			command_.nOutputData = 0;
    2664:	4b13      	ldr	r3, [pc, #76]	; (26b4 <fSerial_processCommands+0x63c>)
    2666:	2100      	movs	r1, #0
    2668:	2282      	movs	r2, #130	; 0x82
    266a:	5499      	strb	r1, [r3, r2]
			SetDACReference((uint32_t)command_.inputData[0]);
    266c:	7898      	ldrb	r0, [r3, #2]
    266e:	4b1a      	ldr	r3, [pc, #104]	; (26d8 <fSerial_processCommands+0x660>)
    2670:	4798      	blx	r3
    2672:	e661      	b.n	2338 <fSerial_processCommands+0x2c0>
		if (command_.nInputData != 4)
    2674:	4b0f      	ldr	r3, [pc, #60]	; (26b4 <fSerial_processCommands+0x63c>)
    2676:	785b      	ldrb	r3, [r3, #1]
    2678:	2b04      	cmp	r3, #4
    267a:	d003      	beq.n	2684 <fSerial_processCommands+0x60c>
			isInputCorrect_ = false;
    267c:	2200      	movs	r2, #0
    267e:	4b0f      	ldr	r3, [pc, #60]	; (26bc <fSerial_processCommands+0x644>)
    2680:	701a      	strb	r2, [r3, #0]
    2682:	e659      	b.n	2338 <fSerial_processCommands+0x2c0>
			uint16_t delay =  (uint16_t)((command_.inputData[2] << 8) | command_.inputData[1]);
    2684:	4b0b      	ldr	r3, [pc, #44]	; (26b4 <fSerial_processCommands+0x63c>)
    2686:	791a      	ldrb	r2, [r3, #4]
    2688:	0212      	lsls	r2, r2, #8
    268a:	78d8      	ldrb	r0, [r3, #3]
    268c:	4310      	orrs	r0, r2
			trig_angle = (uint16_t)( 0x00ff & command_.inputData[3]);
    268e:	7959      	ldrb	r1, [r3, #5]
    2690:	4a12      	ldr	r2, [pc, #72]	; (26dc <fSerial_processCommands+0x664>)
    2692:	8011      	strh	r1, [r2, #0]
			command_.nOutputData = 0;
    2694:	2100      	movs	r1, #0
    2696:	2282      	movs	r2, #130	; 0x82
    2698:	5499      	strb	r1, [r3, r2]
			touch_auto_off = command_.inputData[0];
    269a:	789a      	ldrb	r2, [r3, #2]
    269c:	4b10      	ldr	r3, [pc, #64]	; (26e0 <fSerial_processCommands+0x668>)
    269e:	701a      	strb	r2, [r3, #0]
			SetServoMovingDelay((uint32_t)delay);			
    26a0:	4b10      	ldr	r3, [pc, #64]	; (26e4 <fSerial_processCommands+0x66c>)
    26a2:	4798      	blx	r3
    26a4:	e648      	b.n	2338 <fSerial_processCommands+0x2c0>
		command_.nOutputData = 0;
    26a6:	2300      	movs	r3, #0
    26a8:	2282      	movs	r2, #130	; 0x82
    26aa:	4902      	ldr	r1, [pc, #8]	; (26b4 <fSerial_processCommands+0x63c>)
    26ac:	548b      	strb	r3, [r1, r2]
		isInputCorrect_ = false;
    26ae:	4a03      	ldr	r2, [pc, #12]	; (26bc <fSerial_processCommands+0x644>)
    26b0:	7013      	strb	r3, [r2, #0]
		break;
    26b2:	e641      	b.n	2338 <fSerial_processCommands+0x2c0>
    26b4:	200011e0 	.word	0x200011e0
    26b8:	00003891 	.word	0x00003891
    26bc:	20001364 	.word	0x20001364
    26c0:	0000c848 	.word	0x0000c848
    26c4:	00003701 	.word	0x00003701
    26c8:	41004400 	.word	0x41004400
    26cc:	00000905 	.word	0x00000905
    26d0:	00003369 	.word	0x00003369
    26d4:	000008f5 	.word	0x000008f5
    26d8:	000008dd 	.word	0x000008dd
    26dc:	20000022 	.word	0x20000022
    26e0:	20000020 	.word	0x20000020
    26e4:	000019d9 	.word	0x000019d9

000026e8 <fSerial_Write>:
		fSerial_sendNack();
		isInputCorrect_ = true;
	}
}
void fSerial_Write(uint8_t *Data, uint32_t nBytes)
{
    26e8:	b510      	push	{r4, lr}
    26ea:	0004      	movs	r4, r0
	if(UART_SerialPort_Instance == NULL)
    26ec:	4b04      	ldr	r3, [pc, #16]	; (2700 <fSerial_Write+0x18>)
    26ee:	6818      	ldr	r0, [r3, #0]
    26f0:	2800      	cmp	r0, #0
    26f2:	d003      	beq.n	26fc <fSerial_Write+0x14>
		return;
	usart_write_buffer_wait(UART_SerialPort_Instance, Data, nBytes);
    26f4:	b28a      	uxth	r2, r1
    26f6:	0021      	movs	r1, r4
    26f8:	4b02      	ldr	r3, [pc, #8]	; (2704 <fSerial_Write+0x1c>)
    26fa:	4798      	blx	r3
}
    26fc:	bd10      	pop	{r4, pc}
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	20000e60 	.word	0x20000e60
    2704:	00006df5 	.word	0x00006df5

00002708 <fSerial_sendNack>:

void fSerial_sendNack()
{
    2708:	b510      	push	{r4, lr}
    270a:	b082      	sub	sp, #8
	uint8_t outData[2] = { INPUT_FLAG, OUTPUT_FLAG };
    270c:	ac01      	add	r4, sp, #4
    270e:	4b07      	ldr	r3, [pc, #28]	; (272c <fSerial_sendNack+0x24>)
    2710:	881b      	ldrh	r3, [r3, #0]
    2712:	8023      	strh	r3, [r4, #0]
	usart_abort_job(UART_SerialPort_Instance, USART_TRANSCEIVER_RX);
    2714:	4b06      	ldr	r3, [pc, #24]	; (2730 <fSerial_sendNack+0x28>)
    2716:	6818      	ldr	r0, [r3, #0]
    2718:	2100      	movs	r1, #0
    271a:	4b06      	ldr	r3, [pc, #24]	; (2734 <fSerial_sendNack+0x2c>)
    271c:	4798      	blx	r3
	fSerial_Write(outData, 2);
    271e:	2102      	movs	r1, #2
    2720:	0020      	movs	r0, r4
    2722:	4b05      	ldr	r3, [pc, #20]	; (2738 <fSerial_sendNack+0x30>)
    2724:	4798      	blx	r3
}
    2726:	b002      	add	sp, #8
    2728:	bd10      	pop	{r4, pc}
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	0000c870 	.word	0x0000c870
    2730:	20000e60 	.word	0x20000e60
    2734:	00006f11 	.word	0x00006f11
    2738:	000026e9 	.word	0x000026e9

0000273c <fSerial_sendResponse>:
{
    273c:	b530      	push	{r4, r5, lr}
    273e:	b0c1      	sub	sp, #260	; 0x104
	if (isInputCorrect_)
    2740:	4b2c      	ldr	r3, [pc, #176]	; (27f4 <fSerial_sendResponse+0xb8>)
    2742:	781b      	ldrb	r3, [r3, #0]
    2744:	2b00      	cmp	r3, #0
    2746:	d04f      	beq.n	27e8 <fSerial_sendResponse+0xac>
		outData[nOutData] = INPUT_FLAG;
    2748:	22ff      	movs	r2, #255	; 0xff
    274a:	ab20      	add	r3, sp, #128	; 0x80
    274c:	701a      	strb	r2, [r3, #0]
		temporalDataArray[0] = command_.commandNumber;
    274e:	4b2a      	ldr	r3, [pc, #168]	; (27f8 <fSerial_sendResponse+0xbc>)
    2750:	781a      	ldrb	r2, [r3, #0]
    2752:	4669      	mov	r1, sp
    2754:	700a      	strb	r2, [r1, #0]
		temporalDataArray[1] = command_.nOutputData;
    2756:	2282      	movs	r2, #130	; 0x82
    2758:	5c99      	ldrb	r1, [r3, r2]
    275a:	466b      	mov	r3, sp
    275c:	7059      	strb	r1, [r3, #1]
		for (int i = 0; i < command_.nOutputData; i++)
    275e:	2200      	movs	r2, #0
    2760:	e007      	b.n	2772 <fSerial_sendResponse+0x36>
			temporalDataArray[i + 2] = command_.outputData[i];
    2762:	1c90      	adds	r0, r2, #2
    2764:	4b24      	ldr	r3, [pc, #144]	; (27f8 <fSerial_sendResponse+0xbc>)
    2766:	189b      	adds	r3, r3, r2
    2768:	3383      	adds	r3, #131	; 0x83
    276a:	781b      	ldrb	r3, [r3, #0]
    276c:	466c      	mov	r4, sp
    276e:	5423      	strb	r3, [r4, r0]
		for (int i = 0; i < command_.nOutputData; i++)
    2770:	3201      	adds	r2, #1
    2772:	000c      	movs	r4, r1
    2774:	428a      	cmp	r2, r1
    2776:	dbf4      	blt.n	2762 <fSerial_sendResponse+0x26>
		check = pearson(temporalDataArray, command_.nOutputData + 2);
    2778:	3102      	adds	r1, #2
    277a:	b2c9      	uxtb	r1, r1
    277c:	4668      	mov	r0, sp
    277e:	4b1f      	ldr	r3, [pc, #124]	; (27fc <fSerial_sendResponse+0xc0>)
    2780:	4798      	blx	r3
		temporalDataArray[command_.nOutputData + 2] = check;
    2782:	3402      	adds	r4, #2
    2784:	466b      	mov	r3, sp
    2786:	5518      	strb	r0, [r3, r4]
		for (int i = 0; i < command_.nOutputData + 3; i++)
    2788:	2400      	movs	r4, #0
		nOutData++;
    278a:	2301      	movs	r3, #1
		for (int i = 0; i < command_.nOutputData + 3; i++)
    278c:	e009      	b.n	27a2 <fSerial_sendResponse+0x66>
				outData[nOutData] = INPUT_ESCAPE;
    278e:	a820      	add	r0, sp, #128	; 0x80
    2790:	21fd      	movs	r1, #253	; 0xfd
    2792:	54c1      	strb	r1, [r0, r3]
				nOutData++;
    2794:	1c59      	adds	r1, r3, #1
    2796:	b2c9      	uxtb	r1, r1
				outData[nOutData] = temporalDataArray[i] - 2;
    2798:	3a02      	subs	r2, #2
    279a:	5442      	strb	r2, [r0, r1]
				nOutData++;
    279c:	3302      	adds	r3, #2
    279e:	b2db      	uxtb	r3, r3
		for (int i = 0; i < command_.nOutputData + 3; i++)
    27a0:	3401      	adds	r4, #1
    27a2:	2282      	movs	r2, #130	; 0x82
    27a4:	4914      	ldr	r1, [pc, #80]	; (27f8 <fSerial_sendResponse+0xbc>)
    27a6:	5c8a      	ldrb	r2, [r1, r2]
    27a8:	3203      	adds	r2, #3
    27aa:	4294      	cmp	r4, r2
    27ac:	da0c      	bge.n	27c8 <fSerial_sendResponse+0x8c>
			if (temporalDataArray[i] == INPUT_FLAG
    27ae:	466a      	mov	r2, sp
    27b0:	5d12      	ldrb	r2, [r2, r4]
    27b2:	2aff      	cmp	r2, #255	; 0xff
    27b4:	d0eb      	beq.n	278e <fSerial_sendResponse+0x52>
					|| temporalDataArray[i] == INPUT_ESCAPE
    27b6:	2afd      	cmp	r2, #253	; 0xfd
    27b8:	d0e9      	beq.n	278e <fSerial_sendResponse+0x52>
					|| temporalDataArray[i] == OUTPUT_FLAG)
    27ba:	2afe      	cmp	r2, #254	; 0xfe
    27bc:	d0e7      	beq.n	278e <fSerial_sendResponse+0x52>
				outData[nOutData] = temporalDataArray[i];
    27be:	a920      	add	r1, sp, #128	; 0x80
    27c0:	54ca      	strb	r2, [r1, r3]
				nOutData++;
    27c2:	3301      	adds	r3, #1
    27c4:	b2db      	uxtb	r3, r3
    27c6:	e7eb      	b.n	27a0 <fSerial_sendResponse+0x64>
		outData[nOutData] = OUTPUT_FLAG;
    27c8:	ad20      	add	r5, sp, #128	; 0x80
    27ca:	22fe      	movs	r2, #254	; 0xfe
    27cc:	54ea      	strb	r2, [r5, r3]
		nOutData++;
    27ce:	3301      	adds	r3, #1
    27d0:	b2dc      	uxtb	r4, r3
		usart_abort_job(UART_SerialPort_Instance, USART_TRANSCEIVER_RX);
    27d2:	4b0b      	ldr	r3, [pc, #44]	; (2800 <fSerial_sendResponse+0xc4>)
    27d4:	6818      	ldr	r0, [r3, #0]
    27d6:	2100      	movs	r1, #0
    27d8:	4b0a      	ldr	r3, [pc, #40]	; (2804 <fSerial_sendResponse+0xc8>)
    27da:	4798      	blx	r3
		fSerial_Write(outData, nOutData);
    27dc:	0021      	movs	r1, r4
    27de:	0028      	movs	r0, r5
    27e0:	4b09      	ldr	r3, [pc, #36]	; (2808 <fSerial_sendResponse+0xcc>)
    27e2:	4798      	blx	r3
}
    27e4:	b041      	add	sp, #260	; 0x104
    27e6:	bd30      	pop	{r4, r5, pc}
		fSerial_sendNack();
    27e8:	4b08      	ldr	r3, [pc, #32]	; (280c <fSerial_sendResponse+0xd0>)
    27ea:	4798      	blx	r3
		isInputCorrect_ = true;
    27ec:	2201      	movs	r2, #1
    27ee:	4b01      	ldr	r3, [pc, #4]	; (27f4 <fSerial_sendResponse+0xb8>)
    27f0:	701a      	strb	r2, [r3, #0]
}
    27f2:	e7f7      	b.n	27e4 <fSerial_sendResponse+0xa8>
    27f4:	20001364 	.word	0x20001364
    27f8:	200011e0 	.word	0x200011e0
    27fc:	00001f91 	.word	0x00001f91
    2800:	20000e60 	.word	0x20000e60
    2804:	00006f11 	.word	0x00006f11
    2808:	000026e9 	.word	0x000026e9
    280c:	00002709 	.word	0x00002709

00002810 <fSerial_processSerial>:
{
    2810:	b510      	push	{r4, lr}
	if (UART_SerialPort_Instance == NULL)
    2812:	4b23      	ldr	r3, [pc, #140]	; (28a0 <fSerial_processSerial+0x90>)
    2814:	681b      	ldr	r3, [r3, #0]
    2816:	2b00      	cmp	r3, #0
    2818:	d040      	beq.n	289c <fSerial_processSerial+0x8c>
	if(UART_SerialPort_Instance->remaining_rx_buffer_length != lRX_bytes)
    281a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    281c:	b292      	uxth	r2, r2
    281e:	4921      	ldr	r1, [pc, #132]	; (28a4 <fSerial_processSerial+0x94>)
    2820:	6809      	ldr	r1, [r1, #0]
    2822:	428a      	cmp	r2, r1
    2824:	d03a      	beq.n	289c <fSerial_processSerial+0x8c>
		incomingByte = (uint8_t *)UART_SerialPort_Instance->rx_buffer_ptr -1;
    2826:	6a58      	ldr	r0, [r3, #36]	; 0x24
    2828:	1e41      	subs	r1, r0, #1
		lRX_bytes = UART_SerialPort_Instance->remaining_rx_buffer_length;
    282a:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
    282c:	4a1d      	ldr	r2, [pc, #116]	; (28a4 <fSerial_processSerial+0x94>)
    282e:	6014      	str	r4, [r2, #0]
	if (*incomingByte == INPUT_FLAG)  //Llega el flag de entrada
    2830:	780a      	ldrb	r2, [r1, #0]
    2832:	2aff      	cmp	r2, #255	; 0xff
    2834:	d00c      	beq.n	2850 <fSerial_processSerial+0x40>
	else if (*incomingByte == OUTPUT_FLAG)  //Llega el flag de salida
    2836:	2afe      	cmp	r2, #254	; 0xfe
    2838:	d00d      	beq.n	2856 <fSerial_processSerial+0x46>
	else if (isInputEscaped_)
    283a:	4c1b      	ldr	r4, [pc, #108]	; (28a8 <fSerial_processSerial+0x98>)
    283c:	7824      	ldrb	r4, [r4, #0]
    283e:	2c00      	cmp	r4, #0
    2840:	d126      	bne.n	2890 <fSerial_processSerial+0x80>
	else if (*incomingByte == INPUT_ESCAPE)  //Llega el escape de entrada
    2842:	2afd      	cmp	r2, #253	; 0xfd
    2844:	d12a      	bne.n	289c <fSerial_processSerial+0x8c>
		UART_SerialPort_Instance->rx_buffer_ptr--;	// Retrocedemos el puntero un byte atras
    2846:	6259      	str	r1, [r3, #36]	; 0x24
		isInputEscaped_ = true;		//Activamos el escape de la entrada
    2848:	3afc      	subs	r2, #252	; 0xfc
    284a:	4b17      	ldr	r3, [pc, #92]	; (28a8 <fSerial_processSerial+0x98>)
    284c:	701a      	strb	r2, [r3, #0]
		return;						//y vamos a por el siguiente dato
    284e:	e025      	b.n	289c <fSerial_processSerial+0x8c>
		rx_start = (uint8_t *)UART_SerialPort_Instance->rx_buffer_ptr -1;
    2850:	4b16      	ldr	r3, [pc, #88]	; (28ac <fSerial_processSerial+0x9c>)
    2852:	6019      	str	r1, [r3, #0]
		return;
    2854:	e022      	b.n	289c <fSerial_processSerial+0x8c>
		if (fSerial_procesaEntrada(rx_start, (incomingByte - rx_start) + 1))
    2856:	4b15      	ldr	r3, [pc, #84]	; (28ac <fSerial_processSerial+0x9c>)
    2858:	6818      	ldr	r0, [r3, #0]
    285a:	1a09      	subs	r1, r1, r0
    285c:	3101      	adds	r1, #1
    285e:	b2c9      	uxtb	r1, r1
    2860:	4b13      	ldr	r3, [pc, #76]	; (28b0 <fSerial_processSerial+0xa0>)
    2862:	4798      	blx	r3
    2864:	2800      	cmp	r0, #0
    2866:	d010      	beq.n	288a <fSerial_processSerial+0x7a>
			fSerial_processCommands();
    2868:	4b12      	ldr	r3, [pc, #72]	; (28b4 <fSerial_processSerial+0xa4>)
    286a:	4798      	blx	r3
			fSerial_sendResponse();
    286c:	4b12      	ldr	r3, [pc, #72]	; (28b8 <fSerial_processSerial+0xa8>)
    286e:	4798      	blx	r3
		usart_read_buffer_job(UART_SerialPort_Instance, Serial_RXBuf, 128);
    2870:	4c12      	ldr	r4, [pc, #72]	; (28bc <fSerial_processSerial+0xac>)
    2872:	4b0b      	ldr	r3, [pc, #44]	; (28a0 <fSerial_processSerial+0x90>)
    2874:	6818      	ldr	r0, [r3, #0]
    2876:	2280      	movs	r2, #128	; 0x80
    2878:	0021      	movs	r1, r4
    287a:	4b11      	ldr	r3, [pc, #68]	; (28c0 <fSerial_processSerial+0xb0>)
    287c:	4798      	blx	r3
		rx_start = Serial_RXBuf;
    287e:	4b0b      	ldr	r3, [pc, #44]	; (28ac <fSerial_processSerial+0x9c>)
    2880:	601c      	str	r4, [r3, #0]
		lRX_bytes = 128;
    2882:	2280      	movs	r2, #128	; 0x80
    2884:	4b07      	ldr	r3, [pc, #28]	; (28a4 <fSerial_processSerial+0x94>)
    2886:	601a      	str	r2, [r3, #0]
		return;
    2888:	e008      	b.n	289c <fSerial_processSerial+0x8c>
			fSerial_sendNack();
    288a:	4b0e      	ldr	r3, [pc, #56]	; (28c4 <fSerial_processSerial+0xb4>)
    288c:	4798      	blx	r3
    288e:	e7ef      	b.n	2870 <fSerial_processSerial+0x60>
		*incomingByte += 2; //Desescapamos la entrada (ya hemos pasado la comprobación de los flags de entrada y salida)
    2890:	3801      	subs	r0, #1
    2892:	3202      	adds	r2, #2
    2894:	7002      	strb	r2, [r0, #0]
		isInputEscaped_ = false;							//Si no estaba activo, seguimos, pues ya se ha hecho la corrección al dato de entrada
    2896:	2200      	movs	r2, #0
    2898:	4b03      	ldr	r3, [pc, #12]	; (28a8 <fSerial_processSerial+0x98>)
    289a:	701a      	strb	r2, [r3, #0]
}
    289c:	bd10      	pop	{r4, pc}
    289e:	46c0      	nop			; (mov r8, r8)
    28a0:	20000e60 	.word	0x20000e60
    28a4:	200014b0 	.word	0x200014b0
    28a8:	200011dc 	.word	0x200011dc
    28ac:	2000142c 	.word	0x2000142c
    28b0:	00001ff9 	.word	0x00001ff9
    28b4:	00002079 	.word	0x00002079
    28b8:	0000273d 	.word	0x0000273d
    28bc:	20001430 	.word	0x20001430
    28c0:	00006ef1 	.word	0x00006ef1
    28c4:	00002709 	.word	0x00002709

000028c8 <DAC_transfer_done>:
	tc_init(&tc_timing_instance, TC5, &config_tc);
	tc_enable(&tc_timing_instance);
} 

static void DAC_transfer_done(struct dma_resource* const resource )
 {
    28c8:	b510      	push	{r4, lr}

	if(l_rxBuf_idx & 0x80) // Test if buffer is updated with new data
    28ca:	4b0c      	ldr	r3, [pc, #48]	; (28fc <DAC_transfer_done+0x34>)
    28cc:	681b      	ldr	r3, [r3, #0]
    28ce:	061a      	lsls	r2, r3, #24
    28d0:	d408      	bmi.n	28e4 <DAC_transfer_done+0x1c>
	{
		resource->descriptor->SRCADDR.reg = rx_DacDescriptor[l_rxBuf_idx & 0x01];
		dma_start_transfer_job(&DAC_dma_resource);
	}
	else 
		DAC_dma_done = true;
    28d2:	2201      	movs	r2, #1
    28d4:	4b0a      	ldr	r3, [pc, #40]	; (2900 <DAC_transfer_done+0x38>)
    28d6:	601a      	str	r2, [r3, #0]

	 l_rxBuf_idx &= 0x01;
    28d8:	4a08      	ldr	r2, [pc, #32]	; (28fc <DAC_transfer_done+0x34>)
    28da:	2301      	movs	r3, #1
    28dc:	6811      	ldr	r1, [r2, #0]
    28de:	400b      	ands	r3, r1
    28e0:	6013      	str	r3, [r2, #0]
 }
    28e2:	bd10      	pop	{r4, pc}
		resource->descriptor->SRCADDR.reg = rx_DacDescriptor[l_rxBuf_idx & 0x01];
    28e4:	6981      	ldr	r1, [r0, #24]
    28e6:	2201      	movs	r2, #1
    28e8:	4013      	ands	r3, r2
    28ea:	009b      	lsls	r3, r3, #2
    28ec:	4a05      	ldr	r2, [pc, #20]	; (2904 <DAC_transfer_done+0x3c>)
    28ee:	589b      	ldr	r3, [r3, r2]
    28f0:	604b      	str	r3, [r1, #4]
		dma_start_transfer_job(&DAC_dma_resource);
    28f2:	4805      	ldr	r0, [pc, #20]	; (2908 <DAC_transfer_done+0x40>)
    28f4:	4b05      	ldr	r3, [pc, #20]	; (290c <DAC_transfer_done+0x44>)
    28f6:	4798      	blx	r3
    28f8:	e7ee      	b.n	28d8 <DAC_transfer_done+0x10>
    28fa:	46c0      	nop			; (mov r8, r8)
    28fc:	20000e68 	.word	0x20000e68
    2900:	20000024 	.word	0x20000024
    2904:	20001b68 	.word	0x20001b68
    2908:	200014c8 	.word	0x200014c8
    290c:	000015b9 	.word	0x000015b9

00002910 <ConvertToDAC>:
 {
    2910:	b570      	push	{r4, r5, r6, lr}
	 int16_t m_threshold = 3276, m_trigger = 0;
    2912:	2400      	movs	r4, #0
	 while(length-- > 0)
    2914:	e007      	b.n	2926 <ConvertToDAC+0x16>
		 *pDst = (uint16_t)(*pSrc + 32768);
    2916:	b29b      	uxth	r3, r3
    2918:	4a0b      	ldr	r2, [pc, #44]	; (2948 <ConvertToDAC+0x38>)
    291a:	4694      	mov	ip, r2
    291c:	4463      	add	r3, ip
    291e:	800b      	strh	r3, [r1, #0]
		 pDst++;
    2920:	3102      	adds	r1, #2
		 pSrc +=2;
    2922:	3004      	adds	r0, #4
	 while(length-- > 0)
    2924:	002a      	movs	r2, r5
    2926:	1e55      	subs	r5, r2, #1
    2928:	2a00      	cmp	r2, #0
    292a:	d007      	beq.n	293c <ConvertToDAC+0x2c>
		 if(*pSrc > m_threshold || *pDst < -m_threshold)
    292c:	2200      	movs	r2, #0
    292e:	5e83      	ldrsh	r3, [r0, r2]
    2930:	4a06      	ldr	r2, [pc, #24]	; (294c <ConvertToDAC+0x3c>)
    2932:	4293      	cmp	r3, r2
    2934:	ddef      	ble.n	2916 <ConvertToDAC+0x6>
		 m_trigger++;
    2936:	3401      	adds	r4, #1
    2938:	b224      	sxth	r4, r4
    293a:	e7ec      	b.n	2916 <ConvertToDAC+0x6>
	 if(m_trigger > 9)
    293c:	2c09      	cmp	r4, #9
    293e:	dc00      	bgt.n	2942 <ConvertToDAC+0x32>
 }
    2940:	bd70      	pop	{r4, r5, r6, pc}
		fTrig_Animation();
    2942:	4b03      	ldr	r3, [pc, #12]	; (2950 <ConvertToDAC+0x40>)
    2944:	4798      	blx	r3
 }
    2946:	e7fb      	b.n	2940 <ConvertToDAC+0x30>
    2948:	ffff8000 	.word	0xffff8000
    294c:	00000ccc 	.word	0x00000ccc
    2950:	00001ecd 	.word	0x00001ecd

00002954 <i2s_RX_Done>:
 {
    2954:	b570      	push	{r4, r5, r6, lr}
	dma_tm = TC5->COUNT16.COUNT.reg / (BUFFER_LENGTH / 32);
    2956:	4a22      	ldr	r2, [pc, #136]	; (29e0 <i2s_RX_Done+0x8c>)
    2958:	8a13      	ldrh	r3, [r2, #16]
    295a:	08db      	lsrs	r3, r3, #3
    295c:	4c21      	ldr	r4, [pc, #132]	; (29e4 <i2s_RX_Done+0x90>)
    295e:	6023      	str	r3, [r4, #0]
	TC5->COUNT16.COUNT.reg = 0;
    2960:	2300      	movs	r3, #0
    2962:	8213      	strh	r3, [r2, #16]
	l_rxBuf_idx = rxBuf_idx & 0x01;
    2964:	4920      	ldr	r1, [pc, #128]	; (29e8 <i2s_RX_Done+0x94>)
    2966:	680a      	ldr	r2, [r1, #0]
    2968:	3301      	adds	r3, #1
    296a:	001e      	movs	r6, r3
    296c:	4016      	ands	r6, r2
    296e:	4d1f      	ldr	r5, [pc, #124]	; (29ec <i2s_RX_Done+0x98>)
    2970:	602e      	str	r6, [r5, #0]
	resource->descriptor->DSTADDR.reg = rx_I2SDescriptor[++rxBuf_idx & 0x01];
    2972:	6980      	ldr	r0, [r0, #24]
    2974:	3201      	adds	r2, #1
    2976:	600a      	str	r2, [r1, #0]
    2978:	4013      	ands	r3, r2
    297a:	009b      	lsls	r3, r3, #2
    297c:	4a1c      	ldr	r2, [pc, #112]	; (29f0 <i2s_RX_Done+0x9c>)
    297e:	589b      	ldr	r3, [r3, r2]
    2980:	6083      	str	r3, [r0, #8]
	dma_start_transfer_job(&i2s_rx_dma_resource);
    2982:	481c      	ldr	r0, [pc, #112]	; (29f4 <i2s_RX_Done+0xa0>)
    2984:	4b1c      	ldr	r3, [pc, #112]	; (29f8 <i2s_RX_Done+0xa4>)
    2986:	4798      	blx	r3
	ConvertToDAC((uint32_t)(void *)&i2s_RXBuffer[l_rxBuf_idx][0], (uint32_t)(void *)&DAC_buffer[l_rxBuf_idx][0],sizeof(DAC_buffer) / 4);
    2988:	6829      	ldr	r1, [r5, #0]
    298a:	0248      	lsls	r0, r1, #9
    298c:	4b1b      	ldr	r3, [pc, #108]	; (29fc <i2s_RX_Done+0xa8>)
    298e:	18c0      	adds	r0, r0, r3
    2990:	0209      	lsls	r1, r1, #8
    2992:	4b1b      	ldr	r3, [pc, #108]	; (2a00 <i2s_RX_Done+0xac>)
    2994:	18c9      	adds	r1, r1, r3
    2996:	2280      	movs	r2, #128	; 0x80
    2998:	4b1a      	ldr	r3, [pc, #104]	; (2a04 <i2s_RX_Done+0xb0>)
    299a:	4798      	blx	r3
	if(dma_tm > 2849 && dma_tm < 3150)
    299c:	6823      	ldr	r3, [r4, #0]
    299e:	4a1a      	ldr	r2, [pc, #104]	; (2a08 <i2s_RX_Done+0xb4>)
    29a0:	1899      	adds	r1, r3, r2
    29a2:	222c      	movs	r2, #44	; 0x2c
    29a4:	32ff      	adds	r2, #255	; 0xff
    29a6:	4291      	cmp	r1, r2
    29a8:	d802      	bhi.n	29b0 <i2s_RX_Done+0x5c>
		TC4->COUNT16.CC[0].reg = dma_tm;
    29aa:	b29b      	uxth	r3, r3
    29ac:	4a17      	ldr	r2, [pc, #92]	; (2a0c <i2s_RX_Done+0xb8>)
    29ae:	8313      	strh	r3, [r2, #24]
	if(DAC_dma_done)
    29b0:	4b17      	ldr	r3, [pc, #92]	; (2a10 <i2s_RX_Done+0xbc>)
    29b2:	681b      	ldr	r3, [r3, #0]
    29b4:	2b00      	cmp	r3, #0
    29b6:	d105      	bne.n	29c4 <i2s_RX_Done+0x70>
		l_rxBuf_idx |= 0x80;
    29b8:	4a0c      	ldr	r2, [pc, #48]	; (29ec <i2s_RX_Done+0x98>)
    29ba:	2380      	movs	r3, #128	; 0x80
    29bc:	6811      	ldr	r1, [r2, #0]
    29be:	430b      	orrs	r3, r1
    29c0:	6013      	str	r3, [r2, #0]
 }
    29c2:	bd70      	pop	{r4, r5, r6, pc}
		DAC_dma_resource.descriptor->SRCADDR.reg = rx_DacDescriptor[l_rxBuf_idx];
    29c4:	4813      	ldr	r0, [pc, #76]	; (2a14 <i2s_RX_Done+0xc0>)
    29c6:	6982      	ldr	r2, [r0, #24]
    29c8:	4b08      	ldr	r3, [pc, #32]	; (29ec <i2s_RX_Done+0x98>)
    29ca:	681b      	ldr	r3, [r3, #0]
    29cc:	009b      	lsls	r3, r3, #2
    29ce:	4912      	ldr	r1, [pc, #72]	; (2a18 <i2s_RX_Done+0xc4>)
    29d0:	585b      	ldr	r3, [r3, r1]
    29d2:	6053      	str	r3, [r2, #4]
		dma_start_transfer_job(&DAC_dma_resource);
    29d4:	4b08      	ldr	r3, [pc, #32]	; (29f8 <i2s_RX_Done+0xa4>)
    29d6:	4798      	blx	r3
		DAC_dma_done = 0;
    29d8:	2200      	movs	r2, #0
    29da:	4b0d      	ldr	r3, [pc, #52]	; (2a10 <i2s_RX_Done+0xbc>)
    29dc:	601a      	str	r2, [r3, #0]
    29de:	e7f0      	b.n	29c2 <i2s_RX_Done+0x6e>
    29e0:	42003400 	.word	0x42003400
    29e4:	20000e64 	.word	0x20000e64
    29e8:	20000e6c 	.word	0x20000e6c
    29ec:	20000e68 	.word	0x20000e68
    29f0:	200014c0 	.word	0x200014c0
    29f4:	20001b30 	.word	0x20001b30
    29f8:	000015b9 	.word	0x000015b9
    29fc:	20001500 	.word	0x20001500
    2a00:	2000191c 	.word	0x2000191c
    2a04:	00002911 	.word	0x00002911
    2a08:	fffff4de 	.word	0xfffff4de
    2a0c:	42003000 	.word	0x42003000
    2a10:	20000024 	.word	0x20000024
    2a14:	200014c8 	.word	0x200014c8
    2a18:	20001b68 	.word	0x20001b68

00002a1c <InitTimingCounter>:
{
    2a1c:	b510      	push	{r4, lr}
    2a1e:	b08e      	sub	sp, #56	; 0x38
	config->clock_source               = GCLK_GENERATOR_0;
    2a20:	aa01      	add	r2, sp, #4
    2a22:	2300      	movs	r3, #0
    2a24:	2100      	movs	r1, #0
    2a26:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    2a28:	7093      	strb	r3, [r2, #2]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    2a2a:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2a2c:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2a2e:	2000      	movs	r0, #0
    2a30:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2a32:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2a34:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2a36:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2a38:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2a3a:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2a3c:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2a3e:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2a40:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2a42:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2a44:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2a46:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    2a48:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    2a4a:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2a4c:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV16;
    2a4e:	2380      	movs	r3, #128	; 0x80
    2a50:	00db      	lsls	r3, r3, #3
    2a52:	8093      	strh	r3, [r2, #4]
	tc_init(&tc_timing_instance, TC5, &config_tc);
    2a54:	4c08      	ldr	r4, [pc, #32]	; (2a78 <InitTimingCounter+0x5c>)
    2a56:	4909      	ldr	r1, [pc, #36]	; (2a7c <InitTimingCounter+0x60>)
    2a58:	0020      	movs	r0, r4
    2a5a:	4b09      	ldr	r3, [pc, #36]	; (2a80 <InitTimingCounter+0x64>)
    2a5c:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2a5e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2a60:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2a62:	b25b      	sxtb	r3, r3
    2a64:	2b00      	cmp	r3, #0
    2a66:	dbfb      	blt.n	2a60 <InitTimingCounter+0x44>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2a68:	8813      	ldrh	r3, [r2, #0]
    2a6a:	2102      	movs	r1, #2
    2a6c:	430b      	orrs	r3, r1
    2a6e:	b29b      	uxth	r3, r3
    2a70:	8013      	strh	r3, [r2, #0]
} 
    2a72:	b00e      	add	sp, #56	; 0x38
    2a74:	bd10      	pop	{r4, pc}
    2a76:	46c0      	nop			; (mov r8, r8)
    2a78:	20001900 	.word	0x20001900
    2a7c:	42003400 	.word	0x42003400
    2a80:	00004bf9 	.word	0x00004bf9

00002a84 <i2s_callback_RX>:
	if(I2S->INTFLAG.bit.RXOR0)
    2a84:	4b0f      	ldr	r3, [pc, #60]	; (2ac4 <i2s_callback_RX+0x40>)
    2a86:	8a9b      	ldrh	r3, [r3, #20]
    2a88:	06db      	lsls	r3, r3, #27
    2a8a:	d519      	bpl.n	2ac0 <i2s_callback_RX+0x3c>
		I2S->INTFLAG.bit.RXOR0 = 1;
    2a8c:	4a0d      	ldr	r2, [pc, #52]	; (2ac4 <i2s_callback_RX+0x40>)
    2a8e:	8a93      	ldrh	r3, [r2, #20]
    2a90:	2110      	movs	r1, #16
    2a92:	430b      	orrs	r3, r1
    2a94:	8293      	strh	r3, [r2, #20]
		if(DAC_dma_done && i2s_rx_dma_resource.job_status != STATUS_OK)
    2a96:	4b0c      	ldr	r3, [pc, #48]	; (2ac8 <i2s_callback_RX+0x44>)
    2a98:	681b      	ldr	r3, [r3, #0]
    2a9a:	2b00      	cmp	r3, #0
    2a9c:	d010      	beq.n	2ac0 <i2s_callback_RX+0x3c>
    2a9e:	4b0b      	ldr	r3, [pc, #44]	; (2acc <i2s_callback_RX+0x48>)
    2aa0:	7c5b      	ldrb	r3, [r3, #17]
    2aa2:	2b00      	cmp	r3, #0
    2aa4:	d00c      	beq.n	2ac0 <i2s_callback_RX+0x3c>
			DMAC->CHINTENSET.reg = i2s_rx_dma_resource.channel_id;
    2aa6:	4b09      	ldr	r3, [pc, #36]	; (2acc <i2s_callback_RX+0x48>)
    2aa8:	781a      	ldrb	r2, [r3, #0]
    2aaa:	4b09      	ldr	r3, [pc, #36]	; (2ad0 <i2s_callback_RX+0x4c>)
    2aac:	214d      	movs	r1, #77	; 0x4d
    2aae:	545a      	strb	r2, [r3, r1]
			if(!DMAC->CHSTATUS.bit.PEND)
    2ab0:	3102      	adds	r1, #2
    2ab2:	5c5b      	ldrb	r3, [r3, r1]
    2ab4:	07db      	lsls	r3, r3, #31
    2ab6:	d403      	bmi.n	2ac0 <i2s_callback_RX+0x3c>
			DMAC->SWTRIGCTRL.reg = 1 << i2s_rx_dma_resource.channel_id;
    2ab8:	2301      	movs	r3, #1
    2aba:	4093      	lsls	r3, r2
    2abc:	4a04      	ldr	r2, [pc, #16]	; (2ad0 <i2s_callback_RX+0x4c>)
    2abe:	6113      	str	r3, [r2, #16]
}
    2ac0:	4770      	bx	lr
    2ac2:	46c0      	nop			; (mov r8, r8)
    2ac4:	42005000 	.word	0x42005000
    2ac8:	20000024 	.word	0x20000024
    2acc:	20001b30 	.word	0x20001b30
    2ad0:	41004800 	.word	0x41004800

00002ad4 <config_dma_for_RX>:
 {
    2ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ad6:	b089      	sub	sp, #36	; 0x24
	dma_get_config_defaults(&config);
    2ad8:	ae06      	add	r6, sp, #24
    2ada:	0030      	movs	r0, r6
    2adc:	4b20      	ldr	r3, [pc, #128]	; (2b60 <config_dma_for_RX+0x8c>)
    2ade:	4798      	blx	r3
	config.trigger_action = DMA_TRIGGER_ACTION_BEAT;
    2ae0:	2702      	movs	r7, #2
    2ae2:	2302      	movs	r3, #2
    2ae4:	70b3      	strb	r3, [r6, #2]
	config.peripheral_trigger = I2S_DMAC_ID_RX_0;
    2ae6:	3327      	adds	r3, #39	; 0x27
    2ae8:	7073      	strb	r3, [r6, #1]
	config.priority = DMA_PRIORITY_LEVEL_0;
    2aea:	2500      	movs	r5, #0
    2aec:	7035      	strb	r5, [r6, #0]
	dma_allocate(&i2s_rx_dma_resource, &config);
    2aee:	4c1d      	ldr	r4, [pc, #116]	; (2b64 <config_dma_for_RX+0x90>)
    2af0:	0031      	movs	r1, r6
    2af2:	0020      	movs	r0, r4
    2af4:	4b1c      	ldr	r3, [pc, #112]	; (2b68 <config_dma_for_RX+0x94>)
    2af6:	4798      	blx	r3
	rx_I2SDescriptor[0] = (uint32_t)&i2s_RXBuffer[0][0] + sizeof(i2s_RXBuffer)/2;
    2af8:	4b1c      	ldr	r3, [pc, #112]	; (2b6c <config_dma_for_RX+0x98>)
    2afa:	2280      	movs	r2, #128	; 0x80
    2afc:	0092      	lsls	r2, r2, #2
    2afe:	4694      	mov	ip, r2
    2b00:	4463      	add	r3, ip
    2b02:	4a1b      	ldr	r2, [pc, #108]	; (2b70 <config_dma_for_RX+0x9c>)
    2b04:	6013      	str	r3, [r2, #0]
	rx_I2SDescriptor[1] = (uint32_t)&i2s_RXBuffer[1][0] + sizeof(i2s_RXBuffer)/2;
    2b06:	4661      	mov	r1, ip
    2b08:	1859      	adds	r1, r3, r1
    2b0a:	6051      	str	r1, [r2, #4]
	config->descriptor_valid = true;
    2b0c:	2201      	movs	r2, #1
    2b0e:	4669      	mov	r1, sp
    2b10:	700a      	strb	r2, [r1, #0]
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
    2b12:	704d      	strb	r5, [r1, #1]
	config->block_action = DMA_BLOCK_ACTION_NOACT;
    2b14:	708d      	strb	r5, [r1, #2]
	config->dst_increment_enable = true;
    2b16:	714a      	strb	r2, [r1, #5]
	config->step_selection = DMA_STEPSEL_DST;
    2b18:	718d      	strb	r5, [r1, #6]
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
    2b1a:	71cd      	strb	r5, [r1, #7]
	config->next_descriptor_address = 0;
    2b1c:	9505      	str	r5, [sp, #20]
	descriptor_config.block_transfer_count = sizeof(i2s_RXBuffer)/4;
    2b1e:	2180      	movs	r1, #128	; 0x80
    2b20:	0049      	lsls	r1, r1, #1
    2b22:	4668      	mov	r0, sp
    2b24:	8101      	strh	r1, [r0, #8]
	descriptor_config.beat_size = DMA_BEAT_SIZE_HWORD;
    2b26:	4669      	mov	r1, sp
    2b28:	70c2      	strb	r2, [r0, #3]
	descriptor_config.src_increment_enable = false;
    2b2a:	7105      	strb	r5, [r0, #4]
	descriptor_config.source_address = (uint32_t)&I2S->DATA[0];
    2b2c:	4a11      	ldr	r2, [pc, #68]	; (2b74 <config_dma_for_RX+0xa0>)
    2b2e:	9203      	str	r2, [sp, #12]
	descriptor_config.destination_address = rx_I2SDescriptor[0];
    2b30:	9304      	str	r3, [sp, #16]
	dma_descriptor_create(&i2s_rx_dma_descriptor, &descriptor_config);
    2b32:	4d11      	ldr	r5, [pc, #68]	; (2b78 <config_dma_for_RX+0xa4>)
    2b34:	0028      	movs	r0, r5
    2b36:	4b11      	ldr	r3, [pc, #68]	; (2b7c <config_dma_for_RX+0xa8>)
    2b38:	4798      	blx	r3
	dma_add_descriptor(&i2s_rx_dma_resource, &i2s_rx_dma_descriptor);
    2b3a:	0029      	movs	r1, r5
    2b3c:	0020      	movs	r0, r4
    2b3e:	4b10      	ldr	r3, [pc, #64]	; (2b80 <config_dma_for_RX+0xac>)
    2b40:	4798      	blx	r3
	resource->callback[type] = callback;
    2b42:	4b10      	ldr	r3, [pc, #64]	; (2b84 <config_dma_for_RX+0xb0>)
    2b44:	60a3      	str	r3, [r4, #8]
	resource->callback_enable |= 1 << type;
    2b46:	7c23      	ldrb	r3, [r4, #16]
    2b48:	433b      	orrs	r3, r7
    2b4a:	7423      	strb	r3, [r4, #16]
	g_chan_interrupt_flag[resource->channel_id] |= (1UL << type);
    2b4c:	7822      	ldrb	r2, [r4, #0]
    2b4e:	490e      	ldr	r1, [pc, #56]	; (2b88 <config_dma_for_RX+0xb4>)
    2b50:	5c8b      	ldrb	r3, [r1, r2]
    2b52:	433b      	orrs	r3, r7
    2b54:	548b      	strb	r3, [r1, r2]
	dma_start_transfer_job(&i2s_rx_dma_resource);
    2b56:	0020      	movs	r0, r4
    2b58:	4b0c      	ldr	r3, [pc, #48]	; (2b8c <config_dma_for_RX+0xb8>)
    2b5a:	4798      	blx	r3
 }
    2b5c:	b009      	add	sp, #36	; 0x24
    2b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b60:	000014f1 	.word	0x000014f1
    2b64:	20001b30 	.word	0x20001b30
    2b68:	00001501 	.word	0x00001501
    2b6c:	20001500 	.word	0x20001500
    2b70:	200014c0 	.word	0x200014c0
    2b74:	42005030 	.word	0x42005030
    2b78:	200014f0 	.word	0x200014f0
    2b7c:	000016f9 	.word	0x000016f9
    2b80:	000017a5 	.word	0x000017a5
    2b84:	00002955 	.word	0x00002955
    2b88:	20000e40 	.word	0x20000e40
    2b8c:	000015b9 	.word	0x000015b9

00002b90 <configure_DAC_trigger_dma>:
{
    2b90:	b510      	push	{r4, lr}
    2b92:	b08e      	sub	sp, #56	; 0x38
	config->clock_source               = GCLK_GENERATOR_0;
    2b94:	aa01      	add	r2, sp, #4
    2b96:	2300      	movs	r3, #0
    2b98:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    2b9a:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    2b9c:	2100      	movs	r1, #0
    2b9e:	8093      	strh	r3, [r2, #4]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2ba0:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2ba2:	7051      	strb	r1, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2ba4:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2ba6:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2ba8:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2baa:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2bac:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2bae:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2bb0:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2bb2:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2bb4:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2bb6:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2bb8:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    2bba:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2bbc:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.wave_generation = TC_WAVE_GENERATION_MATCH_FREQ;
    2bbe:	3320      	adds	r3, #32
    2bc0:	7193      	strb	r3, [r2, #6]
	config_tc.counter_16_bit.compare_capture_channel[0] = 2999;	// 16000 Hz -> 48e6 /16000 = 3000, real 2875 for interrupt delays
    2bc2:	4b09      	ldr	r3, [pc, #36]	; (2be8 <configure_DAC_trigger_dma+0x58>)
    2bc4:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&tc_dac_instance, TC4 , &config_tc);
    2bc6:	4c09      	ldr	r4, [pc, #36]	; (2bec <configure_DAC_trigger_dma+0x5c>)
    2bc8:	4909      	ldr	r1, [pc, #36]	; (2bf0 <configure_DAC_trigger_dma+0x60>)
    2bca:	0020      	movs	r0, r4
    2bcc:	4b09      	ldr	r3, [pc, #36]	; (2bf4 <configure_DAC_trigger_dma+0x64>)
    2bce:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2bd0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2bd2:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2bd4:	b25b      	sxtb	r3, r3
    2bd6:	2b00      	cmp	r3, #0
    2bd8:	dbfb      	blt.n	2bd2 <configure_DAC_trigger_dma+0x42>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2bda:	8813      	ldrh	r3, [r2, #0]
    2bdc:	2102      	movs	r1, #2
    2bde:	430b      	orrs	r3, r1
    2be0:	b29b      	uxth	r3, r3
    2be2:	8013      	strh	r3, [r2, #0]
}
    2be4:	b00e      	add	sp, #56	; 0x38
    2be6:	bd10      	pop	{r4, pc}
    2be8:	00000bb7 	.word	0x00000bb7
    2bec:	20001b4c 	.word	0x20001b4c
    2bf0:	42003000 	.word	0x42003000
    2bf4:	00004bf9 	.word	0x00004bf9

00002bf8 <config_dma_for_DAC>:
 
 void config_dma_for_DAC(void)
 {
    2bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bfa:	b089      	sub	sp, #36	; 0x24
	struct dma_resource_config config;
	struct dma_descriptor_config descriptor_config;

	dma_get_config_defaults(&config);
    2bfc:	ad06      	add	r5, sp, #24
    2bfe:	0028      	movs	r0, r5
    2c00:	4b20      	ldr	r3, [pc, #128]	; (2c84 <config_dma_for_DAC+0x8c>)
    2c02:	4798      	blx	r3
	config.trigger_action = DMA_TRIGGER_ACTION_BEAT;
    2c04:	2702      	movs	r7, #2
    2c06:	2302      	movs	r3, #2
    2c08:	70ab      	strb	r3, [r5, #2]
	config.peripheral_trigger = TC4_DMAC_ID_OVF;
    2c0a:	3319      	adds	r3, #25
    2c0c:	706b      	strb	r3, [r5, #1]
	config.priority = DMA_PRIORITY_LEVEL_1;
    2c0e:	2601      	movs	r6, #1
    2c10:	702e      	strb	r6, [r5, #0]
	dma_allocate(&DAC_dma_resource, &config);
    2c12:	4c1d      	ldr	r4, [pc, #116]	; (2c88 <config_dma_for_DAC+0x90>)
    2c14:	0029      	movs	r1, r5
    2c16:	0020      	movs	r0, r4
    2c18:	4b1c      	ldr	r3, [pc, #112]	; (2c8c <config_dma_for_DAC+0x94>)
    2c1a:	4798      	blx	r3
	 
	rx_DacDescriptor[0] = (uint32_t)&DAC_buffer[0][0] + sizeof(DAC_buffer)/2;
    2c1c:	4a1c      	ldr	r2, [pc, #112]	; (2c90 <config_dma_for_DAC+0x98>)
    2c1e:	3201      	adds	r2, #1
    2c20:	32ff      	adds	r2, #255	; 0xff
    2c22:	4b1c      	ldr	r3, [pc, #112]	; (2c94 <config_dma_for_DAC+0x9c>)
    2c24:	601a      	str	r2, [r3, #0]
	rx_DacDescriptor[1] = (uint32_t)&DAC_buffer[1][0] + sizeof(DAC_buffer)/2;
    2c26:	1c51      	adds	r1, r2, #1
    2c28:	31ff      	adds	r1, #255	; 0xff
    2c2a:	6059      	str	r1, [r3, #4]
	config->descriptor_valid = true;
    2c2c:	466b      	mov	r3, sp
    2c2e:	701e      	strb	r6, [r3, #0]
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
    2c30:	2300      	movs	r3, #0
    2c32:	4669      	mov	r1, sp
    2c34:	704b      	strb	r3, [r1, #1]
	config->block_action = DMA_BLOCK_ACTION_NOACT;
    2c36:	708b      	strb	r3, [r1, #2]
	config->src_increment_enable = true;
    2c38:	710e      	strb	r6, [r1, #4]
	config->step_selection = DMA_STEPSEL_DST;
    2c3a:	718b      	strb	r3, [r1, #6]
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
    2c3c:	71cb      	strb	r3, [r1, #7]
	config->next_descriptor_address = 0;
    2c3e:	9305      	str	r3, [sp, #20]

	dma_descriptor_get_config_defaults(&descriptor_config);
	descriptor_config.block_transfer_count = sizeof(DAC_buffer)/4;
    2c40:	2180      	movs	r1, #128	; 0x80
    2c42:	4668      	mov	r0, sp
    2c44:	8101      	strh	r1, [r0, #8]
	descriptor_config.beat_size = DMA_BEAT_SIZE_HWORD;
    2c46:	4669      	mov	r1, sp
    2c48:	70c6      	strb	r6, [r0, #3]
	descriptor_config.src_increment_enable = true;
	descriptor_config.dst_increment_enable = false;
    2c4a:	7143      	strb	r3, [r0, #5]
	descriptor_config.source_address = rx_DacDescriptor[0];
    2c4c:	9203      	str	r2, [sp, #12]
	descriptor_config.destination_address = (uint32_t)&DAC->DATA.reg;
    2c4e:	4b12      	ldr	r3, [pc, #72]	; (2c98 <config_dma_for_DAC+0xa0>)
    2c50:	9304      	str	r3, [sp, #16]
	descriptor_config.next_descriptor_address = 0;

	dma_descriptor_create(&DAC_dma_descriptor, &descriptor_config);
    2c52:	4d12      	ldr	r5, [pc, #72]	; (2c9c <config_dma_for_DAC+0xa4>)
    2c54:	0028      	movs	r0, r5
    2c56:	4b12      	ldr	r3, [pc, #72]	; (2ca0 <config_dma_for_DAC+0xa8>)
    2c58:	4798      	blx	r3
	dma_add_descriptor(&DAC_dma_resource, &DAC_dma_descriptor);
    2c5a:	0029      	movs	r1, r5
    2c5c:	0020      	movs	r0, r4
    2c5e:	4b11      	ldr	r3, [pc, #68]	; (2ca4 <config_dma_for_DAC+0xac>)
    2c60:	4798      	blx	r3
	resource->callback[type] = callback;
    2c62:	4b11      	ldr	r3, [pc, #68]	; (2ca8 <config_dma_for_DAC+0xb0>)
    2c64:	60a3      	str	r3, [r4, #8]
	resource->callback_enable |= 1 << type;
    2c66:	7c23      	ldrb	r3, [r4, #16]
    2c68:	433b      	orrs	r3, r7
    2c6a:	7423      	strb	r3, [r4, #16]
	g_chan_interrupt_flag[resource->channel_id] |= (1UL << type);
    2c6c:	7822      	ldrb	r2, [r4, #0]
    2c6e:	490f      	ldr	r1, [pc, #60]	; (2cac <config_dma_for_DAC+0xb4>)
    2c70:	5c8b      	ldrb	r3, [r1, r2]
    2c72:	433b      	orrs	r3, r7
    2c74:	548b      	strb	r3, [r1, r2]

	dma_register_callback(&DAC_dma_resource, DAC_transfer_done, DMA_CALLBACK_TRANSFER_DONE);
	dma_enable_callback(&DAC_dma_resource, DMA_CALLBACK_TRANSFER_DONE);
	dma_start_transfer_job(&DAC_dma_resource);
    2c76:	0020      	movs	r0, r4
    2c78:	4b0d      	ldr	r3, [pc, #52]	; (2cb0 <config_dma_for_DAC+0xb8>)
    2c7a:	4798      	blx	r3
	InitTimingCounter();
    2c7c:	4b0d      	ldr	r3, [pc, #52]	; (2cb4 <config_dma_for_DAC+0xbc>)
    2c7e:	4798      	blx	r3
 }
    2c80:	b009      	add	sp, #36	; 0x24
    2c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c84:	000014f1 	.word	0x000014f1
    2c88:	200014c8 	.word	0x200014c8
    2c8c:	00001501 	.word	0x00001501
    2c90:	2000191c 	.word	0x2000191c
    2c94:	20001b68 	.word	0x20001b68
    2c98:	42004808 	.word	0x42004808
    2c9c:	20001b20 	.word	0x20001b20
    2ca0:	000016f9 	.word	0x000016f9
    2ca4:	000017a5 	.word	0x000017a5
    2ca8:	000028c9 	.word	0x000028c9
    2cac:	20000e40 	.word	0x20000e40
    2cb0:	000015b9 	.word	0x000015b9
    2cb4:	00002a1d 	.word	0x00002a1d

00002cb8 <i2s_TX_Done>:
{
	dma_resume_job(resource);
}

static void i2s_TX_Done(struct dma_resource* const resource )
{
    2cb8:	b510      	push	{r4, lr}
	resource->descriptor->SRCADDR.reg = (uint32_t)tx_destDescriptor[txBuf_idx++];
    2cba:	6980      	ldr	r0, [r0, #24]
    2cbc:	4909      	ldr	r1, [pc, #36]	; (2ce4 <i2s_TX_Done+0x2c>)
    2cbe:	680b      	ldr	r3, [r1, #0]
    2cc0:	1c5a      	adds	r2, r3, #1
    2cc2:	009b      	lsls	r3, r3, #2
    2cc4:	4c08      	ldr	r4, [pc, #32]	; (2ce8 <i2s_TX_Done+0x30>)
    2cc6:	591b      	ldr	r3, [r3, r4]
    2cc8:	6043      	str	r3, [r0, #4]
	txBuf_idx &= 0x01;
    2cca:	2401      	movs	r4, #1
    2ccc:	4022      	ands	r2, r4
    2cce:	600a      	str	r2, [r1, #0]
	dma_start_transfer_job(&i2s_tx_dma_resource);
    2cd0:	4806      	ldr	r0, [pc, #24]	; (2cec <i2s_TX_Done+0x34>)
    2cd2:	4b07      	ldr	r3, [pc, #28]	; (2cf0 <i2s_TX_Done+0x38>)
    2cd4:	4798      	blx	r3
	ADC_dma_overrun = dma_i2s_tx_done = false;
    2cd6:	2200      	movs	r2, #0
    2cd8:	4b06      	ldr	r3, [pc, #24]	; (2cf4 <i2s_TX_Done+0x3c>)
    2cda:	701a      	strb	r2, [r3, #0]
	dma_i2s_tx_done = 1;
    2cdc:	4b06      	ldr	r3, [pc, #24]	; (2cf8 <i2s_TX_Done+0x40>)
    2cde:	701c      	strb	r4, [r3, #0]
}
    2ce0:	bd10      	pop	{r4, pc}
    2ce2:	46c0      	nop			; (mov r8, r8)
    2ce4:	20000e74 	.word	0x20000e74
    2ce8:	20001b70 	.word	0x20001b70
    2cec:	20001b78 	.word	0x20001b78
    2cf0:	000015b9 	.word	0x000015b9
    2cf4:	20000e70 	.word	0x20000e70
    2cf8:	20000e71 	.word	0x20000e71

00002cfc <i2s_txDMAerror>:
{
    2cfc:	b510      	push	{r4, lr}
	dma_resume_job(resource);
    2cfe:	4b01      	ldr	r3, [pc, #4]	; (2d04 <i2s_txDMAerror+0x8>)
    2d00:	4798      	blx	r3
}
    2d02:	bd10      	pop	{r4, pc}
    2d04:	00001691 	.word	0x00001691

00002d08 <GetI2S_TX_Buffer>:
	 return (int16_t *)&i2s_tx[idx][0];
    2d08:	0280      	lsls	r0, r0, #10
    2d0a:	4b01      	ldr	r3, [pc, #4]	; (2d10 <GetI2S_TX_Buffer+0x8>)
    2d0c:	18c0      	adds	r0, r0, r3
}
    2d0e:	4770      	bx	lr
    2d10:	20001b94 	.word	0x20001b94

00002d14 <SendI2Sdata>:

void SendI2Sdata(int32_t idx)
{
	dma_i2s_tx_done = false;
    2d14:	2200      	movs	r2, #0
    2d16:	4b02      	ldr	r3, [pc, #8]	; (2d20 <SendI2Sdata+0xc>)
    2d18:	701a      	strb	r2, [r3, #0]
	txBuf_idx = idx;
    2d1a:	4b02      	ldr	r3, [pc, #8]	; (2d24 <SendI2Sdata+0x10>)
    2d1c:	6018      	str	r0, [r3, #0]
}
    2d1e:	4770      	bx	lr
    2d20:	20000e71 	.word	0x20000e71
    2d24:	20000e74 	.word	0x20000e74

00002d28 <config_dma_for_TX>:

void config_dma_for_TX(void)
{
    2d28:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d2a:	46c6      	mov	lr, r8
    2d2c:	b500      	push	{lr}
    2d2e:	b088      	sub	sp, #32
	struct dma_resource_config config;
	struct dma_descriptor_config descriptor_config;
	
	dma_get_config_defaults(&config);
    2d30:	af06      	add	r7, sp, #24
    2d32:	0038      	movs	r0, r7
    2d34:	4b27      	ldr	r3, [pc, #156]	; (2dd4 <config_dma_for_TX+0xac>)
    2d36:	4798      	blx	r3
	config.trigger_action = DMA_TRIGGER_ACTION_BEAT;
    2d38:	2602      	movs	r6, #2
    2d3a:	2302      	movs	r3, #2
    2d3c:	70bb      	strb	r3, [r7, #2]
	config.peripheral_trigger = I2S_DMAC_ID_TX_1;
    2d3e:	332a      	adds	r3, #42	; 0x2a
    2d40:	707b      	strb	r3, [r7, #1]
	config.priority = DMA_PRIORITY_LEVEL_1;
    2d42:	3b2b      	subs	r3, #43	; 0x2b
    2d44:	4698      	mov	r8, r3
    2d46:	2501      	movs	r5, #1
    2d48:	703b      	strb	r3, [r7, #0]
	
	dma_allocate(&i2s_tx_dma_resource, &config);
    2d4a:	4c23      	ldr	r4, [pc, #140]	; (2dd8 <config_dma_for_TX+0xb0>)
    2d4c:	0039      	movs	r1, r7
    2d4e:	0020      	movs	r0, r4
    2d50:	4b22      	ldr	r3, [pc, #136]	; (2ddc <config_dma_for_TX+0xb4>)
    2d52:	4798      	blx	r3
	
	tx_destDescriptor[0] =  (uint32_t)&i2s_tx[0][0] + sizeof(i2s_tx) / 2;
    2d54:	4a22      	ldr	r2, [pc, #136]	; (2de0 <config_dma_for_TX+0xb8>)
    2d56:	2380      	movs	r3, #128	; 0x80
    2d58:	00db      	lsls	r3, r3, #3
    2d5a:	469c      	mov	ip, r3
    2d5c:	4462      	add	r2, ip
    2d5e:	4b21      	ldr	r3, [pc, #132]	; (2de4 <config_dma_for_TX+0xbc>)
    2d60:	601a      	str	r2, [r3, #0]
	tx_destDescriptor[1] =  (uint32_t)&i2s_tx[1][0] + sizeof(i2s_tx) / 2;
    2d62:	4661      	mov	r1, ip
    2d64:	1851      	adds	r1, r2, r1
    2d66:	6059      	str	r1, [r3, #4]
	config->descriptor_valid = true;
    2d68:	466b      	mov	r3, sp
    2d6a:	4641      	mov	r1, r8
    2d6c:	7019      	strb	r1, [r3, #0]
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
    2d6e:	2300      	movs	r3, #0
    2d70:	4669      	mov	r1, sp
    2d72:	704b      	strb	r3, [r1, #1]
	config->block_action = DMA_BLOCK_ACTION_NOACT;
    2d74:	708b      	strb	r3, [r1, #2]
	config->src_increment_enable = true;
    2d76:	4640      	mov	r0, r8
    2d78:	7108      	strb	r0, [r1, #4]
	config->step_selection = DMA_STEPSEL_DST;
    2d7a:	718b      	strb	r3, [r1, #6]
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
    2d7c:	71cb      	strb	r3, [r1, #7]
	config->next_descriptor_address = 0;
    2d7e:	9305      	str	r3, [sp, #20]

	dma_descriptor_get_config_defaults(&descriptor_config);
	descriptor_config.block_transfer_count = sizeof(i2s_tx)/4;
    2d80:	2180      	movs	r1, #128	; 0x80
    2d82:	0089      	lsls	r1, r1, #2
    2d84:	4668      	mov	r0, sp
    2d86:	8101      	strh	r1, [r0, #8]
	descriptor_config.beat_size = DMA_BEAT_SIZE_HWORD;
    2d88:	4669      	mov	r1, sp
    2d8a:	4640      	mov	r0, r8
    2d8c:	70c8      	strb	r0, [r1, #3]
	descriptor_config.src_increment_enable = true;
	descriptor_config.dst_increment_enable = false;
    2d8e:	714b      	strb	r3, [r1, #5]
	descriptor_config.source_address = tx_destDescriptor[0];
    2d90:	9203      	str	r2, [sp, #12]
	descriptor_config.destination_address = (uint32_t)&I2S->DATA[1];
    2d92:	4b15      	ldr	r3, [pc, #84]	; (2de8 <config_dma_for_TX+0xc0>)
    2d94:	9304      	str	r3, [sp, #16]
	descriptor_config.next_descriptor_address = 0;
	dma_descriptor_create(&i2s_tx_dma_descriptor, &descriptor_config);
    2d96:	4f15      	ldr	r7, [pc, #84]	; (2dec <config_dma_for_TX+0xc4>)
    2d98:	0038      	movs	r0, r7
    2d9a:	4b15      	ldr	r3, [pc, #84]	; (2df0 <config_dma_for_TX+0xc8>)
    2d9c:	4798      	blx	r3
	dma_add_descriptor(&i2s_tx_dma_resource, &i2s_tx_dma_descriptor);
    2d9e:	0039      	movs	r1, r7
    2da0:	0020      	movs	r0, r4
    2da2:	4b14      	ldr	r3, [pc, #80]	; (2df4 <config_dma_for_TX+0xcc>)
    2da4:	4798      	blx	r3
	resource->callback[type] = callback;
    2da6:	4b14      	ldr	r3, [pc, #80]	; (2df8 <config_dma_for_TX+0xd0>)
    2da8:	60a3      	str	r3, [r4, #8]
	resource->callback_enable |= 1 << type;
    2daa:	7c22      	ldrb	r2, [r4, #16]
    2dac:	4332      	orrs	r2, r6
    2dae:	b252      	sxtb	r2, r2
	g_chan_interrupt_flag[resource->channel_id] |= (1UL << type);
    2db0:	7821      	ldrb	r1, [r4, #0]
    2db2:	4812      	ldr	r0, [pc, #72]	; (2dfc <config_dma_for_TX+0xd4>)
    2db4:	5c43      	ldrb	r3, [r0, r1]
    2db6:	4333      	orrs	r3, r6
    2db8:	b2db      	uxtb	r3, r3
	resource->callback[type] = callback;
    2dba:	4e11      	ldr	r6, [pc, #68]	; (2e00 <config_dma_for_TX+0xd8>)
    2dbc:	6066      	str	r6, [r4, #4]
	resource->callback_enable |= 1 << type;
    2dbe:	432a      	orrs	r2, r5
    2dc0:	7422      	strb	r2, [r4, #16]
	g_chan_interrupt_flag[resource->channel_id] |= (1UL << type);
    2dc2:	432b      	orrs	r3, r5
    2dc4:	5443      	strb	r3, [r0, r1]
	dma_enable_callback(&i2s_tx_dma_resource, DMA_CALLBACK_TRANSFER_DONE);

	dma_register_callback(&i2s_tx_dma_resource, i2s_txDMAerror,DMA_CALLBACK_TRANSFER_ERROR);
	dma_enable_callback(&i2s_tx_dma_resource, DMA_CALLBACK_TRANSFER_ERROR);

	dma_start_transfer_job(&i2s_tx_dma_resource);
    2dc6:	0020      	movs	r0, r4
    2dc8:	4b0e      	ldr	r3, [pc, #56]	; (2e04 <config_dma_for_TX+0xdc>)
    2dca:	4798      	blx	r3
}
    2dcc:	b008      	add	sp, #32
    2dce:	bc04      	pop	{r2}
    2dd0:	4690      	mov	r8, r2
    2dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2dd4:	000014f1 	.word	0x000014f1
    2dd8:	20001b78 	.word	0x20001b78
    2ddc:	00001501 	.word	0x00001501
    2de0:	20001b94 	.word	0x20001b94
    2de4:	20001b70 	.word	0x20001b70
    2de8:	42005034 	.word	0x42005034
    2dec:	200023a0 	.word	0x200023a0
    2df0:	000016f9 	.word	0x000016f9
    2df4:	000017a5 	.word	0x000017a5
    2df8:	00002cb9 	.word	0x00002cb9
    2dfc:	20000e40 	.word	0x20000e40
    2e00:	00002cfd 	.word	0x00002cfd
    2e04:	000015b9 	.word	0x000015b9

00002e08 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    2e08:	6803      	ldr	r3, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2e0a:	69db      	ldr	r3, [r3, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    2e0c:	075b      	lsls	r3, r3, #29
    2e0e:	d1fb      	bne.n	2e08 <_i2c_master_wait_for_sync>
		/* Wait for I2C module to sync. */
	}
}
    2e10:	4770      	bx	lr
	...

00002e14 <rtc_ovf_callback>:


 // RTC timer configuration

static void rtc_ovf_callback(void)
{
    2e14:	b510      	push	{r4, lr}
	TickCount++;
    2e16:	4a03      	ldr	r2, [pc, #12]	; (2e24 <rtc_ovf_callback+0x10>)
    2e18:	6813      	ldr	r3, [r2, #0]
    2e1a:	3301      	adds	r3, #1
    2e1c:	6013      	str	r3, [r2, #0]
	fMouth_Main();	// Refresh mouth leds at 1KHz / 4 rows = 250Hz refresh rate
    2e1e:	4b02      	ldr	r3, [pc, #8]	; (2e28 <rtc_ovf_callback+0x14>)
    2e20:	4798      	blx	r3
}
    2e22:	bd10      	pop	{r4, pc}
    2e24:	20000e78 	.word	0x20000e78
    2e28:	00001dcd 	.word	0x00001dcd

00002e2c <my_callback_cdc_enable>:
 }
    2e2c:	2001      	movs	r0, #1
    2e2e:	4770      	bx	lr

00002e30 <my_callback_cdc_disable>:
 }
    2e30:	4770      	bx	lr
	...

00002e34 <SystemRTC_Init>:

void SystemRTC_Init(void)
{
    2e34:	b510      	push	{r4, lr}
    2e36:	b084      	sub	sp, #16
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
	config->clear_on_match      = false;
    2e38:	2300      	movs	r3, #0
    2e3a:	466a      	mov	r2, sp
    2e3c:	70d3      	strb	r3, [r2, #3]
    2e3e:	e006      	b.n	2e4e <SystemRTC_Init+0x1a>
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
    2e40:	1c9a      	adds	r2, r3, #2
    2e42:	0092      	lsls	r2, r2, #2
    2e44:	2100      	movs	r1, #0
    2e46:	4668      	mov	r0, sp
    2e48:	5011      	str	r1, [r2, r0]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    2e4a:	3301      	adds	r3, #1
    2e4c:	b2db      	uxtb	r3, r3
    2e4e:	2b01      	cmp	r3, #1
    2e50:	d9f6      	bls.n	2e40 <SystemRTC_Init+0xc>
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    2e52:	2300      	movs	r3, #0
    2e54:	466a      	mov	r2, sp
    2e56:	8013      	strh	r3, [r2, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    2e58:	7093      	strb	r3, [r2, #2]
	config_rtc_count.continuously_update = true;
    2e5a:	2301      	movs	r3, #1
    2e5c:	7113      	strb	r3, [r2, #4]
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    2e5e:	4c0b      	ldr	r4, [pc, #44]	; (2e8c <SystemRTC_Init+0x58>)
    2e60:	490b      	ldr	r1, [pc, #44]	; (2e90 <SystemRTC_Init+0x5c>)
    2e62:	0020      	movs	r0, r4
    2e64:	4b0b      	ldr	r3, [pc, #44]	; (2e94 <SystemRTC_Init+0x60>)
    2e66:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    2e68:	0020      	movs	r0, r4
    2e6a:	4b0b      	ldr	r3, [pc, #44]	; (2e98 <SystemRTC_Init+0x64>)
    2e6c:	4798      	blx	r3

	rtc_count_register_callback(&rtc_instance, rtc_ovf_callback, RTC_COUNT_CALLBACK_OVERFLOW);
    2e6e:	2202      	movs	r2, #2
    2e70:	490a      	ldr	r1, [pc, #40]	; (2e9c <SystemRTC_Init+0x68>)
    2e72:	0020      	movs	r0, r4
    2e74:	4b0a      	ldr	r3, [pc, #40]	; (2ea0 <SystemRTC_Init+0x6c>)
    2e76:	4798      	blx	r3
	rtc_count_enable_callback(&rtc_instance, RTC_COUNT_CALLBACK_OVERFLOW);
    2e78:	2102      	movs	r1, #2
    2e7a:	0020      	movs	r0, r4
    2e7c:	4b09      	ldr	r3, [pc, #36]	; (2ea4 <SystemRTC_Init+0x70>)
    2e7e:	4798      	blx	r3

	rtc_count_set_period(&rtc_instance, 32);
    2e80:	2120      	movs	r1, #32
    2e82:	0020      	movs	r0, r4
    2e84:	4b08      	ldr	r3, [pc, #32]	; (2ea8 <SystemRTC_Init+0x74>)
    2e86:	4798      	blx	r3
}
    2e88:	b004      	add	sp, #16
    2e8a:	bd10      	pop	{r4, pc}
    2e8c:	200023b0 	.word	0x200023b0
    2e90:	40001400 	.word	0x40001400
    2e94:	000040a1 	.word	0x000040a1
    2e98:	00003f0d 	.word	0x00003f0d
    2e9c:	00002e15 	.word	0x00002e15
    2ea0:	00004179 	.word	0x00004179
    2ea4:	000041c1 	.word	0x000041c1
    2ea8:	000040fd 	.word	0x000040fd

00002eac <GetTickCount>:

uint32_t GetTickCount(void)
{
	return TickCount;
    2eac:	4b01      	ldr	r3, [pc, #4]	; (2eb4 <GetTickCount+0x8>)
    2eae:	6818      	ldr	r0, [r3, #0]
}
    2eb0:	4770      	bx	lr
    2eb2:	46c0      	nop			; (mov r8, r8)
    2eb4:	20000e78 	.word	0x20000e78

00002eb8 <TimeDiff>:
         overflow is considered.
**********************************************************************/

uint32_t TimeDiff(uint32_t time_start, uint32_t time_end)
{
	if (time_end >= time_start) 
    2eb8:	4281      	cmp	r1, r0
    2eba:	d201      	bcs.n	2ec0 <TimeDiff+0x8>
		return time_end - time_start;
	else 
		return UINT32_MAX - time_start + time_end + 1;
    2ebc:	1a08      	subs	r0, r1, r0
}
    2ebe:	4770      	bx	lr
		return time_end - time_start;
    2ec0:	1a08      	subs	r0, r1, r0
    2ec2:	e7fc      	b.n	2ebe <TimeDiff+0x6>

00002ec4 <Delay_ms>:

void Delay_ms(uint32_t value)
{
    2ec4:	b570      	push	{r4, r5, r6, lr}
    2ec6:	0005      	movs	r5, r0
	uint32_t start_tm = TickCount;
    2ec8:	4b04      	ldr	r3, [pc, #16]	; (2edc <Delay_ms+0x18>)
    2eca:	681c      	ldr	r4, [r3, #0]
	while(TimeDiff(start_tm, TickCount) < value);
    2ecc:	4b03      	ldr	r3, [pc, #12]	; (2edc <Delay_ms+0x18>)
    2ece:	6819      	ldr	r1, [r3, #0]
    2ed0:	0020      	movs	r0, r4
    2ed2:	4b03      	ldr	r3, [pc, #12]	; (2ee0 <Delay_ms+0x1c>)
    2ed4:	4798      	blx	r3
    2ed6:	42a8      	cmp	r0, r5
    2ed8:	d3f8      	bcc.n	2ecc <Delay_ms+0x8>
}
    2eda:	bd70      	pop	{r4, r5, r6, pc}
    2edc:	20000e78 	.word	0x20000e78
    2ee0:	00002eb9 	.word	0x00002eb9

00002ee4 <configure_i2c_master>:
 {
	 return &i2c_master_instance;
 }

 void configure_i2c_master(void)
 {
    2ee4:	b530      	push	{r4, r5, lr}
    2ee6:	b08f      	sub	sp, #60	; 0x3c
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    2ee8:	aa01      	add	r2, sp, #4
    2eea:	4b21      	ldr	r3, [pc, #132]	; (2f70 <configure_i2c_master+0x8c>)
    2eec:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    2eee:	2300      	movs	r3, #0
    2ef0:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
	config->run_in_standby   = false;
    2ef2:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    2ef4:	2180      	movs	r1, #128	; 0x80
    2ef6:	0389      	lsls	r1, r1, #14
    2ef8:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    2efa:	2101      	movs	r1, #1
    2efc:	4249      	negs	r1, r1
    2efe:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    2f00:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    2f02:	3125      	adds	r1, #37	; 0x25
    2f04:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    2f06:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    2f08:	3108      	adds	r1, #8
    2f0a:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    2f0c:	3101      	adds	r1, #1
    2f0e:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    2f10:	3101      	adds	r1, #1
    2f12:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    2f14:	33d7      	adds	r3, #215	; 0xd7
    2f16:	8613      	strh	r3, [r2, #48]	; 0x30
	 /* Initialize config structure and software module. */
	 struct i2c_master_config config_i2c_master;
	 i2c_master_get_config_defaults(&config_i2c_master);
	 /* Change buffer timeout to something longer. */
	 config_i2c_master.baud_rate = I2C_MASTER_BAUD_RATE_400KHZ;
    2f18:	33b9      	adds	r3, #185	; 0xb9
    2f1a:	9301      	str	r3, [sp, #4]
	 config_i2c_master.buffer_timeout = 65535;
	 config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
    2f1c:	4b15      	ldr	r3, [pc, #84]	; (2f74 <configure_i2c_master+0x90>)
    2f1e:	61d3      	str	r3, [r2, #28]
	 config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
    2f20:	4b15      	ldr	r3, [pc, #84]	; (2f78 <configure_i2c_master+0x94>)
    2f22:	6213      	str	r3, [r2, #32]
	 config_i2c_master.generator_source = GCLK_GENERATOR_3;
    2f24:	2303      	movs	r3, #3
    2f26:	7313      	strb	r3, [r2, #12]
	 /* Initialize and enable device with config. */
	 i2c_master_init(&i2c_master_instance, SERCOM3, &config_i2c_master);
    2f28:	4d14      	ldr	r5, [pc, #80]	; (2f7c <configure_i2c_master+0x98>)
    2f2a:	4915      	ldr	r1, [pc, #84]	; (2f80 <configure_i2c_master+0x9c>)
    2f2c:	0028      	movs	r0, r5
    2f2e:	4b15      	ldr	r3, [pc, #84]	; (2f84 <configure_i2c_master+0xa0>)
    2f30:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2f32:	682c      	ldr	r4, [r5, #0]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    2f34:	0028      	movs	r0, r5
    2f36:	4b14      	ldr	r3, [pc, #80]	; (2f88 <configure_i2c_master+0xa4>)
    2f38:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    2f3a:	6823      	ldr	r3, [r4, #0]
    2f3c:	2202      	movs	r2, #2
    2f3e:	4313      	orrs	r3, r2
    2f40:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2f42:	6828      	ldr	r0, [r5, #0]
    2f44:	4b11      	ldr	r3, [pc, #68]	; (2f8c <configure_i2c_master+0xa8>)
    2f46:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2f48:	231f      	movs	r3, #31
    2f4a:	4018      	ands	r0, r3
    2f4c:	3b1e      	subs	r3, #30
    2f4e:	4083      	lsls	r3, r0
    2f50:	4a0f      	ldr	r2, [pc, #60]	; (2f90 <configure_i2c_master+0xac>)
    2f52:	6013      	str	r3, [r2, #0]
	uint32_t timeout_counter = 0;
    2f54:	2300      	movs	r3, #0
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2f56:	8b62      	ldrh	r2, [r4, #26]
    2f58:	06d2      	lsls	r2, r2, #27
    2f5a:	d406      	bmi.n	2f6a <configure_i2c_master+0x86>
		timeout_counter++;
    2f5c:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2f5e:	4a07      	ldr	r2, [pc, #28]	; (2f7c <configure_i2c_master+0x98>)
    2f60:	88d2      	ldrh	r2, [r2, #6]
    2f62:	4293      	cmp	r3, r2
    2f64:	d3f7      	bcc.n	2f56 <configure_i2c_master+0x72>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    2f66:	2310      	movs	r3, #16
    2f68:	8363      	strh	r3, [r4, #26]
	 i2c_master_enable(&i2c_master_instance);
 }
    2f6a:	b00f      	add	sp, #60	; 0x3c
    2f6c:	bd30      	pop	{r4, r5, pc}
    2f6e:	46c0      	nop			; (mov r8, r8)
    2f70:	00000d48 	.word	0x00000d48
    2f74:	00160002 	.word	0x00160002
    2f78:	00170002 	.word	0x00170002
    2f7c:	200024b8 	.word	0x200024b8
    2f80:	42001400 	.word	0x42001400
    2f84:	0000446d 	.word	0x0000446d
    2f88:	00002e09 	.word	0x00002e09
    2f8c:	0000749d 	.word	0x0000749d
    2f90:	e000e100 	.word	0xe000e100

00002f94 <I2C_ReadData>:
 //	0 if fault
 //	number of writen bytes
 // *****************************************************************************

 uint32_t I2C_ReadData(uint8_t *pData, uint16_t InitAddr, uint16_t nbytes)
 {
    2f94:	b530      	push	{r4, r5, lr}
    2f96:	b089      	sub	sp, #36	; 0x24
    2f98:	0005      	movs	r5, r0
    2f9a:	1e14      	subs	r4, r2, #0
    2f9c:	466b      	mov	r3, sp
    2f9e:	80d9      	strh	r1, [r3, #6]
	 struct i2c_master_packet wr_packet;
	 struct i2c_master_packet rd_packet;
	 
	 if (!nbytes || (InitAddr + nbytes -1) > 0xff)return 0;
    2fa0:	d029      	beq.n	2ff6 <I2C_ReadData+0x62>
    2fa2:	b28b      	uxth	r3, r1
    2fa4:	189b      	adds	r3, r3, r2
    2fa6:	3b01      	subs	r3, #1
    2fa8:	2bff      	cmp	r3, #255	; 0xff
    2faa:	dd01      	ble.n	2fb0 <I2C_ReadData+0x1c>
    2fac:	2000      	movs	r0, #0
    2fae:	e023      	b.n	2ff8 <I2C_ReadData+0x64>
	 
	 //Select slave and  Write Data address
	 
	wr_packet.address = CAP1203_ADDR;;
    2fb0:	a905      	add	r1, sp, #20
    2fb2:	2328      	movs	r3, #40	; 0x28
    2fb4:	800b      	strh	r3, [r1, #0]
	wr_packet.data_length = 1;
    2fb6:	3b27      	subs	r3, #39	; 0x27
    2fb8:	804b      	strh	r3, [r1, #2]
	wr_packet.data = (uint8_t*)&InitAddr;
    2fba:	466b      	mov	r3, sp
    2fbc:	3306      	adds	r3, #6
    2fbe:	604b      	str	r3, [r1, #4]
	wr_packet.ten_bit_address = false,
    2fc0:	2300      	movs	r3, #0
    2fc2:	720b      	strb	r3, [r1, #8]
	wr_packet.high_speed      = false,
    2fc4:	724b      	strb	r3, [r1, #9]
	wr_packet.hs_master_code  = 0;
    2fc6:	728b      	strb	r3, [r1, #10]
	 
	 if(i2c_master_write_packet_wait(&i2c_master_instance, &wr_packet) != STATUS_OK)return 0;
    2fc8:	480d      	ldr	r0, [pc, #52]	; (3000 <I2C_ReadData+0x6c>)
    2fca:	4b0e      	ldr	r3, [pc, #56]	; (3004 <I2C_ReadData+0x70>)
    2fcc:	4798      	blx	r3
    2fce:	2800      	cmp	r0, #0
    2fd0:	d001      	beq.n	2fd6 <I2C_ReadData+0x42>
    2fd2:	2000      	movs	r0, #0
    2fd4:	e010      	b.n	2ff8 <I2C_ReadData+0x64>
	 
	 // Read 32 bytes from data address
	 
	rd_packet.address = CAP1203_ADDR;;
    2fd6:	a902      	add	r1, sp, #8
    2fd8:	2328      	movs	r3, #40	; 0x28
    2fda:	800b      	strh	r3, [r1, #0]
	rd_packet.data_length = nbytes;
    2fdc:	804c      	strh	r4, [r1, #2]
	rd_packet.data = pData;
    2fde:	604d      	str	r5, [r1, #4]
	rd_packet.ten_bit_address = false,
    2fe0:	2300      	movs	r3, #0
    2fe2:	720b      	strb	r3, [r1, #8]
	rd_packet.high_speed      = false,
    2fe4:	724b      	strb	r3, [r1, #9]
	rd_packet.hs_master_code  = 0;
    2fe6:	728b      	strb	r3, [r1, #10]

	 if(i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet) != STATUS_OK)return 0;
    2fe8:	4805      	ldr	r0, [pc, #20]	; (3000 <I2C_ReadData+0x6c>)
    2fea:	4b07      	ldr	r3, [pc, #28]	; (3008 <I2C_ReadData+0x74>)
    2fec:	4798      	blx	r3
    2fee:	2800      	cmp	r0, #0
    2ff0:	d104      	bne.n	2ffc <I2C_ReadData+0x68>
	 else return nbytes;
    2ff2:	0020      	movs	r0, r4
    2ff4:	e000      	b.n	2ff8 <I2C_ReadData+0x64>
	 if (!nbytes || (InitAddr + nbytes -1) > 0xff)return 0;
    2ff6:	2000      	movs	r0, #0
 }
    2ff8:	b009      	add	sp, #36	; 0x24
    2ffa:	bd30      	pop	{r4, r5, pc}
	 if(i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet) != STATUS_OK)return 0;
    2ffc:	2000      	movs	r0, #0
    2ffe:	e7fb      	b.n	2ff8 <I2C_ReadData+0x64>
    3000:	200024b8 	.word	0x200024b8
    3004:	0000484d 	.word	0x0000484d
    3008:	0000482d 	.word	0x0000482d

0000300c <I2C_WriteData>:
 //	0 if fault
 //	number of writen bytes
 // *****************************************************************************

 uint32_t I2C_WriteData(uint8_t *pData, uint16_t InitAddr, uint16_t nbytes)
 {
    300c:	b530      	push	{r4, r5, lr}
    300e:	b0c5      	sub	sp, #276	; 0x114
    3010:	000d      	movs	r5, r1
    3012:	1e14      	subs	r4, r2, #0
	 struct i2c_master_packet wr_RTC_packet;
	 int32_t error;
	 uint8_t buffer[256];
	 if (!nbytes || (uint32_t)(InitAddr + nbytes + 1) > sizeof(buffer))
    3014:	d01f      	beq.n	3056 <I2C_WriteData+0x4a>
    3016:	188b      	adds	r3, r1, r2
    3018:	3301      	adds	r3, #1
    301a:	2280      	movs	r2, #128	; 0x80
    301c:	0052      	lsls	r2, r2, #1
    301e:	4293      	cmp	r3, r2
    3020:	d901      	bls.n	3026 <I2C_WriteData+0x1a>
		return 0;
    3022:	2000      	movs	r0, #0
    3024:	e018      	b.n	3058 <I2C_WriteData+0x4c>

	 memcpy_ram2ram(&buffer[1], pData, nbytes);
    3026:	0022      	movs	r2, r4
    3028:	0001      	movs	r1, r0
    302a:	466b      	mov	r3, sp
    302c:	1d58      	adds	r0, r3, #5
    302e:	4b0b      	ldr	r3, [pc, #44]	; (305c <I2C_WriteData+0x50>)
    3030:	4798      	blx	r3
	 
	 buffer[0] = InitAddr;
    3032:	ab01      	add	r3, sp, #4
    3034:	701d      	strb	r5, [r3, #0]
	 
	 wr_RTC_packet.address = CAP1203_ADDR;;
    3036:	a941      	add	r1, sp, #260	; 0x104
    3038:	2328      	movs	r3, #40	; 0x28
    303a:	800b      	strh	r3, [r1, #0]
	 wr_RTC_packet.data_length = nbytes + 1;
    303c:	1c63      	adds	r3, r4, #1
    303e:	804b      	strh	r3, [r1, #2]
	 wr_RTC_packet.data = buffer;
    3040:	ab01      	add	r3, sp, #4
    3042:	604b      	str	r3, [r1, #4]
	 error = i2c_master_write_packet_wait(&i2c_master_instance, &wr_RTC_packet);
    3044:	4806      	ldr	r0, [pc, #24]	; (3060 <I2C_WriteData+0x54>)
    3046:	4b07      	ldr	r3, [pc, #28]	; (3064 <I2C_WriteData+0x58>)
    3048:	4798      	blx	r3
	 
	 if(error != STATUS_OK)return 0;
    304a:	2800      	cmp	r0, #0
    304c:	d101      	bne.n	3052 <I2C_WriteData+0x46>
	 else return nbytes;
    304e:	0020      	movs	r0, r4
    3050:	e002      	b.n	3058 <I2C_WriteData+0x4c>
	 if(error != STATUS_OK)return 0;
    3052:	2000      	movs	r0, #0
    3054:	e000      	b.n	3058 <I2C_WriteData+0x4c>
		return 0;
    3056:	2000      	movs	r0, #0
 }
    3058:	b045      	add	sp, #276	; 0x114
    305a:	bd30      	pop	{r4, r5, pc}
    305c:	0000c38d 	.word	0x0000c38d
    3060:	200024b8 	.word	0x200024b8
    3064:	0000484d 	.word	0x0000484d

00003068 <configure_usart_Serial>:
 {
	 return &serial_instance;
 }

 void configure_usart_Serial(void)
 {
    3068:	b510      	push	{r4, lr}
    306a:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    306c:	2380      	movs	r3, #128	; 0x80
    306e:	05db      	lsls	r3, r3, #23
    3070:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3072:	2300      	movs	r3, #0
    3074:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3076:	22ff      	movs	r2, #255	; 0xff
    3078:	4669      	mov	r1, sp
    307a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    307c:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    307e:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    3080:	2201      	movs	r2, #1
    3082:	2124      	movs	r1, #36	; 0x24
    3084:	4668      	mov	r0, sp
    3086:	5442      	strb	r2, [r0, r1]
	config->transmitter_enable = true;
    3088:	3101      	adds	r1, #1
    308a:	5442      	strb	r2, [r0, r1]
	config->clock_polarity_inverted = false;
    308c:	3225      	adds	r2, #37	; 0x25
    308e:	5483      	strb	r3, [r0, r2]
	config->use_external_clock = false;
    3090:	3201      	adds	r2, #1
    3092:	5483      	strb	r3, [r0, r2]
	config->ext_clock_freq   = 0;
    3094:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3096:	3205      	adds	r2, #5
    3098:	5483      	strb	r3, [r0, r2]
	config->generator_source = GCLK_GENERATOR_0;
	config->pinmux_pad0      = PINMUX_DEFAULT;
    309a:	930c      	str	r3, [sp, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    309c:	930d      	str	r3, [sp, #52]	; 0x34
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    309e:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    30a0:	7603      	strb	r3, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    30a2:	7703      	strb	r3, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    30a4:	7643      	strb	r3, [r0, #25]
	config->receive_pulse_length                    = 19;
    30a6:	2213      	movs	r2, #19
    30a8:	7682      	strb	r2, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    30aa:	7743      	strb	r3, [r0, #29]
	 enum status_code status = STATUS_OK;
	 struct usart_config config_usart;
	 usart_get_config_defaults(&config_usart);

	 config_usart.baudrate    = 115200;
    30ac:	23e1      	movs	r3, #225	; 0xe1
    30ae:	025b      	lsls	r3, r3, #9
    30b0:	9308      	str	r3, [sp, #32]
	 config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    30b2:	23c4      	movs	r3, #196	; 0xc4
    30b4:	039b      	lsls	r3, r3, #14
    30b6:	9303      	str	r3, [sp, #12]
	 config_usart.pinmux_pad0 = PINMUX_DEFAULT;
	 config_usart.pinmux_pad1 = PINMUX_DEFAULT;
	 config_usart.pinmux_pad2 = PINMUX_PB22D_SERCOM5_PAD2;
    30b8:	4b16      	ldr	r3, [pc, #88]	; (3114 <configure_usart_Serial+0xac>)
    30ba:	930e      	str	r3, [sp, #56]	; 0x38
	 config_usart.pinmux_pad3 = PINMUX_PB23D_SERCOM5_PAD3;
    30bc:	4b16      	ldr	r3, [pc, #88]	; (3118 <configure_usart_Serial+0xb0>)
    30be:	930f      	str	r3, [sp, #60]	; 0x3c
	 config_usart.sample_rate = USART_SAMPLE_RATE_16X_FRACTIONAL;
    30c0:	2380      	movs	r3, #128	; 0x80
    30c2:	019b      	lsls	r3, r3, #6
    30c4:	8203      	strh	r3, [r0, #16]
	 config_usart.sample_adjustment = USART_SAMPLE_ADJUSTMENT_9_10_11;
    30c6:	2380      	movs	r3, #128	; 0x80
    30c8:	03db      	lsls	r3, r3, #15
    30ca:	9305      	str	r3, [sp, #20]
	 config_usart.generator_source = GCLK_GENERATOR_3;
    30cc:	2203      	movs	r2, #3
    30ce:	232d      	movs	r3, #45	; 0x2d
    30d0:	54c2      	strb	r2, [r0, r3]
	 status = usart_init(&serial_instance,	SERCOM5, &config_usart);
    30d2:	466a      	mov	r2, sp
    30d4:	4911      	ldr	r1, [pc, #68]	; (311c <configure_usart_Serial+0xb4>)
    30d6:	4812      	ldr	r0, [pc, #72]	; (3120 <configure_usart_Serial+0xb8>)
    30d8:	4b12      	ldr	r3, [pc, #72]	; (3124 <configure_usart_Serial+0xbc>)
    30da:	4798      	blx	r3
	 while (status != STATUS_OK) {
    30dc:	2800      	cmp	r0, #0
    30de:	d1fd      	bne.n	30dc <configure_usart_Serial+0x74>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    30e0:	4b0f      	ldr	r3, [pc, #60]	; (3120 <configure_usart_Serial+0xb8>)
    30e2:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    30e4:	0020      	movs	r0, r4
    30e6:	4b10      	ldr	r3, [pc, #64]	; (3128 <configure_usart_Serial+0xc0>)
    30e8:	4798      	blx	r3
    30ea:	231f      	movs	r3, #31
    30ec:	4018      	ands	r0, r3
    30ee:	3b1e      	subs	r3, #30
    30f0:	4083      	lsls	r3, r0
    30f2:	4a0e      	ldr	r2, [pc, #56]	; (312c <configure_usart_Serial+0xc4>)
    30f4:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    30f6:	4b0a      	ldr	r3, [pc, #40]	; (3120 <configure_usart_Serial+0xb8>)
    30f8:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    30fa:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    30fc:	2b00      	cmp	r3, #0
    30fe:	d1fa      	bne.n	30f6 <configure_usart_Serial+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3100:	6823      	ldr	r3, [r4, #0]
    3102:	2202      	movs	r2, #2
    3104:	4313      	orrs	r3, r2
    3106:	6023      	str	r3, [r4, #0]
	 };
	 usart_enable(&serial_instance);
	 fSerial_InitSerialProtocol((uint32_t *)&serial_instance);
    3108:	4805      	ldr	r0, [pc, #20]	; (3120 <configure_usart_Serial+0xb8>)
    310a:	4b09      	ldr	r3, [pc, #36]	; (3130 <configure_usart_Serial+0xc8>)
    310c:	4798      	blx	r3
 }
    310e:	b010      	add	sp, #64	; 0x40
    3110:	bd10      	pop	{r4, pc}
    3112:	46c0      	nop			; (mov r8, r8)
    3114:	00360003 	.word	0x00360003
    3118:	00370003 	.word	0x00370003
    311c:	42001c00 	.word	0x42001c00
    3120:	200024e0 	.word	0x200024e0
    3124:	00006c85 	.word	0x00006c85
    3128:	0000749d 	.word	0x0000749d
    312c:	e000e100 	.word	0xe000e100
    3130:	00001fb5 	.word	0x00001fb5

00003134 <GetServoInstance>:
}*/

struct usart_module *GetServoInstance(void)
{
	return &servo_com_instance;
}
    3134:	4800      	ldr	r0, [pc, #0]	; (3138 <GetServoInstance+0x4>)
    3136:	4770      	bx	lr
    3138:	20002408 	.word	0x20002408

0000313c <configure_usart_Servo>:
 
 void configure_usart_Servo(void)
 {
    313c:	b530      	push	{r4, r5, lr}
    313e:	b093      	sub	sp, #76	; 0x4c
	config->data_order       = USART_DATAORDER_LSB;
    3140:	aa02      	add	r2, sp, #8
    3142:	2380      	movs	r3, #128	; 0x80
    3144:	05db      	lsls	r3, r3, #23
    3146:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3148:	2300      	movs	r3, #0
    314a:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    314c:	21ff      	movs	r1, #255	; 0xff
    314e:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    3150:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3152:	72d3      	strb	r3, [r2, #11]
	config->receiver_enable  = true;
    3154:	39fe      	subs	r1, #254	; 0xfe
    3156:	2024      	movs	r0, #36	; 0x24
    3158:	5411      	strb	r1, [r2, r0]
	config->transmitter_enable = true;
    315a:	3001      	adds	r0, #1
    315c:	5411      	strb	r1, [r2, r0]
	config->clock_polarity_inverted = false;
    315e:	3001      	adds	r0, #1
    3160:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    3162:	3001      	adds	r0, #1
    3164:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    3166:	6293      	str	r3, [r2, #40]	; 0x28
	config->run_in_standby   = false;
    3168:	3005      	adds	r0, #5
    316a:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    316c:	6353      	str	r3, [r2, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    316e:	6393      	str	r3, [r2, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    3170:	63d3      	str	r3, [r2, #60]	; 0x3c
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3172:	6153      	str	r3, [r2, #20]
	config->lin_slave_enable      = false;
    3174:	76d3      	strb	r3, [r2, #27]
	config->immediate_buffer_overflow_notification  = false;
    3176:	7613      	strb	r3, [r2, #24]
	config->start_frame_detection_enable            = false;
    3178:	7713      	strb	r3, [r2, #28]
	config->encoding_format_enable                  = false;
    317a:	7653      	strb	r3, [r2, #25]
	config->receive_pulse_length                    = 19;
    317c:	3313      	adds	r3, #19
    317e:	7693      	strb	r3, [r2, #26]
	 struct system_pinmux_config config_pinmux;


	 usart_get_config_defaults(&config_usart);

	 config_usart.baudrate    = 1000000;
    3180:	4b1e      	ldr	r3, [pc, #120]	; (31fc <configure_usart_Servo+0xc0>)
    3182:	6213      	str	r3, [r2, #32]
	 config_usart.mux_setting = USART_RX_2_TX_2_XCK_3;
    3184:	2384      	movs	r3, #132	; 0x84
    3186:	039b      	lsls	r3, r3, #14
    3188:	60d3      	str	r3, [r2, #12]
	 config_usart.pinmux_pad0 = PINMUX_PB10D_SERCOM4_PAD2;
    318a:	4b1d      	ldr	r3, [pc, #116]	; (3200 <configure_usart_Servo+0xc4>)
    318c:	6313      	str	r3, [r2, #48]	; 0x30
	 config_usart.pinmux_pad1 = PINMUX_DEFAULT;
	 config_usart.pinmux_pad2 = PINMUX_DEFAULT;
	 config_usart.pinmux_pad3 = PINMUX_DEFAULT;
	 config_usart.collision_detection_enable = true;
    318e:	7751      	strb	r1, [r2, #29]
	 config_usart.sample_rate = USART_SAMPLE_RATE_8X_FRACTIONAL;
    3190:	23c0      	movs	r3, #192	; 0xc0
    3192:	01db      	lsls	r3, r3, #7
    3194:	8213      	strh	r3, [r2, #16]
	 config_usart.generator_source = GCLK_GENERATOR_3;	
    3196:	3102      	adds	r1, #2
    3198:	232d      	movs	r3, #45	; 0x2d
    319a:	54d1      	strb	r1, [r2, r3]
	 status = usart_init(&servo_com_instance,	SERCOM4, &config_usart);
    319c:	4919      	ldr	r1, [pc, #100]	; (3204 <configure_usart_Servo+0xc8>)
    319e:	481a      	ldr	r0, [pc, #104]	; (3208 <configure_usart_Servo+0xcc>)
    31a0:	4b1a      	ldr	r3, [pc, #104]	; (320c <configure_usart_Servo+0xd0>)
    31a2:	4798      	blx	r3
	 if(status == STATUS_OK)
    31a4:	2800      	cmp	r0, #0
    31a6:	d013      	beq.n	31d0 <configure_usart_Servo+0x94>
		usart_enable(&servo_com_instance);

	// Enable because usart_init call changes pimux for these pins

	config_pinmux.mux_position = SYSTEM_PINMUX_GPIO;
    31a8:	ac01      	add	r4, sp, #4
    31aa:	2380      	movs	r3, #128	; 0x80
    31ac:	7023      	strb	r3, [r4, #0]
	config_pinmux.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    31ae:	3b7f      	subs	r3, #127	; 0x7f
    31b0:	7063      	strb	r3, [r4, #1]
	config_pinmux.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    31b2:	2300      	movs	r3, #0
    31b4:	70a3      	strb	r3, [r4, #2]
	config_pinmux.powersave = false;
    31b6:	70e3      	strb	r3, [r4, #3]

	system_pinmux_pin_set_config(G_COLUMN_1, &config_pinmux);
    31b8:	0021      	movs	r1, r4
    31ba:	200d      	movs	r0, #13
    31bc:	4d14      	ldr	r5, [pc, #80]	; (3210 <configure_usart_Servo+0xd4>)
    31be:	47a8      	blx	r5
	system_pinmux_pin_set_config(G_COLUMN_2, &config_pinmux);
    31c0:	0021      	movs	r1, r4
    31c2:	200e      	movs	r0, #14
    31c4:	47a8      	blx	r5
	system_pinmux_pin_set_config(G_COLUMN_3, &config_pinmux);
    31c6:	0021      	movs	r1, r4
    31c8:	200f      	movs	r0, #15
    31ca:	47a8      	blx	r5

   /* usart_register_callback(&servo_com_instance, usart_servo_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&servo_com_instance, USART_CALLBACK_BUFFER_RECEIVED);*/
	
 }
    31cc:	b013      	add	sp, #76	; 0x4c
    31ce:	bd30      	pop	{r4, r5, pc}
	SercomUsart *const usart_hw = &(module->hw->USART);
    31d0:	4b0d      	ldr	r3, [pc, #52]	; (3208 <configure_usart_Servo+0xcc>)
    31d2:	681c      	ldr	r4, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    31d4:	0020      	movs	r0, r4
    31d6:	4b0f      	ldr	r3, [pc, #60]	; (3214 <configure_usart_Servo+0xd8>)
    31d8:	4798      	blx	r3
    31da:	231f      	movs	r3, #31
    31dc:	4018      	ands	r0, r3
    31de:	3b1e      	subs	r3, #30
    31e0:	4083      	lsls	r3, r0
    31e2:	4a0d      	ldr	r2, [pc, #52]	; (3218 <configure_usart_Servo+0xdc>)
    31e4:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    31e6:	4b08      	ldr	r3, [pc, #32]	; (3208 <configure_usart_Servo+0xcc>)
    31e8:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    31ea:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    31ec:	2b00      	cmp	r3, #0
    31ee:	d1fa      	bne.n	31e6 <configure_usart_Servo+0xaa>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    31f0:	6823      	ldr	r3, [r4, #0]
    31f2:	2202      	movs	r2, #2
    31f4:	4313      	orrs	r3, r2
    31f6:	6023      	str	r3, [r4, #0]
    31f8:	e7d6      	b.n	31a8 <configure_usart_Servo+0x6c>
    31fa:	46c0      	nop			; (mov r8, r8)
    31fc:	000f4240 	.word	0x000f4240
    3200:	002a0003 	.word	0x002a0003
    3204:	42001800 	.word	0x42001800
    3208:	20002408 	.word	0x20002408
    320c:	00006c85 	.word	0x00006c85
    3210:	00009085 	.word	0x00009085
    3214:	0000749d 	.word	0x0000749d
    3218:	e000e100 	.word	0xe000e100

0000321c <configure_i2s>:
 {
	 return &i2s_instance;
 }

 void configure_i2s(void)
 {
    321c:	b5f0      	push	{r4, r5, r6, r7, lr}
    321e:	46c6      	mov	lr, r8
    3220:	b500      	push	{lr}
    3222:	b08c      	sub	sp, #48	; 0x30
	 struct i2s_clock_unit_config config_clock_unit;

	 i2s_init(&i2s_instance, I2S);
    3224:	4e4a      	ldr	r6, [pc, #296]	; (3350 <configure_i2s+0x134>)
    3226:	494b      	ldr	r1, [pc, #300]	; (3354 <configure_i2s+0x138>)
    3228:	0030      	movs	r0, r6
    322a:	4b4b      	ldr	r3, [pc, #300]	; (3358 <configure_i2s+0x13c>)
    322c:	4798      	blx	r3
static inline void i2s_clock_unit_get_config_defaults(
		struct i2s_clock_unit_config *const config)
{
	Assert(config);

	config->clock.mck_out_enable = false;
    322e:	aa06      	add	r2, sp, #24
    3230:	2400      	movs	r4, #0
    3232:	71d4      	strb	r4, [r2, #7]
	config->clock.gclk_src = GCLK_GENERATOR_0;

	config->clock.mck_src = I2S_MASTER_CLOCK_SOURCE_GCLK;
    3234:	70d4      	strb	r4, [r2, #3]
	config->clock.mck_out_div = 1;
    3236:	2501      	movs	r5, #1
    3238:	7015      	strb	r5, [r2, #0]
	config->clock.mck_out_invert = false;
    323a:	7154      	strb	r4, [r2, #5]

	config->clock.sck_src = I2S_SERIAL_CLOCK_SOURCE_MCKDIV;
	config->clock.sck_div = 1;
    323c:	7055      	strb	r5, [r2, #1]
	config->clock.sck_out_invert = false;
    323e:	7194      	strb	r4, [r2, #6]

	config->frame.number_slots = 1;
	config->frame.slot_size = I2S_SLOT_SIZE_32_BIT;
	config->frame.data_delay = I2S_DATA_DELAY_I2S;
    3240:	7295      	strb	r5, [r2, #10]

	config->frame.frame_sync.source = I2S_FRAME_SYNC_SOURCE_SCKDIV;
	config->frame.frame_sync.width = I2S_FRAME_SYNC_WIDTH_HALF_FRAME;
	config->frame.frame_sync.invert_use = false;
    3242:	7354      	strb	r4, [r2, #13]
	config->frame.frame_sync.invert_out = false;
    3244:	7394      	strb	r4, [r2, #14]

	config->mck_pin.enable = false;
    3246:	7454      	strb	r4, [r2, #17]
	config->mck_pin.mux = 0;
    3248:	7414      	strb	r4, [r2, #16]
	config->mck_pin.gpio = 0;
    324a:	73d4      	strb	r4, [r2, #15]

	 i2s_clock_unit_get_config_defaults(&config_clock_unit);

	 config_clock_unit.clock.gclk_src = GCLK_GENERATOR_3;
    324c:	2303      	movs	r3, #3
    324e:	7093      	strb	r3, [r2, #2]
	 config_clock_unit.clock.mck_src = I2S_MASTER_CLOCK_SOURCE_GCLK;
	 config_clock_unit.clock.mck_out_enable = false;
	 config_clock_unit.clock.sck_src = I2S_SERIAL_CLOCK_SOURCE_SCKPIN;
    3250:	7115      	strb	r5, [r2, #4]
	 config_clock_unit.clock.sck_div = 1;
	 config_clock_unit.frame.number_slots = 2;
    3252:	3b01      	subs	r3, #1
    3254:	7213      	strb	r3, [r2, #8]
	 config_clock_unit.frame.slot_size = I2S_SLOT_SIZE_16_BIT;
    3256:	7255      	strb	r5, [r2, #9]
	 config_clock_unit.frame.data_delay = I2S_DATA_DELAY_I2S;
	 config_clock_unit.frame.frame_sync.source = I2S_FRAME_SYNC_SOURCE_FSPIN;
    3258:	72d5      	strb	r5, [r2, #11]
	 config_clock_unit.frame.frame_sync.width = I2S_FRAME_SYNC_WIDTH_SLOT;
    325a:	7314      	strb	r4, [r2, #12]
	 config_clock_unit.mck_pin.enable = false;
	 config_clock_unit.sck_pin.enable = true;
    325c:	7515      	strb	r5, [r2, #20]
	 config_clock_unit.sck_pin.gpio = I2S_SCK;
    325e:	3308      	adds	r3, #8
    3260:	7493      	strb	r3, [r2, #18]
	 config_clock_unit.sck_pin.mux = I2S_SCK_MUX;
    3262:	2706      	movs	r7, #6
    3264:	74d7      	strb	r7, [r2, #19]
	 config_clock_unit.fs_pin.enable = true;
    3266:	75d5      	strb	r5, [r2, #23]
	 config_clock_unit.fs_pin.gpio = I2S_LRCK;
    3268:	3301      	adds	r3, #1
    326a:	7553      	strb	r3, [r2, #21]
	 config_clock_unit.fs_pin.mux = I2S_LRCK_MUX;
    326c:	7597      	strb	r7, [r2, #22]
	 i2s_clock_unit_set_config(&i2s_instance, I2S_CLOCK_UNIT_0, &config_clock_unit);
    326e:	2100      	movs	r1, #0
    3270:	0030      	movs	r0, r6
    3272:	4b3a      	ldr	r3, [pc, #232]	; (335c <configure_i2s+0x140>)
    3274:	4798      	blx	r3
 *                      to set
 */
static inline void i2s_serializer_get_config_defaults(
		struct i2s_serializer_config *const config)
{
	config->loop_back = false;
    3276:	466b      	mov	r3, sp
    3278:	70dc      	strb	r4, [r3, #3]

	config->mono_mode = false;

	config->disable_data_slot[0] = false;
    327a:	715c      	strb	r4, [r3, #5]
	config->disable_data_slot[1] = false;
    327c:	719c      	strb	r4, [r3, #6]
	config->disable_data_slot[2] = false;
    327e:	71dc      	strb	r4, [r3, #7]
	config->disable_data_slot[3] = false;
    3280:	721c      	strb	r4, [r3, #8]
	config->disable_data_slot[4] = false;
    3282:	725c      	strb	r4, [r3, #9]
	config->disable_data_slot[5] = false;
    3284:	729c      	strb	r4, [r3, #10]
	config->disable_data_slot[6] = false;
    3286:	72dc      	strb	r4, [r3, #11]
	config->disable_data_slot[7] = false;
    3288:	731c      	strb	r4, [r3, #12]

	config->transfer_lsb_first = false;
    328a:	735c      	strb	r4, [r3, #13]
	config->data_adjust_left_in_word = false;
    328c:	739c      	strb	r4, [r3, #14]
	config->data_adjust_left_in_slot = true;
    328e:	73dd      	strb	r5, [r3, #15]

	config->data_size = I2S_DATA_SIZE_16BIT;
    3290:	2304      	movs	r3, #4
    3292:	466a      	mov	r2, sp
    3294:	7413      	strb	r3, [r2, #16]

	config->bit_padding = I2S_BIT_PADDING_0;
    3296:	7454      	strb	r4, [r2, #17]
	config->data_padding = I2S_DATA_PADDING_0;
    3298:	7494      	strb	r4, [r2, #18]

	config->dma_usage = I2S_DMA_USE_SINGLE_CHANNEL_FOR_ALL;
    329a:	74d4      	strb	r4, [r2, #19]

	config->clock_unit = I2S_CLOCK_UNIT_0;
    329c:	7514      	strb	r4, [r2, #20]

	config->line_default_state = I2S_LINE_DEFAULT_0;
    329e:	7554      	strb	r4, [r2, #21]

	config->mode = I2S_SERIALIZER_TRANSMIT;
    32a0:	7595      	strb	r5, [r2, #22]

	 config_serializer.clock_unit = I2S_CLOCK_UNIT_0;
	 config_serializer.data_size = I2S_DATA_SIZE_16BIT;

	 config_serializer.mode = I2S_SERIALIZER_TRANSMIT;
	 config_serializer.data_pin.enable = true;
    32a2:	7095      	strb	r5, [r2, #2]
	 config_serializer.dma_usage = I2S_DMA_USE_SINGLE_CHANNEL_FOR_ALL;
	 config_serializer.mono_mode = true;
    32a4:	7115      	strb	r5, [r2, #4]
	 config_serializer.data_adjust_left_in_slot = true;
	 config_serializer.data_pin.gpio = I2S_DOUT;
    32a6:	2308      	movs	r3, #8
    32a8:	7013      	strb	r3, [r2, #0]
	 config_serializer.data_pin.mux = I2S_DOUT_MUX;
    32aa:	7057      	strb	r7, [r2, #1]
	 config_serializer.data_padding = I2S_DATA_PADDING_0;
	 i2s_serializer_set_config(&i2s_instance, I2S_SERIALIZER_1, &config_serializer);
    32ac:	2101      	movs	r1, #1
    32ae:	0030      	movs	r0, r6
    32b0:	4b2b      	ldr	r3, [pc, #172]	; (3360 <configure_i2s+0x144>)
    32b2:	4698      	mov	r8, r3
    32b4:	4798      	blx	r3

	 config_serializer.mode = I2S_SERIALIZER_RECEIVE;
    32b6:	466b      	mov	r3, sp
    32b8:	759c      	strb	r4, [r3, #22]
	 config_serializer.data_pin.enable = true;
    32ba:	709d      	strb	r5, [r3, #2]
	 config_serializer.dma_usage = I2S_DMA_USE_SINGLE_CHANNEL_FOR_ALL;
    32bc:	74dc      	strb	r4, [r3, #19]
	 config_serializer.mono_mode = true;
    32be:	711d      	strb	r5, [r3, #4]
	 config_serializer.data_adjust_left_in_slot = true;
    32c0:	73dd      	strb	r5, [r3, #15]
	 config_serializer.data_pin.gpio = I2S_DIN;
    32c2:	2307      	movs	r3, #7
    32c4:	466a      	mov	r2, sp
    32c6:	7013      	strb	r3, [r2, #0]
	 config_serializer.data_pin.mux = I2S_DIN_MUX;
    32c8:	7057      	strb	r7, [r2, #1]
	 config_serializer.data_padding = I2S_DATA_PADDING_0;
    32ca:	7494      	strb	r4, [r2, #18]
	 i2s_serializer_set_config(&i2s_instance, I2S_SERIALIZER_0, &config_serializer);
    32cc:	2100      	movs	r1, #0
    32ce:	0030      	movs	r0, r6
    32d0:	47c0      	blx	r8
	while (module_inst->hw->SYNCBUSY.reg & I2S_SYNCBUSY_ENABLE) {
    32d2:	4b1f      	ldr	r3, [pc, #124]	; (3350 <configure_i2s+0x134>)
    32d4:	681b      	ldr	r3, [r3, #0]
    32d6:	8b1a      	ldrh	r2, [r3, #24]
    32d8:	0792      	lsls	r2, r2, #30
    32da:	d4fa      	bmi.n	32d2 <configure_i2s+0xb6>
	module_inst->hw->CTRLA.reg |= I2S_SYNCBUSY_ENABLE;
    32dc:	781a      	ldrb	r2, [r3, #0]
    32de:	2102      	movs	r1, #2
    32e0:	430a      	orrs	r2, r1
    32e2:	b2d2      	uxtb	r2, r2
    32e4:	701a      	strb	r2, [r3, #0]
	while (module_inst->hw->SYNCBUSY.reg & cken_bit) {
    32e6:	4b1a      	ldr	r3, [pc, #104]	; (3350 <configure_i2s+0x134>)
    32e8:	681b      	ldr	r3, [r3, #0]
    32ea:	8b1a      	ldrh	r2, [r3, #24]
    32ec:	0752      	lsls	r2, r2, #29
    32ee:	d4fa      	bmi.n	32e6 <configure_i2s+0xca>
	module_inst->hw->CTRLA.reg |= cken_bit;
    32f0:	781a      	ldrb	r2, [r3, #0]
    32f2:	2104      	movs	r1, #4
    32f4:	430a      	orrs	r2, r1
    32f6:	b2d2      	uxtb	r2, r2
    32f8:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);

	seren_bit = I2S_CTRLA_SEREN0 << serializer;

	while (module_inst->hw->SYNCBUSY.reg & seren_bit) {
    32fa:	4b15      	ldr	r3, [pc, #84]	; (3350 <configure_i2s+0x134>)
    32fc:	681b      	ldr	r3, [r3, #0]
    32fe:	8b1a      	ldrh	r2, [r3, #24]
    3300:	06d2      	lsls	r2, r2, #27
    3302:	d4fa      	bmi.n	32fa <configure_i2s+0xde>
		/* Sync wait */
	}
	module_inst->hw->CTRLA.reg |= seren_bit;
    3304:	781a      	ldrb	r2, [r3, #0]
    3306:	2110      	movs	r1, #16
    3308:	430a      	orrs	r2, r1
    330a:	b2d2      	uxtb	r2, r2
    330c:	701a      	strb	r2, [r3, #0]
	while (module_inst->hw->SYNCBUSY.reg & seren_bit) {
    330e:	4b10      	ldr	r3, [pc, #64]	; (3350 <configure_i2s+0x134>)
    3310:	681b      	ldr	r3, [r3, #0]
    3312:	8b1a      	ldrh	r2, [r3, #24]
    3314:	0692      	lsls	r2, r2, #26
    3316:	d4fa      	bmi.n	330e <configure_i2s+0xf2>
	module_inst->hw->CTRLA.reg |= seren_bit;
    3318:	781a      	ldrb	r2, [r3, #0]
    331a:	2120      	movs	r1, #32
    331c:	430a      	orrs	r2, r1
    331e:	b2d2      	uxtb	r2, r2
    3320:	701a      	strb	r2, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(serializer < I2S_SERIALIZER_N);

	module_inst->serializer[serializer].callback[callback_type] = callback_func;
    3322:	4b0b      	ldr	r3, [pc, #44]	; (3350 <configure_i2s+0x134>)
    3324:	4a0f      	ldr	r2, [pc, #60]	; (3364 <configure_i2s+0x148>)
    3326:	609a      	str	r2, [r3, #8]
	module_inst->serializer[serializer].registered_callback_mask |=
    3328:	2002      	movs	r0, #2
    332a:	7e19      	ldrb	r1, [r3, #24]
    332c:	4301      	orrs	r1, r0
    332e:	7619      	strb	r1, [r3, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(serializer < I2S_SERIALIZER_N);

	module_inst->serializer[serializer].enabled_callback_mask |=
    3330:	7e5a      	ldrb	r2, [r3, #25]
    3332:	4302      	orrs	r2, r0
    3334:	765a      	strb	r2, [r3, #25]
			(1u << callback_type);
	if (I2S_SERIALIZER_CALLBACK_OVER_UNDER_RUN != callback_type) {
		return;
	}
	module_inst->hw->INTENSET.reg =
    3336:	681a      	ldr	r2, [r3, #0]
		(module_inst->serializer[serializer].mode == I2S_SERIALIZER_TRANSMIT) ?
    3338:	7edb      	ldrb	r3, [r3, #27]
	module_inst->hw->INTENSET.reg =
    333a:	2b01      	cmp	r3, #1
    333c:	d005      	beq.n	334a <configure_i2s+0x12e>
    333e:	2310      	movs	r3, #16
    3340:	8213      	strh	r3, [r2, #16]
	 i2s_serializer_enable(&i2s_instance, I2S_SERIALIZER_0);
	 i2s_serializer_enable(&i2s_instance, I2S_SERIALIZER_1);

 	i2s_serializer_register_callback(&i2s_instance, I2S_SERIALIZER_0, i2s_callback_RX, I2S_SERIALIZER_CALLBACK_OVER_UNDER_RUN);
 	i2s_serializer_enable_callback(&i2s_instance, I2S_SERIALIZER_0, I2S_SERIALIZER_CALLBACK_OVER_UNDER_RUN);
 }
    3342:	b00c      	add	sp, #48	; 0x30
    3344:	bc04      	pop	{r2}
    3346:	4690      	mov	r8, r2
    3348:	bdf0      	pop	{r4, r5, r6, r7, pc}
    334a:	2380      	movs	r3, #128	; 0x80
    334c:	015b      	lsls	r3, r3, #5
    334e:	e7f7      	b.n	3340 <configure_i2s+0x124>
    3350:	2000247c 	.word	0x2000247c
    3354:	42005000 	.word	0x42005000
    3358:	00003b49 	.word	0x00003b49
    335c:	00003bc9 	.word	0x00003bc9
    3360:	00003d61 	.word	0x00003d61
    3364:	00002a85 	.word	0x00002a85

00003368 <EnableUSBPortForwarding>:

 void EnableUSBPortForwarding(uint32_t value)
 {
	bforwarding = value;
    3368:	4b01      	ldr	r3, [pc, #4]	; (3370 <EnableUSBPortForwarding+0x8>)
    336a:	6018      	str	r0, [r3, #0]
 }
    336c:	4770      	bx	lr
    336e:	46c0      	nop			; (mov r8, r8)
    3370:	20000e7c 	.word	0x20000e7c

00003374 <USBFordwarding_runtime>:

 void USBFordwarding_runtime(void)
 {
    3374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 	if(bforwarding)
    3376:	4b23      	ldr	r3, [pc, #140]	; (3404 <USBFordwarding_runtime+0x90>)
    3378:	681b      	ldr	r3, [r3, #0]
    337a:	2b00      	cmp	r3, #0
    337c:	d100      	bne.n	3380 <USBFordwarding_runtime+0xc>

		 	SwitchComDir(0);
		 	usart_read_buffer_job(GetServoInstance(),(uint8_t *)&usb_tx_data, USB_FW_BUFFER);
	 	}
 	}
}
    337e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	 	if(usart_get_job_status(GetServoInstance(), USART_TRANSCEIVER_RX) == STATUS_BUSY)
    3380:	4b21      	ldr	r3, [pc, #132]	; (3408 <USBFordwarding_runtime+0x94>)
    3382:	4798      	blx	r3
    3384:	0004      	movs	r4, r0
    3386:	2100      	movs	r1, #0
    3388:	4b20      	ldr	r3, [pc, #128]	; (340c <USBFordwarding_runtime+0x98>)
    338a:	4798      	blx	r3
    338c:	2805      	cmp	r0, #5
    338e:	d020      	beq.n	33d2 <USBFordwarding_runtime+0x5e>
	 	nBytes = udi_cdc_get_nb_received_data();
    3390:	4b1f      	ldr	r3, [pc, #124]	; (3410 <USBFordwarding_runtime+0x9c>)
    3392:	4798      	blx	r3
    3394:	4b1f      	ldr	r3, [pc, #124]	; (3414 <USBFordwarding_runtime+0xa0>)
    3396:	6018      	str	r0, [r3, #0]
	 	if(nBytes)
    3398:	681b      	ldr	r3, [r3, #0]
    339a:	2b00      	cmp	r3, #0
    339c:	d0ef      	beq.n	337e <USBFordwarding_runtime+0xa>
		 	usart_abort_job(GetServoInstance(),USART_TRANSCEIVER_RX);
    339e:	2100      	movs	r1, #0
    33a0:	0020      	movs	r0, r4
    33a2:	4b1d      	ldr	r3, [pc, #116]	; (3418 <USBFordwarding_runtime+0xa4>)
    33a4:	4798      	blx	r3
		 	udi_cdc_read_buf(&usb_rx_data, nBytes);
    33a6:	4f1b      	ldr	r7, [pc, #108]	; (3414 <USBFordwarding_runtime+0xa0>)
    33a8:	6839      	ldr	r1, [r7, #0]
    33aa:	4d1c      	ldr	r5, [pc, #112]	; (341c <USBFordwarding_runtime+0xa8>)
    33ac:	0028      	movs	r0, r5
    33ae:	4b1c      	ldr	r3, [pc, #112]	; (3420 <USBFordwarding_runtime+0xac>)
    33b0:	4798      	blx	r3
		 	SwitchComDir(1);
    33b2:	2001      	movs	r0, #1
    33b4:	4e1b      	ldr	r6, [pc, #108]	; (3424 <USBFordwarding_runtime+0xb0>)
    33b6:	47b0      	blx	r6
		 	sendData((uint8_t *)&usb_rx_data, nBytes);
    33b8:	6839      	ldr	r1, [r7, #0]
    33ba:	b289      	uxth	r1, r1
    33bc:	0028      	movs	r0, r5
    33be:	4b1a      	ldr	r3, [pc, #104]	; (3428 <USBFordwarding_runtime+0xb4>)
    33c0:	4798      	blx	r3
		 	SwitchComDir(0);
    33c2:	2000      	movs	r0, #0
    33c4:	47b0      	blx	r6
		 	usart_read_buffer_job(GetServoInstance(),(uint8_t *)&usb_tx_data, USB_FW_BUFFER);
    33c6:	2240      	movs	r2, #64	; 0x40
    33c8:	4918      	ldr	r1, [pc, #96]	; (342c <USBFordwarding_runtime+0xb8>)
    33ca:	0020      	movs	r0, r4
    33cc:	4b18      	ldr	r3, [pc, #96]	; (3430 <USBFordwarding_runtime+0xbc>)
    33ce:	4798      	blx	r3
}
    33d0:	e7d5      	b.n	337e <USBFordwarding_runtime+0xa>
		 	nBytes = USB_FW_BUFFER - GetServoInstance()->remaining_rx_buffer_length;
    33d2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    33d4:	2340      	movs	r3, #64	; 0x40
    33d6:	1a9b      	subs	r3, r3, r2
    33d8:	4a0e      	ldr	r2, [pc, #56]	; (3414 <USBFordwarding_runtime+0xa0>)
    33da:	6013      	str	r3, [r2, #0]
		 	if(nBytes)
    33dc:	6813      	ldr	r3, [r2, #0]
    33de:	2b00      	cmp	r3, #0
    33e0:	d0d6      	beq.n	3390 <USBFordwarding_runtime+0x1c>
			 	usart_abort_job(GetServoInstance(),USART_TRANSCEIVER_RX);
    33e2:	2100      	movs	r1, #0
    33e4:	0020      	movs	r0, r4
    33e6:	4b0c      	ldr	r3, [pc, #48]	; (3418 <USBFordwarding_runtime+0xa4>)
    33e8:	4798      	blx	r3
			 	udi_cdc_write_buf(&usb_tx_data, nBytes);
    33ea:	4b0a      	ldr	r3, [pc, #40]	; (3414 <USBFordwarding_runtime+0xa0>)
    33ec:	6819      	ldr	r1, [r3, #0]
    33ee:	4d0f      	ldr	r5, [pc, #60]	; (342c <USBFordwarding_runtime+0xb8>)
    33f0:	0028      	movs	r0, r5
    33f2:	4b10      	ldr	r3, [pc, #64]	; (3434 <USBFordwarding_runtime+0xc0>)
    33f4:	4798      	blx	r3
			 	usart_read_buffer_job(GetServoInstance(),(uint8_t *)&usb_tx_data, USB_FW_BUFFER);
    33f6:	2240      	movs	r2, #64	; 0x40
    33f8:	0029      	movs	r1, r5
    33fa:	0020      	movs	r0, r4
    33fc:	4b0c      	ldr	r3, [pc, #48]	; (3430 <USBFordwarding_runtime+0xbc>)
    33fe:	4798      	blx	r3
    3400:	e7c6      	b.n	3390 <USBFordwarding_runtime+0x1c>
    3402:	46c0      	nop			; (mov r8, r8)
    3404:	20000e7c 	.word	0x20000e7c
    3408:	00003135 	.word	0x00003135
    340c:	00006f31 	.word	0x00006f31
    3410:	00007b4d 	.word	0x00007b4d
    3414:	20000e80 	.word	0x20000e80
    3418:	00006f11 	.word	0x00006f11
    341c:	200023c8 	.word	0x200023c8
    3420:	00007dd1 	.word	0x00007dd1
    3424:	00003459 	.word	0x00003459
    3428:	00003439 	.word	0x00003439
    342c:	2000243c 	.word	0x2000243c
    3430:	00006ef1 	.word	0x00006ef1
    3434:	00007f31 	.word	0x00007f31

00003438 <sendData>:
};

ServoCfg ServoConfig[2];

void sendData(uint8_t *buffer, uint16_t length)
{
    3438:	b510      	push	{r4, lr}
    343a:	0004      	movs	r4, r0
	if(UART_Instance == NULL)
    343c:	4b04      	ldr	r3, [pc, #16]	; (3450 <sendData+0x18>)
    343e:	6818      	ldr	r0, [r3, #0]
    3440:	2800      	cmp	r0, #0
    3442:	d003      	beq.n	344c <sendData+0x14>
		return;
	usart_write_buffer_wait(UART_Instance, buffer, length);
    3444:	000a      	movs	r2, r1
    3446:	0021      	movs	r1, r4
    3448:	4b02      	ldr	r3, [pc, #8]	; (3454 <sendData+0x1c>)
    344a:	4798      	blx	r3
}
    344c:	bd10      	pop	{r4, pc}
    344e:	46c0      	nop			; (mov r8, r8)
    3450:	200025dc 	.word	0x200025dc
    3454:	00006df5 	.word	0x00006df5

00003458 <SwitchComDir>:

void SwitchComDir(uint32_t direction)
{
	if(UART_Instance == NULL)
    3458:	4b1b      	ldr	r3, [pc, #108]	; (34c8 <SwitchComDir+0x70>)
    345a:	681a      	ldr	r2, [r3, #0]
    345c:	2a00      	cmp	r2, #0
    345e:	d019      	beq.n	3494 <SwitchComDir+0x3c>
		return;

	if(direction)
    3460:	2800      	cmp	r0, #0
    3462:	d018      	beq.n	3496 <SwitchComDir+0x3e>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3464:	6811      	ldr	r1, [r2, #0]
	return (usart_hw->SYNCBUSY.reg);
    3466:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    3468:	2b00      	cmp	r3, #0
    346a:	d1fc      	bne.n	3466 <SwitchComDir+0xe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    346c:	6848      	ldr	r0, [r1, #4]
    346e:	2380      	movs	r3, #128	; 0x80
    3470:	025b      	lsls	r3, r3, #9
    3472:	4303      	orrs	r3, r0
    3474:	604b      	str	r3, [r1, #4]
			module->transmitter_enabled = true;
    3476:	2301      	movs	r3, #1
    3478:	71d3      	strb	r3, [r2, #7]
	SercomUsart *const usart_hw = &(module->hw->USART);
    347a:	6813      	ldr	r3, [r2, #0]
	return (usart_hw->SYNCBUSY.reg);
    347c:	69d9      	ldr	r1, [r3, #28]
	while (usart_is_syncing(module)) {
    347e:	2900      	cmp	r1, #0
    3480:	d1fb      	bne.n	347a <SwitchComDir+0x22>
	return (usart_hw->SYNCBUSY.reg);
    3482:	69d9      	ldr	r1, [r3, #28]
	while (usart_is_syncing(module)) {
    3484:	2900      	cmp	r1, #0
    3486:	d1fc      	bne.n	3482 <SwitchComDir+0x2a>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Disable RX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
    3488:	6859      	ldr	r1, [r3, #4]
    348a:	4810      	ldr	r0, [pc, #64]	; (34cc <SwitchComDir+0x74>)
    348c:	4001      	ands	r1, r0
    348e:	6059      	str	r1, [r3, #4]
			module->receiver_enabled = false;
    3490:	2300      	movs	r3, #0
    3492:	7193      	strb	r3, [r2, #6]
	else
	{
		usart_enable_transceiver(UART_Instance, USART_TRANSCEIVER_RX);
		usart_disable_transceiver(UART_Instance, USART_TRANSCEIVER_TX);
	}
}
    3494:	4770      	bx	lr
	SercomUsart *const usart_hw = &(module->hw->USART);
    3496:	6811      	ldr	r1, [r2, #0]
	return (usart_hw->SYNCBUSY.reg);
    3498:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    349a:	2b00      	cmp	r3, #0
    349c:	d1fc      	bne.n	3498 <SwitchComDir+0x40>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    349e:	6848      	ldr	r0, [r1, #4]
    34a0:	2380      	movs	r3, #128	; 0x80
    34a2:	029b      	lsls	r3, r3, #10
    34a4:	4303      	orrs	r3, r0
    34a6:	604b      	str	r3, [r1, #4]
			module->receiver_enabled = true;
    34a8:	2301      	movs	r3, #1
    34aa:	7193      	strb	r3, [r2, #6]
	SercomUsart *const usart_hw = &(module->hw->USART);
    34ac:	6813      	ldr	r3, [r2, #0]
	return (usart_hw->SYNCBUSY.reg);
    34ae:	69d9      	ldr	r1, [r3, #28]
	while (usart_is_syncing(module)) {
    34b0:	2900      	cmp	r1, #0
    34b2:	d1fb      	bne.n	34ac <SwitchComDir+0x54>
	return (usart_hw->SYNCBUSY.reg);
    34b4:	69d9      	ldr	r1, [r3, #28]
	while (usart_is_syncing(module)) {
    34b6:	2900      	cmp	r1, #0
    34b8:	d1fc      	bne.n	34b4 <SwitchComDir+0x5c>
			break;

		case USART_TRANSCEIVER_TX:
			/* Disable TX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_TXEN;
    34ba:	6859      	ldr	r1, [r3, #4]
    34bc:	4804      	ldr	r0, [pc, #16]	; (34d0 <SwitchComDir+0x78>)
    34be:	4001      	ands	r1, r0
    34c0:	6059      	str	r1, [r3, #4]
			module->transmitter_enabled = false;
    34c2:	2300      	movs	r3, #0
    34c4:	71d3      	strb	r3, [r2, #7]
    34c6:	e7e5      	b.n	3494 <SwitchComDir+0x3c>
    34c8:	200025dc 	.word	0x200025dc
    34cc:	fffdffff 	.word	0xfffdffff
    34d0:	fffeffff 	.word	0xfffeffff

000034d4 <GetRegisterLength>:
	usart_enable_transceiver(UART_Instance, USART_TRANSCEIVER_RX);
}

int32_t GetRegisterLength(uint8_t Reg)
{
	switch(Reg)
    34d4:	2832      	cmp	r0, #50	; 0x32
    34d6:	d805      	bhi.n	34e4 <GetRegisterLength+0x10>
    34d8:	0080      	lsls	r0, r0, #2
    34da:	4b03      	ldr	r3, [pc, #12]	; (34e8 <GetRegisterLength+0x14>)
    34dc:	581b      	ldr	r3, [r3, r0]
    34de:	469f      	mov	pc, r3
		case XL_PRESENT_VOLTAGE:
		case XL_PRESENT_TEMPERATURE:
		case XL_REGISTERED_INSTRUCTION:
		case XL_MOVING:
		case XL_HARDWARE_ERROR:
			return 1;
    34e0:	2001      	movs	r0, #1
    34e2:	e000      	b.n	34e6 <GetRegisterLength+0x12>
			break;
		default:
			return 2;
    34e4:	2002      	movs	r0, #2
			break;
	}
}
    34e6:	4770      	bx	lr
    34e8:	0000c974 	.word	0x0000c974

000034ec <MakePacket>:

int32_t MakePacket(uint8_t ID, eXLCMD cmd, uint8_t Address, uint8_t *pData, uint8_t nParams)
{
    34ec:	b570      	push	{r4, r5, r6, lr}
    34ee:	ac04      	add	r4, sp, #16
    34f0:	7826      	ldrb	r6, [r4, #0]
	uint16_t wchecksum, i = 0;

	if(UART_Instance == NULL || nParams > (SERVO_BUFFER_LENGTH - 9))
    34f2:	4c31      	ldr	r4, [pc, #196]	; (35b8 <MakePacket+0xcc>)
    34f4:	6824      	ldr	r4, [r4, #0]
    34f6:	2c00      	cmp	r4, #0
    34f8:	d05a      	beq.n	35b0 <MakePacket+0xc4>
    34fa:	2e37      	cmp	r6, #55	; 0x37
    34fc:	d85a      	bhi.n	35b4 <MakePacket+0xc8>
		return 0;

	tx_servo[i++] = 0xff;
    34fe:	4c2f      	ldr	r4, [pc, #188]	; (35bc <MakePacket+0xd0>)
    3500:	25ff      	movs	r5, #255	; 0xff
    3502:	7025      	strb	r5, [r4, #0]
	tx_servo[i++] = 0xff;
    3504:	7065      	strb	r5, [r4, #1]
	tx_servo[i++] = 0xfd;
    3506:	3d02      	subs	r5, #2
    3508:	70a5      	strb	r5, [r4, #2]
	tx_servo[i++] = 0x00;
    350a:	2500      	movs	r5, #0
    350c:	70e5      	strb	r5, [r4, #3]
	tx_servo[i++] = ID;
    350e:	7120      	strb	r0, [r4, #4]

	switch(cmd)
    3510:	2903      	cmp	r1, #3
    3512:	d01a      	beq.n	354a <MakePacket+0x5e>
    3514:	2906      	cmp	r1, #6
    3516:	d01d      	beq.n	3554 <MakePacket+0x68>
    3518:	2902      	cmp	r1, #2
    351a:	d003      	beq.n	3524 <MakePacket+0x38>
			break;
		case eXLCMD_FACTORYRESET:
			tx_servo[i++] = 4;
			break;
		default:
			tx_servo[i++] = 3;
    351c:	2403      	movs	r4, #3
    351e:	4827      	ldr	r0, [pc, #156]	; (35bc <MakePacket+0xd0>)
    3520:	7144      	strb	r4, [r0, #5]
			break;
    3522:	e002      	b.n	352a <MakePacket+0x3e>
			tx_servo[i++] = 7;
    3524:	2407      	movs	r4, #7
    3526:	4825      	ldr	r0, [pc, #148]	; (35bc <MakePacket+0xd0>)
    3528:	7144      	strb	r4, [r0, #5]
	}

	tx_servo[i++] = 0;
    352a:	4824      	ldr	r0, [pc, #144]	; (35bc <MakePacket+0xd0>)
    352c:	2400      	movs	r4, #0
    352e:	7184      	strb	r4, [r0, #6]
	tx_servo[i++] = cmd;
    3530:	71c1      	strb	r1, [r0, #7]

	switch(cmd)
    3532:	2906      	cmp	r1, #6
    3534:	d812      	bhi.n	355c <MakePacket+0x70>
    3536:	2905      	cmp	r1, #5
    3538:	d212      	bcs.n	3560 <MakePacket+0x74>
    353a:	2901      	cmp	r1, #1
    353c:	d010      	beq.n	3560 <MakePacket+0x74>
		case eXLCMD_ACTION:
		case eXLCMD_REBOOT:
		case eXLCMD_FACTORYRESET:
		break;
		default:
			tx_servo[i++] = (uint8_t)Address;
    353e:	481f      	ldr	r0, [pc, #124]	; (35bc <MakePacket+0xd0>)
    3540:	7202      	strb	r2, [r0, #8]
			tx_servo[i++] =	0;
    3542:	2200      	movs	r2, #0
    3544:	7242      	strb	r2, [r0, #9]
    3546:	240a      	movs	r4, #10
		break;
    3548:	e00b      	b.n	3562 <MakePacket+0x76>
			tx_servo[i++] = nParams + 5;
    354a:	1d70      	adds	r0, r6, #5
    354c:	b2c0      	uxtb	r0, r0
    354e:	4c1b      	ldr	r4, [pc, #108]	; (35bc <MakePacket+0xd0>)
    3550:	7160      	strb	r0, [r4, #5]
			break;
    3552:	e7ea      	b.n	352a <MakePacket+0x3e>
			tx_servo[i++] = 4;
    3554:	2404      	movs	r4, #4
    3556:	4819      	ldr	r0, [pc, #100]	; (35bc <MakePacket+0xd0>)
    3558:	7144      	strb	r4, [r0, #5]
			break;
    355a:	e7e6      	b.n	352a <MakePacket+0x3e>
	switch(cmd)
    355c:	2908      	cmp	r1, #8
    355e:	d1ee      	bne.n	353e <MakePacket+0x52>
	tx_servo[i++] = cmd;
    3560:	2408      	movs	r4, #8
	}

	if(cmd == eXLCMD_READ)
    3562:	2902      	cmp	r1, #2
    3564:	d003      	beq.n	356e <MakePacket+0x82>
	{
		tx_servo[i++] = (uint8_t)nParams;
		tx_servo[i++] =	0;
	}

	if(pData != NULL)
    3566:	2b00      	cmp	r3, #0
    3568:	d012      	beq.n	3590 <MakePacket+0xa4>
    356a:	2200      	movs	r2, #0
    356c:	e00e      	b.n	358c <MakePacket+0xa0>
		tx_servo[i++] = (uint8_t)nParams;
    356e:	1c62      	adds	r2, r4, #1
    3570:	b292      	uxth	r2, r2
    3572:	4912      	ldr	r1, [pc, #72]	; (35bc <MakePacket+0xd0>)
    3574:	550e      	strb	r6, [r1, r4]
		tx_servo[i++] =	0;
    3576:	3402      	adds	r4, #2
    3578:	b2a4      	uxth	r4, r4
    357a:	2000      	movs	r0, #0
    357c:	5488      	strb	r0, [r1, r2]
    357e:	e7f2      	b.n	3566 <MakePacket+0x7a>
		for(uint32_t x = 0; x < nParams; x++)
			tx_servo[i++] = *(pData + x);
    3580:	1c61      	adds	r1, r4, #1
    3582:	5c9d      	ldrb	r5, [r3, r2]
    3584:	480d      	ldr	r0, [pc, #52]	; (35bc <MakePacket+0xd0>)
    3586:	5505      	strb	r5, [r0, r4]
		for(uint32_t x = 0; x < nParams; x++)
    3588:	3201      	adds	r2, #1
			tx_servo[i++] = *(pData + x);
    358a:	b28c      	uxth	r4, r1
		for(uint32_t x = 0; x < nParams; x++)
    358c:	42b2      	cmp	r2, r6
    358e:	d3f7      	bcc.n	3580 <MakePacket+0x94>

	wchecksum = update_crc(0, (uint8_t *)tx_servo, i);
    3590:	4d0a      	ldr	r5, [pc, #40]	; (35bc <MakePacket+0xd0>)
    3592:	0022      	movs	r2, r4
    3594:	0029      	movs	r1, r5
    3596:	2000      	movs	r0, #0
    3598:	4b09      	ldr	r3, [pc, #36]	; (35c0 <MakePacket+0xd4>)
    359a:	4798      	blx	r3
	tx_servo[i++] = (uint8_t)wchecksum;
    359c:	1c63      	adds	r3, r4, #1
    359e:	b29b      	uxth	r3, r3
    35a0:	b2c2      	uxtb	r2, r0
    35a2:	552a      	strb	r2, [r5, r4]
	tx_servo[i++] = (uint8_t)(wchecksum >> 8);
    35a4:	3402      	adds	r4, #2
    35a6:	0a00      	lsrs	r0, r0, #8
    35a8:	b2c0      	uxtb	r0, r0
    35aa:	54e8      	strb	r0, [r5, r3]

	return i;
    35ac:	b2a0      	uxth	r0, r4
}
    35ae:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
    35b0:	2000      	movs	r0, #0
    35b2:	e7fc      	b.n	35ae <MakePacket+0xc2>
    35b4:	2000      	movs	r0, #0
    35b6:	e7fa      	b.n	35ae <MakePacket+0xc2>
    35b8:	200025dc 	.word	0x200025dc
    35bc:	20002514 	.word	0x20002514
    35c0:	00001b25 	.word	0x00001b25

000035c4 <Process_rdPacket>:

uint32_t Process_rdPacket(uint8_t *packet, XL320_StatusPacket *pStatus)
{
    35c4:	b570      	push	{r4, r5, r6, lr}
    35c6:	0004      	movs	r4, r0
    35c8:	000d      	movs	r5, r1
	uint32_t header;
	uint16_t checksum;

	header = (*packet << 24 | *(packet + 1) <<16 | *(packet + 2) <<8  | *(packet + 3)) & 0xfffffd00;
    35ca:	7803      	ldrb	r3, [r0, #0]
    35cc:	061b      	lsls	r3, r3, #24
    35ce:	7842      	ldrb	r2, [r0, #1]
    35d0:	0412      	lsls	r2, r2, #16
    35d2:	4313      	orrs	r3, r2
    35d4:	7882      	ldrb	r2, [r0, #2]
    35d6:	0212      	lsls	r2, r2, #8
    35d8:	4313      	orrs	r3, r2
    35da:	78c2      	ldrb	r2, [r0, #3]
    35dc:	4313      	orrs	r3, r2
    35de:	4a15      	ldr	r2, [pc, #84]	; (3634 <Process_rdPacket+0x70>)
    35e0:	4013      	ands	r3, r2
	pStatus->ID = *(packet + 4);
    35e2:	7902      	ldrb	r2, [r0, #4]
    35e4:	800a      	strh	r2, [r1, #0]
	pStatus->Length = *(packet + 6) << 8 |  *(packet + 5);
    35e6:	7981      	ldrb	r1, [r0, #6]
    35e8:	0209      	lsls	r1, r1, #8
    35ea:	7942      	ldrb	r2, [r0, #5]
    35ec:	430a      	orrs	r2, r1
    35ee:	806a      	strh	r2, [r5, #2]
	
	if(pStatus->Length > SERVO_BUFFER_LENGTH - 6)
    35f0:	2a3a      	cmp	r2, #58	; 0x3a
    35f2:	d902      	bls.n	35fa <Process_rdPacket+0x36>
	return -1;
    35f4:	2001      	movs	r0, #1
    35f6:	4240      	negs	r0, r0
			pStatus->Params = (packet + 9);
		}
	}

	return pStatus->Error;
}
    35f8:	bd70      	pop	{r4, r5, r6, pc}
	pStatus->Error = 0xff;
    35fa:	21ff      	movs	r1, #255	; 0xff
    35fc:	7169      	strb	r1, [r5, #5]
	if(header  == 0xfffffd00)
    35fe:	490d      	ldr	r1, [pc, #52]	; (3634 <Process_rdPacket+0x70>)
    3600:	428b      	cmp	r3, r1
    3602:	d001      	beq.n	3608 <Process_rdPacket+0x44>
	return pStatus->Error;
    3604:	7968      	ldrb	r0, [r5, #5]
    3606:	e7f7      	b.n	35f8 <Process_rdPacket+0x34>
		pStatus->Instruction = *(packet + 7);
    3608:	79c3      	ldrb	r3, [r0, #7]
    360a:	712b      	strb	r3, [r5, #4]
		pStatus->CRC = *(packet + (pStatus->Length + 6)) <<8 | *(packet + (pStatus->Length + 5));
    360c:	1d93      	adds	r3, r2, #6
    360e:	5cc1      	ldrb	r1, [r0, r3]
    3610:	0209      	lsls	r1, r1, #8
    3612:	3205      	adds	r2, #5
    3614:	5c83      	ldrb	r3, [r0, r2]
    3616:	430b      	orrs	r3, r1
    3618:	80eb      	strh	r3, [r5, #6]
		checksum = update_crc(0, packet, pStatus->Length + 5);
    361a:	b292      	uxth	r2, r2
    361c:	0001      	movs	r1, r0
    361e:	2000      	movs	r0, #0
    3620:	4b05      	ldr	r3, [pc, #20]	; (3638 <Process_rdPacket+0x74>)
    3622:	4798      	blx	r3
		if(checksum == pStatus->CRC)
    3624:	88eb      	ldrh	r3, [r5, #6]
    3626:	4298      	cmp	r0, r3
    3628:	d1ec      	bne.n	3604 <Process_rdPacket+0x40>
			pStatus->Error = *(packet + 8);
    362a:	7a23      	ldrb	r3, [r4, #8]
    362c:	716b      	strb	r3, [r5, #5]
			pStatus->Params = (packet + 9);
    362e:	3409      	adds	r4, #9
    3630:	60ac      	str	r4, [r5, #8]
    3632:	e7e7      	b.n	3604 <Process_rdPacket+0x40>
    3634:	fffffd00 	.word	0xfffffd00
    3638:	00001b25 	.word	0x00001b25

0000363c <sendPacket>:
	}
	return result;
}

int32_t sendPacket(uint16_t ID, eXLCMD cmd, uint16_t Address, uint8_t *pData, uint8_t nParams)
{
    363c:	b530      	push	{r4, r5, lr}
    363e:	b083      	sub	sp, #12
    3640:	ac06      	add	r4, sp, #24
    3642:	7824      	ldrb	r4, [r4, #0]
	uint8_t length = MakePacket(ID, cmd, Address, pData, nParams);
    3644:	b2d2      	uxtb	r2, r2
    3646:	b2c0      	uxtb	r0, r0
    3648:	9400      	str	r4, [sp, #0]
    364a:	4c09      	ldr	r4, [pc, #36]	; (3670 <sendPacket+0x34>)
    364c:	47a0      	blx	r4
    364e:	b2c4      	uxtb	r4, r0
	
	if(length)
    3650:	2c00      	cmp	r4, #0
    3652:	d102      	bne.n	365a <sendPacket+0x1e>
		sendData((uint8_t *)tx_servo, length);
		SwitchComDir(Rx_MODE);
		return 1;
	}
	else 
		return 0;
    3654:	2000      	movs	r0, #0
}
    3656:	b003      	add	sp, #12
    3658:	bd30      	pop	{r4, r5, pc}
		SwitchComDir(Tx_MODE);
    365a:	2001      	movs	r0, #1
    365c:	4d05      	ldr	r5, [pc, #20]	; (3674 <sendPacket+0x38>)
    365e:	47a8      	blx	r5
		sendData((uint8_t *)tx_servo, length);
    3660:	b2a1      	uxth	r1, r4
    3662:	4805      	ldr	r0, [pc, #20]	; (3678 <sendPacket+0x3c>)
    3664:	4b05      	ldr	r3, [pc, #20]	; (367c <sendPacket+0x40>)
    3666:	4798      	blx	r3
		SwitchComDir(Rx_MODE);
    3668:	2000      	movs	r0, #0
    366a:	47a8      	blx	r5
		return 1;
    366c:	2001      	movs	r0, #1
    366e:	e7f2      	b.n	3656 <sendPacket+0x1a>
    3670:	000034ed 	.word	0x000034ed
    3674:	00003459 	.word	0x00003459
    3678:	20002514 	.word	0x20002514
    367c:	00003439 	.word	0x00003439

00003680 <RXsendPacket>:

int32_t RXsendPacket(uint16_t ID, eXLCMD cmd, uint16_t Address, uint8_t *pData, uint8_t nParams)
{
    3680:	b530      	push	{r4, r5, lr}
    3682:	b083      	sub	sp, #12
    3684:	ac06      	add	r4, sp, #24
    3686:	7824      	ldrb	r4, [r4, #0]
	uint32_t timeout_tm, lbytes = 0;
	
	if(!sendPacket(ID, cmd, Address, pData, nParams))
    3688:	9400      	str	r4, [sp, #0]
    368a:	4c16      	ldr	r4, [pc, #88]	; (36e4 <RXsendPacket+0x64>)
    368c:	47a0      	blx	r4
    368e:	2800      	cmp	r0, #0
    3690:	d101      	bne.n	3696 <RXsendPacket+0x16>
		}
	}
	usart_abort_job(UART_Instance, USART_TRANSCEIVER_RX);
	lbytes = SERVO_BUFFER_LENGTH - lbytes;
	return lbytes;
}
    3692:	b003      	add	sp, #12
    3694:	bd30      	pop	{r4, r5, pc}
	timeout_tm =  GetTickCount();
    3696:	4b14      	ldr	r3, [pc, #80]	; (36e8 <RXsendPacket+0x68>)
    3698:	4798      	blx	r3
    369a:	0004      	movs	r4, r0
	usart_read_buffer_job(UART_Instance, (uint8_t *)rx_servo, SERVO_BUFFER_LENGTH);
    369c:	4b13      	ldr	r3, [pc, #76]	; (36ec <RXsendPacket+0x6c>)
    369e:	6818      	ldr	r0, [r3, #0]
    36a0:	2240      	movs	r2, #64	; 0x40
    36a2:	4913      	ldr	r1, [pc, #76]	; (36f0 <RXsendPacket+0x70>)
    36a4:	4b13      	ldr	r3, [pc, #76]	; (36f4 <RXsendPacket+0x74>)
    36a6:	4798      	blx	r3
	uint32_t timeout_tm, lbytes = 0;
    36a8:	2500      	movs	r5, #0
	while(TimeDiff(timeout_tm, GetTickCount()) < 2)
    36aa:	4b0f      	ldr	r3, [pc, #60]	; (36e8 <RXsendPacket+0x68>)
    36ac:	4798      	blx	r3
    36ae:	0001      	movs	r1, r0
    36b0:	0020      	movs	r0, r4
    36b2:	4b11      	ldr	r3, [pc, #68]	; (36f8 <RXsendPacket+0x78>)
    36b4:	4798      	blx	r3
    36b6:	2801      	cmp	r0, #1
    36b8:	d80b      	bhi.n	36d2 <RXsendPacket+0x52>
		if(UART_Instance->remaining_rx_buffer_length != lbytes)
    36ba:	4b0c      	ldr	r3, [pc, #48]	; (36ec <RXsendPacket+0x6c>)
    36bc:	681a      	ldr	r2, [r3, #0]
    36be:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
    36c0:	b29b      	uxth	r3, r3
    36c2:	429d      	cmp	r5, r3
    36c4:	d0f1      	beq.n	36aa <RXsendPacket+0x2a>
			lbytes = UART_Instance->remaining_rx_buffer_length;
    36c6:	8d95      	ldrh	r5, [r2, #44]	; 0x2c
    36c8:	b2ad      	uxth	r5, r5
			timeout_tm = GetTickCount();
    36ca:	4b07      	ldr	r3, [pc, #28]	; (36e8 <RXsendPacket+0x68>)
    36cc:	4798      	blx	r3
    36ce:	0004      	movs	r4, r0
    36d0:	e7eb      	b.n	36aa <RXsendPacket+0x2a>
	usart_abort_job(UART_Instance, USART_TRANSCEIVER_RX);
    36d2:	4b06      	ldr	r3, [pc, #24]	; (36ec <RXsendPacket+0x6c>)
    36d4:	6818      	ldr	r0, [r3, #0]
    36d6:	2100      	movs	r1, #0
    36d8:	4b08      	ldr	r3, [pc, #32]	; (36fc <RXsendPacket+0x7c>)
    36da:	4798      	blx	r3
	lbytes = SERVO_BUFFER_LENGTH - lbytes;
    36dc:	2040      	movs	r0, #64	; 0x40
    36de:	1b40      	subs	r0, r0, r5
	return lbytes;
    36e0:	e7d7      	b.n	3692 <RXsendPacket+0x12>
    36e2:	46c0      	nop			; (mov r8, r8)
    36e4:	0000363d 	.word	0x0000363d
    36e8:	00002ead 	.word	0x00002ead
    36ec:	200025dc 	.word	0x200025dc
    36f0:	20002560 	.word	0x20002560
    36f4:	00006ef1 	.word	0x00006ef1
    36f8:	00002eb9 	.word	0x00002eb9
    36fc:	00006f11 	.word	0x00006f11

00003700 <ReadRegister>:
{
    3700:	b5f0      	push	{r4, r5, r6, r7, lr}
    3702:	b085      	sub	sp, #20
    3704:	9003      	str	r0, [sp, #12]
    3706:	9102      	str	r1, [sp, #8]
    3708:	0014      	movs	r4, r2
	for(uint32_t x = 0; x < 3; x++)
    370a:	2700      	movs	r7, #0
    370c:	e00e      	b.n	372c <ReadRegister+0x2c>
				result = (uint32_t)*StatusPacket.Params;
    370e:	4b1b      	ldr	r3, [pc, #108]	; (377c <ReadRegister+0x7c>)
    3710:	689b      	ldr	r3, [r3, #8]
    3712:	7818      	ldrb	r0, [r3, #0]
    3714:	e02f      	b.n	3776 <ReadRegister+0x76>
				result = (uint32_t)(*StatusPacket.Params | *(StatusPacket.Params + 1) <<8) | *(StatusPacket.Params + 2) <<16;
    3716:	4b19      	ldr	r3, [pc, #100]	; (377c <ReadRegister+0x7c>)
    3718:	689b      	ldr	r3, [r3, #8]
    371a:	7818      	ldrb	r0, [r3, #0]
    371c:	785a      	ldrb	r2, [r3, #1]
    371e:	0212      	lsls	r2, r2, #8
    3720:	4310      	orrs	r0, r2
    3722:	789b      	ldrb	r3, [r3, #2]
    3724:	041b      	lsls	r3, r3, #16
    3726:	4318      	orrs	r0, r3
    3728:	e025      	b.n	3776 <ReadRegister+0x76>
	for(uint32_t x = 0; x < 3; x++)
    372a:	3701      	adds	r7, #1
    372c:	2f02      	cmp	r7, #2
    372e:	d820      	bhi.n	3772 <ReadRegister+0x72>
		if(RXsendPacket(ID, CMD, Reg, NULL, GetRegisterLength(Reg)) && Process_rdPacket((uint8_t *)rx_servo, &StatusPacket) == eNOERROR)
    3730:	0020      	movs	r0, r4
    3732:	4b13      	ldr	r3, [pc, #76]	; (3780 <ReadRegister+0x80>)
    3734:	4798      	blx	r3
    3736:	0005      	movs	r5, r0
    3738:	b2a2      	uxth	r2, r4
    373a:	466b      	mov	r3, sp
    373c:	8998      	ldrh	r0, [r3, #12]
    373e:	b2eb      	uxtb	r3, r5
    3740:	9300      	str	r3, [sp, #0]
    3742:	2300      	movs	r3, #0
    3744:	9902      	ldr	r1, [sp, #8]
    3746:	4e0f      	ldr	r6, [pc, #60]	; (3784 <ReadRegister+0x84>)
    3748:	47b0      	blx	r6
    374a:	2800      	cmp	r0, #0
    374c:	d0ed      	beq.n	372a <ReadRegister+0x2a>
    374e:	490b      	ldr	r1, [pc, #44]	; (377c <ReadRegister+0x7c>)
    3750:	480d      	ldr	r0, [pc, #52]	; (3788 <ReadRegister+0x88>)
    3752:	4b0e      	ldr	r3, [pc, #56]	; (378c <ReadRegister+0x8c>)
    3754:	4798      	blx	r3
    3756:	2800      	cmp	r0, #0
    3758:	d1e7      	bne.n	372a <ReadRegister+0x2a>
			if(GetRegisterLength(Reg) == 1)
    375a:	2d01      	cmp	r5, #1
    375c:	d0d7      	beq.n	370e <ReadRegister+0xe>
			else if(CMD == eXLCMD_PING)
    375e:	9b02      	ldr	r3, [sp, #8]
    3760:	2b01      	cmp	r3, #1
    3762:	d0d8      	beq.n	3716 <ReadRegister+0x16>
				result = (uint32_t)(*StatusPacket.Params | *(StatusPacket.Params + 1) <<8);
    3764:	4b05      	ldr	r3, [pc, #20]	; (377c <ReadRegister+0x7c>)
    3766:	689b      	ldr	r3, [r3, #8]
    3768:	7818      	ldrb	r0, [r3, #0]
    376a:	785b      	ldrb	r3, [r3, #1]
    376c:	021b      	lsls	r3, r3, #8
    376e:	4318      	orrs	r0, r3
    3770:	e001      	b.n	3776 <ReadRegister+0x76>
	uint32_t result = -1;
    3772:	2001      	movs	r0, #1
    3774:	4240      	negs	r0, r0
}
    3776:	b005      	add	sp, #20
    3778:	bdf0      	pop	{r4, r5, r6, r7, pc}
    377a:	46c0      	nop			; (mov r8, r8)
    377c:	20002554 	.word	0x20002554
    3780:	000034d5 	.word	0x000034d5
    3784:	00003681 	.word	0x00003681
    3788:	20002560 	.word	0x20002560
    378c:	000035c5 	.word	0x000035c5

00003790 <ReadServoEEPROM>:

int32_t ReadServoEEPROM(uint8_t ID, ServoCfg *pCfg)
{
    3790:	b530      	push	{r4, r5, lr}
    3792:	b083      	sub	sp, #12
    3794:	000c      	movs	r4, r1
	if(RXsendPacket(ID, eXLCMD_READ, XL_MODEL_NUMBER_L, NULL, sizeof(ServoEEPROM)) && Process_rdPacket((uint8_t *)rx_servo, &StatusPacket) == eNOERROR)
    3796:	b280      	uxth	r0, r0
    3798:	2314      	movs	r3, #20
    379a:	9300      	str	r3, [sp, #0]
    379c:	2300      	movs	r3, #0
    379e:	2200      	movs	r2, #0
    37a0:	2102      	movs	r1, #2
    37a2:	4d0c      	ldr	r5, [pc, #48]	; (37d4 <ReadServoEEPROM+0x44>)
    37a4:	47a8      	blx	r5
    37a6:	2800      	cmp	r0, #0
    37a8:	d00e      	beq.n	37c8 <ReadServoEEPROM+0x38>
    37aa:	490b      	ldr	r1, [pc, #44]	; (37d8 <ReadServoEEPROM+0x48>)
    37ac:	480b      	ldr	r0, [pc, #44]	; (37dc <ReadServoEEPROM+0x4c>)
    37ae:	4b0c      	ldr	r3, [pc, #48]	; (37e0 <ReadServoEEPROM+0x50>)
    37b0:	4798      	blx	r3
    37b2:	2800      	cmp	r0, #0
    37b4:	d10b      	bne.n	37ce <ReadServoEEPROM+0x3e>
	{
		memcpy(pCfg, StatusPacket.Params, sizeof(ServoEEPROM));
    37b6:	4b08      	ldr	r3, [pc, #32]	; (37d8 <ReadServoEEPROM+0x48>)
    37b8:	6899      	ldr	r1, [r3, #8]
    37ba:	2214      	movs	r2, #20
    37bc:	0020      	movs	r0, r4
    37be:	4b09      	ldr	r3, [pc, #36]	; (37e4 <ReadServoEEPROM+0x54>)
    37c0:	4798      	blx	r3
		return 0;
    37c2:	2000      	movs	r0, #0
	}
	return -1;
}
    37c4:	b003      	add	sp, #12
    37c6:	bd30      	pop	{r4, r5, pc}
	return -1;
    37c8:	2001      	movs	r0, #1
    37ca:	4240      	negs	r0, r0
    37cc:	e7fa      	b.n	37c4 <ReadServoEEPROM+0x34>
    37ce:	2001      	movs	r0, #1
    37d0:	4240      	negs	r0, r0
    37d2:	e7f7      	b.n	37c4 <ReadServoEEPROM+0x34>
    37d4:	00003681 	.word	0x00003681
    37d8:	20002554 	.word	0x20002554
    37dc:	20002560 	.word	0x20002560
    37e0:	000035c5 	.word	0x000035c5
    37e4:	0000c38d 	.word	0x0000c38d

000037e8 <ServoEnableTorque>:
	}
	return -1;
}

void ServoEnableTorque(uint8_t ID, uint16_t value)
{
    37e8:	b530      	push	{r4, r5, lr}
    37ea:	b085      	sub	sp, #20
    37ec:	0004      	movs	r4, r0
	uint16_t data = value & 0x01;
    37ee:	2301      	movs	r3, #1
    37f0:	4019      	ands	r1, r3
    37f2:	250e      	movs	r5, #14
    37f4:	446d      	add	r5, sp
    37f6:	8029      	strh	r1, [r5, #0]
	sendPacket(ID, eXLCMD_WRITE, XL_TORQUE_ENABLE, (uint8_t *)&data, GetRegisterLength(XL_TORQUE_ENABLE));
    37f8:	2018      	movs	r0, #24
    37fa:	4b06      	ldr	r3, [pc, #24]	; (3814 <ServoEnableTorque+0x2c>)
    37fc:	4798      	blx	r3
    37fe:	0003      	movs	r3, r0
    3800:	b2a0      	uxth	r0, r4
    3802:	b2db      	uxtb	r3, r3
    3804:	9300      	str	r3, [sp, #0]
    3806:	002b      	movs	r3, r5
    3808:	2218      	movs	r2, #24
    380a:	2103      	movs	r1, #3
    380c:	4c02      	ldr	r4, [pc, #8]	; (3818 <ServoEnableTorque+0x30>)
    380e:	47a0      	blx	r4
}
    3810:	b005      	add	sp, #20
    3812:	bd30      	pop	{r4, r5, pc}
    3814:	000034d5 	.word	0x000034d5
    3818:	0000363d 	.word	0x0000363d

0000381c <moveServo>:

void moveServo(uint8_t ID, uint16_t value)
{
    381c:	b510      	push	{r4, lr}
    381e:	b084      	sub	sp, #16
    3820:	0004      	movs	r4, r0
	uint16_t data = value;
    3822:	230e      	movs	r3, #14
    3824:	446b      	add	r3, sp
    3826:	8019      	strh	r1, [r3, #0]

	if (data < 0)
		data = 0;
	else if(data > 1023)
    3828:	4b0a      	ldr	r3, [pc, #40]	; (3854 <moveServo+0x38>)
    382a:	4299      	cmp	r1, r3
    382c:	d903      	bls.n	3836 <moveServo+0x1a>
		data = 1023;
    382e:	001a      	movs	r2, r3
    3830:	230e      	movs	r3, #14
    3832:	446b      	add	r3, sp
    3834:	801a      	strh	r2, [r3, #0]

	sendPacket(ID, eXLCMD_WRITE, XL_GOAL_POSITION, (uint8_t *)&data, GetRegisterLength(XL_GOAL_POSITION));
    3836:	201e      	movs	r0, #30
    3838:	4b07      	ldr	r3, [pc, #28]	; (3858 <moveServo+0x3c>)
    383a:	4798      	blx	r3
    383c:	0003      	movs	r3, r0
    383e:	b2a0      	uxth	r0, r4
    3840:	b2db      	uxtb	r3, r3
    3842:	9300      	str	r3, [sp, #0]
    3844:	230e      	movs	r3, #14
    3846:	446b      	add	r3, sp
    3848:	221e      	movs	r2, #30
    384a:	2103      	movs	r1, #3
    384c:	4c03      	ldr	r4, [pc, #12]	; (385c <moveServo+0x40>)
    384e:	47a0      	blx	r4
}
    3850:	b004      	add	sp, #16
    3852:	bd10      	pop	{r4, pc}
    3854:	000003ff 	.word	0x000003ff
    3858:	000034d5 	.word	0x000034d5
    385c:	0000363d 	.word	0x0000363d

00003860 <setServoSpeed>:
	uint16_t data = value;
	sendPacket(ID, eXLCMD_WRITE, XL_ID, (uint8_t *)&data, GetRegisterLength(XL_ID));
}

void setServoSpeed(uint8_t ID, uint16_t value)
{
    3860:	b530      	push	{r4, r5, lr}
    3862:	b085      	sub	sp, #20
    3864:	0004      	movs	r4, r0
	uint16_t data = value;
    3866:	250e      	movs	r5, #14
    3868:	446d      	add	r5, sp
    386a:	8029      	strh	r1, [r5, #0]
	sendPacket(ID, eXLCMD_WRITE, XL_GOAL_SPEED, (uint8_t *)&data, GetRegisterLength(XL_GOAL_SPEED));
    386c:	2020      	movs	r0, #32
    386e:	4b06      	ldr	r3, [pc, #24]	; (3888 <setServoSpeed+0x28>)
    3870:	4798      	blx	r3
    3872:	0003      	movs	r3, r0
    3874:	b2a0      	uxth	r0, r4
    3876:	b2db      	uxtb	r3, r3
    3878:	9300      	str	r3, [sp, #0]
    387a:	002b      	movs	r3, r5
    387c:	2220      	movs	r2, #32
    387e:	2103      	movs	r1, #3
    3880:	4c02      	ldr	r4, [pc, #8]	; (388c <setServoSpeed+0x2c>)
    3882:	47a0      	blx	r4
}
    3884:	b005      	add	sp, #20
    3886:	bd30      	pop	{r4, r5, pc}
    3888:	000034d5 	.word	0x000034d5
    388c:	0000363d 	.word	0x0000363d

00003890 <setServoLED>:

void setServoLED(uint8_t ID, eLed_Color led_color)
{
    3890:	b530      	push	{r4, r5, lr}
    3892:	b085      	sub	sp, #20
    3894:	0004      	movs	r4, r0
	uint16_t data = led_color;
    3896:	250e      	movs	r5, #14
    3898:	446d      	add	r5, sp
    389a:	8029      	strh	r1, [r5, #0]
	sendPacket(ID, eXLCMD_WRITE, XL_LED, (uint8_t *)&data, GetRegisterLength(XL_LED));
    389c:	2019      	movs	r0, #25
    389e:	4b06      	ldr	r3, [pc, #24]	; (38b8 <setServoLED+0x28>)
    38a0:	4798      	blx	r3
    38a2:	0003      	movs	r3, r0
    38a4:	b2a0      	uxth	r0, r4
    38a6:	b2db      	uxtb	r3, r3
    38a8:	9300      	str	r3, [sp, #0]
    38aa:	002b      	movs	r3, r5
    38ac:	2219      	movs	r2, #25
    38ae:	2103      	movs	r1, #3
    38b0:	4c02      	ldr	r4, [pc, #8]	; (38bc <setServoLED+0x2c>)
    38b2:	47a0      	blx	r4
}
    38b4:	b005      	add	sp, #20
    38b6:	bd30      	pop	{r4, r5, pc}
    38b8:	000034d5 	.word	0x000034d5
    38bc:	0000363d 	.word	0x0000363d

000038c0 <setServoPID>:

void setServoPID(uint8_t ID, uint8_t P, uint8_t D, uint8_t I)
{
    38c0:	b570      	push	{r4, r5, r6, lr}
    38c2:	b084      	sub	sp, #16
    38c4:	0006      	movs	r6, r0
	uint8_t data[3] = {P, I, D};
    38c6:	a803      	add	r0, sp, #12
    38c8:	7001      	strb	r1, [r0, #0]
    38ca:	7043      	strb	r3, [r0, #1]
    38cc:	7082      	strb	r2, [r0, #2]
	for(uint32_t x = 0; x < 3; x++)
    38ce:	2400      	movs	r4, #0
    38d0:	e011      	b.n	38f6 <setServoPID+0x36>
		sendPacket(ID, eXLCMD_WRITE, XL_D_GAIN + x, (uint8_t *)&data[x], GetRegisterLength(XL_D_GAIN + x));
    38d2:	0020      	movs	r0, r4
    38d4:	301b      	adds	r0, #27
    38d6:	b2c0      	uxtb	r0, r0
    38d8:	4b09      	ldr	r3, [pc, #36]	; (3900 <setServoPID+0x40>)
    38da:	4798      	blx	r3
    38dc:	ab03      	add	r3, sp, #12
    38de:	191b      	adds	r3, r3, r4
    38e0:	0022      	movs	r2, r4
    38e2:	321b      	adds	r2, #27
    38e4:	b292      	uxth	r2, r2
    38e6:	b2b5      	uxth	r5, r6
    38e8:	b2c0      	uxtb	r0, r0
    38ea:	9000      	str	r0, [sp, #0]
    38ec:	2103      	movs	r1, #3
    38ee:	0028      	movs	r0, r5
    38f0:	4d04      	ldr	r5, [pc, #16]	; (3904 <setServoPID+0x44>)
    38f2:	47a8      	blx	r5
	for(uint32_t x = 0; x < 3; x++)
    38f4:	3401      	adds	r4, #1
    38f6:	2c02      	cmp	r4, #2
    38f8:	d9eb      	bls.n	38d2 <setServoPID+0x12>
}
    38fa:	b004      	add	sp, #16
    38fc:	bd70      	pop	{r4, r5, r6, pc}
    38fe:	46c0      	nop			; (mov r8, r8)
    3900:	000034d5 	.word	0x000034d5
    3904:	0000363d 	.word	0x0000363d

00003908 <ResetServo>:
	uint16_t data = value;
	sendPacket(ID, eXLCMD_WRITE, XL_GOAL_TORQUE, (uint8_t *)&data, GetRegisterLength(XL_GOAL_TORQUE));
}

void ResetServo(uint8_t ID)
{
    3908:	b510      	push	{r4, lr}
    390a:	b082      	sub	sp, #8
	sendPacket(ID, eXLCMD_REBOOT, 0, NULL, 0);
    390c:	b280      	uxth	r0, r0
    390e:	2300      	movs	r3, #0
    3910:	9300      	str	r3, [sp, #0]
    3912:	2200      	movs	r2, #0
    3914:	2108      	movs	r1, #8
    3916:	4c02      	ldr	r4, [pc, #8]	; (3920 <ResetServo+0x18>)
    3918:	47a0      	blx	r4
}
    391a:	b002      	add	sp, #8
    391c:	bd10      	pop	{r4, pc}
    391e:	46c0      	nop			; (mov r8, r8)
    3920:	0000363d 	.word	0x0000363d

00003924 <XL320_Init>:

void XL320_Init(struct usart_module * Instance)
{
    3924:	b570      	push	{r4, r5, r6, lr}
	UART_Instance = Instance;
    3926:	4b0b      	ldr	r3, [pc, #44]	; (3954 <XL320_Init+0x30>)
    3928:	6018      	str	r0, [r3, #0]
	ReadServoEEPROM(1, &ServoConfig[0]);
    392a:	4c0b      	ldr	r4, [pc, #44]	; (3958 <XL320_Init+0x34>)
    392c:	0021      	movs	r1, r4
    392e:	2001      	movs	r0, #1
    3930:	4d0a      	ldr	r5, [pc, #40]	; (395c <XL320_Init+0x38>)
    3932:	47a8      	blx	r5
	ReadServoEEPROM(2, &ServoConfig[1]);
    3934:	0021      	movs	r1, r4
    3936:	311e      	adds	r1, #30
    3938:	2002      	movs	r0, #2
    393a:	47a8      	blx	r5
	setServoPID(1, 10, 1, 2);
    393c:	2302      	movs	r3, #2
    393e:	2201      	movs	r2, #1
    3940:	210a      	movs	r1, #10
    3942:	2001      	movs	r0, #1
    3944:	4c06      	ldr	r4, [pc, #24]	; (3960 <XL320_Init+0x3c>)
    3946:	47a0      	blx	r4
	setServoPID(2, 10, 1, 2);
    3948:	2302      	movs	r3, #2
    394a:	2201      	movs	r2, #1
    394c:	210a      	movs	r1, #10
    394e:	2002      	movs	r0, #2
    3950:	47a0      	blx	r4
}
    3952:	bd70      	pop	{r4, r5, r6, pc}
    3954:	200025dc 	.word	0x200025dc
    3958:	200025a0 	.word	0x200025a0
    395c:	00003791 	.word	0x00003791
    3960:	000038c1 	.word	0x000038c1

00003964 <_events_find_first_free_channel_and_allocate>:

	return pos;
}

static uint8_t _events_find_first_free_channel_and_allocate(void)
{
    3964:	b570      	push	{r4, r5, r6, lr}
	cpu_irq_enter_critical();
    3966:	4b10      	ldr	r3, [pc, #64]	; (39a8 <_events_find_first_free_channel_and_allocate+0x44>)
    3968:	4798      	blx	r3
	uint32_t tmp;
	bool allocated = false;

	system_interrupt_enter_critical_section();

	tmp = _events_inst.allocated_channels;
    396a:	4b10      	ldr	r3, [pc, #64]	; (39ac <_events_find_first_free_channel_and_allocate+0x48>)
    396c:	681b      	ldr	r3, [r3, #0]

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
    396e:	2400      	movs	r4, #0
    3970:	2c0b      	cmp	r4, #11
    3972:	d810      	bhi.n	3996 <_events_find_first_free_channel_and_allocate+0x32>

		if(!(tmp & 0x00000001)) {
    3974:	07da      	lsls	r2, r3, #31
    3976:	d503      	bpl.n	3980 <_events_find_first_free_channel_and_allocate+0x1c>

			break;

		}

		tmp = tmp >> 1;
    3978:	085b      	lsrs	r3, r3, #1
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
    397a:	3401      	adds	r4, #1
    397c:	b2e4      	uxtb	r4, r4
    397e:	e7f7      	b.n	3970 <_events_find_first_free_channel_and_allocate+0xc>
			_events_inst.allocated_channels |= 1 << count;
    3980:	4b0a      	ldr	r3, [pc, #40]	; (39ac <_events_find_first_free_channel_and_allocate+0x48>)
    3982:	681a      	ldr	r2, [r3, #0]
    3984:	2101      	movs	r1, #1
    3986:	40a1      	lsls	r1, r4
    3988:	430a      	orrs	r2, r1
    398a:	601a      	str	r2, [r3, #0]
			_events_inst.free_channels--;
    398c:	791a      	ldrb	r2, [r3, #4]
    398e:	3a01      	subs	r2, #1
    3990:	711a      	strb	r2, [r3, #4]
			allocated = true;
    3992:	2501      	movs	r5, #1
			break;
    3994:	e000      	b.n	3998 <_events_find_first_free_channel_and_allocate+0x34>
	bool allocated = false;
    3996:	2500      	movs	r5, #0
	cpu_irq_leave_critical();
    3998:	4b05      	ldr	r3, [pc, #20]	; (39b0 <_events_find_first_free_channel_and_allocate+0x4c>)
    399a:	4798      	blx	r3
	}

	system_interrupt_leave_critical_section();

	if(!allocated) {
    399c:	2d00      	cmp	r5, #0
    399e:	d100      	bne.n	39a2 <_events_find_first_free_channel_and_allocate+0x3e>
		return EVENTS_INVALID_CHANNEL;
    39a0:	24ff      	movs	r4, #255	; 0xff
	} else {
		return count;
	}
}
    39a2:	0020      	movs	r0, r4
    39a4:	bd70      	pop	{r4, r5, r6, pc}
    39a6:	46c0      	nop			; (mov r8, r8)
    39a8:	000087ed 	.word	0x000087ed
    39ac:	20000028 	.word	0x20000028
    39b0:	0000882d 	.word	0x0000882d

000039b4 <_system_events_init>:
			PM->APBCMASK.reg |= mask;
    39b4:	4a06      	ldr	r2, [pc, #24]	; (39d0 <_system_events_init+0x1c>)
    39b6:	6a13      	ldr	r3, [r2, #32]
    39b8:	2102      	movs	r1, #2
    39ba:	430b      	orrs	r3, r1
    39bc:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
    39be:	2201      	movs	r2, #1
    39c0:	4b04      	ldr	r3, [pc, #16]	; (39d4 <_system_events_init+0x20>)
    39c2:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
    39c4:	4b03      	ldr	r3, [pc, #12]	; (39d4 <_system_events_init+0x20>)
    39c6:	781b      	ldrb	r3, [r3, #0]
    39c8:	07db      	lsls	r3, r3, #31
    39ca:	d4fb      	bmi.n	39c4 <_system_events_init+0x10>
	}
}
    39cc:	4770      	bx	lr
    39ce:	46c0      	nop			; (mov r8, r8)
    39d0:	40000400 	.word	0x40000400
    39d4:	42000400 	.word	0x42000400

000039d8 <events_get_config_defaults>:
void events_get_config_defaults(struct events_config *config)
{
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
    39d8:	2301      	movs	r3, #1
    39da:	7003      	strb	r3, [r0, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
    39dc:	2300      	movs	r3, #0
    39de:	7043      	strb	r3, [r0, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
    39e0:	7083      	strb	r3, [r0, #2]
	config->clock_source = GCLK_GENERATOR_0;
    39e2:	70c3      	strb	r3, [r0, #3]
}
    39e4:	4770      	bx	lr
	...

000039e8 <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
    39e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    39ea:	b083      	sub	sp, #12
    39ec:	0006      	movs	r6, r0
    39ee:	000c      	movs	r4, r1
	uint8_t new_channel;

	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();
    39f0:	4b16      	ldr	r3, [pc, #88]	; (3a4c <events_allocate+0x64>)
    39f2:	4798      	blx	r3
    39f4:	0005      	movs	r5, r0

	if(new_channel == EVENTS_INVALID_CHANNEL) {
    39f6:	28ff      	cmp	r0, #255	; 0xff
    39f8:	d026      	beq.n	3a48 <events_allocate+0x60>
		return STATUS_ERR_NOT_FOUND;
	}

	resource->channel = new_channel;
    39fa:	7030      	strb	r0, [r6, #0]

	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
    39fc:	7863      	ldrb	r3, [r4, #1]
    39fe:	2b02      	cmp	r3, #2
    3a00:	d00a      	beq.n	3a18 <events_allocate+0x30>
		/* Set up a GLCK channel to use with the specific channel */
		struct system_gclk_chan_config gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator =
				(enum gclk_generator)config->clock_source;
    3a02:	78e3      	ldrb	r3, [r4, #3]
		gclk_chan_conf.source_generator =
    3a04:	a901      	add	r1, sp, #4
    3a06:	700b      	strb	r3, [r1, #0]
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
    3a08:	1dc7      	adds	r7, r0, #7
    3a0a:	b2ff      	uxtb	r7, r7
    3a0c:	0038      	movs	r0, r7
    3a0e:	4b10      	ldr	r3, [pc, #64]	; (3a50 <events_allocate+0x68>)
    3a10:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
    3a12:	0038      	movs	r0, r7
    3a14:	4b0f      	ldr	r3, [pc, #60]	; (3a54 <events_allocate+0x6c>)
    3a16:	4798      	blx	r3
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
    3a18:	200f      	movs	r0, #15
    3a1a:	4028      	ands	r0, r5
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
    3a1c:	78a3      	ldrb	r3, [r4, #2]
    3a1e:	041b      	lsls	r3, r3, #16
    3a20:	22fe      	movs	r2, #254	; 0xfe
    3a22:	03d2      	lsls	r2, r2, #15
    3a24:	4013      	ands	r3, r2
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
    3a26:	4318      	orrs	r0, r3
			     EVSYS_CHANNEL_PATH(config->path)         |
    3a28:	7863      	ldrb	r3, [r4, #1]
    3a2a:	061b      	lsls	r3, r3, #24
    3a2c:	22c0      	movs	r2, #192	; 0xc0
    3a2e:	0492      	lsls	r2, r2, #18
    3a30:	4013      	ands	r3, r2
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
    3a32:	4318      	orrs	r0, r3
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
    3a34:	7823      	ldrb	r3, [r4, #0]
    3a36:	069b      	lsls	r3, r3, #26
    3a38:	22c0      	movs	r2, #192	; 0xc0
    3a3a:	0512      	lsls	r2, r2, #20
    3a3c:	4013      	ands	r3, r2
			     EVSYS_CHANNEL_PATH(config->path)         |
    3a3e:	4318      	orrs	r0, r3
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
    3a40:	6070      	str	r0, [r6, #4]


	return STATUS_OK;
    3a42:	2000      	movs	r0, #0
}
    3a44:	b003      	add	sp, #12
    3a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_NOT_FOUND;
    3a48:	2014      	movs	r0, #20
    3a4a:	e7fb      	b.n	3a44 <events_allocate+0x5c>
    3a4c:	00003965 	.word	0x00003965
    3a50:	00008fa1 	.word	0x00008fa1
    3a54:	00008f19 	.word	0x00008f19

00003a58 <events_attach_user>:
enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
    3a58:	7803      	ldrb	r3, [r0, #0]
    3a5a:	3301      	adds	r3, #1
    3a5c:	021b      	lsls	r3, r3, #8
    3a5e:	22f8      	movs	r2, #248	; 0xf8
    3a60:	0152      	lsls	r2, r2, #5
    3a62:	4013      	ands	r3, r2
			  EVSYS_USER_USER(user_id);
    3a64:	221f      	movs	r2, #31
    3a66:	4011      	ands	r1, r2
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
    3a68:	4319      	orrs	r1, r3
    3a6a:	4b03      	ldr	r3, [pc, #12]	; (3a78 <events_attach_user+0x20>)
    3a6c:	8119      	strh	r1, [r3, #8]

	/* Then configure the channel */
	EVSYS->CHANNEL.reg = resource->channel_reg;
    3a6e:	6842      	ldr	r2, [r0, #4]
    3a70:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
}
    3a72:	2000      	movs	r0, #0
    3a74:	4770      	bx	lr
    3a76:	46c0      	nop			; (mov r8, r8)
    3a78:	42000400 	.word	0x42000400

00003a7c <_extint_enable>:
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3a7c:	2200      	movs	r2, #0
    3a7e:	2a00      	cmp	r2, #0
    3a80:	d006      	beq.n	3a90 <_extint_enable+0x14>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3a82:	2300      	movs	r3, #0
    3a84:	2b00      	cmp	r3, #0
    3a86:	d00b      	beq.n	3aa0 <_extint_enable+0x24>
	return false;
    3a88:	2300      	movs	r3, #0
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    3a8a:	2b00      	cmp	r3, #0
    3a8c:	d1f9      	bne.n	3a82 <_extint_enable+0x6>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    3a8e:	4770      	bx	lr
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    3a90:	4908      	ldr	r1, [pc, #32]	; (3ab4 <_extint_enable+0x38>)
    3a92:	780b      	ldrb	r3, [r1, #0]
    3a94:	2002      	movs	r0, #2
    3a96:	4303      	orrs	r3, r0
    3a98:	b2db      	uxtb	r3, r3
    3a9a:	700b      	strb	r3, [r1, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3a9c:	3201      	adds	r2, #1
    3a9e:	e7ee      	b.n	3a7e <_extint_enable+0x2>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    3aa0:	4a04      	ldr	r2, [pc, #16]	; (3ab4 <_extint_enable+0x38>)
    3aa2:	7852      	ldrb	r2, [r2, #1]
    3aa4:	b252      	sxtb	r2, r2
    3aa6:	2a00      	cmp	r2, #0
    3aa8:	db01      	blt.n	3aae <_extint_enable+0x32>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3aaa:	3301      	adds	r3, #1
    3aac:	e7ea      	b.n	3a84 <_extint_enable+0x8>
			return true;
    3aae:	2301      	movs	r3, #1
    3ab0:	e7eb      	b.n	3a8a <_extint_enable+0xe>
    3ab2:	46c0      	nop			; (mov r8, r8)
    3ab4:	40001800 	.word	0x40001800

00003ab8 <_system_extint_init>:
{
    3ab8:	b500      	push	{lr}
    3aba:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    3abc:	4a1b      	ldr	r2, [pc, #108]	; (3b2c <_system_extint_init+0x74>)
    3abe:	6993      	ldr	r3, [r2, #24]
    3ac0:	2140      	movs	r1, #64	; 0x40
    3ac2:	430b      	orrs	r3, r1
    3ac4:	6193      	str	r3, [r2, #24]
    3ac6:	a901      	add	r1, sp, #4
    3ac8:	2300      	movs	r3, #0
    3aca:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    3acc:	2005      	movs	r0, #5
    3ace:	4b18      	ldr	r3, [pc, #96]	; (3b30 <_system_extint_init+0x78>)
    3ad0:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    3ad2:	2005      	movs	r0, #5
    3ad4:	4b17      	ldr	r3, [pc, #92]	; (3b34 <_system_extint_init+0x7c>)
    3ad6:	4798      	blx	r3
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3ad8:	2200      	movs	r2, #0
    3ada:	2a00      	cmp	r2, #0
    3adc:	d006      	beq.n	3aec <_system_extint_init+0x34>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3ade:	2300      	movs	r3, #0
    3ae0:	2b00      	cmp	r3, #0
    3ae2:	d00b      	beq.n	3afc <_system_extint_init+0x44>
	return false;
    3ae4:	2300      	movs	r3, #0
	while (extint_is_syncing()) {
    3ae6:	2b00      	cmp	r3, #0
    3ae8:	d1f9      	bne.n	3ade <_system_extint_init+0x26>
    3aea:	e016      	b.n	3b1a <_system_extint_init+0x62>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    3aec:	4912      	ldr	r1, [pc, #72]	; (3b38 <_system_extint_init+0x80>)
    3aee:	780b      	ldrb	r3, [r1, #0]
    3af0:	2001      	movs	r0, #1
    3af2:	4303      	orrs	r3, r0
    3af4:	b2db      	uxtb	r3, r3
    3af6:	700b      	strb	r3, [r1, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3af8:	3201      	adds	r2, #1
    3afa:	e7ee      	b.n	3ada <_system_extint_init+0x22>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    3afc:	4a0e      	ldr	r2, [pc, #56]	; (3b38 <_system_extint_init+0x80>)
    3afe:	7852      	ldrb	r2, [r2, #1]
    3b00:	b252      	sxtb	r2, r2
    3b02:	2a00      	cmp	r2, #0
    3b04:	db01      	blt.n	3b0a <_system_extint_init+0x52>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3b06:	3301      	adds	r3, #1
    3b08:	e7ea      	b.n	3ae0 <_system_extint_init+0x28>
			return true;
    3b0a:	2301      	movs	r3, #1
    3b0c:	e7eb      	b.n	3ae6 <_system_extint_init+0x2e>
		_extint_dev.callbacks[j] = NULL;
    3b0e:	0099      	lsls	r1, r3, #2
    3b10:	2000      	movs	r0, #0
    3b12:	4a0a      	ldr	r2, [pc, #40]	; (3b3c <_system_extint_init+0x84>)
    3b14:	5088      	str	r0, [r1, r2]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3b16:	3301      	adds	r3, #1
    3b18:	b2db      	uxtb	r3, r3
    3b1a:	2b0f      	cmp	r3, #15
    3b1c:	d9f7      	bls.n	3b0e <_system_extint_init+0x56>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3b1e:	2210      	movs	r2, #16
    3b20:	4b07      	ldr	r3, [pc, #28]	; (3b40 <_system_extint_init+0x88>)
    3b22:	601a      	str	r2, [r3, #0]
	_extint_enable();
    3b24:	4b07      	ldr	r3, [pc, #28]	; (3b44 <_system_extint_init+0x8c>)
    3b26:	4798      	blx	r3
}
    3b28:	b003      	add	sp, #12
    3b2a:	bd00      	pop	{pc}
    3b2c:	40000400 	.word	0x40000400
    3b30:	00008fa1 	.word	0x00008fa1
    3b34:	00008f19 	.word	0x00008f19
    3b38:	40001800 	.word	0x40001800
    3b3c:	200025e0 	.word	0x200025e0
    3b40:	e000e100 	.word	0xe000e100
    3b44:	00003a7d 	.word	0x00003a7d

00003b48 <i2s_init>:
 * \retval STATUS_ERR_DENIED   Hardware module was already enabled
 */
enum status_code i2s_init(
		struct i2s_module *const module_inst,
		I2s *hw)
{
    3b48:	b510      	push	{r4, lr}
			PM->APBCMASK.reg |= mask;
    3b4a:	4a1c      	ldr	r2, [pc, #112]	; (3bbc <i2s_init+0x74>)
    3b4c:	6a14      	ldr	r4, [r2, #32]
    3b4e:	2380      	movs	r3, #128	; 0x80
    3b50:	035b      	lsls	r3, r3, #13
    3b52:	4323      	orrs	r3, r4
    3b54:	6213      	str	r3, [r2, #32]
	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_I2S);

	/* Status check */
	uint32_t ctrla;
	ctrla = module_inst->hw->CTRLA.reg;
    3b56:	6803      	ldr	r3, [r0, #0]
    3b58:	781b      	ldrb	r3, [r3, #0]
    3b5a:	b2db      	uxtb	r3, r3
	if (ctrla & I2S_CTRLA_ENABLE) {
    3b5c:	079a      	lsls	r2, r3, #30
    3b5e:	d504      	bpl.n	3b6a <i2s_init+0x22>
		if (ctrla & (I2S_CTRLA_SEREN1 |
    3b60:	223c      	movs	r2, #60	; 0x3c
    3b62:	421a      	tst	r2, r3
    3b64:	d028      	beq.n	3bb8 <i2s_init+0x70>
				I2S_CTRLA_SEREN0 | I2S_CTRLA_CKEN1 | I2S_CTRLA_CKEN0)) {
			return STATUS_BUSY;
    3b66:	2005      	movs	r0, #5
    3b68:	e025      	b.n	3bb6 <i2s_init+0x6e>
			return STATUS_ERR_DENIED;
		}
	}

	/* Initialize module */
	module_inst->hw = hw;
    3b6a:	6001      	str	r1, [r0, #0]

	/* Initialize serializers */
#if I2S_CALLBACK_MODE == true
	int i, j;
	for (i = 0; i < 2; i ++) {
    3b6c:	2100      	movs	r1, #0
    3b6e:	e017      	b.n	3ba0 <i2s_init+0x58>
		for (j = 0; j < I2S_SERIALIZER_CALLBACK_N; j ++) {
			module_inst->serializer[i].callback[j] = NULL;
    3b70:	00cb      	lsls	r3, r1, #3
    3b72:	1a5b      	subs	r3, r3, r1
    3b74:	189b      	adds	r3, r3, r2
    3b76:	009b      	lsls	r3, r3, #2
    3b78:	18c3      	adds	r3, r0, r3
    3b7a:	2400      	movs	r4, #0
    3b7c:	605c      	str	r4, [r3, #4]
		for (j = 0; j < I2S_SERIALIZER_CALLBACK_N; j ++) {
    3b7e:	3201      	adds	r2, #1
    3b80:	2a01      	cmp	r2, #1
    3b82:	ddf5      	ble.n	3b70 <i2s_init+0x28>
		}
		module_inst->serializer[i].registered_callback_mask = 0;
    3b84:	00ca      	lsls	r2, r1, #3
    3b86:	1a52      	subs	r2, r2, r1
    3b88:	0093      	lsls	r3, r2, #2
    3b8a:	18c3      	adds	r3, r0, r3
    3b8c:	2200      	movs	r2, #0
    3b8e:	761a      	strb	r2, [r3, #24]
		module_inst->serializer[i].enabled_callback_mask = 0;
    3b90:	765a      	strb	r2, [r3, #25]

		module_inst->serializer[i].job_buffer = NULL;
    3b92:	60da      	str	r2, [r3, #12]
		module_inst->serializer[i].job_status = STATUS_OK;
    3b94:	769a      	strb	r2, [r3, #26]
		module_inst->serializer[i].requested_words = 0;
    3b96:	611a      	str	r2, [r3, #16]
		module_inst->serializer[i].transferred_words = 0;
    3b98:	615a      	str	r2, [r3, #20]

		module_inst->serializer[i].mode = I2S_SERIALIZER_RECEIVE;
    3b9a:	76da      	strb	r2, [r3, #27]
		module_inst->serializer[i].data_size = I2S_DATA_SIZE_32BIT;
    3b9c:	771a      	strb	r2, [r3, #28]
	for (i = 0; i < 2; i ++) {
    3b9e:	3101      	adds	r1, #1
    3ba0:	2901      	cmp	r1, #1
    3ba2:	dc01      	bgt.n	3ba8 <i2s_init+0x60>
    3ba4:	2200      	movs	r2, #0
    3ba6:	e7eb      	b.n	3b80 <i2s_init+0x38>
	}

	_i2s_instances[0] = module_inst;
    3ba8:	4b05      	ldr	r3, [pc, #20]	; (3bc0 <i2s_init+0x78>)
    3baa:	6018      	str	r0, [r3, #0]
    3bac:	2280      	movs	r2, #128	; 0x80
    3bae:	0512      	lsls	r2, r2, #20
    3bb0:	4b04      	ldr	r3, [pc, #16]	; (3bc4 <i2s_init+0x7c>)
    3bb2:	601a      	str	r2, [r3, #0]

	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_I2S);
#endif

	return STATUS_OK;
    3bb4:	2000      	movs	r0, #0
}
    3bb6:	bd10      	pop	{r4, pc}
			return STATUS_ERR_DENIED;
    3bb8:	201c      	movs	r0, #28
    3bba:	e7fc      	b.n	3bb6 <i2s_init+0x6e>
    3bbc:	40000400 	.word	0x40000400
    3bc0:	200029cc 	.word	0x200029cc
    3bc4:	e000e100 	.word	0xe000e100

00003bc8 <i2s_clock_unit_set_config>:
 */
enum status_code i2s_clock_unit_set_config(
		struct i2s_module *const module_inst,
		const enum i2s_clock_unit clock_unit,
		const struct i2s_clock_unit_config *config)
{
    3bc8:	b570      	push	{r4, r5, r6, lr}
    3bca:	b084      	sub	sp, #16
    3bcc:	0014      	movs	r4, r2
	Assert(clock_unit < I2S_CLOCK_UNIT_N);
	Assert(config);

	/* Status check */
	uint32_t ctrla, syncbusy;
	syncbusy = module_inst->hw->SYNCBUSY.reg;
    3bce:	6805      	ldr	r5, [r0, #0]
    3bd0:	8b28      	ldrh	r0, [r5, #24]
	ctrla = module_inst->hw->CTRLA.reg;
    3bd2:	782a      	ldrb	r2, [r5, #0]
    3bd4:	b2d2      	uxtb	r2, r2

	/* Busy ? */
	if (syncbusy & (I2S_SYNCBUSY_CKEN0 << clock_unit)) {
    3bd6:	2304      	movs	r3, #4
    3bd8:	408b      	lsls	r3, r1
    3bda:	4218      	tst	r0, r3
    3bdc:	d002      	beq.n	3be4 <i2s_clock_unit_set_config+0x1c>
		return STATUS_BUSY;
    3bde:	2005      	movs	r0, #5
		pin_config.mux_position = config->fs_pin.mux;
		system_pinmux_pin_set_config(config->fs_pin.gpio, &pin_config);
	}

	return STATUS_OK;
}
    3be0:	b004      	add	sp, #16
    3be2:	bd70      	pop	{r4, r5, r6, pc}
	if (ctrla & (I2S_CTRLA_CKEN0 << clock_unit)) {
    3be4:	4013      	ands	r3, r2
    3be6:	d001      	beq.n	3bec <i2s_clock_unit_set_config+0x24>
		return STATUS_ERR_DENIED;
    3be8:	201c      	movs	r0, #28
    3bea:	e7f9      	b.n	3be0 <i2s_clock_unit_set_config+0x18>
	if (config->clock.mck_src && config->clock.mck_out_enable) {
    3bec:	78e6      	ldrb	r6, [r4, #3]
    3bee:	2e00      	cmp	r6, #0
    3bf0:	d004      	beq.n	3bfc <i2s_clock_unit_set_config+0x34>
    3bf2:	79e2      	ldrb	r2, [r4, #7]
    3bf4:	2a00      	cmp	r2, #0
    3bf6:	d001      	beq.n	3bfc <i2s_clock_unit_set_config+0x34>
		return STATUS_ERR_INVALID_ARG;
    3bf8:	2017      	movs	r0, #23
    3bfa:	e7f1      	b.n	3be0 <i2s_clock_unit_set_config+0x18>
		(config->clock.mck_out_invert ? I2S_CLKCTRL_MCKOUTINV : 0) |
    3bfc:	7962      	ldrb	r2, [r4, #5]
    3bfe:	2a00      	cmp	r2, #0
    3c00:	d036      	beq.n	3c70 <i2s_clock_unit_set_config+0xa8>
    3c02:	2080      	movs	r0, #128	; 0x80
    3c04:	0600      	lsls	r0, r0, #24
		(config->clock.sck_out_invert ? I2S_CLKCTRL_SCKOUTINV : 0) |
    3c06:	79a2      	ldrb	r2, [r4, #6]
    3c08:	2a00      	cmp	r2, #0
    3c0a:	d033      	beq.n	3c74 <i2s_clock_unit_set_config+0xac>
    3c0c:	2280      	movs	r2, #128	; 0x80
    3c0e:	05d2      	lsls	r2, r2, #23
		(config->clock.mck_out_invert ? I2S_CLKCTRL_MCKOUTINV : 0) |
    3c10:	4310      	orrs	r0, r2
		(config->frame.frame_sync.invert_out ? I2S_CLKCTRL_FSOUTINV : 0) |
    3c12:	7ba2      	ldrb	r2, [r4, #14]
    3c14:	2a00      	cmp	r2, #0
    3c16:	d02f      	beq.n	3c78 <i2s_clock_unit_set_config+0xb0>
    3c18:	2280      	movs	r2, #128	; 0x80
    3c1a:	0592      	lsls	r2, r2, #22
		(config->clock.sck_out_invert ? I2S_CLKCTRL_SCKOUTINV : 0) |
    3c1c:	4310      	orrs	r0, r2
		(config->clock.mck_out_enable ? I2S_CLKCTRL_MCKEN : 0) |
    3c1e:	79e2      	ldrb	r2, [r4, #7]
    3c20:	2a00      	cmp	r2, #0
    3c22:	d02b      	beq.n	3c7c <i2s_clock_unit_set_config+0xb4>
    3c24:	2280      	movs	r2, #128	; 0x80
    3c26:	02d2      	lsls	r2, r2, #11
		(config->frame.frame_sync.invert_out ? I2S_CLKCTRL_FSOUTINV : 0) |
    3c28:	4302      	orrs	r2, r0
		(config->clock.mck_src ? I2S_CLKCTRL_MCKSEL : 0) |
    3c2a:	2e00      	cmp	r6, #0
    3c2c:	d028      	beq.n	3c80 <i2s_clock_unit_set_config+0xb8>
    3c2e:	2080      	movs	r0, #128	; 0x80
    3c30:	0240      	lsls	r0, r0, #9
		(config->clock.mck_out_enable ? I2S_CLKCTRL_MCKEN : 0) |
    3c32:	4302      	orrs	r2, r0
		(config->clock.sck_src ? I2S_CLKCTRL_SCKSEL : 0) |
    3c34:	7920      	ldrb	r0, [r4, #4]
    3c36:	2800      	cmp	r0, #0
    3c38:	d024      	beq.n	3c84 <i2s_clock_unit_set_config+0xbc>
    3c3a:	2080      	movs	r0, #128	; 0x80
    3c3c:	0140      	lsls	r0, r0, #5
		(config->clock.mck_src ? I2S_CLKCTRL_MCKSEL : 0) |
    3c3e:	4310      	orrs	r0, r2
		(config->frame.frame_sync.invert_use ? I2S_CLKCTRL_FSINV : 0) |
    3c40:	7b62      	ldrb	r2, [r4, #13]
    3c42:	2a00      	cmp	r2, #0
    3c44:	d020      	beq.n	3c88 <i2s_clock_unit_set_config+0xc0>
    3c46:	2280      	movs	r2, #128	; 0x80
    3c48:	0112      	lsls	r2, r2, #4
		(config->clock.sck_src ? I2S_CLKCTRL_SCKSEL : 0) |
    3c4a:	4310      	orrs	r0, r2
		(config->frame.frame_sync.source ? I2S_CLKCTRL_FSSEL : 0) |
    3c4c:	7ae2      	ldrb	r2, [r4, #11]
    3c4e:	2a00      	cmp	r2, #0
    3c50:	d01c      	beq.n	3c8c <i2s_clock_unit_set_config+0xc4>
    3c52:	2280      	movs	r2, #128	; 0x80
    3c54:	0052      	lsls	r2, r2, #1
		(config->frame.frame_sync.invert_use ? I2S_CLKCTRL_FSINV : 0) |
    3c56:	4302      	orrs	r2, r0
		(config->frame.data_delay ? I2S_CLKCTRL_BITDELAY : 0);
    3c58:	7aa0      	ldrb	r0, [r4, #10]
    3c5a:	2800      	cmp	r0, #0
    3c5c:	d000      	beq.n	3c60 <i2s_clock_unit_set_config+0x98>
    3c5e:	2380      	movs	r3, #128	; 0x80
	uint32_t clkctrl =
    3c60:	4313      	orrs	r3, r2
	uint8_t div_val = config->clock.mck_out_div;
    3c62:	7822      	ldrb	r2, [r4, #0]
	if ((div_val > 0x21) || (div_val == 0)) {
    3c64:	3a01      	subs	r2, #1
    3c66:	b2d2      	uxtb	r2, r2
    3c68:	2a20      	cmp	r2, #32
    3c6a:	d911      	bls.n	3c90 <i2s_clock_unit_set_config+0xc8>
		return STATUS_ERR_INVALID_ARG;
    3c6c:	2017      	movs	r0, #23
    3c6e:	e7b7      	b.n	3be0 <i2s_clock_unit_set_config+0x18>
		(config->clock.mck_out_invert ? I2S_CLKCTRL_MCKOUTINV : 0) |
    3c70:	0018      	movs	r0, r3
    3c72:	e7c8      	b.n	3c06 <i2s_clock_unit_set_config+0x3e>
		(config->clock.sck_out_invert ? I2S_CLKCTRL_SCKOUTINV : 0) |
    3c74:	001a      	movs	r2, r3
    3c76:	e7cb      	b.n	3c10 <i2s_clock_unit_set_config+0x48>
		(config->frame.frame_sync.invert_out ? I2S_CLKCTRL_FSOUTINV : 0) |
    3c78:	001a      	movs	r2, r3
    3c7a:	e7cf      	b.n	3c1c <i2s_clock_unit_set_config+0x54>
		(config->clock.mck_out_enable ? I2S_CLKCTRL_MCKEN : 0) |
    3c7c:	001a      	movs	r2, r3
    3c7e:	e7d3      	b.n	3c28 <i2s_clock_unit_set_config+0x60>
		(config->clock.mck_src ? I2S_CLKCTRL_MCKSEL : 0) |
    3c80:	0018      	movs	r0, r3
    3c82:	e7d6      	b.n	3c32 <i2s_clock_unit_set_config+0x6a>
		(config->clock.sck_src ? I2S_CLKCTRL_SCKSEL : 0) |
    3c84:	0018      	movs	r0, r3
    3c86:	e7da      	b.n	3c3e <i2s_clock_unit_set_config+0x76>
		(config->frame.frame_sync.invert_use ? I2S_CLKCTRL_FSINV : 0) |
    3c88:	001a      	movs	r2, r3
    3c8a:	e7de      	b.n	3c4a <i2s_clock_unit_set_config+0x82>
		(config->frame.frame_sync.source ? I2S_CLKCTRL_FSSEL : 0) |
    3c8c:	001a      	movs	r2, r3
    3c8e:	e7e2      	b.n	3c56 <i2s_clock_unit_set_config+0x8e>
	clkctrl |= I2S_CLKCTRL_MCKOUTDIV(div_val);
    3c90:	0612      	lsls	r2, r2, #24
    3c92:	20f8      	movs	r0, #248	; 0xf8
    3c94:	0540      	lsls	r0, r0, #21
    3c96:	4002      	ands	r2, r0
    3c98:	4313      	orrs	r3, r2
	div_val = config->clock.sck_div;
    3c9a:	7862      	ldrb	r2, [r4, #1]
	if ((div_val > 0x21) || (div_val == 0)) {
    3c9c:	3a01      	subs	r2, #1
    3c9e:	b2d2      	uxtb	r2, r2
    3ca0:	2a20      	cmp	r2, #32
    3ca2:	d901      	bls.n	3ca8 <i2s_clock_unit_set_config+0xe0>
		return STATUS_ERR_INVALID_ARG;
    3ca4:	2017      	movs	r0, #23
    3ca6:	e79b      	b.n	3be0 <i2s_clock_unit_set_config+0x18>
	clkctrl |= I2S_CLKCTRL_MCKDIV(div_val);
    3ca8:	04d2      	lsls	r2, r2, #19
    3caa:	20f8      	movs	r0, #248	; 0xf8
    3cac:	0400      	lsls	r0, r0, #16
    3cae:	4002      	ands	r2, r0
    3cb0:	4313      	orrs	r3, r2
	uint8_t number_slots = config->frame.number_slots;
    3cb2:	7a22      	ldrb	r2, [r4, #8]
	if (number_slots > 8) {
    3cb4:	2a08      	cmp	r2, #8
    3cb6:	d901      	bls.n	3cbc <i2s_clock_unit_set_config+0xf4>
		return STATUS_ERR_INVALID_ARG;
    3cb8:	2017      	movs	r0, #23
    3cba:	e791      	b.n	3be0 <i2s_clock_unit_set_config+0x18>
	} else if (number_slots > 0) {
    3cbc:	2a00      	cmp	r2, #0
    3cbe:	d001      	beq.n	3cc4 <i2s_clock_unit_set_config+0xfc>
		number_slots --;
    3cc0:	3a01      	subs	r2, #1
    3cc2:	b2d2      	uxtb	r2, r2
			I2S_CLKCTRL_NBSLOTS(number_slots) |
    3cc4:	0092      	lsls	r2, r2, #2
    3cc6:	201c      	movs	r0, #28
    3cc8:	4002      	ands	r2, r0
			I2S_CLKCTRL_FSWIDTH(config->frame.frame_sync.width) |
    3cca:	7b26      	ldrb	r6, [r4, #12]
    3ccc:	0176      	lsls	r6, r6, #5
    3cce:	3044      	adds	r0, #68	; 0x44
    3cd0:	4030      	ands	r0, r6
			I2S_CLKCTRL_NBSLOTS(number_slots) |
    3cd2:	4302      	orrs	r2, r0
			I2S_CLKCTRL_SLOTSIZE(config->frame.slot_size);
    3cd4:	7a66      	ldrb	r6, [r4, #9]
    3cd6:	2003      	movs	r0, #3
    3cd8:	4030      	ands	r0, r6
			I2S_CLKCTRL_FSWIDTH(config->frame.frame_sync.width) |
    3cda:	4302      	orrs	r2, r0
	clkctrl |=
    3cdc:	431a      	orrs	r2, r3
	module_inst->hw->CLKCTRL[clock_unit].reg = clkctrl;
    3cde:	008b      	lsls	r3, r1, #2
    3ce0:	18eb      	adds	r3, r5, r3
    3ce2:	605a      	str	r2, [r3, #4]
	const uint8_t i2s_gclk_ids[2] = {I2S_GCLK_ID_0, I2S_GCLK_ID_1};
    3ce4:	aa03      	add	r2, sp, #12
    3ce6:	4b1a      	ldr	r3, [pc, #104]	; (3d50 <i2s_clock_unit_set_config+0x188>)
    3ce8:	881b      	ldrh	r3, [r3, #0]
    3cea:	8013      	strh	r3, [r2, #0]
	gclk_chan_config.source_generator = config->clock.gclk_src;
    3cec:	78a0      	ldrb	r0, [r4, #2]
    3cee:	ab02      	add	r3, sp, #8
    3cf0:	7018      	strb	r0, [r3, #0]
	system_gclk_chan_set_config(i2s_gclk_ids[clock_unit], &gclk_chan_config);
    3cf2:	5c55      	ldrb	r5, [r2, r1]
    3cf4:	0019      	movs	r1, r3
    3cf6:	0028      	movs	r0, r5
    3cf8:	4b16      	ldr	r3, [pc, #88]	; (3d54 <i2s_clock_unit_set_config+0x18c>)
    3cfa:	4798      	blx	r3
	system_gclk_chan_enable(i2s_gclk_ids[clock_unit]);
    3cfc:	0028      	movs	r0, r5
    3cfe:	4b16      	ldr	r3, [pc, #88]	; (3d58 <i2s_clock_unit_set_config+0x190>)
    3d00:	4798      	blx	r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3d02:	ab01      	add	r3, sp, #4
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3d04:	2200      	movs	r2, #0
    3d06:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3d08:	2101      	movs	r1, #1
    3d0a:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    3d0c:	70da      	strb	r2, [r3, #3]
	if (config->mck_pin.enable) {
    3d0e:	7c63      	ldrb	r3, [r4, #17]
    3d10:	2b00      	cmp	r3, #0
    3d12:	d107      	bne.n	3d24 <i2s_clock_unit_set_config+0x15c>
	if (config->sck_pin.enable) {
    3d14:	7d23      	ldrb	r3, [r4, #20]
    3d16:	2b00      	cmp	r3, #0
    3d18:	d10b      	bne.n	3d32 <i2s_clock_unit_set_config+0x16a>
	if (config->fs_pin.enable) {
    3d1a:	7de3      	ldrb	r3, [r4, #23]
    3d1c:	2b00      	cmp	r3, #0
    3d1e:	d10f      	bne.n	3d40 <i2s_clock_unit_set_config+0x178>
	return STATUS_OK;
    3d20:	2000      	movs	r0, #0
    3d22:	e75d      	b.n	3be0 <i2s_clock_unit_set_config+0x18>
		pin_config.mux_position = config->mck_pin.mux;
    3d24:	7c23      	ldrb	r3, [r4, #16]
    3d26:	a901      	add	r1, sp, #4
    3d28:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(config->mck_pin.gpio, &pin_config);
    3d2a:	7be0      	ldrb	r0, [r4, #15]
    3d2c:	4b0b      	ldr	r3, [pc, #44]	; (3d5c <i2s_clock_unit_set_config+0x194>)
    3d2e:	4798      	blx	r3
    3d30:	e7f0      	b.n	3d14 <i2s_clock_unit_set_config+0x14c>
		pin_config.mux_position = config->sck_pin.mux;
    3d32:	7ce3      	ldrb	r3, [r4, #19]
    3d34:	a901      	add	r1, sp, #4
    3d36:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(config->sck_pin.gpio, &pin_config);
    3d38:	7ca0      	ldrb	r0, [r4, #18]
    3d3a:	4b08      	ldr	r3, [pc, #32]	; (3d5c <i2s_clock_unit_set_config+0x194>)
    3d3c:	4798      	blx	r3
    3d3e:	e7ec      	b.n	3d1a <i2s_clock_unit_set_config+0x152>
		pin_config.mux_position = config->fs_pin.mux;
    3d40:	7da3      	ldrb	r3, [r4, #22]
    3d42:	a901      	add	r1, sp, #4
    3d44:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(config->fs_pin.gpio, &pin_config);
    3d46:	7d60      	ldrb	r0, [r4, #21]
    3d48:	4b04      	ldr	r3, [pc, #16]	; (3d5c <i2s_clock_unit_set_config+0x194>)
    3d4a:	4798      	blx	r3
	return STATUS_OK;
    3d4c:	2000      	movs	r0, #0
    3d4e:	e747      	b.n	3be0 <i2s_clock_unit_set_config+0x18>
    3d50:	0000ca40 	.word	0x0000ca40
    3d54:	00008fa1 	.word	0x00008fa1
    3d58:	00008f19 	.word	0x00008f19
    3d5c:	00009085 	.word	0x00009085

00003d60 <i2s_serializer_set_config>:
 */
enum status_code i2s_serializer_set_config(
		struct i2s_module *const module_inst,
		const enum i2s_serializer serializer,
		const struct i2s_serializer_config *config)
{
    3d60:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d62:	b083      	sub	sp, #12
    3d64:	0006      	movs	r6, r0
    3d66:	000d      	movs	r5, r1
    3d68:	0014      	movs	r4, r2
	Assert(serializer < I2S_SERIALIZER_N);
	Assert(config);

	/* Status check */
	uint32_t ctrla, syncbusy;
	syncbusy = module_inst->hw->SYNCBUSY.reg;
    3d6a:	6801      	ldr	r1, [r0, #0]
    3d6c:	8b08      	ldrh	r0, [r1, #24]
	ctrla = module_inst->hw->CTRLA.reg;
    3d6e:	780a      	ldrb	r2, [r1, #0]
    3d70:	b2d2      	uxtb	r2, r2

	/* Busy ? */
	if (syncbusy & ((I2S_SYNCBUSY_SEREN0 | I2S_SYNCBUSY_DATA0) << serializer)) {
    3d72:	2388      	movs	r3, #136	; 0x88
    3d74:	005b      	lsls	r3, r3, #1
    3d76:	40ab      	lsls	r3, r5
    3d78:	4218      	tst	r0, r3
    3d7a:	d002      	beq.n	3d82 <i2s_serializer_set_config+0x22>
		return STATUS_BUSY;
    3d7c:	2005      	movs	r0, #5
	/* Save configure */
	module_inst->serializer[serializer].mode = config->mode;
	module_inst->serializer[serializer].data_size = config->data_size;

	return STATUS_OK;
}
    3d7e:	b003      	add	sp, #12
    3d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ctrla & (I2S_CTRLA_CKEN0 << serializer)) {
    3d82:	2304      	movs	r3, #4
    3d84:	40ab      	lsls	r3, r5
    3d86:	4013      	ands	r3, r2
    3d88:	d001      	beq.n	3d8e <i2s_serializer_set_config+0x2e>
		return STATUS_ERR_DENIED;
    3d8a:	201c      	movs	r0, #28
    3d8c:	e7f7      	b.n	3d7e <i2s_serializer_set_config+0x1e>
			(config->loop_back ? I2S_SERCTRL_RXLOOP : 0) |
    3d8e:	78e2      	ldrb	r2, [r4, #3]
    3d90:	2a00      	cmp	r2, #0
    3d92:	d058      	beq.n	3e46 <i2s_serializer_set_config+0xe6>
    3d94:	2280      	movs	r2, #128	; 0x80
    3d96:	04d2      	lsls	r2, r2, #19
			(config->dma_usage ? I2S_SERCTRL_DMA : 0) |
    3d98:	7ce0      	ldrb	r0, [r4, #19]
    3d9a:	2800      	cmp	r0, #0
    3d9c:	d055      	beq.n	3e4a <i2s_serializer_set_config+0xea>
    3d9e:	2080      	movs	r0, #128	; 0x80
    3da0:	0480      	lsls	r0, r0, #18
			(config->loop_back ? I2S_SERCTRL_RXLOOP : 0) |
    3da2:	4302      	orrs	r2, r0
			(config->mono_mode ? I2S_SERCTRL_MONO : 0) |
    3da4:	7920      	ldrb	r0, [r4, #4]
    3da6:	2800      	cmp	r0, #0
    3da8:	d051      	beq.n	3e4e <i2s_serializer_set_config+0xee>
    3daa:	2080      	movs	r0, #128	; 0x80
    3dac:	0440      	lsls	r0, r0, #17
			(config->dma_usage ? I2S_SERCTRL_DMA : 0) |
    3dae:	4302      	orrs	r2, r0
			(config->disable_data_slot[7] ? I2S_SERCTRL_SLOTDIS7 : 0) |
    3db0:	7b20      	ldrb	r0, [r4, #12]
    3db2:	2800      	cmp	r0, #0
    3db4:	d04d      	beq.n	3e52 <i2s_serializer_set_config+0xf2>
    3db6:	2080      	movs	r0, #128	; 0x80
    3db8:	0400      	lsls	r0, r0, #16
			(config->mono_mode ? I2S_SERCTRL_MONO : 0) |
    3dba:	4310      	orrs	r0, r2
			(config->disable_data_slot[6] ? I2S_SERCTRL_SLOTDIS6 : 0) |
    3dbc:	7ae2      	ldrb	r2, [r4, #11]
    3dbe:	2a00      	cmp	r2, #0
    3dc0:	d049      	beq.n	3e56 <i2s_serializer_set_config+0xf6>
    3dc2:	2280      	movs	r2, #128	; 0x80
    3dc4:	03d2      	lsls	r2, r2, #15
			(config->disable_data_slot[7] ? I2S_SERCTRL_SLOTDIS7 : 0) |
    3dc6:	4310      	orrs	r0, r2
			(config->disable_data_slot[5] ? I2S_SERCTRL_SLOTDIS5 : 0) |
    3dc8:	7aa2      	ldrb	r2, [r4, #10]
    3dca:	2a00      	cmp	r2, #0
    3dcc:	d045      	beq.n	3e5a <i2s_serializer_set_config+0xfa>
    3dce:	2280      	movs	r2, #128	; 0x80
    3dd0:	0392      	lsls	r2, r2, #14
			(config->disable_data_slot[6] ? I2S_SERCTRL_SLOTDIS6 : 0) |
    3dd2:	4302      	orrs	r2, r0
			(config->disable_data_slot[4] ? I2S_SERCTRL_SLOTDIS4 : 0) |
    3dd4:	7a60      	ldrb	r0, [r4, #9]
    3dd6:	2800      	cmp	r0, #0
    3dd8:	d041      	beq.n	3e5e <i2s_serializer_set_config+0xfe>
    3dda:	2080      	movs	r0, #128	; 0x80
    3ddc:	0340      	lsls	r0, r0, #13
			(config->disable_data_slot[5] ? I2S_SERCTRL_SLOTDIS5 : 0) |
    3dde:	4302      	orrs	r2, r0
			(config->disable_data_slot[3] ? I2S_SERCTRL_SLOTDIS3 : 0) |
    3de0:	7a20      	ldrb	r0, [r4, #8]
    3de2:	2800      	cmp	r0, #0
    3de4:	d03d      	beq.n	3e62 <i2s_serializer_set_config+0x102>
    3de6:	2080      	movs	r0, #128	; 0x80
    3de8:	0300      	lsls	r0, r0, #12
			(config->disable_data_slot[4] ? I2S_SERCTRL_SLOTDIS4 : 0) |
    3dea:	4310      	orrs	r0, r2
			(config->disable_data_slot[2] ? I2S_SERCTRL_SLOTDIS2 : 0) |
    3dec:	79e2      	ldrb	r2, [r4, #7]
    3dee:	2a00      	cmp	r2, #0
    3df0:	d039      	beq.n	3e66 <i2s_serializer_set_config+0x106>
    3df2:	2280      	movs	r2, #128	; 0x80
    3df4:	02d2      	lsls	r2, r2, #11
			(config->disable_data_slot[3] ? I2S_SERCTRL_SLOTDIS3 : 0) |
    3df6:	4310      	orrs	r0, r2
			(config->disable_data_slot[1] ? I2S_SERCTRL_SLOTDIS1 : 0) |
    3df8:	79a2      	ldrb	r2, [r4, #6]
    3dfa:	2a00      	cmp	r2, #0
    3dfc:	d035      	beq.n	3e6a <i2s_serializer_set_config+0x10a>
    3dfe:	2280      	movs	r2, #128	; 0x80
    3e00:	0292      	lsls	r2, r2, #10
			(config->disable_data_slot[2] ? I2S_SERCTRL_SLOTDIS2 : 0) |
    3e02:	4302      	orrs	r2, r0
			(config->disable_data_slot[0] ? I2S_SERCTRL_SLOTDIS0 : 0) |
    3e04:	7960      	ldrb	r0, [r4, #5]
    3e06:	2800      	cmp	r0, #0
    3e08:	d031      	beq.n	3e6e <i2s_serializer_set_config+0x10e>
    3e0a:	2080      	movs	r0, #128	; 0x80
    3e0c:	0240      	lsls	r0, r0, #9
			(config->disable_data_slot[1] ? I2S_SERCTRL_SLOTDIS1 : 0) |
    3e0e:	4302      	orrs	r2, r0
			(config->transfer_lsb_first ? I2S_SERCTRL_BITREV : 0) |
    3e10:	7b60      	ldrb	r0, [r4, #13]
    3e12:	2800      	cmp	r0, #0
    3e14:	d02d      	beq.n	3e72 <i2s_serializer_set_config+0x112>
    3e16:	2080      	movs	r0, #128	; 0x80
    3e18:	0200      	lsls	r0, r0, #8
			(config->disable_data_slot[0] ? I2S_SERCTRL_SLOTDIS0 : 0) |
    3e1a:	4310      	orrs	r0, r2
			(config->data_adjust_left_in_word ? I2S_SERCTRL_WORDADJ : 0) |
    3e1c:	7ba2      	ldrb	r2, [r4, #14]
    3e1e:	2a00      	cmp	r2, #0
    3e20:	d029      	beq.n	3e76 <i2s_serializer_set_config+0x116>
    3e22:	2280      	movs	r2, #128	; 0x80
    3e24:	0152      	lsls	r2, r2, #5
			(config->transfer_lsb_first ? I2S_SERCTRL_BITREV : 0) |
    3e26:	4310      	orrs	r0, r2
			(config->data_adjust_left_in_slot ? I2S_SERCTRL_SLOTADJ : 0) |
    3e28:	7be2      	ldrb	r2, [r4, #15]
    3e2a:	2a00      	cmp	r2, #0
    3e2c:	d025      	beq.n	3e7a <i2s_serializer_set_config+0x11a>
    3e2e:	2280      	movs	r2, #128	; 0x80
			(config->data_adjust_left_in_word ? I2S_SERCTRL_WORDADJ : 0) |
    3e30:	4302      	orrs	r2, r0
			(config->data_padding ? I2S_SERCTRL_TXSAME : 0);
    3e32:	7ca0      	ldrb	r0, [r4, #18]
    3e34:	2800      	cmp	r0, #0
    3e36:	d022      	beq.n	3e7e <i2s_serializer_set_config+0x11e>
    3e38:	2010      	movs	r0, #16
	uint32_t serctrl =
    3e3a:	4302      	orrs	r2, r0
	if (config->clock_unit < I2S_CLOCK_UNIT_N) {
    3e3c:	7d20      	ldrb	r0, [r4, #20]
    3e3e:	2801      	cmp	r0, #1
    3e40:	d91f      	bls.n	3e82 <i2s_serializer_set_config+0x122>
		return STATUS_ERR_INVALID_ARG;
    3e42:	2017      	movs	r0, #23
    3e44:	e79b      	b.n	3d7e <i2s_serializer_set_config+0x1e>
			(config->loop_back ? I2S_SERCTRL_RXLOOP : 0) |
    3e46:	001a      	movs	r2, r3
    3e48:	e7a6      	b.n	3d98 <i2s_serializer_set_config+0x38>
			(config->dma_usage ? I2S_SERCTRL_DMA : 0) |
    3e4a:	0018      	movs	r0, r3
    3e4c:	e7a9      	b.n	3da2 <i2s_serializer_set_config+0x42>
			(config->mono_mode ? I2S_SERCTRL_MONO : 0) |
    3e4e:	0018      	movs	r0, r3
    3e50:	e7ad      	b.n	3dae <i2s_serializer_set_config+0x4e>
			(config->disable_data_slot[7] ? I2S_SERCTRL_SLOTDIS7 : 0) |
    3e52:	0018      	movs	r0, r3
    3e54:	e7b1      	b.n	3dba <i2s_serializer_set_config+0x5a>
			(config->disable_data_slot[6] ? I2S_SERCTRL_SLOTDIS6 : 0) |
    3e56:	001a      	movs	r2, r3
    3e58:	e7b5      	b.n	3dc6 <i2s_serializer_set_config+0x66>
			(config->disable_data_slot[5] ? I2S_SERCTRL_SLOTDIS5 : 0) |
    3e5a:	001a      	movs	r2, r3
    3e5c:	e7b9      	b.n	3dd2 <i2s_serializer_set_config+0x72>
			(config->disable_data_slot[4] ? I2S_SERCTRL_SLOTDIS4 : 0) |
    3e5e:	0018      	movs	r0, r3
    3e60:	e7bd      	b.n	3dde <i2s_serializer_set_config+0x7e>
			(config->disable_data_slot[3] ? I2S_SERCTRL_SLOTDIS3 : 0) |
    3e62:	0018      	movs	r0, r3
    3e64:	e7c1      	b.n	3dea <i2s_serializer_set_config+0x8a>
			(config->disable_data_slot[2] ? I2S_SERCTRL_SLOTDIS2 : 0) |
    3e66:	001a      	movs	r2, r3
    3e68:	e7c5      	b.n	3df6 <i2s_serializer_set_config+0x96>
			(config->disable_data_slot[1] ? I2S_SERCTRL_SLOTDIS1 : 0) |
    3e6a:	001a      	movs	r2, r3
    3e6c:	e7c9      	b.n	3e02 <i2s_serializer_set_config+0xa2>
			(config->disable_data_slot[0] ? I2S_SERCTRL_SLOTDIS0 : 0) |
    3e6e:	0018      	movs	r0, r3
    3e70:	e7cd      	b.n	3e0e <i2s_serializer_set_config+0xae>
			(config->transfer_lsb_first ? I2S_SERCTRL_BITREV : 0) |
    3e72:	0018      	movs	r0, r3
    3e74:	e7d1      	b.n	3e1a <i2s_serializer_set_config+0xba>
			(config->data_adjust_left_in_word ? I2S_SERCTRL_WORDADJ : 0) |
    3e76:	001a      	movs	r2, r3
    3e78:	e7d5      	b.n	3e26 <i2s_serializer_set_config+0xc6>
			(config->data_adjust_left_in_slot ? I2S_SERCTRL_SLOTADJ : 0) |
    3e7a:	001a      	movs	r2, r3
    3e7c:	e7d8      	b.n	3e30 <i2s_serializer_set_config+0xd0>
			(config->data_padding ? I2S_SERCTRL_TXSAME : 0);
    3e7e:	0018      	movs	r0, r3
    3e80:	e7db      	b.n	3e3a <i2s_serializer_set_config+0xda>
		serctrl |= (config->clock_unit ? I2S_SERCTRL_CLKSEL : 0);
    3e82:	2800      	cmp	r0, #0
    3e84:	d000      	beq.n	3e88 <i2s_serializer_set_config+0x128>
    3e86:	2320      	movs	r3, #32
    3e88:	431a      	orrs	r2, r3
			I2S_SERCTRL_SERMODE(config->mode) |
    3e8a:	7da0      	ldrb	r0, [r4, #22]
    3e8c:	2303      	movs	r3, #3
    3e8e:	4003      	ands	r3, r0
			I2S_SERCTRL_TXDEFAULT(config->line_default_state) |
    3e90:	7d67      	ldrb	r7, [r4, #21]
    3e92:	00bf      	lsls	r7, r7, #2
    3e94:	200c      	movs	r0, #12
    3e96:	4038      	ands	r0, r7
			I2S_SERCTRL_SERMODE(config->mode) |
    3e98:	4303      	orrs	r3, r0
			I2S_SERCTRL_DATASIZE(config->data_size) |
    3e9a:	7c20      	ldrb	r0, [r4, #16]
    3e9c:	0200      	lsls	r0, r0, #8
    3e9e:	27e0      	movs	r7, #224	; 0xe0
    3ea0:	00ff      	lsls	r7, r7, #3
    3ea2:	4038      	ands	r0, r7
			I2S_SERCTRL_TXDEFAULT(config->line_default_state) |
    3ea4:	4303      	orrs	r3, r0
			I2S_SERCTRL_EXTEND(config->bit_padding);
    3ea6:	7c60      	ldrb	r0, [r4, #17]
    3ea8:	0340      	lsls	r0, r0, #13
    3eaa:	27c0      	movs	r7, #192	; 0xc0
    3eac:	01ff      	lsls	r7, r7, #7
    3eae:	4038      	ands	r0, r7
			I2S_SERCTRL_DATASIZE(config->data_size) |
    3eb0:	4303      	orrs	r3, r0
	serctrl |=
    3eb2:	431a      	orrs	r2, r3
	module_inst->hw->SERCTRL[serializer].reg = serctrl;
    3eb4:	002f      	movs	r7, r5
    3eb6:	3708      	adds	r7, #8
    3eb8:	00bf      	lsls	r7, r7, #2
    3eba:	507a      	str	r2, [r7, r1]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3ebc:	ab01      	add	r3, sp, #4
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3ebe:	2200      	movs	r2, #0
    3ec0:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3ec2:	2101      	movs	r1, #1
    3ec4:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    3ec6:	70da      	strb	r2, [r3, #3]
	if (config->data_pin.enable) {
    3ec8:	78a3      	ldrb	r3, [r4, #2]
    3eca:	2b00      	cmp	r3, #0
    3ecc:	d10b      	bne.n	3ee6 <i2s_serializer_set_config+0x186>
	module_inst->serializer[serializer].mode = config->mode;
    3ece:	7da0      	ldrb	r0, [r4, #22]
    3ed0:	00eb      	lsls	r3, r5, #3
    3ed2:	1b59      	subs	r1, r3, r5
    3ed4:	008a      	lsls	r2, r1, #2
    3ed6:	0011      	movs	r1, r2
    3ed8:	18b2      	adds	r2, r6, r2
    3eda:	76d0      	strb	r0, [r2, #27]
	module_inst->serializer[serializer].data_size = config->data_size;
    3edc:	7c22      	ldrb	r2, [r4, #16]
    3ede:	1876      	adds	r6, r6, r1
    3ee0:	7732      	strb	r2, [r6, #28]
	return STATUS_OK;
    3ee2:	2000      	movs	r0, #0
    3ee4:	e74b      	b.n	3d7e <i2s_serializer_set_config+0x1e>
		pin_config.mux_position = config->data_pin.mux;
    3ee6:	7863      	ldrb	r3, [r4, #1]
    3ee8:	a901      	add	r1, sp, #4
    3eea:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(config->data_pin.gpio, &pin_config);
    3eec:	7820      	ldrb	r0, [r4, #0]
    3eee:	4b01      	ldr	r3, [pc, #4]	; (3ef4 <i2s_serializer_set_config+0x194>)
    3ef0:	4798      	blx	r3
    3ef2:	e7ec      	b.n	3ece <i2s_serializer_set_config+0x16e>
    3ef4:	00009085 	.word	0x00009085

00003ef8 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3ef8:	6803      	ldr	r3, [r0, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    3efa:	7a9b      	ldrb	r3, [r3, #10]
    3efc:	b25b      	sxtb	r3, r3
    3efe:	2b00      	cmp	r3, #0
    3f00:	db01      	blt.n	3f06 <rtc_count_is_syncing+0xe>
                return true;
        }

        return false;
    3f02:	2000      	movs	r0, #0
}
    3f04:	4770      	bx	lr
                return true;
    3f06:	2001      	movs	r0, #1
    3f08:	e7fc      	b.n	3f04 <rtc_count_is_syncing+0xc>
	...

00003f0c <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    3f0c:	b570      	push	{r4, r5, r6, lr}
    3f0e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3f10:	6805      	ldr	r5, [r0, #0]
    3f12:	2208      	movs	r2, #8
    3f14:	4b06      	ldr	r3, [pc, #24]	; (3f30 <rtc_count_enable+0x24>)
    3f16:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    3f18:	0020      	movs	r0, r4
    3f1a:	4b06      	ldr	r3, [pc, #24]	; (3f34 <rtc_count_enable+0x28>)
    3f1c:	4798      	blx	r3
    3f1e:	2800      	cmp	r0, #0
    3f20:	d1fa      	bne.n	3f18 <rtc_count_enable+0xc>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    3f22:	882b      	ldrh	r3, [r5, #0]
    3f24:	2202      	movs	r2, #2
    3f26:	4313      	orrs	r3, r2
    3f28:	b29b      	uxth	r3, r3
    3f2a:	802b      	strh	r3, [r5, #0]
}
    3f2c:	bd70      	pop	{r4, r5, r6, pc}
    3f2e:	46c0      	nop			; (mov r8, r8)
    3f30:	e000e100 	.word	0xe000e100
    3f34:	00003ef9 	.word	0x00003ef9

00003f38 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    3f38:	b570      	push	{r4, r5, r6, lr}
    3f3a:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3f3c:	6805      	ldr	r5, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3f3e:	2108      	movs	r1, #8
    3f40:	2380      	movs	r3, #128	; 0x80
    3f42:	4a07      	ldr	r2, [pc, #28]	; (3f60 <rtc_count_disable+0x28>)
    3f44:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    3f46:	0020      	movs	r0, r4
    3f48:	4b06      	ldr	r3, [pc, #24]	; (3f64 <rtc_count_disable+0x2c>)
    3f4a:	4798      	blx	r3
    3f4c:	2800      	cmp	r0, #0
    3f4e:	d1fa      	bne.n	3f46 <rtc_count_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    3f50:	23c1      	movs	r3, #193	; 0xc1
    3f52:	71ab      	strb	r3, [r5, #6]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    3f54:	722b      	strb	r3, [r5, #8]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    3f56:	882b      	ldrh	r3, [r5, #0]
    3f58:	2202      	movs	r2, #2
    3f5a:	4393      	bics	r3, r2
    3f5c:	802b      	strh	r3, [r5, #0]
}
    3f5e:	bd70      	pop	{r4, r5, r6, pc}
    3f60:	e000e100 	.word	0xe000e100
    3f64:	00003ef9 	.word	0x00003ef9

00003f68 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    3f68:	b570      	push	{r4, r5, r6, lr}
    3f6a:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3f6c:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
    3f6e:	4b08      	ldr	r3, [pc, #32]	; (3f90 <rtc_count_reset+0x28>)
    3f70:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
    3f72:	2300      	movs	r3, #0
    3f74:	82a3      	strh	r3, [r4, #20]
	module->enabled_callback    = 0;
    3f76:	82e3      	strh	r3, [r4, #22]
#endif

	while (rtc_count_is_syncing(module)) {
    3f78:	0020      	movs	r0, r4
    3f7a:	4b06      	ldr	r3, [pc, #24]	; (3f94 <rtc_count_reset+0x2c>)
    3f7c:	4798      	blx	r3
    3f7e:	2800      	cmp	r0, #0
    3f80:	d1fa      	bne.n	3f78 <rtc_count_reset+0x10>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
    3f82:	882b      	ldrh	r3, [r5, #0]
    3f84:	2201      	movs	r2, #1
    3f86:	4313      	orrs	r3, r2
    3f88:	b29b      	uxth	r3, r3
    3f8a:	802b      	strh	r3, [r5, #0]
}
    3f8c:	bd70      	pop	{r4, r5, r6, pc}
    3f8e:	46c0      	nop			; (mov r8, r8)
    3f90:	00003f39 	.word	0x00003f39
    3f94:	00003ef9 	.word	0x00003ef9

00003f98 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    3f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f9a:	0004      	movs	r4, r0
    3f9c:	000e      	movs	r6, r1
    3f9e:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3fa0:	6807      	ldr	r7, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    3fa2:	0020      	movs	r0, r4
    3fa4:	4b10      	ldr	r3, [pc, #64]	; (3fe8 <rtc_count_set_compare+0x50>)
    3fa6:	4798      	blx	r3
    3fa8:	2800      	cmp	r0, #0
    3faa:	d1fa      	bne.n	3fa2 <rtc_count_set_compare+0xa>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    3fac:	7923      	ldrb	r3, [r4, #4]
    3fae:	2b00      	cmp	r3, #0
    3fb0:	d009      	beq.n	3fc6 <rtc_count_set_compare+0x2e>
    3fb2:	2b01      	cmp	r3, #1
    3fb4:	d116      	bne.n	3fe4 <rtc_count_set_compare+0x4c>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
    3fb6:	2d01      	cmp	r5, #1
    3fb8:	d901      	bls.n	3fbe <rtc_count_set_compare+0x26>
				return STATUS_ERR_INVALID_ARG;
    3fba:	2017      	movs	r0, #23
    3fbc:	e013      	b.n	3fe6 <rtc_count_set_compare+0x4e>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    3fbe:	3506      	adds	r5, #6
    3fc0:	00ad      	lsls	r5, r5, #2
    3fc2:	51ee      	str	r6, [r5, r7]

			break;
    3fc4:	e00f      	b.n	3fe6 <rtc_count_set_compare+0x4e>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    3fc6:	2d02      	cmp	r5, #2
    3fc8:	d901      	bls.n	3fce <rtc_count_set_compare+0x36>
				return STATUS_ERR_INVALID_ARG;
    3fca:	2017      	movs	r0, #23
    3fcc:	e00b      	b.n	3fe6 <rtc_count_set_compare+0x4e>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
    3fce:	4b07      	ldr	r3, [pc, #28]	; (3fec <rtc_count_set_compare+0x54>)
    3fd0:	429e      	cmp	r6, r3
    3fd2:	d901      	bls.n	3fd8 <rtc_count_set_compare+0x40>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    3fd4:	2017      	movs	r0, #23
    3fd6:	e006      	b.n	3fe6 <rtc_count_set_compare+0x4e>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    3fd8:	b2b6      	uxth	r6, r6
    3fda:	350c      	adds	r5, #12
    3fdc:	006d      	lsls	r5, r5, #1
    3fde:	53ee      	strh	r6, [r5, r7]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
    3fe0:	2000      	movs	r0, #0
			break;
    3fe2:	e000      	b.n	3fe6 <rtc_count_set_compare+0x4e>
			return STATUS_ERR_BAD_FORMAT;
    3fe4:	201a      	movs	r0, #26
}
    3fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fe8:	00003ef9 	.word	0x00003ef9
    3fec:	0000ffff 	.word	0x0000ffff

00003ff0 <_rtc_count_set_config>:
{
    3ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ff2:	0004      	movs	r4, r0
    3ff4:	000e      	movs	r6, r1
	Rtc *const rtc_module = module->hw;
    3ff6:	6807      	ldr	r7, [r0, #0]
	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
    3ff8:	880b      	ldrh	r3, [r1, #0]
    3ffa:	803b      	strh	r3, [r7, #0]
	switch (config->mode) {
    3ffc:	788b      	ldrb	r3, [r1, #2]
    3ffe:	2b00      	cmp	r3, #0
    4000:	d028      	beq.n	4054 <_rtc_count_set_config+0x64>
    4002:	2b01      	cmp	r3, #1
    4004:	d143      	bne.n	408e <_rtc_count_set_config+0x9e>
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
    4006:	883b      	ldrh	r3, [r7, #0]
    4008:	b29b      	uxth	r3, r3
    400a:	803b      	strh	r3, [r7, #0]
			if (config->clear_on_match) {
    400c:	78cb      	ldrb	r3, [r1, #3]
    400e:	2b00      	cmp	r3, #0
    4010:	d004      	beq.n	401c <_rtc_count_set_config+0x2c>
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
    4012:	883b      	ldrh	r3, [r7, #0]
    4014:	2280      	movs	r2, #128	; 0x80
    4016:	4313      	orrs	r3, r2
    4018:	b29b      	uxth	r3, r3
    401a:	803b      	strh	r3, [r7, #0]
{
    401c:	2500      	movs	r5, #0
    401e:	e00d      	b.n	403c <_rtc_count_set_config+0x4c>
				while (rtc_count_is_syncing(module)) {
    4020:	0020      	movs	r0, r4
    4022:	4b1d      	ldr	r3, [pc, #116]	; (4098 <_rtc_count_set_config+0xa8>)
    4024:	4798      	blx	r3
    4026:	2800      	cmp	r0, #0
    4028:	d1fa      	bne.n	4020 <_rtc_count_set_config+0x30>
				rtc_count_set_compare(module, config->compare_values[i],
    402a:	1cab      	adds	r3, r5, #2
    402c:	009b      	lsls	r3, r3, #2
    402e:	5999      	ldr	r1, [r3, r6]
    4030:	002a      	movs	r2, r5
    4032:	0020      	movs	r0, r4
    4034:	4b19      	ldr	r3, [pc, #100]	; (409c <_rtc_count_set_config+0xac>)
    4036:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
    4038:	3501      	adds	r5, #1
    403a:	b2ed      	uxtb	r5, r5
    403c:	2d00      	cmp	r5, #0
    403e:	d0ef      	beq.n	4020 <_rtc_count_set_config+0x30>
	if (config->continuously_update) {
    4040:	7933      	ldrb	r3, [r6, #4]
    4042:	2b00      	cmp	r3, #0
    4044:	d025      	beq.n	4092 <_rtc_count_set_config+0xa2>
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    4046:	887b      	ldrh	r3, [r7, #2]
    4048:	2280      	movs	r2, #128	; 0x80
    404a:	01d2      	lsls	r2, r2, #7
    404c:	4313      	orrs	r3, r2
    404e:	807b      	strh	r3, [r7, #2]
	return STATUS_OK;
    4050:	2000      	movs	r0, #0
    4052:	e01d      	b.n	4090 <_rtc_count_set_config+0xa0>
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
    4054:	883b      	ldrh	r3, [r7, #0]
    4056:	2204      	movs	r2, #4
    4058:	4313      	orrs	r3, r2
    405a:	b29b      	uxth	r3, r3
    405c:	803b      	strh	r3, [r7, #0]
			if (config->clear_on_match) {
    405e:	78cb      	ldrb	r3, [r1, #3]
    4060:	2b00      	cmp	r3, #0
    4062:	d001      	beq.n	4068 <_rtc_count_set_config+0x78>
				return STATUS_ERR_INVALID_ARG;
    4064:	2017      	movs	r0, #23
    4066:	e013      	b.n	4090 <_rtc_count_set_config+0xa0>
    4068:	2500      	movs	r5, #0
    406a:	e00d      	b.n	4088 <_rtc_count_set_config+0x98>
				while (rtc_count_is_syncing(module)) {
    406c:	0020      	movs	r0, r4
    406e:	4b0a      	ldr	r3, [pc, #40]	; (4098 <_rtc_count_set_config+0xa8>)
    4070:	4798      	blx	r3
    4072:	2800      	cmp	r0, #0
    4074:	d1fa      	bne.n	406c <_rtc_count_set_config+0x7c>
				rtc_count_set_compare(module, config->compare_values[i],
    4076:	1cab      	adds	r3, r5, #2
    4078:	009b      	lsls	r3, r3, #2
    407a:	5999      	ldr	r1, [r3, r6]
    407c:	002a      	movs	r2, r5
    407e:	0020      	movs	r0, r4
    4080:	4b06      	ldr	r3, [pc, #24]	; (409c <_rtc_count_set_config+0xac>)
    4082:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    4084:	3501      	adds	r5, #1
    4086:	b2ed      	uxtb	r5, r5
    4088:	2d01      	cmp	r5, #1
    408a:	d9ef      	bls.n	406c <_rtc_count_set_config+0x7c>
    408c:	e7d8      	b.n	4040 <_rtc_count_set_config+0x50>
			return STATUS_ERR_INVALID_ARG;
    408e:	2017      	movs	r0, #23
}
    4090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return STATUS_OK;
    4092:	2000      	movs	r0, #0
    4094:	e7fc      	b.n	4090 <_rtc_count_set_config+0xa0>
    4096:	46c0      	nop			; (mov r8, r8)
    4098:	00003ef9 	.word	0x00003ef9
    409c:	00003f99 	.word	0x00003f99

000040a0 <rtc_count_init>:
{
    40a0:	b530      	push	{r4, r5, lr}
    40a2:	b083      	sub	sp, #12
    40a4:	0004      	movs	r4, r0
    40a6:	0015      	movs	r5, r2
	module->hw = hw;
    40a8:	6001      	str	r1, [r0, #0]
			PM->APBAMASK.reg |= mask;
    40aa:	4a0e      	ldr	r2, [pc, #56]	; (40e4 <rtc_count_init+0x44>)
    40ac:	6993      	ldr	r3, [r2, #24]
    40ae:	2120      	movs	r1, #32
    40b0:	430b      	orrs	r3, r1
    40b2:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    40b4:	a901      	add	r1, sp, #4
    40b6:	2302      	movs	r3, #2
    40b8:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    40ba:	2004      	movs	r0, #4
    40bc:	4b0a      	ldr	r3, [pc, #40]	; (40e8 <rtc_count_init+0x48>)
    40be:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    40c0:	2004      	movs	r0, #4
    40c2:	4b0a      	ldr	r3, [pc, #40]	; (40ec <rtc_count_init+0x4c>)
    40c4:	4798      	blx	r3
	rtc_count_reset(module);
    40c6:	0020      	movs	r0, r4
    40c8:	4b09      	ldr	r3, [pc, #36]	; (40f0 <rtc_count_init+0x50>)
    40ca:	4798      	blx	r3
	module->mode                = config->mode;
    40cc:	78ab      	ldrb	r3, [r5, #2]
    40ce:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
    40d0:	792b      	ldrb	r3, [r5, #4]
    40d2:	7163      	strb	r3, [r4, #5]
	_rtc_instance[0] = module;
    40d4:	4b07      	ldr	r3, [pc, #28]	; (40f4 <rtc_count_init+0x54>)
    40d6:	601c      	str	r4, [r3, #0]
	return _rtc_count_set_config(module, config);
    40d8:	0029      	movs	r1, r5
    40da:	0020      	movs	r0, r4
    40dc:	4b06      	ldr	r3, [pc, #24]	; (40f8 <rtc_count_init+0x58>)
    40de:	4798      	blx	r3
}
    40e0:	b003      	add	sp, #12
    40e2:	bd30      	pop	{r4, r5, pc}
    40e4:	40000400 	.word	0x40000400
    40e8:	00008fa1 	.word	0x00008fa1
    40ec:	00008f19 	.word	0x00008f19
    40f0:	00003f69 	.word	0x00003f69
    40f4:	20002620 	.word	0x20002620
    40f8:	00003ff1 	.word	0x00003ff1

000040fc <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
    40fc:	b570      	push	{r4, r5, r6, lr}
    40fe:	0004      	movs	r4, r0
    4100:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4102:	6806      	ldr	r6, [r0, #0]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
    4104:	7903      	ldrb	r3, [r0, #4]
    4106:	2b00      	cmp	r3, #0
    4108:	d001      	beq.n	410e <rtc_count_set_period+0x12>
		return STATUS_ERR_UNSUPPORTED_DEV;
    410a:	2015      	movs	r0, #21

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;

	return STATUS_OK;
}
    410c:	bd70      	pop	{r4, r5, r6, pc}
	while (rtc_count_is_syncing(module)) {
    410e:	0020      	movs	r0, r4
    4110:	4b02      	ldr	r3, [pc, #8]	; (411c <rtc_count_set_period+0x20>)
    4112:	4798      	blx	r3
    4114:	2800      	cmp	r0, #0
    4116:	d1fa      	bne.n	410e <rtc_count_set_period+0x12>
	rtc_module->MODE1.PER.reg = period_value;
    4118:	82b5      	strh	r5, [r6, #20]
	return STATUS_OK;
    411a:	e7f7      	b.n	410c <rtc_count_set_period+0x10>
    411c:	00003ef9 	.word	0x00003ef9

00004120 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    4120:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    4122:	0080      	lsls	r0, r0, #2
    4124:	4b13      	ldr	r3, [pc, #76]	; (4174 <_rtc_interrupt_handler+0x54>)
    4126:	58c2      	ldr	r2, [r0, r3]

	Rtc *const rtc_module = module->hw;
    4128:	6814      	ldr	r4, [r2, #0]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    412a:	8ad1      	ldrh	r1, [r2, #22]
	callback_mask &= module->registered_callback;
    412c:	8a93      	ldrh	r3, [r2, #20]
    412e:	4019      	ands	r1, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    4130:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    4132:	79e3      	ldrb	r3, [r4, #7]
    4134:	4003      	ands	r3, r0

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    4136:	b258      	sxtb	r0, r3
    4138:	2800      	cmp	r0, #0
    413a:	db06      	blt.n	414a <_rtc_interrupt_handler+0x2a>
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    413c:	07d8      	lsls	r0, r3, #31
    413e:	d50f      	bpl.n	4160 <_rtc_interrupt_handler+0x40>
		/* Compare 0 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    4140:	07cb      	lsls	r3, r1, #31
    4142:	d40a      	bmi.n	415a <_rtc_interrupt_handler+0x3a>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    4144:	2301      	movs	r3, #1
    4146:	7223      	strb	r3, [r4, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
    4148:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    414a:	074b      	lsls	r3, r1, #29
    414c:	d402      	bmi.n	4154 <_rtc_interrupt_handler+0x34>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    414e:	2380      	movs	r3, #128	; 0x80
    4150:	7223      	strb	r3, [r4, #8]
    4152:	e7f9      	b.n	4148 <_rtc_interrupt_handler+0x28>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    4154:	6913      	ldr	r3, [r2, #16]
    4156:	4798      	blx	r3
    4158:	e7f9      	b.n	414e <_rtc_interrupt_handler+0x2e>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    415a:	6893      	ldr	r3, [r2, #8]
    415c:	4798      	blx	r3
    415e:	e7f1      	b.n	4144 <_rtc_interrupt_handler+0x24>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    4160:	079b      	lsls	r3, r3, #30
    4162:	d5f1      	bpl.n	4148 <_rtc_interrupt_handler+0x28>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    4164:	078b      	lsls	r3, r1, #30
    4166:	d402      	bmi.n	416e <_rtc_interrupt_handler+0x4e>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    4168:	2302      	movs	r3, #2
    416a:	7223      	strb	r3, [r4, #8]
}
    416c:	e7ec      	b.n	4148 <_rtc_interrupt_handler+0x28>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    416e:	68d3      	ldr	r3, [r2, #12]
    4170:	4798      	blx	r3
    4172:	e7f9      	b.n	4168 <_rtc_interrupt_handler+0x48>
    4174:	20002620 	.word	0x20002620

00004178 <rtc_count_register_callback>:
{
    4178:	b510      	push	{r4, lr}
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    417a:	2a02      	cmp	r2, #2
    417c:	d010      	beq.n	41a0 <rtc_count_register_callback+0x28>
		switch (module->mode) {
    417e:	7903      	ldrb	r3, [r0, #4]
    4180:	2b00      	cmp	r3, #0
    4182:	d007      	beq.n	4194 <rtc_count_register_callback+0x1c>
    4184:	2b01      	cmp	r3, #1
    4186:	d119      	bne.n	41bc <rtc_count_register_callback+0x44>
			if (callback_type > RTC_NUM_OF_COMP32) {
    4188:	2a01      	cmp	r2, #1
    418a:	d901      	bls.n	4190 <rtc_count_register_callback+0x18>
				status = STATUS_ERR_INVALID_ARG;
    418c:	2417      	movs	r4, #23
    418e:	e008      	b.n	41a2 <rtc_count_register_callback+0x2a>
	enum status_code status = STATUS_OK;
    4190:	2400      	movs	r4, #0
    4192:	e006      	b.n	41a2 <rtc_count_register_callback+0x2a>
			if (callback_type > RTC_NUM_OF_COMP16) {
    4194:	2a02      	cmp	r2, #2
    4196:	d901      	bls.n	419c <rtc_count_register_callback+0x24>
				status = STATUS_ERR_INVALID_ARG;
    4198:	2417      	movs	r4, #23
    419a:	e002      	b.n	41a2 <rtc_count_register_callback+0x2a>
	enum status_code status = STATUS_OK;
    419c:	2400      	movs	r4, #0
    419e:	e000      	b.n	41a2 <rtc_count_register_callback+0x2a>
		status = STATUS_OK;
    41a0:	2400      	movs	r4, #0
	if (status == STATUS_OK) {
    41a2:	2c00      	cmp	r4, #0
    41a4:	d108      	bne.n	41b8 <rtc_count_register_callback+0x40>
		module->callbacks[callback_type] = callback;
    41a6:	1c93      	adds	r3, r2, #2
    41a8:	009b      	lsls	r3, r3, #2
    41aa:	5019      	str	r1, [r3, r0]
		module->registered_callback |= (1 << callback_type);
    41ac:	8a83      	ldrh	r3, [r0, #20]
    41ae:	2101      	movs	r1, #1
    41b0:	4091      	lsls	r1, r2
    41b2:	430b      	orrs	r3, r1
    41b4:	b29b      	uxth	r3, r3
    41b6:	8283      	strh	r3, [r0, #20]
}
    41b8:	0020      	movs	r0, r4
    41ba:	bd10      	pop	{r4, pc}
			status = STATUS_ERR_INVALID_ARG;
    41bc:	2417      	movs	r4, #23
    41be:	e7f0      	b.n	41a2 <rtc_count_register_callback+0x2a>

000041c0 <rtc_count_enable_callback>:
{
    41c0:	b510      	push	{r4, lr}
	Rtc *const rtc_module = module->hw;
    41c2:	6804      	ldr	r4, [r0, #0]
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    41c4:	2902      	cmp	r1, #2
    41c6:	d00b      	beq.n	41e0 <rtc_count_enable_callback+0x20>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << callback_type);
    41c8:	2201      	movs	r2, #1
    41ca:	408a      	lsls	r2, r1
    41cc:	2303      	movs	r3, #3
    41ce:	4013      	ands	r3, r2
    41d0:	71e3      	strb	r3, [r4, #7]
	module->enabled_callback |= (1 << callback_type);
    41d2:	8ac3      	ldrh	r3, [r0, #22]
    41d4:	2201      	movs	r2, #1
    41d6:	408a      	lsls	r2, r1
    41d8:	4313      	orrs	r3, r2
    41da:	b29b      	uxth	r3, r3
    41dc:	82c3      	strh	r3, [r0, #22]
}
    41de:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
    41e0:	2380      	movs	r3, #128	; 0x80
    41e2:	71e3      	strb	r3, [r4, #7]
    41e4:	e7f5      	b.n	41d2 <rtc_count_enable_callback+0x12>
	...

000041e8 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    41e8:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(0);
    41ea:	2000      	movs	r0, #0
    41ec:	4b01      	ldr	r3, [pc, #4]	; (41f4 <RTC_Handler+0xc>)
    41ee:	4798      	blx	r3
}
    41f0:	bd10      	pop	{r4, pc}
    41f2:	46c0      	nop			; (mov r8, r8)
    41f4:	00004121 	.word	0x00004121

000041f8 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    41f8:	6803      	ldr	r3, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    41fa:	69db      	ldr	r3, [r3, #28]
	while (i2c_master_is_syncing(module)) {
    41fc:	075b      	lsls	r3, r3, #29
    41fe:	d1fb      	bne.n	41f8 <_i2c_master_wait_for_sync>
}
    4200:	4770      	bx	lr
	...

00004204 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    4204:	b5f0      	push	{r4, r5, r6, r7, lr}
    4206:	46d6      	mov	lr, sl
    4208:	464f      	mov	r7, r9
    420a:	4646      	mov	r6, r8
    420c:	b5c0      	push	{r6, r7, lr}
    420e:	b08a      	sub	sp, #40	; 0x28
    4210:	0007      	movs	r7, r0
    4212:	000c      	movs	r4, r1
	int32_t tmp_baud = 0;
	int32_t tmp_baud_hs = 0;
	int32_t tmp_baudlow_hs = 0;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4214:	6803      	ldr	r3, [r0, #0]
    4216:	4698      	mov	r8, r3
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    4218:	0018      	movs	r0, r3
    421a:	4b83      	ldr	r3, [pc, #524]	; (4428 <_i2c_master_set_config+0x224>)
    421c:	4798      	blx	r3
    421e:	0006      	movs	r6, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4220:	ab09      	add	r3, sp, #36	; 0x24
    4222:	2280      	movs	r2, #128	; 0x80
    4224:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4226:	2200      	movs	r2, #0
    4228:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    422a:	2101      	movs	r1, #1
    422c:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    422e:	70da      	strb	r2, [r3, #3]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	uint32_t pad0 = config->pinmux_pad0;
    4230:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    4232:	6a25      	ldr	r5, [r4, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    4234:	2800      	cmp	r0, #0
    4236:	d01f      	beq.n	4278 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    4238:	a909      	add	r1, sp, #36	; 0x24
    423a:	7008      	strb	r0, [r1, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    423c:	2302      	movs	r3, #2
    423e:	704b      	strb	r3, [r1, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    4240:	0c00      	lsrs	r0, r0, #16
    4242:	b2c0      	uxtb	r0, r0
    4244:	4b79      	ldr	r3, [pc, #484]	; (442c <_i2c_master_set_config+0x228>)
    4246:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    4248:	2d00      	cmp	r5, #0
    424a:	d01a      	beq.n	4282 <_i2c_master_set_config+0x7e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    424c:	a909      	add	r1, sp, #36	; 0x24
    424e:	700d      	strb	r5, [r1, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    4250:	2302      	movs	r3, #2
    4252:	704b      	strb	r3, [r1, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    4254:	0c2d      	lsrs	r5, r5, #16
    4256:	b2e8      	uxtb	r0, r5
    4258:	4b74      	ldr	r3, [pc, #464]	; (442c <_i2c_master_set_config+0x228>)
    425a:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    425c:	8aa3      	ldrh	r3, [r4, #20]
    425e:	80fb      	strh	r3, [r7, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    4260:	8ae3      	ldrh	r3, [r4, #22]
    4262:	813b      	strh	r3, [r7, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4264:	7e23      	ldrb	r3, [r4, #24]
    4266:	2b00      	cmp	r3, #0
    4268:	d111      	bne.n	428e <_i2c_master_set_config+0x8a>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    426a:	4b71      	ldr	r3, [pc, #452]	; (4430 <_i2c_master_set_config+0x22c>)
    426c:	789b      	ldrb	r3, [r3, #2]
    426e:	079b      	lsls	r3, r3, #30
    4270:	d500      	bpl.n	4274 <_i2c_master_set_config+0x70>
    4272:	e0a1      	b.n	43b8 <_i2c_master_set_config+0x1b4>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
	} else {
		tmp_ctrla = 0;
    4274:	2300      	movs	r3, #0
    4276:	e00b      	b.n	4290 <_i2c_master_set_config+0x8c>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    4278:	2100      	movs	r1, #0
    427a:	4640      	mov	r0, r8
    427c:	4b6d      	ldr	r3, [pc, #436]	; (4434 <_i2c_master_set_config+0x230>)
    427e:	4798      	blx	r3
    4280:	e7da      	b.n	4238 <_i2c_master_set_config+0x34>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    4282:	2101      	movs	r1, #1
    4284:	4640      	mov	r0, r8
    4286:	4b6b      	ldr	r3, [pc, #428]	; (4434 <_i2c_master_set_config+0x230>)
    4288:	4798      	blx	r3
    428a:	0005      	movs	r5, r0
    428c:	e7de      	b.n	424c <_i2c_master_set_config+0x48>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    428e:	2380      	movs	r3, #128	; 0x80
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    4290:	6922      	ldr	r2, [r4, #16]
    4292:	2a00      	cmp	r2, #0
    4294:	d000      	beq.n	4298 <_i2c_master_set_config+0x94>
		tmp_ctrla |= config->start_hold_time;
    4296:	4313      	orrs	r3, r2
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    4298:	68a2      	ldr	r2, [r4, #8]
    429a:	4313      	orrs	r3, r2

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    429c:	2124      	movs	r1, #36	; 0x24
    429e:	5c61      	ldrb	r1, [r4, r1]
    42a0:	2900      	cmp	r1, #0
    42a2:	d002      	beq.n	42aa <_i2c_master_set_config+0xa6>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    42a4:	2180      	movs	r1, #128	; 0x80
    42a6:	05c9      	lsls	r1, r1, #23
    42a8:	430b      	orrs	r3, r1
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    42aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    42ac:	2900      	cmp	r1, #0
    42ae:	d000      	beq.n	42b2 <_i2c_master_set_config+0xae>
		tmp_ctrla |= config->inactive_timeout;
    42b0:	430b      	orrs	r3, r1
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    42b2:	212c      	movs	r1, #44	; 0x2c
    42b4:	5c61      	ldrb	r1, [r4, r1]
    42b6:	2900      	cmp	r1, #0
    42b8:	d103      	bne.n	42c2 <_i2c_master_set_config+0xbe>
    42ba:	2180      	movs	r1, #128	; 0x80
    42bc:	0489      	lsls	r1, r1, #18
    42be:	428a      	cmp	r2, r1
    42c0:	d102      	bne.n	42c8 <_i2c_master_set_config+0xc4>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    42c2:	2280      	movs	r2, #128	; 0x80
    42c4:	0512      	lsls	r2, r2, #20
    42c6:	4313      	orrs	r3, r2
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    42c8:	222d      	movs	r2, #45	; 0x2d
    42ca:	5ca2      	ldrb	r2, [r4, r2]
    42cc:	2a00      	cmp	r2, #0
    42ce:	d002      	beq.n	42d6 <_i2c_master_set_config+0xd2>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    42d0:	2280      	movs	r2, #128	; 0x80
    42d2:	0412      	lsls	r2, r2, #16
    42d4:	4313      	orrs	r3, r2
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    42d6:	222e      	movs	r2, #46	; 0x2e
    42d8:	5ca2      	ldrb	r2, [r4, r2]
    42da:	2a00      	cmp	r2, #0
    42dc:	d002      	beq.n	42e4 <_i2c_master_set_config+0xe0>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    42de:	2280      	movs	r2, #128	; 0x80
    42e0:	03d2      	lsls	r2, r2, #15
    42e2:	4313      	orrs	r3, r2
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    42e4:	4642      	mov	r2, r8
    42e6:	6812      	ldr	r2, [r2, #0]
    42e8:	4313      	orrs	r3, r2
    42ea:	4642      	mov	r2, r8
    42ec:	6013      	str	r3, [r2, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    42ee:	2380      	movs	r3, #128	; 0x80
    42f0:	005b      	lsls	r3, r3, #1
    42f2:	6053      	str	r3, [r2, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    42f4:	0030      	movs	r0, r6
    42f6:	3014      	adds	r0, #20
    42f8:	b2c0      	uxtb	r0, r0
    42fa:	4b4f      	ldr	r3, [pc, #316]	; (4438 <_i2c_master_set_config+0x234>)
    42fc:	4798      	blx	r3
    42fe:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    4300:	21fa      	movs	r1, #250	; 0xfa
    4302:	0089      	lsls	r1, r1, #2
    4304:	6823      	ldr	r3, [r4, #0]
    4306:	434b      	muls	r3, r1
    4308:	4699      	mov	r9, r3
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    430a:	6863      	ldr	r3, [r4, #4]
    430c:	434b      	muls	r3, r1
    430e:	469a      	mov	sl, r3
	uint32_t trise       = config->sda_scl_rise_time_ns;
    4310:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	
	tmp_baud = (int32_t)(div_ceil(
    4312:	4d4a      	ldr	r5, [pc, #296]	; (443c <_i2c_master_set_config+0x238>)
    4314:	47a8      	blx	r5
    4316:	4e4a      	ldr	r6, [pc, #296]	; (4440 <_i2c_master_set_config+0x23c>)
    4318:	4a4a      	ldr	r2, [pc, #296]	; (4444 <_i2c_master_set_config+0x240>)
    431a:	4b4b      	ldr	r3, [pc, #300]	; (4448 <_i2c_master_set_config+0x244>)
    431c:	9000      	str	r0, [sp, #0]
    431e:	9101      	str	r1, [sp, #4]
    4320:	47b0      	blx	r6
    4322:	9002      	str	r0, [sp, #8]
    4324:	9103      	str	r1, [sp, #12]
    4326:	0038      	movs	r0, r7
    4328:	47a8      	blx	r5
    432a:	9a02      	ldr	r2, [sp, #8]
    432c:	9b03      	ldr	r3, [sp, #12]
    432e:	47b0      	blx	r6
    4330:	4f46      	ldr	r7, [pc, #280]	; (444c <_i2c_master_set_config+0x248>)
    4332:	2200      	movs	r2, #0
    4334:	4b46      	ldr	r3, [pc, #280]	; (4450 <_i2c_master_set_config+0x24c>)
    4336:	47b8      	blx	r7
    4338:	9002      	str	r0, [sp, #8]
    433a:	9103      	str	r1, [sp, #12]
    433c:	4648      	mov	r0, r9
    433e:	47a8      	blx	r5
    4340:	9a02      	ldr	r2, [sp, #8]
    4342:	9b03      	ldr	r3, [sp, #12]
    4344:	47b0      	blx	r6
    4346:	0002      	movs	r2, r0
    4348:	000b      	movs	r3, r1
    434a:	4e42      	ldr	r6, [pc, #264]	; (4454 <_i2c_master_set_config+0x250>)
    434c:	9800      	ldr	r0, [sp, #0]
    434e:	9901      	ldr	r1, [sp, #4]
    4350:	47b0      	blx	r6
    4352:	9004      	str	r0, [sp, #16]
    4354:	9105      	str	r1, [sp, #20]
    4356:	464b      	mov	r3, r9
    4358:	0058      	lsls	r0, r3, #1
    435a:	47a8      	blx	r5
    435c:	0002      	movs	r2, r0
    435e:	000b      	movs	r3, r1
    4360:	9202      	str	r2, [sp, #8]
    4362:	9303      	str	r3, [sp, #12]
    4364:	9804      	ldr	r0, [sp, #16]
    4366:	9905      	ldr	r1, [sp, #20]
    4368:	47b8      	blx	r7
    436a:	2200      	movs	r2, #0
    436c:	4b3a      	ldr	r3, [pc, #232]	; (4458 <_i2c_master_set_config+0x254>)
    436e:	47b0      	blx	r6
    4370:	9a02      	ldr	r2, [sp, #8]
    4372:	9b03      	ldr	r3, [sp, #12]
    4374:	4d39      	ldr	r5, [pc, #228]	; (445c <_i2c_master_set_config+0x258>)
    4376:	47a8      	blx	r5
    4378:	4b39      	ldr	r3, [pc, #228]	; (4460 <_i2c_master_set_config+0x25c>)
    437a:	4798      	blx	r3
    437c:	0006      	movs	r6, r0
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    437e:	68a2      	ldr	r2, [r4, #8]
    4380:	2380      	movs	r3, #128	; 0x80
    4382:	049b      	lsls	r3, r3, #18
    4384:	429a      	cmp	r2, r3
    4386:	d019      	beq.n	43bc <_i2c_master_set_config+0x1b8>
	int32_t tmp_baudlow_hs = 0;
    4388:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    438a:	2200      	movs	r2, #0
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    438c:	2eff      	cmp	r6, #255	; 0xff
    438e:	d941      	bls.n	4414 <_i2c_master_set_config+0x210>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4390:	2040      	movs	r0, #64	; 0x40
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    4392:	2840      	cmp	r0, #64	; 0x40
    4394:	d00a      	beq.n	43ac <_i2c_master_set_config+0x1a8>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    4396:	23ff      	movs	r3, #255	; 0xff
    4398:	4033      	ands	r3, r6
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    439a:	0412      	lsls	r2, r2, #16
    439c:	21ff      	movs	r1, #255	; 0xff
    439e:	0409      	lsls	r1, r1, #16
    43a0:	400a      	ands	r2, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    43a2:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    43a4:	0624      	lsls	r4, r4, #24
    43a6:	4323      	orrs	r3, r4
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    43a8:	4642      	mov	r2, r8
    43aa:	60d3      	str	r3, [r2, #12]
	}

	return tmp_status_code;
}
    43ac:	b00a      	add	sp, #40	; 0x28
    43ae:	bc1c      	pop	{r2, r3, r4}
    43b0:	4690      	mov	r8, r2
    43b2:	4699      	mov	r9, r3
    43b4:	46a2      	mov	sl, r4
    43b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    43b8:	2380      	movs	r3, #128	; 0x80
    43ba:	e769      	b.n	4290 <_i2c_master_set_config+0x8c>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    43bc:	9800      	ldr	r0, [sp, #0]
    43be:	9901      	ldr	r1, [sp, #4]
    43c0:	0002      	movs	r2, r0
    43c2:	000b      	movs	r3, r1
    43c4:	47b8      	blx	r7
    43c6:	0004      	movs	r4, r0
    43c8:	000d      	movs	r5, r1
    43ca:	4650      	mov	r0, sl
    43cc:	4b1b      	ldr	r3, [pc, #108]	; (443c <_i2c_master_set_config+0x238>)
    43ce:	4798      	blx	r3
    43d0:	2200      	movs	r2, #0
    43d2:	4b24      	ldr	r3, [pc, #144]	; (4464 <_i2c_master_set_config+0x260>)
    43d4:	4f1a      	ldr	r7, [pc, #104]	; (4440 <_i2c_master_set_config+0x23c>)
    43d6:	47b8      	blx	r7
    43d8:	0002      	movs	r2, r0
    43da:	000b      	movs	r3, r1
    43dc:	0020      	movs	r0, r4
    43de:	0029      	movs	r1, r5
    43e0:	4c1e      	ldr	r4, [pc, #120]	; (445c <_i2c_master_set_config+0x258>)
    43e2:	47a0      	blx	r4
    43e4:	2200      	movs	r2, #0
    43e6:	4b1c      	ldr	r3, [pc, #112]	; (4458 <_i2c_master_set_config+0x254>)
    43e8:	4c1a      	ldr	r4, [pc, #104]	; (4454 <_i2c_master_set_config+0x250>)
    43ea:	47a0      	blx	r4
    43ec:	4b1c      	ldr	r3, [pc, #112]	; (4460 <_i2c_master_set_config+0x25c>)
    43ee:	4798      	blx	r3
    43f0:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    43f2:	d006      	beq.n	4402 <_i2c_master_set_config+0x1fe>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    43f4:	4651      	mov	r1, sl
    43f6:	9807      	ldr	r0, [sp, #28]
    43f8:	4b1b      	ldr	r3, [pc, #108]	; (4468 <_i2c_master_set_config+0x264>)
    43fa:	4798      	blx	r3
    43fc:	3802      	subs	r0, #2
    43fe:	1b02      	subs	r2, r0, r4
    4400:	e7c4      	b.n	438c <_i2c_master_set_config+0x188>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    4402:	4653      	mov	r3, sl
    4404:	0059      	lsls	r1, r3, #1
    4406:	9b07      	ldr	r3, [sp, #28]
    4408:	1858      	adds	r0, r3, r1
    440a:	3801      	subs	r0, #1
    440c:	4b16      	ldr	r3, [pc, #88]	; (4468 <_i2c_master_set_config+0x264>)
    440e:	4798      	blx	r3
    4410:	1e42      	subs	r2, r0, #1
    4412:	e7bb      	b.n	438c <_i2c_master_set_config+0x188>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    4414:	2aff      	cmp	r2, #255	; 0xff
    4416:	dd01      	ble.n	441c <_i2c_master_set_config+0x218>
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4418:	2040      	movs	r0, #64	; 0x40
    441a:	e7ba      	b.n	4392 <_i2c_master_set_config+0x18e>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    441c:	2a00      	cmp	r2, #0
    441e:	db01      	blt.n	4424 <_i2c_master_set_config+0x220>
	enum status_code tmp_status_code = STATUS_OK;
    4420:	2000      	movs	r0, #0
    4422:	e7b6      	b.n	4392 <_i2c_master_set_config+0x18e>
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4424:	2040      	movs	r0, #64	; 0x40
    4426:	e7b4      	b.n	4392 <_i2c_master_set_config+0x18e>
    4428:	00007425 	.word	0x00007425
    442c:	00009085 	.word	0x00009085
    4430:	41002000 	.word	0x41002000
    4434:	000072ad 	.word	0x000072ad
    4438:	00008fbd 	.word	0x00008fbd
    443c:	0000c0f9 	.word	0x0000c0f9
    4440:	0000b565 	.word	0x0000b565
    4444:	e826d695 	.word	0xe826d695
    4448:	3e112e0b 	.word	0x3e112e0b
    444c:	0000a8dd 	.word	0x0000a8dd
    4450:	40240000 	.word	0x40240000
    4454:	0000ba65 	.word	0x0000ba65
    4458:	3ff00000 	.word	0x3ff00000
    445c:	0000aefd 	.word	0x0000aefd
    4460:	0000c091 	.word	0x0000c091
    4464:	40080000 	.word	0x40080000
    4468:	000094fd 	.word	0x000094fd

0000446c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    446c:	b5f0      	push	{r4, r5, r6, r7, lr}
    446e:	b083      	sub	sp, #12
    4470:	0007      	movs	r7, r0
    4472:	000d      	movs	r5, r1
    4474:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    4476:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4478:	0008      	movs	r0, r1
    447a:	4b1e      	ldr	r3, [pc, #120]	; (44f4 <i2c_master_init+0x88>)
    447c:	4798      	blx	r3
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    447e:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4480:	3014      	adds	r0, #20
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4482:	2301      	movs	r3, #1
    4484:	4093      	lsls	r3, r2
			PM->APBCMASK.reg |= mask;
    4486:	4a1c      	ldr	r2, [pc, #112]	; (44f8 <i2c_master_init+0x8c>)
    4488:	6a11      	ldr	r1, [r2, #32]
    448a:	430b      	orrs	r3, r1
    448c:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    448e:	7b33      	ldrb	r3, [r6, #12]
    4490:	a901      	add	r1, sp, #4
    4492:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4494:	b2c4      	uxtb	r4, r0
    4496:	0020      	movs	r0, r4
    4498:	4b18      	ldr	r3, [pc, #96]	; (44fc <i2c_master_init+0x90>)
    449a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    449c:	0020      	movs	r0, r4
    449e:	4b18      	ldr	r3, [pc, #96]	; (4500 <i2c_master_init+0x94>)
    44a0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    44a2:	7b30      	ldrb	r0, [r6, #12]
    44a4:	2100      	movs	r1, #0
    44a6:	4b17      	ldr	r3, [pc, #92]	; (4504 <i2c_master_init+0x98>)
    44a8:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    44aa:	682b      	ldr	r3, [r5, #0]
    44ac:	079b      	lsls	r3, r3, #30
    44ae:	d502      	bpl.n	44b6 <i2c_master_init+0x4a>
		return STATUS_ERR_DENIED;
    44b0:	201c      	movs	r0, #28
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    44b2:	b003      	add	sp, #12
    44b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    44b6:	682b      	ldr	r3, [r5, #0]
    44b8:	07db      	lsls	r3, r3, #31
    44ba:	d501      	bpl.n	44c0 <i2c_master_init+0x54>
		return STATUS_BUSY;
    44bc:	2005      	movs	r0, #5
    44be:	e7f8      	b.n	44b2 <i2c_master_init+0x46>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    44c0:	6838      	ldr	r0, [r7, #0]
    44c2:	4b0c      	ldr	r3, [pc, #48]	; (44f4 <i2c_master_init+0x88>)
    44c4:	4798      	blx	r3
    44c6:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    44c8:	490f      	ldr	r1, [pc, #60]	; (4508 <i2c_master_init+0x9c>)
    44ca:	4b10      	ldr	r3, [pc, #64]	; (450c <i2c_master_init+0xa0>)
    44cc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    44ce:	00a4      	lsls	r4, r4, #2
    44d0:	4b0f      	ldr	r3, [pc, #60]	; (4510 <i2c_master_init+0xa4>)
    44d2:	50e7      	str	r7, [r4, r3]
	module->registered_callback = 0;
    44d4:	2300      	movs	r3, #0
    44d6:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
    44d8:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
    44da:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
    44dc:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
    44de:	2225      	movs	r2, #37	; 0x25
    44e0:	2100      	movs	r1, #0
    44e2:	54b9      	strb	r1, [r7, r2]
	module->buffer = NULL;
    44e4:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    44e6:	3314      	adds	r3, #20
    44e8:	602b      	str	r3, [r5, #0]
	return _i2c_master_set_config(module, config);
    44ea:	0031      	movs	r1, r6
    44ec:	0038      	movs	r0, r7
    44ee:	4b09      	ldr	r3, [pc, #36]	; (4514 <i2c_master_init+0xa8>)
    44f0:	4798      	blx	r3
    44f2:	e7de      	b.n	44b2 <i2c_master_init+0x46>
    44f4:	00007425 	.word	0x00007425
    44f8:	40000400 	.word	0x40000400
    44fc:	00008fa1 	.word	0x00008fa1
    4500:	00008f19 	.word	0x00008f19
    4504:	00007261 	.word	0x00007261
    4508:	000049b5 	.word	0x000049b5
    450c:	0000745d 	.word	0x0000745d
    4510:	200029b4 	.word	0x200029b4
    4514:	00004205 	.word	0x00004205

00004518 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4518:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    451a:	7e1a      	ldrb	r2, [r3, #24]
    451c:	0792      	lsls	r2, r2, #30
    451e:	d506      	bpl.n	452e <_i2c_master_address_response+0x16>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    4520:	2202      	movs	r2, #2
    4522:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    4524:	8b5b      	ldrh	r3, [r3, #26]
    4526:	079b      	lsls	r3, r3, #30
    4528:	d50b      	bpl.n	4542 <_i2c_master_address_response+0x2a>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    452a:	2041      	movs	r0, #65	; 0x41
		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
}
    452c:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    452e:	8b5a      	ldrh	r2, [r3, #26]
    4530:	0752      	lsls	r2, r2, #29
    4532:	d508      	bpl.n	4546 <_i2c_master_address_response+0x2e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4534:	6859      	ldr	r1, [r3, #4]
    4536:	22c0      	movs	r2, #192	; 0xc0
    4538:	0292      	lsls	r2, r2, #10
    453a:	430a      	orrs	r2, r1
    453c:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    453e:	2018      	movs	r0, #24
    4540:	e7f4      	b.n	452c <_i2c_master_address_response+0x14>
	return STATUS_OK;
    4542:	2000      	movs	r0, #0
    4544:	e7f2      	b.n	452c <_i2c_master_address_response+0x14>
    4546:	2000      	movs	r0, #0
    4548:	e7f0      	b.n	452c <_i2c_master_address_response+0x14>

0000454a <_i2c_master_wait_for_bus>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    454a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    454c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    454e:	7e11      	ldrb	r1, [r2, #24]
    4550:	07c9      	lsls	r1, r1, #31
    4552:	d40b      	bmi.n	456c <_i2c_master_wait_for_bus+0x22>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    4554:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    4556:	0789      	lsls	r1, r1, #30
    4558:	d406      	bmi.n	4568 <_i2c_master_wait_for_bus+0x1e>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    455a:	3301      	adds	r3, #1
    455c:	b29b      	uxth	r3, r3
    455e:	8901      	ldrh	r1, [r0, #8]
    4560:	428b      	cmp	r3, r1
    4562:	d3f4      	bcc.n	454e <_i2c_master_wait_for_bus+0x4>
			return STATUS_ERR_TIMEOUT;
    4564:	2012      	movs	r0, #18
    4566:	e002      	b.n	456e <_i2c_master_wait_for_bus+0x24>
		}
	}
	return STATUS_OK;
    4568:	2000      	movs	r0, #0
    456a:	e000      	b.n	456e <_i2c_master_wait_for_bus+0x24>
    456c:	2000      	movs	r0, #0
}
    456e:	4770      	bx	lr

00004570 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    4570:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4572:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    4574:	6862      	ldr	r2, [r4, #4]
    4576:	2380      	movs	r3, #128	; 0x80
    4578:	02db      	lsls	r3, r3, #11
    457a:	4313      	orrs	r3, r2
    457c:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    457e:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    4580:	4b02      	ldr	r3, [pc, #8]	; (458c <_i2c_master_send_hs_master_code+0x1c>)
    4582:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    4584:	2301      	movs	r3, #1
    4586:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    4588:	bd10      	pop	{r4, pc}
    458a:	46c0      	nop			; (mov r8, r8)
    458c:	0000454b 	.word	0x0000454b

00004590 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    4590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4592:	46de      	mov	lr, fp
    4594:	4657      	mov	r7, sl
    4596:	464e      	mov	r6, r9
    4598:	4645      	mov	r5, r8
    459a:	b5e0      	push	{r5, r6, r7, lr}
    459c:	0005      	movs	r5, r0
    459e:	468b      	mov	fp, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    45a0:	6806      	ldr	r6, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    45a2:	884f      	ldrh	r7, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    45a4:	6833      	ldr	r3, [r6, #0]
    45a6:	011b      	lsls	r3, r3, #4
    45a8:	0fdb      	lsrs	r3, r3, #31
    45aa:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    45ac:	7a4b      	ldrb	r3, [r1, #9]
    45ae:	2b00      	cmp	r3, #0
    45b0:	d129      	bne.n	4606 <_i2c_master_read_packet+0x76>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    45b2:	6873      	ldr	r3, [r6, #4]
    45b4:	4a58      	ldr	r2, [pc, #352]	; (4718 <_i2c_master_read_packet+0x188>)
    45b6:	4013      	ands	r3, r2
    45b8:	6073      	str	r3, [r6, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    45ba:	465b      	mov	r3, fp
    45bc:	7a1b      	ldrb	r3, [r3, #8]
    45be:	2b00      	cmp	r3, #0
    45c0:	d125      	bne.n	460e <_i2c_master_read_packet+0x7e>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    45c2:	465b      	mov	r3, fp
    45c4:	881b      	ldrh	r3, [r3, #0]
    45c6:	005b      	lsls	r3, r3, #1
    45c8:	2201      	movs	r2, #1
    45ca:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    45cc:	465a      	mov	r2, fp
    45ce:	7a52      	ldrb	r2, [r2, #9]
    45d0:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    45d2:	4313      	orrs	r3, r2
    45d4:	6273      	str	r3, [r6, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    45d6:	0028      	movs	r0, r5
    45d8:	4b50      	ldr	r3, [pc, #320]	; (471c <_i2c_master_read_packet+0x18c>)
    45da:	4798      	blx	r3
    45dc:	4680      	mov	r8, r0

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    45de:	4653      	mov	r3, sl
    45e0:	2b00      	cmp	r3, #0
    45e2:	d003      	beq.n	45ec <_i2c_master_read_packet+0x5c>
    45e4:	465b      	mov	r3, fp
    45e6:	885b      	ldrh	r3, [r3, #2]
    45e8:	2b01      	cmp	r3, #1
    45ea:	d03c      	beq.n	4666 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    45ec:	6873      	ldr	r3, [r6, #4]
    45ee:	4a4a      	ldr	r2, [pc, #296]	; (4718 <_i2c_master_read_packet+0x188>)
    45f0:	4013      	ands	r3, r2
    45f2:	6073      	str	r3, [r6, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    45f4:	4643      	mov	r3, r8
    45f6:	2b00      	cmp	r3, #0
    45f8:	d03b      	beq.n	4672 <_i2c_master_read_packet+0xe2>
		tmp_status = _i2c_master_address_response(module);
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    45fa:	4643      	mov	r3, r8
    45fc:	2b00      	cmp	r3, #0
    45fe:	d178      	bne.n	46f2 <_i2c_master_read_packet+0x162>
    4600:	2300      	movs	r3, #0
    4602:	4699      	mov	r9, r3
    4604:	e054      	b.n	46b0 <_i2c_master_read_packet+0x120>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    4606:	7a89      	ldrb	r1, [r1, #10]
    4608:	4b45      	ldr	r3, [pc, #276]	; (4720 <_i2c_master_read_packet+0x190>)
    460a:	4798      	blx	r3
    460c:	e7d1      	b.n	45b2 <_i2c_master_read_packet+0x22>
		i2c_module->ADDR.reg = (packet->address << 1) |
    460e:	465b      	mov	r3, fp
    4610:	881b      	ldrh	r3, [r3, #0]
    4612:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    4614:	465a      	mov	r2, fp
    4616:	7a52      	ldrb	r2, [r2, #9]
    4618:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    461a:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    461c:	2280      	movs	r2, #128	; 0x80
    461e:	0212      	lsls	r2, r2, #8
    4620:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    4622:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    4624:	0028      	movs	r0, r5
    4626:	4b3d      	ldr	r3, [pc, #244]	; (471c <_i2c_master_read_packet+0x18c>)
    4628:	4798      	blx	r3
    462a:	4680      	mov	r8, r0
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    462c:	6873      	ldr	r3, [r6, #4]
    462e:	4a3a      	ldr	r2, [pc, #232]	; (4718 <_i2c_master_read_packet+0x188>)
    4630:	4013      	ands	r3, r2
    4632:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
    4634:	2800      	cmp	r0, #0
    4636:	d011      	beq.n	465c <_i2c_master_read_packet+0xcc>
		if (tmp_status == STATUS_OK) {
    4638:	4643      	mov	r3, r8
    463a:	2b00      	cmp	r3, #0
    463c:	d159      	bne.n	46f2 <_i2c_master_read_packet+0x162>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    463e:	465b      	mov	r3, fp
    4640:	881b      	ldrh	r3, [r3, #0]
    4642:	0a1b      	lsrs	r3, r3, #8
    4644:	2278      	movs	r2, #120	; 0x78
    4646:	4313      	orrs	r3, r2
    4648:	b29b      	uxth	r3, r3
    464a:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    464c:	465a      	mov	r2, fp
    464e:	7a52      	ldrb	r2, [r2, #9]
    4650:	0392      	lsls	r2, r2, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    4652:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    4654:	2201      	movs	r2, #1
    4656:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    4658:	6273      	str	r3, [r6, #36]	; 0x24
    465a:	e7bc      	b.n	45d6 <_i2c_master_read_packet+0x46>
			tmp_status = _i2c_master_address_response(module);
    465c:	0028      	movs	r0, r5
    465e:	4b31      	ldr	r3, [pc, #196]	; (4724 <_i2c_master_read_packet+0x194>)
    4660:	4798      	blx	r3
    4662:	4680      	mov	r8, r0
    4664:	e7e8      	b.n	4638 <_i2c_master_read_packet+0xa8>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    4666:	6872      	ldr	r2, [r6, #4]
    4668:	2380      	movs	r3, #128	; 0x80
    466a:	02db      	lsls	r3, r3, #11
    466c:	4313      	orrs	r3, r2
    466e:	6073      	str	r3, [r6, #4]
    4670:	e7c0      	b.n	45f4 <_i2c_master_read_packet+0x64>
		tmp_status = _i2c_master_address_response(module);
    4672:	0028      	movs	r0, r5
    4674:	4b2b      	ldr	r3, [pc, #172]	; (4724 <_i2c_master_read_packet+0x194>)
    4676:	4798      	blx	r3
    4678:	4680      	mov	r8, r0
    467a:	e7be      	b.n	45fa <_i2c_master_read_packet+0x6a>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    467c:	4653      	mov	r3, sl
    467e:	2b00      	cmp	r3, #0
    4680:	d001      	beq.n	4686 <_i2c_master_read_packet+0xf6>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    4682:	2c01      	cmp	r4, #1
    4684:	d023      	beq.n	46ce <_i2c_master_read_packet+0x13e>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    4686:	0028      	movs	r0, r5
    4688:	4b27      	ldr	r3, [pc, #156]	; (4728 <_i2c_master_read_packet+0x198>)
    468a:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    468c:	464b      	mov	r3, r9
    468e:	1c5f      	adds	r7, r3, #1
    4690:	b2bf      	uxth	r7, r7
    4692:	2328      	movs	r3, #40	; 0x28
    4694:	5cf3      	ldrb	r3, [r6, r3]
    4696:	465a      	mov	r2, fp
    4698:	6852      	ldr	r2, [r2, #4]
    469a:	4649      	mov	r1, r9
    469c:	5453      	strb	r3, [r2, r1]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    469e:	0028      	movs	r0, r5
    46a0:	4b1e      	ldr	r3, [pc, #120]	; (471c <_i2c_master_read_packet+0x18c>)
    46a2:	4798      	blx	r3
    46a4:	4680      	mov	r8, r0
				packet->data[counter++] = i2c_module->DATA.reg;
    46a6:	46b9      	mov	r9, r7
		while (tmp_data_length--) {
    46a8:	0027      	movs	r7, r4
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    46aa:	4643      	mov	r3, r8
    46ac:	2b00      	cmp	r3, #0
    46ae:	d114      	bne.n	46da <_i2c_master_read_packet+0x14a>
		while (tmp_data_length--) {
    46b0:	1e7c      	subs	r4, r7, #1
    46b2:	b2a4      	uxth	r4, r4
    46b4:	2f00      	cmp	r7, #0
    46b6:	d010      	beq.n	46da <_i2c_master_read_packet+0x14a>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    46b8:	8b73      	ldrh	r3, [r6, #26]
    46ba:	069b      	lsls	r3, r3, #26
    46bc:	d529      	bpl.n	4712 <_i2c_master_read_packet+0x182>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    46be:	7aeb      	ldrb	r3, [r5, #11]
    46c0:	2b00      	cmp	r3, #0
    46c2:	d0e0      	beq.n	4686 <_i2c_master_read_packet+0xf6>
    46c4:	4653      	mov	r3, sl
    46c6:	2b00      	cmp	r3, #0
    46c8:	d1d8      	bne.n	467c <_i2c_master_read_packet+0xec>
    46ca:	2c00      	cmp	r4, #0
    46cc:	d1d6      	bne.n	467c <_i2c_master_read_packet+0xec>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    46ce:	6872      	ldr	r2, [r6, #4]
    46d0:	2380      	movs	r3, #128	; 0x80
    46d2:	02db      	lsls	r3, r3, #11
    46d4:	4313      	orrs	r3, r2
    46d6:	6073      	str	r3, [r6, #4]
    46d8:	e7e6      	b.n	46a8 <_i2c_master_read_packet+0x118>
				break;
			}
		}

		if (module->send_stop) {
    46da:	7aab      	ldrb	r3, [r5, #10]
    46dc:	2b00      	cmp	r3, #0
    46de:	d10f      	bne.n	4700 <_i2c_master_read_packet+0x170>
			_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    46e0:	0028      	movs	r0, r5
    46e2:	4b11      	ldr	r3, [pc, #68]	; (4728 <_i2c_master_read_packet+0x198>)
    46e4:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    46e6:	465b      	mov	r3, fp
    46e8:	685b      	ldr	r3, [r3, #4]
    46ea:	2228      	movs	r2, #40	; 0x28
    46ec:	5cb2      	ldrb	r2, [r6, r2]
    46ee:	4649      	mov	r1, r9
    46f0:	545a      	strb	r2, [r3, r1]
	}

	return tmp_status;
}
    46f2:	4640      	mov	r0, r8
    46f4:	bc3c      	pop	{r2, r3, r4, r5}
    46f6:	4690      	mov	r8, r2
    46f8:	4699      	mov	r9, r3
    46fa:	46a2      	mov	sl, r4
    46fc:	46ab      	mov	fp, r5
    46fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			_i2c_master_wait_for_sync(module);
    4700:	0028      	movs	r0, r5
    4702:	4b09      	ldr	r3, [pc, #36]	; (4728 <_i2c_master_read_packet+0x198>)
    4704:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4706:	6872      	ldr	r2, [r6, #4]
    4708:	23c0      	movs	r3, #192	; 0xc0
    470a:	029b      	lsls	r3, r3, #10
    470c:	4313      	orrs	r3, r2
    470e:	6073      	str	r3, [r6, #4]
    4710:	e7e6      	b.n	46e0 <_i2c_master_read_packet+0x150>
				return STATUS_ERR_PACKET_COLLISION;
    4712:	2341      	movs	r3, #65	; 0x41
    4714:	4698      	mov	r8, r3
    4716:	e7ec      	b.n	46f2 <_i2c_master_read_packet+0x162>
    4718:	fffbffff 	.word	0xfffbffff
    471c:	0000454b 	.word	0x0000454b
    4720:	00004571 	.word	0x00004571
    4724:	00004519 	.word	0x00004519
    4728:	000041f9 	.word	0x000041f9

0000472c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    472c:	b5f0      	push	{r4, r5, r6, r7, lr}
    472e:	46de      	mov	lr, fp
    4730:	4657      	mov	r7, sl
    4732:	4646      	mov	r6, r8
    4734:	b5c0      	push	{r6, r7, lr}
    4736:	b082      	sub	sp, #8
    4738:	9001      	str	r0, [sp, #4]
    473a:	468a      	mov	sl, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    473c:	6807      	ldr	r7, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    473e:	884d      	ldrh	r5, [r1, #2]

	_i2c_master_wait_for_sync(module);
    4740:	4b35      	ldr	r3, [pc, #212]	; (4818 <_i2c_master_write_packet+0xec>)
    4742:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    4744:	4653      	mov	r3, sl
    4746:	7a5b      	ldrb	r3, [r3, #9]
    4748:	2b00      	cmp	r3, #0
    474a:	d139      	bne.n	47c0 <_i2c_master_write_packet+0x94>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    474c:	687b      	ldr	r3, [r7, #4]
    474e:	4a33      	ldr	r2, [pc, #204]	; (481c <_i2c_master_write_packet+0xf0>)
    4750:	4013      	ands	r3, r2
    4752:	607b      	str	r3, [r7, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    4754:	4653      	mov	r3, sl
    4756:	7a1b      	ldrb	r3, [r3, #8]
    4758:	2b00      	cmp	r3, #0
    475a:	d037      	beq.n	47cc <_i2c_master_write_packet+0xa0>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    475c:	4653      	mov	r3, sl
    475e:	881b      	ldrh	r3, [r3, #0]
    4760:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    4762:	4652      	mov	r2, sl
    4764:	7a52      	ldrb	r2, [r2, #9]
    4766:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    4768:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    476a:	2280      	movs	r2, #128	; 0x80
    476c:	0212      	lsls	r2, r2, #8
    476e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    4770:	627b      	str	r3, [r7, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    4772:	9801      	ldr	r0, [sp, #4]
    4774:	4b2a      	ldr	r3, [pc, #168]	; (4820 <_i2c_master_write_packet+0xf4>)
    4776:	4798      	blx	r3
    4778:	1e04      	subs	r4, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    477a:	d030      	beq.n	47de <_i2c_master_write_packet+0xb2>
		tmp_status = _i2c_master_address_response(module);
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    477c:	2c00      	cmp	r4, #0
    477e:	d138      	bne.n	47f2 <_i2c_master_write_packet+0xc6>
    4780:	2600      	movs	r6, #0
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
    4782:	1e6b      	subs	r3, r5, #1
    4784:	b29b      	uxth	r3, r3
    4786:	469b      	mov	fp, r3
    4788:	2d00      	cmp	r5, #0
    478a:	d02e      	beq.n	47ea <_i2c_master_write_packet+0xbe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    478c:	8b7b      	ldrh	r3, [r7, #26]
    478e:	069b      	lsls	r3, r3, #26
    4790:	d53f      	bpl.n	4812 <_i2c_master_write_packet+0xe6>
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    4792:	9c01      	ldr	r4, [sp, #4]
    4794:	0020      	movs	r0, r4
    4796:	4b20      	ldr	r3, [pc, #128]	; (4818 <_i2c_master_write_packet+0xec>)
    4798:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    479a:	1c75      	adds	r5, r6, #1
    479c:	b2ab      	uxth	r3, r5
    479e:	4698      	mov	r8, r3
    47a0:	4653      	mov	r3, sl
    47a2:	685b      	ldr	r3, [r3, #4]
    47a4:	5d9a      	ldrb	r2, [r3, r6]
    47a6:	2328      	movs	r3, #40	; 0x28
    47a8:	54fa      	strb	r2, [r7, r3]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    47aa:	0020      	movs	r0, r4
    47ac:	4b1c      	ldr	r3, [pc, #112]	; (4820 <_i2c_master_write_packet+0xf4>)
    47ae:	4798      	blx	r3
    47b0:	1e04      	subs	r4, r0, #0

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    47b2:	d11a      	bne.n	47ea <_i2c_master_write_packet+0xbe>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    47b4:	8b7b      	ldrh	r3, [r7, #26]
		while (tmp_data_length--) {
    47b6:	465d      	mov	r5, fp
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    47b8:	075b      	lsls	r3, r3, #29
    47ba:	d415      	bmi.n	47e8 <_i2c_master_write_packet+0xbc>
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    47bc:	4646      	mov	r6, r8
    47be:	e7e0      	b.n	4782 <_i2c_master_write_packet+0x56>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    47c0:	4653      	mov	r3, sl
    47c2:	7a99      	ldrb	r1, [r3, #10]
    47c4:	9801      	ldr	r0, [sp, #4]
    47c6:	4b17      	ldr	r3, [pc, #92]	; (4824 <_i2c_master_write_packet+0xf8>)
    47c8:	4798      	blx	r3
    47ca:	e7bf      	b.n	474c <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    47cc:	4653      	mov	r3, sl
    47ce:	881b      	ldrh	r3, [r3, #0]
    47d0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    47d2:	4652      	mov	r2, sl
    47d4:	7a52      	ldrb	r2, [r2, #9]
    47d6:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    47d8:	4313      	orrs	r3, r2
    47da:	627b      	str	r3, [r7, #36]	; 0x24
    47dc:	e7c9      	b.n	4772 <_i2c_master_write_packet+0x46>
		tmp_status = _i2c_master_address_response(module);
    47de:	9801      	ldr	r0, [sp, #4]
    47e0:	4b11      	ldr	r3, [pc, #68]	; (4828 <_i2c_master_write_packet+0xfc>)
    47e2:	4798      	blx	r3
    47e4:	0004      	movs	r4, r0
    47e6:	e7c9      	b.n	477c <_i2c_master_write_packet+0x50>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    47e8:	241e      	movs	r4, #30
				break;
			}
		}

		if (module->send_stop) {
    47ea:	9b01      	ldr	r3, [sp, #4]
    47ec:	7a9b      	ldrb	r3, [r3, #10]
    47ee:	2b00      	cmp	r3, #0
    47f0:	d106      	bne.n	4800 <_i2c_master_write_packet+0xd4>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    47f2:	0020      	movs	r0, r4
    47f4:	b002      	add	sp, #8
    47f6:	bc1c      	pop	{r2, r3, r4}
    47f8:	4690      	mov	r8, r2
    47fa:	469a      	mov	sl, r3
    47fc:	46a3      	mov	fp, r4
    47fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_i2c_master_wait_for_sync(module);
    4800:	9801      	ldr	r0, [sp, #4]
    4802:	4b05      	ldr	r3, [pc, #20]	; (4818 <_i2c_master_write_packet+0xec>)
    4804:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4806:	687a      	ldr	r2, [r7, #4]
    4808:	23c0      	movs	r3, #192	; 0xc0
    480a:	029b      	lsls	r3, r3, #10
    480c:	4313      	orrs	r3, r2
    480e:	607b      	str	r3, [r7, #4]
    4810:	e7ef      	b.n	47f2 <_i2c_master_write_packet+0xc6>
				return STATUS_ERR_PACKET_COLLISION;
    4812:	2441      	movs	r4, #65	; 0x41
    4814:	e7ed      	b.n	47f2 <_i2c_master_write_packet+0xc6>
    4816:	46c0      	nop			; (mov r8, r8)
    4818:	000041f9 	.word	0x000041f9
    481c:	fffbffff 	.word	0xfffbffff
    4820:	0000454b 	.word	0x0000454b
    4824:	00004571 	.word	0x00004571
    4828:	00004519 	.word	0x00004519

0000482c <i2c_master_read_packet_wait>:
{
    482c:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
    482e:	8b83      	ldrh	r3, [r0, #28]
    4830:	b29b      	uxth	r3, r3
    4832:	2b00      	cmp	r3, #0
    4834:	d001      	beq.n	483a <i2c_master_read_packet_wait+0xe>
		return STATUS_BUSY;
    4836:	2005      	movs	r0, #5
}
    4838:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    483a:	3301      	adds	r3, #1
    483c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    483e:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    4840:	4b01      	ldr	r3, [pc, #4]	; (4848 <i2c_master_read_packet_wait+0x1c>)
    4842:	4798      	blx	r3
    4844:	e7f8      	b.n	4838 <i2c_master_read_packet_wait+0xc>
    4846:	46c0      	nop			; (mov r8, r8)
    4848:	00004591 	.word	0x00004591

0000484c <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    484c:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    484e:	8b83      	ldrh	r3, [r0, #28]
    4850:	b29b      	uxth	r3, r3
    4852:	2b00      	cmp	r3, #0
    4854:	d001      	beq.n	485a <i2c_master_write_packet_wait+0xe>
		return STATUS_BUSY;
    4856:	2005      	movs	r0, #5

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
    4858:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    485a:	3301      	adds	r3, #1
    485c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    485e:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    4860:	4b01      	ldr	r3, [pc, #4]	; (4868 <i2c_master_write_packet_wait+0x1c>)
    4862:	4798      	blx	r3
    4864:	e7f8      	b.n	4858 <i2c_master_write_packet_wait+0xc>
    4866:	46c0      	nop			; (mov r8, r8)
    4868:	0000472d 	.word	0x0000472d

0000486c <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    486c:	6803      	ldr	r3, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    486e:	69db      	ldr	r3, [r3, #28]
	while (i2c_master_is_syncing(module)) {
    4870:	075b      	lsls	r3, r3, #29
    4872:	d1fb      	bne.n	486c <_i2c_master_wait_for_sync>
}
    4874:	4770      	bx	lr
	...

00004878 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    4878:	b570      	push	{r4, r5, r6, lr}
    487a:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    487c:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    487e:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    4880:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    4882:	8b83      	ldrh	r3, [r0, #28]
    4884:	1aed      	subs	r5, r5, r3
    4886:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    4888:	8b83      	ldrh	r3, [r0, #28]
    488a:	3b01      	subs	r3, #1
    488c:	b29b      	uxth	r3, r3
    488e:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    4890:	0113      	lsls	r3, r2, #4
    4892:	d51d      	bpl.n	48d0 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    4894:	7ac3      	ldrb	r3, [r0, #11]
    4896:	2b00      	cmp	r3, #0
    4898:	d003      	beq.n	48a2 <_i2c_master_read+0x2a>
    489a:	8b83      	ldrh	r3, [r0, #28]
    489c:	b29b      	uxth	r3, r3
    489e:	2b01      	cmp	r3, #1
    48a0:	d010      	beq.n	48c4 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    48a2:	8ba3      	ldrh	r3, [r4, #28]
    48a4:	b29b      	uxth	r3, r3
    48a6:	2b00      	cmp	r3, #0
    48a8:	d102      	bne.n	48b0 <_i2c_master_read+0x38>
		if (module->send_stop) {
    48aa:	7aa3      	ldrb	r3, [r4, #10]
    48ac:	2b00      	cmp	r3, #0
    48ae:	d11c      	bne.n	48ea <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    48b0:	0020      	movs	r0, r4
    48b2:	4b12      	ldr	r3, [pc, #72]	; (48fc <_i2c_master_read+0x84>)
    48b4:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    48b6:	6a23      	ldr	r3, [r4, #32]
    48b8:	195d      	adds	r5, r3, r5
    48ba:	2328      	movs	r3, #40	; 0x28
    48bc:	5cf3      	ldrb	r3, [r6, r3]
    48be:	b2db      	uxtb	r3, r3
    48c0:	702b      	strb	r3, [r5, #0]
}
    48c2:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    48c4:	6872      	ldr	r2, [r6, #4]
    48c6:	2380      	movs	r3, #128	; 0x80
    48c8:	02db      	lsls	r3, r3, #11
    48ca:	4313      	orrs	r3, r2
    48cc:	6073      	str	r3, [r6, #4]
    48ce:	e7e8      	b.n	48a2 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    48d0:	7ac3      	ldrb	r3, [r0, #11]
    48d2:	2b00      	cmp	r3, #0
    48d4:	d0e5      	beq.n	48a2 <_i2c_master_read+0x2a>
    48d6:	8b83      	ldrh	r3, [r0, #28]
    48d8:	b29b      	uxth	r3, r3
    48da:	2b00      	cmp	r3, #0
    48dc:	d1e1      	bne.n	48a2 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    48de:	6872      	ldr	r2, [r6, #4]
    48e0:	2380      	movs	r3, #128	; 0x80
    48e2:	02db      	lsls	r3, r3, #11
    48e4:	4313      	orrs	r3, r2
    48e6:	6073      	str	r3, [r6, #4]
    48e8:	e7db      	b.n	48a2 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    48ea:	0020      	movs	r0, r4
    48ec:	4b03      	ldr	r3, [pc, #12]	; (48fc <_i2c_master_read+0x84>)
    48ee:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    48f0:	6872      	ldr	r2, [r6, #4]
    48f2:	23c0      	movs	r3, #192	; 0xc0
    48f4:	029b      	lsls	r3, r3, #10
    48f6:	4313      	orrs	r3, r2
    48f8:	6073      	str	r3, [r6, #4]
    48fa:	e7d9      	b.n	48b0 <_i2c_master_read+0x38>
    48fc:	0000486d 	.word	0x0000486d

00004900 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    4900:	b570      	push	{r4, r5, r6, lr}
    4902:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4904:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    4906:	8b6b      	ldrh	r3, [r5, #26]
    4908:	075b      	lsls	r3, r3, #29
    490a:	d503      	bpl.n	4914 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    490c:	221e      	movs	r2, #30
    490e:	2325      	movs	r3, #37	; 0x25
    4910:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    4912:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    4914:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    4916:	8b83      	ldrh	r3, [r0, #28]
    4918:	1af6      	subs	r6, r6, r3
    491a:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    491c:	8b83      	ldrh	r3, [r0, #28]
    491e:	3b01      	subs	r3, #1
    4920:	b29b      	uxth	r3, r3
    4922:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    4924:	4b04      	ldr	r3, [pc, #16]	; (4938 <_i2c_master_write+0x38>)
    4926:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    4928:	6a23      	ldr	r3, [r4, #32]
    492a:	199e      	adds	r6, r3, r6
    492c:	7833      	ldrb	r3, [r6, #0]
    492e:	b2db      	uxtb	r3, r3
    4930:	2228      	movs	r2, #40	; 0x28
    4932:	54ab      	strb	r3, [r5, r2]
    4934:	e7ed      	b.n	4912 <_i2c_master_write+0x12>
    4936:	46c0      	nop			; (mov r8, r8)
    4938:	0000486d 	.word	0x0000486d

0000493c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    493c:	b570      	push	{r4, r5, r6, lr}
    493e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4940:	6805      	ldr	r5, [r0, #0]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    4942:	7e2b      	ldrb	r3, [r5, #24]
    4944:	07db      	lsls	r3, r3, #31
    4946:	d507      	bpl.n	4958 <_i2c_master_async_address_response+0x1c>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    4948:	2301      	movs	r3, #1
    494a:	762b      	strb	r3, [r5, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    494c:	8b6b      	ldrh	r3, [r5, #26]
    494e:	079b      	lsls	r3, r3, #30
    4950:	d50a      	bpl.n	4968 <_i2c_master_async_address_response+0x2c>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    4952:	2241      	movs	r2, #65	; 0x41
    4954:	2325      	movs	r3, #37	; 0x25
    4956:	54c2      	strb	r2, [r0, r3]
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    4958:	8ba3      	ldrh	r3, [r4, #28]
    495a:	b29b      	uxth	r3, r3
    495c:	8363      	strh	r3, [r4, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    495e:	2325      	movs	r3, #37	; 0x25
    4960:	5ce3      	ldrb	r3, [r4, r3]
    4962:	2b05      	cmp	r3, #5
    4964:	d013      	beq.n	498e <_i2c_master_async_address_response+0x52>
			_i2c_master_write(module);
		} else {
			_i2c_master_read(module);
		}
	}
}
    4966:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    4968:	8b6b      	ldrh	r3, [r5, #26]
    496a:	075b      	lsls	r3, r3, #29
    496c:	d5f4      	bpl.n	4958 <_i2c_master_async_address_response+0x1c>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    496e:	2218      	movs	r2, #24
    4970:	2325      	movs	r3, #37	; 0x25
    4972:	54c2      	strb	r2, [r0, r3]
			module->buffer_remaining = 0;
    4974:	2300      	movs	r3, #0
    4976:	8383      	strh	r3, [r0, #28]
			if (module->send_stop) {
    4978:	7a83      	ldrb	r3, [r0, #10]
    497a:	2b00      	cmp	r3, #0
    497c:	d0ec      	beq.n	4958 <_i2c_master_async_address_response+0x1c>
				_i2c_master_wait_for_sync(module);
    497e:	4b0a      	ldr	r3, [pc, #40]	; (49a8 <_i2c_master_async_address_response+0x6c>)
    4980:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4982:	686a      	ldr	r2, [r5, #4]
    4984:	23c0      	movs	r3, #192	; 0xc0
    4986:	029b      	lsls	r3, r3, #10
    4988:	4313      	orrs	r3, r2
    498a:	606b      	str	r3, [r5, #4]
    498c:	e7e4      	b.n	4958 <_i2c_master_async_address_response+0x1c>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    498e:	331f      	adds	r3, #31
    4990:	5ce3      	ldrb	r3, [r4, r3]
    4992:	2b00      	cmp	r3, #0
    4994:	d003      	beq.n	499e <_i2c_master_async_address_response+0x62>
			_i2c_master_read(module);
    4996:	0020      	movs	r0, r4
    4998:	4b04      	ldr	r3, [pc, #16]	; (49ac <_i2c_master_async_address_response+0x70>)
    499a:	4798      	blx	r3
}
    499c:	e7e3      	b.n	4966 <_i2c_master_async_address_response+0x2a>
			_i2c_master_write(module);
    499e:	0020      	movs	r0, r4
    49a0:	4b03      	ldr	r3, [pc, #12]	; (49b0 <_i2c_master_async_address_response+0x74>)
    49a2:	4798      	blx	r3
    49a4:	e7df      	b.n	4966 <_i2c_master_async_address_response+0x2a>
    49a6:	46c0      	nop			; (mov r8, r8)
    49a8:	0000486d 	.word	0x0000486d
    49ac:	00004879 	.word	0x00004879
    49b0:	00004901 	.word	0x00004901

000049b4 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    49b4:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    49b6:	0080      	lsls	r0, r0, #2
    49b8:	4b59      	ldr	r3, [pc, #356]	; (4b20 <_i2c_master_interrupt_handler+0x16c>)
    49ba:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    49bc:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    49be:	682b      	ldr	r3, [r5, #0]
    49c0:	011b      	lsls	r3, r3, #4
    49c2:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    49c4:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    49c6:	7e26      	ldrb	r6, [r4, #24]
    49c8:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    49ca:	8b63      	ldrh	r3, [r4, #26]
    49cc:	b29b      	uxth	r3, r3
    49ce:	2b00      	cmp	r3, #0
    49d0:	d103      	bne.n	49da <_i2c_master_interrupt_handler+0x26>
    49d2:	8ba3      	ldrh	r3, [r4, #28]
    49d4:	b29b      	uxth	r3, r3
    49d6:	2b00      	cmp	r3, #0
    49d8:	d120      	bne.n	4a1c <_i2c_master_interrupt_handler+0x68>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    49da:	8b63      	ldrh	r3, [r4, #26]
    49dc:	b29b      	uxth	r3, r3
    49de:	2b00      	cmp	r3, #0
    49e0:	d007      	beq.n	49f2 <_i2c_master_interrupt_handler+0x3e>
    49e2:	8ba3      	ldrh	r3, [r4, #28]
    49e4:	b29b      	uxth	r3, r3
    49e6:	2b00      	cmp	r3, #0
    49e8:	d103      	bne.n	49f2 <_i2c_master_interrupt_handler+0x3e>
			(module->status == STATUS_BUSY) &&
    49ea:	3325      	adds	r3, #37	; 0x25
    49ec:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    49ee:	2b05      	cmp	r3, #5
    49f0:	d03a      	beq.n	4a68 <_i2c_master_interrupt_handler+0xb4>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    49f2:	8b63      	ldrh	r3, [r4, #26]
    49f4:	b29b      	uxth	r3, r3
    49f6:	2b00      	cmp	r3, #0
    49f8:	d013      	beq.n	4a22 <_i2c_master_interrupt_handler+0x6e>
    49fa:	8ba3      	ldrh	r3, [r4, #28]
    49fc:	b29b      	uxth	r3, r3
    49fe:	2b00      	cmp	r3, #0
    4a00:	d00f      	beq.n	4a22 <_i2c_master_interrupt_handler+0x6e>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    4a02:	8b6b      	ldrh	r3, [r5, #26]
    4a04:	069b      	lsls	r3, r3, #26
    4a06:	d44e      	bmi.n	4aa6 <_i2c_master_interrupt_handler+0xf2>
    4a08:	2a00      	cmp	r2, #0
    4a0a:	d003      	beq.n	4a14 <_i2c_master_interrupt_handler+0x60>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    4a0c:	8ba3      	ldrh	r3, [r4, #28]
    4a0e:	b29b      	uxth	r3, r3
    4a10:	2b01      	cmp	r3, #1
    4a12:	d048      	beq.n	4aa6 <_i2c_master_interrupt_handler+0xf2>
			module->status = STATUS_ERR_PACKET_COLLISION;
    4a14:	2241      	movs	r2, #65	; 0x41
    4a16:	2325      	movs	r3, #37	; 0x25
    4a18:	54e2      	strb	r2, [r4, r3]
    4a1a:	e002      	b.n	4a22 <_i2c_master_interrupt_handler+0x6e>
		_i2c_master_async_address_response(module);
    4a1c:	0020      	movs	r0, r4
    4a1e:	4b41      	ldr	r3, [pc, #260]	; (4b24 <_i2c_master_interrupt_handler+0x170>)
    4a20:	4798      	blx	r3
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4a22:	8b63      	ldrh	r3, [r4, #26]
    4a24:	b29b      	uxth	r3, r3
    4a26:	2b00      	cmp	r3, #0
    4a28:	d007      	beq.n	4a3a <_i2c_master_interrupt_handler+0x86>
    4a2a:	8ba3      	ldrh	r3, [r4, #28]
    4a2c:	b29b      	uxth	r3, r3
    4a2e:	2b00      	cmp	r3, #0
    4a30:	d103      	bne.n	4a3a <_i2c_master_interrupt_handler+0x86>
			(module->status == STATUS_BUSY) &&
    4a32:	3325      	adds	r3, #37	; 0x25
    4a34:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4a36:	2b05      	cmp	r3, #5
    4a38:	d041      	beq.n	4abe <_i2c_master_interrupt_handler+0x10a>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    4a3a:	2325      	movs	r3, #37	; 0x25
    4a3c:	5ce3      	ldrb	r3, [r4, r3]
    4a3e:	2b05      	cmp	r3, #5
    4a40:	d011      	beq.n	4a66 <_i2c_master_interrupt_handler+0xb2>
    4a42:	2325      	movs	r3, #37	; 0x25
    4a44:	5ce3      	ldrb	r3, [r4, r3]
    4a46:	2b00      	cmp	r3, #0
    4a48:	d00d      	beq.n	4a66 <_i2c_master_interrupt_handler+0xb2>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    4a4a:	2303      	movs	r3, #3
    4a4c:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    4a4e:	2300      	movs	r3, #0
    4a50:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    4a52:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    4a54:	3325      	adds	r3, #37	; 0x25
    4a56:	5ce3      	ldrb	r3, [r4, r3]
    4a58:	2b41      	cmp	r3, #65	; 0x41
    4a5a:	d002      	beq.n	4a62 <_i2c_master_interrupt_handler+0xae>
				module->send_stop) {
    4a5c:	7aa3      	ldrb	r3, [r4, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    4a5e:	2b00      	cmp	r3, #0
    4a60:	d151      	bne.n	4b06 <_i2c_master_interrupt_handler+0x152>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    4a62:	0773      	lsls	r3, r6, #29
    4a64:	d458      	bmi.n	4b18 <_i2c_master_interrupt_handler+0x164>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    4a66:	bd70      	pop	{r4, r5, r6, pc}
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    4a68:	331f      	adds	r3, #31
    4a6a:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    4a6c:	2b00      	cmp	r3, #0
    4a6e:	d1c0      	bne.n	49f2 <_i2c_master_interrupt_handler+0x3e>
		i2c_module->INTENCLR.reg =
    4a70:	3303      	adds	r3, #3
    4a72:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    4a74:	2300      	movs	r3, #0
    4a76:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    4a78:	3325      	adds	r3, #37	; 0x25
    4a7a:	2200      	movs	r2, #0
    4a7c:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    4a7e:	7aa3      	ldrb	r3, [r4, #10]
    4a80:	2b00      	cmp	r3, #0
    4a82:	d107      	bne.n	4a94 <_i2c_master_interrupt_handler+0xe0>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    4a84:	2301      	movs	r3, #1
    4a86:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    4a88:	07f3      	lsls	r3, r6, #31
    4a8a:	d5ca      	bpl.n	4a22 <_i2c_master_interrupt_handler+0x6e>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    4a8c:	68e3      	ldr	r3, [r4, #12]
    4a8e:	0020      	movs	r0, r4
    4a90:	4798      	blx	r3
    4a92:	e7c6      	b.n	4a22 <_i2c_master_interrupt_handler+0x6e>
			_i2c_master_wait_for_sync(module);
    4a94:	0020      	movs	r0, r4
    4a96:	4b24      	ldr	r3, [pc, #144]	; (4b28 <_i2c_master_interrupt_handler+0x174>)
    4a98:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4a9a:	686a      	ldr	r2, [r5, #4]
    4a9c:	23c0      	movs	r3, #192	; 0xc0
    4a9e:	029b      	lsls	r3, r3, #10
    4aa0:	4313      	orrs	r3, r2
    4aa2:	606b      	str	r3, [r5, #4]
    4aa4:	e7f0      	b.n	4a88 <_i2c_master_interrupt_handler+0xd4>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4aa6:	2324      	movs	r3, #36	; 0x24
    4aa8:	5ce3      	ldrb	r3, [r4, r3]
    4aaa:	2b00      	cmp	r3, #0
    4aac:	d103      	bne.n	4ab6 <_i2c_master_interrupt_handler+0x102>
			_i2c_master_write(module);
    4aae:	0020      	movs	r0, r4
    4ab0:	4b1e      	ldr	r3, [pc, #120]	; (4b2c <_i2c_master_interrupt_handler+0x178>)
    4ab2:	4798      	blx	r3
    4ab4:	e7b5      	b.n	4a22 <_i2c_master_interrupt_handler+0x6e>
			_i2c_master_read(module);
    4ab6:	0020      	movs	r0, r4
    4ab8:	4b1d      	ldr	r3, [pc, #116]	; (4b30 <_i2c_master_interrupt_handler+0x17c>)
    4aba:	4798      	blx	r3
    4abc:	e7b1      	b.n	4a22 <_i2c_master_interrupt_handler+0x6e>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    4abe:	331f      	adds	r3, #31
    4ac0:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    4ac2:	2b01      	cmp	r3, #1
    4ac4:	d1b9      	bne.n	4a3a <_i2c_master_interrupt_handler+0x86>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    4ac6:	7e2b      	ldrb	r3, [r5, #24]
    4ac8:	079b      	lsls	r3, r3, #30
    4aca:	d501      	bpl.n	4ad0 <_i2c_master_interrupt_handler+0x11c>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    4acc:	2302      	movs	r3, #2
    4ace:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    4ad0:	2303      	movs	r3, #3
    4ad2:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    4ad4:	2300      	movs	r3, #0
    4ad6:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    4ad8:	3325      	adds	r3, #37	; 0x25
    4ada:	2200      	movs	r2, #0
    4adc:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    4ade:	07b3      	lsls	r3, r6, #30
    4ae0:	d503      	bpl.n	4aea <_i2c_master_interrupt_handler+0x136>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    4ae2:	2324      	movs	r3, #36	; 0x24
    4ae4:	5ce3      	ldrb	r3, [r4, r3]
    4ae6:	2b01      	cmp	r3, #1
    4ae8:	d009      	beq.n	4afe <_i2c_master_interrupt_handler+0x14a>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    4aea:	07f3      	lsls	r3, r6, #31
    4aec:	d5a5      	bpl.n	4a3a <_i2c_master_interrupt_handler+0x86>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    4aee:	2324      	movs	r3, #36	; 0x24
    4af0:	5ce3      	ldrb	r3, [r4, r3]
    4af2:	2b00      	cmp	r3, #0
    4af4:	d1a1      	bne.n	4a3a <_i2c_master_interrupt_handler+0x86>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    4af6:	68e3      	ldr	r3, [r4, #12]
    4af8:	0020      	movs	r0, r4
    4afa:	4798      	blx	r3
    4afc:	e79d      	b.n	4a3a <_i2c_master_interrupt_handler+0x86>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    4afe:	6923      	ldr	r3, [r4, #16]
    4b00:	0020      	movs	r0, r4
    4b02:	4798      	blx	r3
    4b04:	e799      	b.n	4a3a <_i2c_master_interrupt_handler+0x86>
			_i2c_master_wait_for_sync(module);
    4b06:	0020      	movs	r0, r4
    4b08:	4b07      	ldr	r3, [pc, #28]	; (4b28 <_i2c_master_interrupt_handler+0x174>)
    4b0a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    4b0c:	686a      	ldr	r2, [r5, #4]
    4b0e:	23e0      	movs	r3, #224	; 0xe0
    4b10:	02db      	lsls	r3, r3, #11
    4b12:	4313      	orrs	r3, r2
    4b14:	606b      	str	r3, [r5, #4]
    4b16:	e7a4      	b.n	4a62 <_i2c_master_interrupt_handler+0xae>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    4b18:	6963      	ldr	r3, [r4, #20]
    4b1a:	0020      	movs	r0, r4
    4b1c:	4798      	blx	r3
}
    4b1e:	e7a2      	b.n	4a66 <_i2c_master_interrupt_handler+0xb2>
    4b20:	200029b4 	.word	0x200029b4
    4b24:	0000493d 	.word	0x0000493d
    4b28:	0000486d 	.word	0x0000486d
    4b2c:	00004901 	.word	0x00004901
    4b30:	00004879 	.word	0x00004879

00004b34 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    4b34:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    4b36:	0080      	lsls	r0, r0, #2
    4b38:	4b16      	ldr	r3, [pc, #88]	; (4b94 <_tc_interrupt_handler+0x60>)
    4b3a:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    4b3c:	682b      	ldr	r3, [r5, #0]
    4b3e:	7b9c      	ldrb	r4, [r3, #14]
			module->register_callback_mask &
    4b40:	7e2a      	ldrb	r2, [r5, #24]
			module->enable_callback_mask;
    4b42:	7e6b      	ldrb	r3, [r5, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    4b44:	4014      	ands	r4, r2
    4b46:	401c      	ands	r4, r3

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    4b48:	07e3      	lsls	r3, r4, #31
    4b4a:	d406      	bmi.n	4b5a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    4b4c:	07a3      	lsls	r3, r4, #30
    4b4e:	d40b      	bmi.n	4b68 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    4b50:	06e3      	lsls	r3, r4, #27
    4b52:	d410      	bmi.n	4b76 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    4b54:	06a3      	lsls	r3, r4, #26
    4b56:	d415      	bmi.n	4b84 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    4b58:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    4b5a:	0028      	movs	r0, r5
    4b5c:	68ab      	ldr	r3, [r5, #8]
    4b5e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    4b60:	2301      	movs	r3, #1
    4b62:	682a      	ldr	r2, [r5, #0]
    4b64:	7393      	strb	r3, [r2, #14]
    4b66:	e7f1      	b.n	4b4c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    4b68:	0028      	movs	r0, r5
    4b6a:	68eb      	ldr	r3, [r5, #12]
    4b6c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    4b6e:	2302      	movs	r3, #2
    4b70:	682a      	ldr	r2, [r5, #0]
    4b72:	7393      	strb	r3, [r2, #14]
    4b74:	e7ec      	b.n	4b50 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    4b76:	0028      	movs	r0, r5
    4b78:	692b      	ldr	r3, [r5, #16]
    4b7a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    4b7c:	2310      	movs	r3, #16
    4b7e:	682a      	ldr	r2, [r5, #0]
    4b80:	7393      	strb	r3, [r2, #14]
    4b82:	e7e7      	b.n	4b54 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    4b84:	0028      	movs	r0, r5
    4b86:	696b      	ldr	r3, [r5, #20]
    4b88:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    4b8a:	682b      	ldr	r3, [r5, #0]
    4b8c:	2220      	movs	r2, #32
    4b8e:	739a      	strb	r2, [r3, #14]
}
    4b90:	e7e2      	b.n	4b58 <_tc_interrupt_handler+0x24>
    4b92:	46c0      	nop			; (mov r8, r8)
    4b94:	20002624 	.word	0x20002624

00004b98 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    4b98:	b510      	push	{r4, lr}
    4b9a:	2000      	movs	r0, #0
    4b9c:	4b01      	ldr	r3, [pc, #4]	; (4ba4 <TC3_Handler+0xc>)
    4b9e:	4798      	blx	r3
    4ba0:	bd10      	pop	{r4, pc}
    4ba2:	46c0      	nop			; (mov r8, r8)
    4ba4:	00004b35 	.word	0x00004b35

00004ba8 <TC4_Handler>:
    4ba8:	b510      	push	{r4, lr}
    4baa:	2001      	movs	r0, #1
    4bac:	4b01      	ldr	r3, [pc, #4]	; (4bb4 <TC4_Handler+0xc>)
    4bae:	4798      	blx	r3
    4bb0:	bd10      	pop	{r4, pc}
    4bb2:	46c0      	nop			; (mov r8, r8)
    4bb4:	00004b35 	.word	0x00004b35

00004bb8 <TC5_Handler>:
    4bb8:	b510      	push	{r4, lr}
    4bba:	2002      	movs	r0, #2
    4bbc:	4b01      	ldr	r3, [pc, #4]	; (4bc4 <TC5_Handler+0xc>)
    4bbe:	4798      	blx	r3
    4bc0:	bd10      	pop	{r4, pc}
    4bc2:	46c0      	nop			; (mov r8, r8)
    4bc4:	00004b35 	.word	0x00004b35

00004bc8 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    4bc8:	b530      	push	{r4, r5, lr}
    4bca:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    4bcc:	aa01      	add	r2, sp, #4
    4bce:	4b09      	ldr	r3, [pc, #36]	; (4bf4 <_tc_get_inst_index+0x2c>)
    4bd0:	cb32      	ldmia	r3!, {r1, r4, r5}
    4bd2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    4bd4:	2300      	movs	r3, #0
    4bd6:	2b02      	cmp	r3, #2
    4bd8:	d808      	bhi.n	4bec <_tc_get_inst_index+0x24>
		if (hw == tc_modules[i]) {
    4bda:	009a      	lsls	r2, r3, #2
    4bdc:	a901      	add	r1, sp, #4
    4bde:	5852      	ldr	r2, [r2, r1]
    4be0:	4282      	cmp	r2, r0
    4be2:	d001      	beq.n	4be8 <_tc_get_inst_index+0x20>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    4be4:	3301      	adds	r3, #1
    4be6:	e7f6      	b.n	4bd6 <_tc_get_inst_index+0xe>
			return i;
    4be8:	b2d8      	uxtb	r0, r3
    4bea:	e000      	b.n	4bee <_tc_get_inst_index+0x26>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    4bec:	2000      	movs	r0, #0
}
    4bee:	b005      	add	sp, #20
    4bf0:	bd30      	pop	{r4, r5, pc}
    4bf2:	46c0      	nop			; (mov r8, r8)
    4bf4:	0000ca44 	.word	0x0000ca44

00004bf8 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    4bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bfa:	b087      	sub	sp, #28
    4bfc:	0004      	movs	r4, r0
    4bfe:	000d      	movs	r5, r1
    4c00:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    4c02:	0008      	movs	r0, r1
    4c04:	4b8a      	ldr	r3, [pc, #552]	; (4e30 <tc_init+0x238>)
    4c06:	4798      	blx	r3
    4c08:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    4c0a:	aa05      	add	r2, sp, #20
    4c0c:	4b89      	ldr	r3, [pc, #548]	; (4e34 <tc_init+0x23c>)
    4c0e:	8999      	ldrh	r1, [r3, #12]
    4c10:	8011      	strh	r1, [r2, #0]
    4c12:	7b99      	ldrb	r1, [r3, #14]
    4c14:	7091      	strb	r1, [r2, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    4c16:	691a      	ldr	r2, [r3, #16]
    4c18:	9203      	str	r2, [sp, #12]
    4c1a:	8a9a      	ldrh	r2, [r3, #20]
    4c1c:	ab03      	add	r3, sp, #12
    4c1e:	809a      	strh	r2, [r3, #4]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    4c20:	2300      	movs	r3, #0
    4c22:	e005      	b.n	4c30 <tc_init+0x38>
		module_inst->callback[i]        = NULL;
    4c24:	1c9a      	adds	r2, r3, #2
    4c26:	0092      	lsls	r2, r2, #2
    4c28:	2100      	movs	r1, #0
    4c2a:	5111      	str	r1, [r2, r4]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    4c2c:	3301      	adds	r3, #1
    4c2e:	b2db      	uxtb	r3, r3
    4c30:	2b03      	cmp	r3, #3
    4c32:	d9f7      	bls.n	4c24 <tc_init+0x2c>
	}
	module_inst->register_callback_mask     = 0x00;
    4c34:	2300      	movs	r3, #0
    4c36:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    4c38:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    4c3a:	00bb      	lsls	r3, r7, #2
    4c3c:	4a7e      	ldr	r2, [pc, #504]	; (4e38 <tc_init+0x240>)
    4c3e:	509c      	str	r4, [r3, r2]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    4c40:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    4c42:	78b3      	ldrb	r3, [r6, #2]
    4c44:	2b08      	cmp	r3, #8
    4c46:	d006      	beq.n	4c56 <tc_init+0x5e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    4c48:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    4c4a:	882b      	ldrh	r3, [r5, #0]
    4c4c:	07db      	lsls	r3, r3, #31
    4c4e:	d506      	bpl.n	4c5e <tc_init+0x66>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    4c50:	2005      	movs	r0, #5
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    4c52:	b007      	add	sp, #28
    4c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    4c56:	07fa      	lsls	r2, r7, #31
    4c58:	d4f6      	bmi.n	4c48 <tc_init+0x50>
		return STATUS_ERR_INVALID_ARG;
    4c5a:	2017      	movs	r0, #23
    4c5c:	e7f9      	b.n	4c52 <tc_init+0x5a>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    4c5e:	7beb      	ldrb	r3, [r5, #15]
    4c60:	06db      	lsls	r3, r3, #27
    4c62:	d501      	bpl.n	4c68 <tc_init+0x70>
		return STATUS_ERR_DENIED;
    4c64:	201c      	movs	r0, #28
    4c66:	e7f4      	b.n	4c52 <tc_init+0x5a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    4c68:	882b      	ldrh	r3, [r5, #0]
    4c6a:	079b      	lsls	r3, r3, #30
    4c6c:	d501      	bpl.n	4c72 <tc_init+0x7a>
		return STATUS_ERR_DENIED;
    4c6e:	201c      	movs	r0, #28
    4c70:	e7ef      	b.n	4c52 <tc_init+0x5a>
	if (config->pwm_channel[0].enabled) {
    4c72:	7c33      	ldrb	r3, [r6, #16]
    4c74:	2b00      	cmp	r3, #0
    4c76:	d146      	bne.n	4d06 <tc_init+0x10e>
	if (config->pwm_channel[1].enabled) {
    4c78:	7f33      	ldrb	r3, [r6, #28]
    4c7a:	2b00      	cmp	r3, #0
    4c7c:	d14f      	bne.n	4d1e <tc_init+0x126>
			inst_pm_apbmask[instance]);
    4c7e:	007b      	lsls	r3, r7, #1
    4c80:	aa03      	add	r2, sp, #12
    4c82:	5a9b      	ldrh	r3, [r3, r2]
    4c84:	4a6d      	ldr	r2, [pc, #436]	; (4e3c <tc_init+0x244>)
    4c86:	6a11      	ldr	r1, [r2, #32]
    4c88:	430b      	orrs	r3, r1
    4c8a:	6213      	str	r3, [r2, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    4c8c:	78b3      	ldrb	r3, [r6, #2]
    4c8e:	2b08      	cmp	r3, #8
    4c90:	d055      	beq.n	4d3e <tc_init+0x146>
    4c92:	a901      	add	r1, sp, #4
	gclk_chan_config.source_generator = config->clock_source;
    4c94:	7833      	ldrb	r3, [r6, #0]
    4c96:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    4c98:	ab05      	add	r3, sp, #20
    4c9a:	5ddf      	ldrb	r7, [r3, r7]
    4c9c:	0038      	movs	r0, r7
    4c9e:	4b68      	ldr	r3, [pc, #416]	; (4e40 <tc_init+0x248>)
    4ca0:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    4ca2:	0038      	movs	r0, r7
    4ca4:	4b67      	ldr	r3, [pc, #412]	; (4e44 <tc_init+0x24c>)
    4ca6:	4798      	blx	r3
			(uint32_t)config->counter_size |
    4ca8:	78b3      	ldrb	r3, [r6, #2]
			(uint32_t)config->wave_generation |
    4caa:	79b1      	ldrb	r1, [r6, #6]
			(uint32_t)config->reload_action |
    4cac:	8932      	ldrh	r2, [r6, #8]
			(uint32_t)config->wave_generation |
    4cae:	430b      	orrs	r3, r1
    4cb0:	431a      	orrs	r2, r3
			(uint32_t)config->clock_prescaler;
    4cb2:	88b3      	ldrh	r3, [r6, #4]
	ctrla_tmp =
    4cb4:	431a      	orrs	r2, r3
	if (config->run_in_standby) {
    4cb6:	7873      	ldrb	r3, [r6, #1]
    4cb8:	2b00      	cmp	r3, #0
    4cba:	d002      	beq.n	4cc2 <tc_init+0xca>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    4cbc:	2380      	movs	r3, #128	; 0x80
    4cbe:	011b      	lsls	r3, r3, #4
    4cc0:	431a      	orrs	r2, r3
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4cc2:	6823      	ldr	r3, [r4, #0]
    4cc4:	7bdb      	ldrb	r3, [r3, #15]
	while (tc_is_syncing(module_inst)) {
    4cc6:	b25b      	sxtb	r3, r3
    4cc8:	2b00      	cmp	r3, #0
    4cca:	dbfa      	blt.n	4cc2 <tc_init+0xca>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    4ccc:	802a      	strh	r2, [r5, #0]
	if (config->oneshot) {
    4cce:	7b73      	ldrb	r3, [r6, #13]
    4cd0:	2b00      	cmp	r3, #0
    4cd2:	d13d      	bne.n	4d50 <tc_init+0x158>
	uint8_t ctrlbset_tmp = 0;
    4cd4:	2200      	movs	r2, #0
	if (config->count_direction) {
    4cd6:	7bb3      	ldrb	r3, [r6, #14]
    4cd8:	2b00      	cmp	r3, #0
    4cda:	d002      	beq.n	4ce2 <tc_init+0xea>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    4cdc:	2301      	movs	r3, #1
    4cde:	431a      	orrs	r2, r3
    4ce0:	b2d2      	uxtb	r2, r2
    4ce2:	6823      	ldr	r3, [r4, #0]
    4ce4:	7bdb      	ldrb	r3, [r3, #15]
	while (tc_is_syncing(module_inst)) {
    4ce6:	b25b      	sxtb	r3, r3
    4ce8:	2b00      	cmp	r3, #0
    4cea:	dbfa      	blt.n	4ce2 <tc_init+0xea>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    4cec:	23ff      	movs	r3, #255	; 0xff
    4cee:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    4cf0:	2a00      	cmp	r2, #0
    4cf2:	d005      	beq.n	4d00 <tc_init+0x108>
    4cf4:	6823      	ldr	r3, [r4, #0]
    4cf6:	7bdb      	ldrb	r3, [r3, #15]
		while (tc_is_syncing(module_inst)) {
    4cf8:	b25b      	sxtb	r3, r3
    4cfa:	2b00      	cmp	r3, #0
    4cfc:	dbfa      	blt.n	4cf4 <tc_init+0xfc>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    4cfe:	716a      	strb	r2, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    4d00:	7ab2      	ldrb	r2, [r6, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    4d02:	2300      	movs	r3, #0
    4d04:	e028      	b.n	4d58 <tc_init+0x160>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4d06:	a902      	add	r1, sp, #8
    4d08:	2301      	movs	r3, #1
    4d0a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    4d0c:	2200      	movs	r2, #0
    4d0e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    4d10:	7e32      	ldrb	r2, [r6, #24]
    4d12:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    4d14:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    4d16:	7d30      	ldrb	r0, [r6, #20]
    4d18:	4b4b      	ldr	r3, [pc, #300]	; (4e48 <tc_init+0x250>)
    4d1a:	4798      	blx	r3
    4d1c:	e7ac      	b.n	4c78 <tc_init+0x80>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4d1e:	a902      	add	r1, sp, #8
    4d20:	2301      	movs	r3, #1
    4d22:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    4d24:	2200      	movs	r2, #0
    4d26:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    4d28:	3224      	adds	r2, #36	; 0x24
    4d2a:	18b2      	adds	r2, r6, r2
    4d2c:	7812      	ldrb	r2, [r2, #0]
    4d2e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    4d30:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    4d32:	331f      	adds	r3, #31
    4d34:	18f3      	adds	r3, r6, r3
    4d36:	7818      	ldrb	r0, [r3, #0]
    4d38:	4b43      	ldr	r3, [pc, #268]	; (4e48 <tc_init+0x250>)
    4d3a:	4798      	blx	r3
    4d3c:	e79f      	b.n	4c7e <tc_init+0x86>
				inst_pm_apbmask[instance + 1]);
    4d3e:	1c7b      	adds	r3, r7, #1
    4d40:	005b      	lsls	r3, r3, #1
    4d42:	aa03      	add	r2, sp, #12
    4d44:	5a9b      	ldrh	r3, [r3, r2]
    4d46:	4a3d      	ldr	r2, [pc, #244]	; (4e3c <tc_init+0x244>)
    4d48:	6a11      	ldr	r1, [r2, #32]
    4d4a:	430b      	orrs	r3, r1
    4d4c:	6213      	str	r3, [r2, #32]
    4d4e:	e7a0      	b.n	4c92 <tc_init+0x9a>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    4d50:	2204      	movs	r2, #4
    4d52:	e7c0      	b.n	4cd6 <tc_init+0xde>
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    4d54:	3301      	adds	r3, #1
    4d56:	b2db      	uxtb	r3, r3
    4d58:	2b01      	cmp	r3, #1
    4d5a:	d808      	bhi.n	4d6e <tc_init+0x176>
		if (config->enable_capture_on_channel[i] == true) {
    4d5c:	18f1      	adds	r1, r6, r3
    4d5e:	7ac9      	ldrb	r1, [r1, #11]
    4d60:	2900      	cmp	r1, #0
    4d62:	d0f7      	beq.n	4d54 <tc_init+0x15c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    4d64:	2110      	movs	r1, #16
    4d66:	4099      	lsls	r1, r3
    4d68:	430a      	orrs	r2, r1
    4d6a:	b2d2      	uxtb	r2, r2
    4d6c:	e7f2      	b.n	4d54 <tc_init+0x15c>
    4d6e:	6823      	ldr	r3, [r4, #0]
    4d70:	7bdb      	ldrb	r3, [r3, #15]
	while (tc_is_syncing(module_inst)) {
    4d72:	b25b      	sxtb	r3, r3
    4d74:	2b00      	cmp	r3, #0
    4d76:	dbfa      	blt.n	4d6e <tc_init+0x176>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    4d78:	71aa      	strb	r2, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4d7a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4d7c:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    4d7e:	b25b      	sxtb	r3, r3
    4d80:	2b00      	cmp	r3, #0
    4d82:	dbfa      	blt.n	4d7a <tc_init+0x182>
	switch (module_inst->counter_size) {
    4d84:	7923      	ldrb	r3, [r4, #4]
    4d86:	2b04      	cmp	r3, #4
    4d88:	d005      	beq.n	4d96 <tc_init+0x19e>
    4d8a:	2b08      	cmp	r3, #8
    4d8c:	d03a      	beq.n	4e04 <tc_init+0x20c>
    4d8e:	2b00      	cmp	r3, #0
    4d90:	d022      	beq.n	4dd8 <tc_init+0x1e0>
	return STATUS_ERR_INVALID_ARG;
    4d92:	2017      	movs	r0, #23
    4d94:	e75d      	b.n	4c52 <tc_init+0x5a>
    4d96:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4d98:	b25b      	sxtb	r3, r3
    4d9a:	2b00      	cmp	r3, #0
    4d9c:	dbfb      	blt.n	4d96 <tc_init+0x19e>
					config->counter_8_bit.value;
    4d9e:	2328      	movs	r3, #40	; 0x28
    4da0:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    4da2:	742b      	strb	r3, [r5, #16]
    4da4:	6823      	ldr	r3, [r4, #0]
    4da6:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    4da8:	b25b      	sxtb	r3, r3
    4daa:	2b00      	cmp	r3, #0
    4dac:	dbfa      	blt.n	4da4 <tc_init+0x1ac>
					config->counter_8_bit.period;
    4dae:	2329      	movs	r3, #41	; 0x29
    4db0:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    4db2:	752b      	strb	r3, [r5, #20]
    4db4:	6823      	ldr	r3, [r4, #0]
    4db6:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    4db8:	b25b      	sxtb	r3, r3
    4dba:	2b00      	cmp	r3, #0
    4dbc:	dbfa      	blt.n	4db4 <tc_init+0x1bc>
					config->counter_8_bit.compare_capture_channel[0];
    4dbe:	232a      	movs	r3, #42	; 0x2a
    4dc0:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    4dc2:	762b      	strb	r3, [r5, #24]
    4dc4:	6823      	ldr	r3, [r4, #0]
    4dc6:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    4dc8:	b25b      	sxtb	r3, r3
    4dca:	2b00      	cmp	r3, #0
    4dcc:	dbfa      	blt.n	4dc4 <tc_init+0x1cc>
					config->counter_8_bit.compare_capture_channel[1];
    4dce:	232b      	movs	r3, #43	; 0x2b
    4dd0:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    4dd2:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    4dd4:	2000      	movs	r0, #0
    4dd6:	e73c      	b.n	4c52 <tc_init+0x5a>
    4dd8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4dda:	b25b      	sxtb	r3, r3
    4ddc:	2b00      	cmp	r3, #0
    4dde:	dbfb      	blt.n	4dd8 <tc_init+0x1e0>
				= config->counter_16_bit.value;
    4de0:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    4de2:	822b      	strh	r3, [r5, #16]
    4de4:	6823      	ldr	r3, [r4, #0]
    4de6:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    4de8:	b25b      	sxtb	r3, r3
    4dea:	2b00      	cmp	r3, #0
    4dec:	dbfa      	blt.n	4de4 <tc_init+0x1ec>
					config->counter_16_bit.compare_capture_channel[0];
    4dee:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    4df0:	832b      	strh	r3, [r5, #24]
    4df2:	6823      	ldr	r3, [r4, #0]
    4df4:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    4df6:	b25b      	sxtb	r3, r3
    4df8:	2b00      	cmp	r3, #0
    4dfa:	dbfa      	blt.n	4df2 <tc_init+0x1fa>
					config->counter_16_bit.compare_capture_channel[1];
    4dfc:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    4dfe:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    4e00:	2000      	movs	r0, #0
    4e02:	e726      	b.n	4c52 <tc_init+0x5a>
    4e04:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4e06:	b25b      	sxtb	r3, r3
    4e08:	2b00      	cmp	r3, #0
    4e0a:	dbfb      	blt.n	4e04 <tc_init+0x20c>
				= config->counter_32_bit.value;
    4e0c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    4e0e:	612b      	str	r3, [r5, #16]
    4e10:	6823      	ldr	r3, [r4, #0]
    4e12:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    4e14:	b25b      	sxtb	r3, r3
    4e16:	2b00      	cmp	r3, #0
    4e18:	dbfa      	blt.n	4e10 <tc_init+0x218>
			hw->COUNT32.CC[0].reg =
    4e1a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    4e1c:	61ab      	str	r3, [r5, #24]
    4e1e:	6823      	ldr	r3, [r4, #0]
    4e20:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    4e22:	b25b      	sxtb	r3, r3
    4e24:	2b00      	cmp	r3, #0
    4e26:	dbfa      	blt.n	4e1e <tc_init+0x226>
					config->counter_32_bit.compare_capture_channel[1];
    4e28:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    4e2a:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    4e2c:	2000      	movs	r0, #0
    4e2e:	e710      	b.n	4c52 <tc_init+0x5a>
    4e30:	00004bc9 	.word	0x00004bc9
    4e34:	0000ca44 	.word	0x0000ca44
    4e38:	20002624 	.word	0x20002624
    4e3c:	40000400 	.word	0x40000400
    4e40:	00008fa1 	.word	0x00008fa1
    4e44:	00008f19 	.word	0x00008f19
    4e48:	00009085 	.word	0x00009085

00004e4c <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    4e4c:	b510      	push	{r4, lr}
    4e4e:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    4e50:	4b28      	ldr	r3, [pc, #160]	; (4ef4 <udd_sleep_mode+0xa8>)
    4e52:	681b      	ldr	r3, [r3, #0]
    4e54:	9303      	str	r3, [sp, #12]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    4e56:	4b28      	ldr	r3, [pc, #160]	; (4ef8 <udd_sleep_mode+0xac>)
    4e58:	781b      	ldrb	r3, [r3, #0]
    4e5a:	4283      	cmp	r3, r0
    4e5c:	d007      	beq.n	4e6e <udd_sleep_mode+0x22>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    4e5e:	2800      	cmp	r0, #0
    4e60:	d107      	bne.n	4e72 <udd_sleep_mode+0x26>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    4e62:	4b25      	ldr	r3, [pc, #148]	; (4ef8 <udd_sleep_mode+0xac>)
    4e64:	781b      	ldrb	r3, [r3, #0]
    4e66:	2b00      	cmp	r3, #0
    4e68:	d123      	bne.n	4eb2 <udd_sleep_mode+0x66>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    4e6a:	4b23      	ldr	r3, [pc, #140]	; (4ef8 <udd_sleep_mode+0xac>)
    4e6c:	7018      	strb	r0, [r3, #0]
}
    4e6e:	b004      	add	sp, #16
    4e70:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    4e72:	ab03      	add	r3, sp, #12
    4e74:	5c1b      	ldrb	r3, [r3, r0]
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    4e76:	4a21      	ldr	r2, [pc, #132]	; (4efc <udd_sleep_mode+0xb0>)
    4e78:	5cd2      	ldrb	r2, [r2, r3]
    4e7a:	2aff      	cmp	r2, #255	; 0xff
    4e7c:	d100      	bne.n	4e80 <udd_sleep_mode+0x34>
    4e7e:	e7fe      	b.n	4e7e <udd_sleep_mode+0x32>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4e80:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    4e84:	4251      	negs	r1, r2
    4e86:	414a      	adcs	r2, r1
    4e88:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    4e8a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    4e8c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4e90:	2100      	movs	r1, #0
    4e92:	4a1b      	ldr	r2, [pc, #108]	; (4f00 <udd_sleep_mode+0xb4>)
    4e94:	7011      	strb	r1, [r2, #0]
	return flags;
    4e96:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    4e98:	4918      	ldr	r1, [pc, #96]	; (4efc <udd_sleep_mode+0xb0>)
    4e9a:	5cca      	ldrb	r2, [r1, r3]
    4e9c:	3201      	adds	r2, #1
    4e9e:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4ea0:	2c00      	cmp	r4, #0
    4ea2:	d0de      	beq.n	4e62 <udd_sleep_mode+0x16>
		cpu_irq_enable();
    4ea4:	2201      	movs	r2, #1
    4ea6:	4b16      	ldr	r3, [pc, #88]	; (4f00 <udd_sleep_mode+0xb4>)
    4ea8:	701a      	strb	r2, [r3, #0]
    4eaa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4eae:	b662      	cpsie	i
    4eb0:	e7d7      	b.n	4e62 <udd_sleep_mode+0x16>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    4eb2:	aa03      	add	r2, sp, #12
    4eb4:	5cd3      	ldrb	r3, [r2, r3]
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    4eb6:	4a11      	ldr	r2, [pc, #68]	; (4efc <udd_sleep_mode+0xb0>)
    4eb8:	5cd2      	ldrb	r2, [r2, r3]
    4eba:	2a00      	cmp	r2, #0
    4ebc:	d100      	bne.n	4ec0 <udd_sleep_mode+0x74>
    4ebe:	e7fe      	b.n	4ebe <udd_sleep_mode+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4ec0:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    4ec4:	4251      	negs	r1, r2
    4ec6:	414a      	adcs	r2, r1
    4ec8:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    4eca:	b672      	cpsid	i
    4ecc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4ed0:	2100      	movs	r1, #0
    4ed2:	4a0b      	ldr	r2, [pc, #44]	; (4f00 <udd_sleep_mode+0xb4>)
    4ed4:	7011      	strb	r1, [r2, #0]
	return flags;
    4ed6:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    4ed8:	4908      	ldr	r1, [pc, #32]	; (4efc <udd_sleep_mode+0xb0>)
    4eda:	5cca      	ldrb	r2, [r1, r3]
    4edc:	3a01      	subs	r2, #1
    4ede:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    4ee0:	2c00      	cmp	r4, #0
    4ee2:	d0c2      	beq.n	4e6a <udd_sleep_mode+0x1e>
		cpu_irq_enable();
    4ee4:	2201      	movs	r2, #1
    4ee6:	4b06      	ldr	r3, [pc, #24]	; (4f00 <udd_sleep_mode+0xb4>)
    4ee8:	701a      	strb	r2, [r3, #0]
    4eea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4eee:	b662      	cpsie	i
    4ef0:	e7bb      	b.n	4e6a <udd_sleep_mode+0x1e>
    4ef2:	46c0      	nop			; (mov r8, r8)
    4ef4:	0000ca5c 	.word	0x0000ca5c
    4ef8:	20000f04 	.word	0x20000f04
    4efc:	200029d8 	.word	0x200029d8
    4f00:	20000108 	.word	0x20000108

00004f04 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    4f04:	2800      	cmp	r0, #0
    4f06:	d00d      	beq.n	4f24 <udd_ep_get_job+0x20>
    4f08:	2880      	cmp	r0, #128	; 0x80
    4f0a:	d00d      	beq.n	4f28 <udd_ep_get_job+0x24>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    4f0c:	230f      	movs	r3, #15
    4f0e:	4003      	ands	r3, r0
    4f10:	005b      	lsls	r3, r3, #1
    4f12:	09c0      	lsrs	r0, r0, #7
    4f14:	1818      	adds	r0, r3, r0
    4f16:	3802      	subs	r0, #2
    4f18:	0083      	lsls	r3, r0, #2
    4f1a:	1818      	adds	r0, r3, r0
    4f1c:	0083      	lsls	r3, r0, #2
    4f1e:	4803      	ldr	r0, [pc, #12]	; (4f2c <udd_ep_get_job+0x28>)
    4f20:	18c0      	adds	r0, r0, r3
	}
}
    4f22:	4770      	bx	lr
		return NULL;
    4f24:	2000      	movs	r0, #0
    4f26:	e7fc      	b.n	4f22 <udd_ep_get_job+0x1e>
    4f28:	2000      	movs	r0, #0
    4f2a:	e7fa      	b.n	4f22 <udd_ep_get_job+0x1e>
    4f2c:	20000e8c 	.word	0x20000e8c

00004f30 <udd_ctrl_fetch_ram>:
/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    4f30:	4b0a      	ldr	r3, [pc, #40]	; (4f5c <udd_ctrl_fetch_ram+0x2c>)
    4f32:	7819      	ldrb	r1, [r3, #0]
    4f34:	4a0a      	ldr	r2, [pc, #40]	; (4f60 <udd_ctrl_fetch_ram+0x30>)
    4f36:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    4f38:	7859      	ldrb	r1, [r3, #1]
    4f3a:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    4f3c:	78d9      	ldrb	r1, [r3, #3]
    4f3e:	0209      	lsls	r1, r1, #8
    4f40:	7898      	ldrb	r0, [r3, #2]
    4f42:	1809      	adds	r1, r1, r0
    4f44:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    4f46:	7959      	ldrb	r1, [r3, #5]
    4f48:	0209      	lsls	r1, r1, #8
    4f4a:	7918      	ldrb	r0, [r3, #4]
    4f4c:	1809      	adds	r1, r1, r0
    4f4e:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    4f50:	79d9      	ldrb	r1, [r3, #7]
    4f52:	0209      	lsls	r1, r1, #8
    4f54:	799b      	ldrb	r3, [r3, #6]
    4f56:	18cb      	adds	r3, r1, r3
    4f58:	80d3      	strh	r3, [r2, #6]
}
    4f5a:	4770      	bx	lr
    4f5c:	20002870 	.word	0x20002870
    4f60:	20002858 	.word	0x20002858

00004f64 <udd_ep_trans_in_next>:
{
    4f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f66:	46ce      	mov	lr, r9
    4f68:	4647      	mov	r7, r8
    4f6a:	b580      	push	{r7, lr}
    4f6c:	0004      	movs	r4, r0
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    4f6e:	7983      	ldrb	r3, [r0, #6]
    4f70:	4699      	mov	r9, r3
	ptr_job = udd_ep_get_job(ep);
    4f72:	0018      	movs	r0, r3
    4f74:	4b2c      	ldr	r3, [pc, #176]	; (5028 <udd_ep_trans_in_next+0xc4>)
    4f76:	4798      	blx	r3
    4f78:	0005      	movs	r5, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    4f7a:	270f      	movs	r7, #15
    4f7c:	464b      	mov	r3, r9
    4f7e:	401f      	ands	r7, r3
	ep_size = ptr_job->ep_size;
    4f80:	8a03      	ldrh	r3, [r0, #16]
    4f82:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->sent_bytes;
    4f84:	8866      	ldrh	r6, [r4, #2]
	ptr_job->nb_trans += nb_trans;
    4f86:	68c3      	ldr	r3, [r0, #12]
    4f88:	469c      	mov	ip, r3
    4f8a:	4466      	add	r6, ip
    4f8c:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    4f8e:	6884      	ldr	r4, [r0, #8]
    4f90:	42a6      	cmp	r6, r4
    4f92:	d02e      	beq.n	4ff2 <udd_ep_trans_in_next+0x8e>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    4f94:	b2a4      	uxth	r4, r4
    4f96:	b2b1      	uxth	r1, r6
    4f98:	1a64      	subs	r4, r4, r1
    4f9a:	b2a4      	uxth	r4, r4
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    4f9c:	4b23      	ldr	r3, [pc, #140]	; (502c <udd_ep_trans_in_next+0xc8>)
    4f9e:	429c      	cmp	r4, r3
    4fa0:	d907      	bls.n	4fb2 <udd_ep_trans_in_next+0x4e>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    4fa2:	001c      	movs	r4, r3
    4fa4:	4641      	mov	r1, r8
    4fa6:	0018      	movs	r0, r3
    4fa8:	4b21      	ldr	r3, [pc, #132]	; (5030 <udd_ep_trans_in_next+0xcc>)
    4faa:	4798      	blx	r3
    4fac:	b289      	uxth	r1, r1
    4fae:	1a64      	subs	r4, r4, r1
    4fb0:	b2a4      	uxth	r4, r4
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    4fb2:	7cab      	ldrb	r3, [r5, #18]
    4fb4:	079b      	lsls	r3, r3, #30
    4fb6:	d508      	bpl.n	4fca <udd_ep_trans_in_next+0x66>
    4fb8:	4641      	mov	r1, r8
    4fba:	0020      	movs	r0, r4
    4fbc:	4b1d      	ldr	r3, [pc, #116]	; (5034 <udd_ep_trans_in_next+0xd0>)
    4fbe:	4798      	blx	r3
    4fc0:	b289      	uxth	r1, r1
    4fc2:	2900      	cmp	r1, #0
    4fc4:	d013      	beq.n	4fee <udd_ep_trans_in_next+0x8a>
    4fc6:	2200      	movs	r2, #0
    4fc8:	e000      	b.n	4fcc <udd_ep_trans_in_next+0x68>
    4fca:	2200      	movs	r2, #0
    4fcc:	0052      	lsls	r2, r2, #1
    4fce:	7cab      	ldrb	r3, [r5, #18]
    4fd0:	2102      	movs	r1, #2
    4fd2:	438b      	bics	r3, r1
    4fd4:	4313      	orrs	r3, r2
    4fd6:	74ab      	strb	r3, [r5, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    4fd8:	686a      	ldr	r2, [r5, #4]
    4fda:	1992      	adds	r2, r2, r6
    4fdc:	0023      	movs	r3, r4
    4fde:	0039      	movs	r1, r7
    4fe0:	4815      	ldr	r0, [pc, #84]	; (5038 <udd_ep_trans_in_next+0xd4>)
    4fe2:	4c16      	ldr	r4, [pc, #88]	; (503c <udd_ep_trans_in_next+0xd8>)
    4fe4:	47a0      	blx	r4
}
    4fe6:	bc0c      	pop	{r2, r3}
    4fe8:	4690      	mov	r8, r2
    4fea:	4699      	mov	r9, r3
    4fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    4fee:	2201      	movs	r2, #1
    4ff0:	e7ec      	b.n	4fcc <udd_ep_trans_in_next+0x68>
	if (ptr_job->b_shortpacket) {
    4ff2:	7c83      	ldrb	r3, [r0, #18]
    4ff4:	079b      	lsls	r3, r3, #30
    4ff6:	d40b      	bmi.n	5010 <udd_ep_trans_in_next+0xac>
	ptr_job->busy = false;
    4ff8:	7c83      	ldrb	r3, [r0, #18]
    4ffa:	2201      	movs	r2, #1
    4ffc:	4393      	bics	r3, r2
    4ffe:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    5000:	6803      	ldr	r3, [r0, #0]
    5002:	2b00      	cmp	r3, #0
    5004:	d0ef      	beq.n	4fe6 <udd_ep_trans_in_next+0x82>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    5006:	464a      	mov	r2, r9
    5008:	0031      	movs	r1, r6
    500a:	2000      	movs	r0, #0
    500c:	4798      	blx	r3
    500e:	e7ea      	b.n	4fe6 <udd_ep_trans_in_next+0x82>
		ptr_job->b_shortpacket = false;
    5010:	7c83      	ldrb	r3, [r0, #18]
    5012:	2202      	movs	r2, #2
    5014:	4393      	bics	r3, r2
    5016:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    5018:	6842      	ldr	r2, [r0, #4]
    501a:	1992      	adds	r2, r2, r6
    501c:	2300      	movs	r3, #0
    501e:	0039      	movs	r1, r7
    5020:	4805      	ldr	r0, [pc, #20]	; (5038 <udd_ep_trans_in_next+0xd4>)
    5022:	4c06      	ldr	r4, [pc, #24]	; (503c <udd_ep_trans_in_next+0xd8>)
    5024:	47a0      	blx	r4
		return;
    5026:	e7de      	b.n	4fe6 <udd_ep_trans_in_next+0x82>
    5028:	00004f05 	.word	0x00004f05
    502c:	00001fff 	.word	0x00001fff
    5030:	000097dd 	.word	0x000097dd
    5034:	00009609 	.word	0x00009609
    5038:	200026f0 	.word	0x200026f0
    503c:	00006765 	.word	0x00006765

00005040 <udd_ep_trans_out_next>:
{
    5040:	b5f0      	push	{r4, r5, r6, r7, lr}
    5042:	46de      	mov	lr, fp
    5044:	4657      	mov	r7, sl
    5046:	464e      	mov	r6, r9
    5048:	4645      	mov	r5, r8
    504a:	b5e0      	push	{r5, r6, r7, lr}
    504c:	b083      	sub	sp, #12
    504e:	0005      	movs	r5, r0
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    5050:	7987      	ldrb	r7, [r0, #6]
	ptr_job = udd_ep_get_job(ep);
    5052:	0038      	movs	r0, r7
    5054:	4b37      	ldr	r3, [pc, #220]	; (5134 <udd_ep_trans_out_next+0xf4>)
    5056:	4798      	blx	r3
    5058:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    505a:	260f      	movs	r6, #15
    505c:	403e      	ands	r6, r7
	ep_size = ptr_job->ep_size;
    505e:	8a03      	ldrh	r3, [r0, #16]
    5060:	4699      	mov	r9, r3
	nb_trans = ep_callback_para->received_bytes;
    5062:	882b      	ldrh	r3, [r5, #0]
    5064:	4698      	mov	r8, r3
	if (ptr_job->b_use_out_cache_buffer) {
    5066:	7c83      	ldrb	r3, [r0, #18]
    5068:	075b      	lsls	r3, r3, #29
    506a:	d41b      	bmi.n	50a4 <udd_ep_trans_out_next+0x64>
	ptr_job->nb_trans += nb_trans;
    506c:	68e3      	ldr	r3, [r4, #12]
    506e:	4443      	add	r3, r8
    5070:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    5072:	68a1      	ldr	r1, [r4, #8]
    5074:	428b      	cmp	r3, r1
    5076:	d900      	bls.n	507a <udd_ep_trans_out_next+0x3a>
		ptr_job->nb_trans = ptr_job->buf_size;
    5078:	60e1      	str	r1, [r4, #12]
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    507a:	88ab      	ldrh	r3, [r5, #4]
    507c:	4598      	cmp	r8, r3
    507e:	d025      	beq.n	50cc <udd_ep_trans_out_next+0x8c>
	ptr_job->busy = false;
    5080:	7ca3      	ldrb	r3, [r4, #18]
    5082:	2201      	movs	r2, #1
    5084:	4393      	bics	r3, r2
    5086:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    5088:	6823      	ldr	r3, [r4, #0]
    508a:	2b00      	cmp	r3, #0
    508c:	d003      	beq.n	5096 <udd_ep_trans_out_next+0x56>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    508e:	68e1      	ldr	r1, [r4, #12]
    5090:	003a      	movs	r2, r7
    5092:	2000      	movs	r0, #0
    5094:	4798      	blx	r3
}
    5096:	b003      	add	sp, #12
    5098:	bc3c      	pop	{r2, r3, r4, r5}
    509a:	4690      	mov	r8, r2
    509c:	4699      	mov	r9, r3
    509e:	46a2      	mov	sl, r4
    50a0:	46ab      	mov	fp, r5
    50a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    50a4:	6843      	ldr	r3, [r0, #4]
    50a6:	68c2      	ldr	r2, [r0, #12]
    50a8:	4694      	mov	ip, r2
    50aa:	4463      	add	r3, ip
    50ac:	469b      	mov	fp, r3
    50ae:	1e73      	subs	r3, r6, #1
    50b0:	019b      	lsls	r3, r3, #6
    50b2:	4a21      	ldr	r2, [pc, #132]	; (5138 <udd_ep_trans_out_next+0xf8>)
    50b4:	469a      	mov	sl, r3
    50b6:	4492      	add	sl, r2
    50b8:	4649      	mov	r1, r9
    50ba:	6880      	ldr	r0, [r0, #8]
    50bc:	4b1f      	ldr	r3, [pc, #124]	; (513c <udd_ep_trans_out_next+0xfc>)
    50be:	4798      	blx	r3
    50c0:	000a      	movs	r2, r1
    50c2:	4651      	mov	r1, sl
    50c4:	4658      	mov	r0, fp
    50c6:	4b1e      	ldr	r3, [pc, #120]	; (5140 <udd_ep_trans_out_next+0x100>)
    50c8:	4798      	blx	r3
    50ca:	e7cf      	b.n	506c <udd_ep_trans_out_next+0x2c>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    50cc:	68e3      	ldr	r3, [r4, #12]
    50ce:	4698      	mov	r8, r3
    50d0:	4299      	cmp	r1, r3
    50d2:	d0d5      	beq.n	5080 <udd_ep_trans_out_next+0x40>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    50d4:	b28d      	uxth	r5, r1
    50d6:	466a      	mov	r2, sp
    50d8:	80d3      	strh	r3, [r2, #6]
    50da:	88d1      	ldrh	r1, [r2, #6]
    50dc:	1a6d      	subs	r5, r5, r1
    50de:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    50e0:	4b18      	ldr	r3, [pc, #96]	; (5144 <udd_ep_trans_out_next+0x104>)
    50e2:	429d      	cmp	r5, r3
    50e4:	d917      	bls.n	5116 <udd_ep_trans_out_next+0xd6>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    50e6:	001d      	movs	r5, r3
    50e8:	4649      	mov	r1, r9
    50ea:	0018      	movs	r0, r3
    50ec:	4b16      	ldr	r3, [pc, #88]	; (5148 <udd_ep_trans_out_next+0x108>)
    50ee:	4798      	blx	r3
    50f0:	b28b      	uxth	r3, r1
    50f2:	1aeb      	subs	r3, r5, r3
    50f4:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    50f6:	454b      	cmp	r3, r9
    50f8:	d215      	bcs.n	5126 <udd_ep_trans_out_next+0xe6>
			ptr_job->b_use_out_cache_buffer = true;
    50fa:	7ca3      	ldrb	r3, [r4, #18]
    50fc:	2204      	movs	r2, #4
    50fe:	4313      	orrs	r3, r2
    5100:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    5102:	1e72      	subs	r2, r6, #1
    5104:	0192      	lsls	r2, r2, #6
    5106:	4b0c      	ldr	r3, [pc, #48]	; (5138 <udd_ep_trans_out_next+0xf8>)
    5108:	18d2      	adds	r2, r2, r3
    510a:	464b      	mov	r3, r9
    510c:	0031      	movs	r1, r6
    510e:	480f      	ldr	r0, [pc, #60]	; (514c <udd_ep_trans_out_next+0x10c>)
    5110:	4c0f      	ldr	r4, [pc, #60]	; (5150 <udd_ep_trans_out_next+0x110>)
    5112:	47a0      	blx	r4
    5114:	e7bf      	b.n	5096 <udd_ep_trans_out_next+0x56>
			next_trans -= next_trans % ep_size;
    5116:	4649      	mov	r1, r9
    5118:	0028      	movs	r0, r5
    511a:	4b08      	ldr	r3, [pc, #32]	; (513c <udd_ep_trans_out_next+0xfc>)
    511c:	4798      	blx	r3
    511e:	b28b      	uxth	r3, r1
    5120:	1aeb      	subs	r3, r5, r3
    5122:	b29b      	uxth	r3, r3
    5124:	e7e7      	b.n	50f6 <udd_ep_trans_out_next+0xb6>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    5126:	6862      	ldr	r2, [r4, #4]
    5128:	4442      	add	r2, r8
    512a:	0031      	movs	r1, r6
    512c:	4807      	ldr	r0, [pc, #28]	; (514c <udd_ep_trans_out_next+0x10c>)
    512e:	4c08      	ldr	r4, [pc, #32]	; (5150 <udd_ep_trans_out_next+0x110>)
    5130:	47a0      	blx	r4
    5132:	e7b0      	b.n	5096 <udd_ep_trans_out_next+0x56>
    5134:	00004f05 	.word	0x00004f05
    5138:	20002630 	.word	0x20002630
    513c:	00009609 	.word	0x00009609
    5140:	0000c38d 	.word	0x0000c38d
    5144:	00001fff 	.word	0x00001fff
    5148:	000097dd 	.word	0x000097dd
    514c:	200026f0 	.word	0x200026f0
    5150:	000067b5 	.word	0x000067b5

00005154 <udd_ep_transfer_process>:
{
    5154:	b510      	push	{r4, lr}
	if (ep & USB_EP_DIR_IN) {
    5156:	2306      	movs	r3, #6
    5158:	56cb      	ldrsb	r3, [r1, r3]
    515a:	2b00      	cmp	r3, #0
    515c:	db03      	blt.n	5166 <udd_ep_transfer_process+0x12>
		udd_ep_trans_out_next(pointer);
    515e:	0008      	movs	r0, r1
    5160:	4b03      	ldr	r3, [pc, #12]	; (5170 <udd_ep_transfer_process+0x1c>)
    5162:	4798      	blx	r3
}
    5164:	bd10      	pop	{r4, pc}
		udd_ep_trans_in_next(pointer);
    5166:	0008      	movs	r0, r1
    5168:	4b02      	ldr	r3, [pc, #8]	; (5174 <udd_ep_transfer_process+0x20>)
    516a:	4798      	blx	r3
    516c:	e7fa      	b.n	5164 <udd_ep_transfer_process+0x10>
    516e:	46c0      	nop			; (mov r8, r8)
    5170:	00005041 	.word	0x00005041
    5174:	00004f65 	.word	0x00004f65

00005178 <udd_ctrl_overflow>:
/**
 * \brief Control Endpoint Process when overflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_overflow(void* pointer)
{
    5178:	b510      	push	{r4, lr}
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    517a:	4b08      	ldr	r3, [pc, #32]	; (519c <udd_ctrl_overflow+0x24>)
    517c:	781b      	ldrb	r3, [r3, #0]
    517e:	2b02      	cmp	r3, #2
    5180:	d002      	beq.n	5188 <udd_ctrl_overflow+0x10>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    5182:	2b03      	cmp	r3, #3
    5184:	d004      	beq.n	5190 <udd_ctrl_overflow+0x18>
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
	}
}
    5186:	bd10      	pop	{r4, pc}
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    5188:	2204      	movs	r2, #4
    518a:	4b04      	ldr	r3, [pc, #16]	; (519c <udd_ctrl_overflow+0x24>)
    518c:	701a      	strb	r2, [r3, #0]
    518e:	e7fa      	b.n	5186 <udd_ctrl_overflow+0xe>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    5190:	7981      	ldrb	r1, [r0, #6]
    5192:	4803      	ldr	r0, [pc, #12]	; (51a0 <udd_ctrl_overflow+0x28>)
    5194:	4b03      	ldr	r3, [pc, #12]	; (51a4 <udd_ctrl_overflow+0x2c>)
    5196:	4798      	blx	r3
}
    5198:	e7f5      	b.n	5186 <udd_ctrl_overflow+0xe>
    519a:	46c0      	nop			; (mov r8, r8)
    519c:	20000e8a 	.word	0x20000e8a
    51a0:	200026f0 	.word	0x200026f0
    51a4:	000066bd 	.word	0x000066bd

000051a8 <udd_ctrl_stall_data>:
{
    51a8:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    51aa:	2205      	movs	r2, #5
    51ac:	4b05      	ldr	r3, [pc, #20]	; (51c4 <udd_ctrl_stall_data+0x1c>)
    51ae:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    51b0:	4c05      	ldr	r4, [pc, #20]	; (51c8 <udd_ctrl_stall_data+0x20>)
    51b2:	2180      	movs	r1, #128	; 0x80
    51b4:	0020      	movs	r0, r4
    51b6:	4b05      	ldr	r3, [pc, #20]	; (51cc <udd_ctrl_stall_data+0x24>)
    51b8:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    51ba:	2100      	movs	r1, #0
    51bc:	0020      	movs	r0, r4
    51be:	4b04      	ldr	r3, [pc, #16]	; (51d0 <udd_ctrl_stall_data+0x28>)
    51c0:	4798      	blx	r3
}
    51c2:	bd10      	pop	{r4, pc}
    51c4:	20000e8a 	.word	0x20000e8a
    51c8:	200026f0 	.word	0x200026f0
    51cc:	000066bd 	.word	0x000066bd
    51d0:	000066e3 	.word	0x000066e3

000051d4 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    51d4:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    51d6:	4c08      	ldr	r4, [pc, #32]	; (51f8 <_usb_device_lpm_suspend+0x24>)
    51d8:	2106      	movs	r1, #6
    51da:	0020      	movs	r0, r4
    51dc:	4d07      	ldr	r5, [pc, #28]	; (51fc <_usb_device_lpm_suspend+0x28>)
    51de:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    51e0:	2104      	movs	r1, #4
    51e2:	0020      	movs	r0, r4
    51e4:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    51e6:	2102      	movs	r1, #2
    51e8:	0020      	movs	r0, r4
    51ea:	4b05      	ldr	r3, [pc, #20]	; (5200 <_usb_device_lpm_suspend+0x2c>)
    51ec:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    51ee:	2002      	movs	r0, #2
    51f0:	4b04      	ldr	r3, [pc, #16]	; (5204 <_usb_device_lpm_suspend+0x30>)
    51f2:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    51f4:	bd70      	pop	{r4, r5, r6, pc}
    51f6:	46c0      	nop			; (mov r8, r8)
    51f8:	200026f0 	.word	0x200026f0
    51fc:	000061e5 	.word	0x000061e5
    5200:	000061c5 	.word	0x000061c5
    5204:	00004e4d 	.word	0x00004e4d

00005208 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    5208:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    520a:	4b12      	ldr	r3, [pc, #72]	; (5254 <_usb_on_wakeup+0x4c>)
    520c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    520e:	069b      	lsls	r3, r3, #26
    5210:	d41a      	bmi.n	5248 <_usb_on_wakeup+0x40>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    5212:	4b10      	ldr	r3, [pc, #64]	; (5254 <_usb_on_wakeup+0x4c>)
    5214:	68da      	ldr	r2, [r3, #12]
    5216:	23d0      	movs	r3, #208	; 0xd0
    5218:	4013      	ands	r3, r2
    521a:	2bd0      	cmp	r3, #208	; 0xd0
    521c:	d1f9      	bne.n	5212 <_usb_on_wakeup+0xa>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    521e:	4c0e      	ldr	r4, [pc, #56]	; (5258 <_usb_on_wakeup+0x50>)
    5220:	2102      	movs	r1, #2
    5222:	0020      	movs	r0, r4
    5224:	4b0d      	ldr	r3, [pc, #52]	; (525c <_usb_on_wakeup+0x54>)
    5226:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    5228:	2104      	movs	r1, #4
    522a:	0020      	movs	r0, r4
    522c:	4d0c      	ldr	r5, [pc, #48]	; (5260 <_usb_on_wakeup+0x58>)
    522e:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    5230:	4a0c      	ldr	r2, [pc, #48]	; (5264 <_usb_on_wakeup+0x5c>)
    5232:	2106      	movs	r1, #6
    5234:	0020      	movs	r0, r4
    5236:	4b0c      	ldr	r3, [pc, #48]	; (5268 <_usb_on_wakeup+0x60>)
    5238:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    523a:	2106      	movs	r1, #6
    523c:	0020      	movs	r0, r4
    523e:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    5240:	2003      	movs	r0, #3
    5242:	4b0a      	ldr	r3, [pc, #40]	; (526c <_usb_on_wakeup+0x64>)
    5244:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
#endif
}
    5246:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    5248:	4b02      	ldr	r3, [pc, #8]	; (5254 <_usb_on_wakeup+0x4c>)
    524a:	68db      	ldr	r3, [r3, #12]
    524c:	06db      	lsls	r3, r3, #27
    524e:	d5fb      	bpl.n	5248 <_usb_on_wakeup+0x40>
    5250:	e7e5      	b.n	521e <_usb_on_wakeup+0x16>
    5252:	46c0      	nop			; (mov r8, r8)
    5254:	40000800 	.word	0x40000800
    5258:	200026f0 	.word	0x200026f0
    525c:	000061e5 	.word	0x000061e5
    5260:	000061c5 	.word	0x000061c5
    5264:	000051d5 	.word	0x000051d5
    5268:	000061a5 	.word	0x000061a5
    526c:	00004e4d 	.word	0x00004e4d

00005270 <_usb_on_suspend>:
{
    5270:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    5272:	4c06      	ldr	r4, [pc, #24]	; (528c <_usb_on_suspend+0x1c>)
    5274:	2104      	movs	r1, #4
    5276:	0020      	movs	r0, r4
    5278:	4b05      	ldr	r3, [pc, #20]	; (5290 <_usb_on_suspend+0x20>)
    527a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    527c:	2102      	movs	r1, #2
    527e:	0020      	movs	r0, r4
    5280:	4b04      	ldr	r3, [pc, #16]	; (5294 <_usb_on_suspend+0x24>)
    5282:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    5284:	2001      	movs	r0, #1
    5286:	4b04      	ldr	r3, [pc, #16]	; (5298 <_usb_on_suspend+0x28>)
    5288:	4798      	blx	r3
}
    528a:	bd10      	pop	{r4, pc}
    528c:	200026f0 	.word	0x200026f0
    5290:	000061e5 	.word	0x000061e5
    5294:	000061c5 	.word	0x000061c5
    5298:	00004e4d 	.word	0x00004e4d

0000529c <udd_ctrl_ep_enable>:
{
    529c:	b530      	push	{r4, r5, lr}
    529e:	b083      	sub	sp, #12
    52a0:	0004      	movs	r4, r0
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    52a2:	ad01      	add	r5, sp, #4
    52a4:	0028      	movs	r0, r5
    52a6:	4b1b      	ldr	r3, [pc, #108]	; (5314 <udd_ctrl_ep_enable+0x78>)
    52a8:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    52aa:	2303      	movs	r3, #3
    52ac:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    52ae:	0029      	movs	r1, r5
    52b0:	0020      	movs	r0, r4
    52b2:	4b19      	ldr	r3, [pc, #100]	; (5318 <udd_ctrl_ep_enable+0x7c>)
    52b4:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    52b6:	4919      	ldr	r1, [pc, #100]	; (531c <udd_ctrl_ep_enable+0x80>)
    52b8:	0020      	movs	r0, r4
    52ba:	4b19      	ldr	r3, [pc, #100]	; (5320 <udd_ctrl_ep_enable+0x84>)
    52bc:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    52be:	4b19      	ldr	r3, [pc, #100]	; (5324 <udd_ctrl_ep_enable+0x88>)
    52c0:	2202      	movs	r2, #2
    52c2:	2100      	movs	r1, #0
    52c4:	0020      	movs	r0, r4
    52c6:	4d18      	ldr	r5, [pc, #96]	; (5328 <udd_ctrl_ep_enable+0x8c>)
    52c8:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    52ca:	4b18      	ldr	r3, [pc, #96]	; (532c <udd_ctrl_ep_enable+0x90>)
    52cc:	2200      	movs	r2, #0
    52ce:	2100      	movs	r1, #0
    52d0:	0020      	movs	r0, r4
    52d2:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    52d4:	4b16      	ldr	r3, [pc, #88]	; (5330 <udd_ctrl_ep_enable+0x94>)
    52d6:	2201      	movs	r2, #1
    52d8:	2100      	movs	r1, #0
    52da:	0020      	movs	r0, r4
    52dc:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    52de:	2202      	movs	r2, #2
    52e0:	2100      	movs	r1, #0
    52e2:	0020      	movs	r0, r4
    52e4:	4d13      	ldr	r5, [pc, #76]	; (5334 <udd_ctrl_ep_enable+0x98>)
    52e6:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    52e8:	2200      	movs	r2, #0
    52ea:	2100      	movs	r1, #0
    52ec:	0020      	movs	r0, r4
    52ee:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    52f0:	2201      	movs	r2, #1
    52f2:	2100      	movs	r1, #0
    52f4:	0020      	movs	r0, r4
    52f6:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    52f8:	6821      	ldr	r1, [r4, #0]
    52fa:	890b      	ldrh	r3, [r1, #8]
    52fc:	4a0e      	ldr	r2, [pc, #56]	; (5338 <udd_ctrl_ep_enable+0x9c>)
    52fe:	401a      	ands	r2, r3
    5300:	2380      	movs	r3, #128	; 0x80
    5302:	00db      	lsls	r3, r3, #3
    5304:	4313      	orrs	r3, r2
    5306:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    5308:	2200      	movs	r2, #0
    530a:	4b0c      	ldr	r3, [pc, #48]	; (533c <udd_ctrl_ep_enable+0xa0>)
    530c:	701a      	strb	r2, [r3, #0]
}
    530e:	b003      	add	sp, #12
    5310:	bd30      	pop	{r4, r5, pc}
    5312:	46c0      	nop			; (mov r8, r8)
    5314:	00006419 	.word	0x00006419
    5318:	00006429 	.word	0x00006429
    531c:	20002870 	.word	0x20002870
    5320:	00006801 	.word	0x00006801
    5324:	00005499 	.word	0x00005499
    5328:	00006201 	.word	0x00006201
    532c:	00005849 	.word	0x00005849
    5330:	000053cd 	.word	0x000053cd
    5334:	00006251 	.word	0x00006251
    5338:	fffff3ff 	.word	0xfffff3ff
    533c:	20000e8a 	.word	0x20000e8a

00005340 <_usb_on_bus_reset>:
{
    5340:	b510      	push	{r4, lr}
    5342:	0004      	movs	r4, r0
	udc_reset();
    5344:	4b04      	ldr	r3, [pc, #16]	; (5358 <_usb_on_bus_reset+0x18>)
    5346:	4798      	blx	r3
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    5348:	2380      	movs	r3, #128	; 0x80
    534a:	6822      	ldr	r2, [r4, #0]
    534c:	7293      	strb	r3, [r2, #10]
	udd_ctrl_ep_enable(module_inst);
    534e:	0020      	movs	r0, r4
    5350:	4b02      	ldr	r3, [pc, #8]	; (535c <_usb_on_bus_reset+0x1c>)
    5352:	4798      	blx	r3
}
    5354:	bd10      	pop	{r4, pc}
    5356:	46c0      	nop			; (mov r8, r8)
    5358:	00008491 	.word	0x00008491
    535c:	0000529d 	.word	0x0000529d

00005360 <udd_ctrl_send_zlp_in>:
{
    5360:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    5362:	2203      	movs	r2, #3
    5364:	4b07      	ldr	r3, [pc, #28]	; (5384 <udd_ctrl_send_zlp_in+0x24>)
    5366:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    5368:	4c07      	ldr	r4, [pc, #28]	; (5388 <udd_ctrl_send_zlp_in+0x28>)
    536a:	4908      	ldr	r1, [pc, #32]	; (538c <udd_ctrl_send_zlp_in+0x2c>)
    536c:	0020      	movs	r0, r4
    536e:	4b08      	ldr	r3, [pc, #32]	; (5390 <udd_ctrl_send_zlp_in+0x30>)
    5370:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    5372:	4b08      	ldr	r3, [pc, #32]	; (5394 <udd_ctrl_send_zlp_in+0x34>)
    5374:	689a      	ldr	r2, [r3, #8]
    5376:	2300      	movs	r3, #0
    5378:	2100      	movs	r1, #0
    537a:	0020      	movs	r0, r4
    537c:	4c06      	ldr	r4, [pc, #24]	; (5398 <udd_ctrl_send_zlp_in+0x38>)
    537e:	47a0      	blx	r4
}
    5380:	bd10      	pop	{r4, pc}
    5382:	46c0      	nop			; (mov r8, r8)
    5384:	20000e8a 	.word	0x20000e8a
    5388:	200026f0 	.word	0x200026f0
    538c:	20002870 	.word	0x20002870
    5390:	00006801 	.word	0x00006801
    5394:	20002858 	.word	0x20002858
    5398:	00006765 	.word	0x00006765

0000539c <udd_ctrl_underflow>:
{
    539c:	b510      	push	{r4, lr}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    539e:	4b07      	ldr	r3, [pc, #28]	; (53bc <udd_ctrl_underflow+0x20>)
    53a0:	781b      	ldrb	r3, [r3, #0]
    53a2:	2b01      	cmp	r3, #1
    53a4:	d002      	beq.n	53ac <udd_ctrl_underflow+0x10>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    53a6:	2b04      	cmp	r3, #4
    53a8:	d003      	beq.n	53b2 <udd_ctrl_underflow+0x16>
}
    53aa:	bd10      	pop	{r4, pc}
		udd_ctrl_send_zlp_in();
    53ac:	4b04      	ldr	r3, [pc, #16]	; (53c0 <udd_ctrl_underflow+0x24>)
    53ae:	4798      	blx	r3
    53b0:	e7fb      	b.n	53aa <udd_ctrl_underflow+0xe>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    53b2:	7981      	ldrb	r1, [r0, #6]
    53b4:	4803      	ldr	r0, [pc, #12]	; (53c4 <udd_ctrl_underflow+0x28>)
    53b6:	4b04      	ldr	r3, [pc, #16]	; (53c8 <udd_ctrl_underflow+0x2c>)
    53b8:	4798      	blx	r3
}
    53ba:	e7f6      	b.n	53aa <udd_ctrl_underflow+0xe>
    53bc:	20000e8a 	.word	0x20000e8a
    53c0:	00005361 	.word	0x00005361
    53c4:	200026f0 	.word	0x200026f0
    53c8:	000066bd 	.word	0x000066bd

000053cc <_usb_ep0_on_tansfer_fail>:
{
    53cc:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    53ce:	2306      	movs	r3, #6
    53d0:	56cb      	ldrsb	r3, [r1, r3]
    53d2:	2b00      	cmp	r3, #0
    53d4:	db03      	blt.n	53de <_usb_ep0_on_tansfer_fail+0x12>
		udd_ctrl_overflow(pointer);
    53d6:	0008      	movs	r0, r1
    53d8:	4b03      	ldr	r3, [pc, #12]	; (53e8 <_usb_ep0_on_tansfer_fail+0x1c>)
    53da:	4798      	blx	r3
}
    53dc:	bd10      	pop	{r4, pc}
		udd_ctrl_underflow(pointer);
    53de:	0008      	movs	r0, r1
    53e0:	4b02      	ldr	r3, [pc, #8]	; (53ec <_usb_ep0_on_tansfer_fail+0x20>)
    53e2:	4798      	blx	r3
    53e4:	e7fa      	b.n	53dc <_usb_ep0_on_tansfer_fail+0x10>
    53e6:	46c0      	nop			; (mov r8, r8)
    53e8:	00005179 	.word	0x00005179
    53ec:	0000539d 	.word	0x0000539d

000053f0 <udd_ctrl_in_sent>:
{
    53f0:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    53f2:	4b20      	ldr	r3, [pc, #128]	; (5474 <udd_ctrl_in_sent+0x84>)
    53f4:	899c      	ldrh	r4, [r3, #12]
    53f6:	4b20      	ldr	r3, [pc, #128]	; (5478 <udd_ctrl_in_sent+0x88>)
    53f8:	881b      	ldrh	r3, [r3, #0]
    53fa:	1ae4      	subs	r4, r4, r3
    53fc:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    53fe:	2c00      	cmp	r4, #0
    5400:	d118      	bne.n	5434 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    5402:	4a1e      	ldr	r2, [pc, #120]	; (547c <udd_ctrl_in_sent+0x8c>)
    5404:	8811      	ldrh	r1, [r2, #0]
    5406:	185b      	adds	r3, r3, r1
    5408:	b29b      	uxth	r3, r3
    540a:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    540c:	4a19      	ldr	r2, [pc, #100]	; (5474 <udd_ctrl_in_sent+0x84>)
    540e:	88d2      	ldrh	r2, [r2, #6]
    5410:	4293      	cmp	r3, r2
    5412:	d023      	beq.n	545c <udd_ctrl_in_sent+0x6c>
    5414:	4b1a      	ldr	r3, [pc, #104]	; (5480 <udd_ctrl_in_sent+0x90>)
    5416:	781b      	ldrb	r3, [r3, #0]
    5418:	2b00      	cmp	r3, #0
    541a:	d11f      	bne.n	545c <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    541c:	4b15      	ldr	r3, [pc, #84]	; (5474 <udd_ctrl_in_sent+0x84>)
    541e:	695b      	ldr	r3, [r3, #20]
    5420:	2b00      	cmp	r3, #0
    5422:	d007      	beq.n	5434 <udd_ctrl_in_sent+0x44>
    5424:	4798      	blx	r3
    5426:	2800      	cmp	r0, #0
    5428:	d004      	beq.n	5434 <udd_ctrl_in_sent+0x44>
			udd_ctrl_payload_nb_trans = 0;
    542a:	2200      	movs	r2, #0
    542c:	4b12      	ldr	r3, [pc, #72]	; (5478 <udd_ctrl_in_sent+0x88>)
    542e:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    5430:	4b10      	ldr	r3, [pc, #64]	; (5474 <udd_ctrl_in_sent+0x84>)
    5432:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    5434:	2c3f      	cmp	r4, #63	; 0x3f
    5436:	d919      	bls.n	546c <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    5438:	2200      	movs	r2, #0
    543a:	4b11      	ldr	r3, [pc, #68]	; (5480 <udd_ctrl_in_sent+0x90>)
    543c:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    543e:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    5440:	4b0c      	ldr	r3, [pc, #48]	; (5474 <udd_ctrl_in_sent+0x84>)
    5442:	689a      	ldr	r2, [r3, #8]
    5444:	4d0c      	ldr	r5, [pc, #48]	; (5478 <udd_ctrl_in_sent+0x88>)
    5446:	882b      	ldrh	r3, [r5, #0]
    5448:	18d2      	adds	r2, r2, r3
    544a:	0023      	movs	r3, r4
    544c:	2100      	movs	r1, #0
    544e:	480d      	ldr	r0, [pc, #52]	; (5484 <udd_ctrl_in_sent+0x94>)
    5450:	4e0d      	ldr	r6, [pc, #52]	; (5488 <udd_ctrl_in_sent+0x98>)
    5452:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    5454:	882b      	ldrh	r3, [r5, #0]
    5456:	18e4      	adds	r4, r4, r3
    5458:	802c      	strh	r4, [r5, #0]
}
    545a:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    545c:	2204      	movs	r2, #4
    545e:	4b0b      	ldr	r3, [pc, #44]	; (548c <udd_ctrl_in_sent+0x9c>)
    5460:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    5462:	490b      	ldr	r1, [pc, #44]	; (5490 <udd_ctrl_in_sent+0xa0>)
    5464:	4807      	ldr	r0, [pc, #28]	; (5484 <udd_ctrl_in_sent+0x94>)
    5466:	4b0b      	ldr	r3, [pc, #44]	; (5494 <udd_ctrl_in_sent+0xa4>)
    5468:	4798      	blx	r3
			return;
    546a:	e7f6      	b.n	545a <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    546c:	2201      	movs	r2, #1
    546e:	4b04      	ldr	r3, [pc, #16]	; (5480 <udd_ctrl_in_sent+0x90>)
    5470:	701a      	strb	r2, [r3, #0]
    5472:	e7e5      	b.n	5440 <udd_ctrl_in_sent+0x50>
    5474:	20002858 	.word	0x20002858
    5478:	20000e86 	.word	0x20000e86
    547c:	20000e88 	.word	0x20000e88
    5480:	20000e84 	.word	0x20000e84
    5484:	200026f0 	.word	0x200026f0
    5488:	00006765 	.word	0x00006765
    548c:	20000e8a 	.word	0x20000e8a
    5490:	20002870 	.word	0x20002870
    5494:	00006801 	.word	0x00006801

00005498 <_usb_ep0_on_setup>:
{
    5498:	b510      	push	{r4, lr}
    549a:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    549c:	4b23      	ldr	r3, [pc, #140]	; (552c <_usb_ep0_on_setup+0x94>)
    549e:	781b      	ldrb	r3, [r3, #0]
    54a0:	2b00      	cmp	r3, #0
    54a2:	d007      	beq.n	54b4 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    54a4:	4b22      	ldr	r3, [pc, #136]	; (5530 <_usb_ep0_on_setup+0x98>)
    54a6:	691b      	ldr	r3, [r3, #16]
    54a8:	2b00      	cmp	r3, #0
    54aa:	d000      	beq.n	54ae <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    54ac:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    54ae:	2200      	movs	r2, #0
    54b0:	4b1e      	ldr	r3, [pc, #120]	; (552c <_usb_ep0_on_setup+0x94>)
    54b2:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    54b4:	8823      	ldrh	r3, [r4, #0]
    54b6:	2b08      	cmp	r3, #8
    54b8:	d002      	beq.n	54c0 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    54ba:	4b1e      	ldr	r3, [pc, #120]	; (5534 <_usb_ep0_on_setup+0x9c>)
    54bc:	4798      	blx	r3
}
    54be:	bd10      	pop	{r4, pc}
		udd_ctrl_fetch_ram();
    54c0:	4b1d      	ldr	r3, [pc, #116]	; (5538 <_usb_ep0_on_setup+0xa0>)
    54c2:	4798      	blx	r3
		if (false == udc_process_setup()) {
    54c4:	4b1d      	ldr	r3, [pc, #116]	; (553c <_usb_ep0_on_setup+0xa4>)
    54c6:	4798      	blx	r3
    54c8:	2800      	cmp	r0, #0
    54ca:	d017      	beq.n	54fc <_usb_ep0_on_setup+0x64>
		} else if (Udd_setup_is_in()) {
    54cc:	4b18      	ldr	r3, [pc, #96]	; (5530 <_usb_ep0_on_setup+0x98>)
    54ce:	781b      	ldrb	r3, [r3, #0]
    54d0:	b25b      	sxtb	r3, r3
    54d2:	2b00      	cmp	r3, #0
    54d4:	db15      	blt.n	5502 <_usb_ep0_on_setup+0x6a>
			if(0 == udd_g_ctrlreq.req.wLength) {
    54d6:	4b16      	ldr	r3, [pc, #88]	; (5530 <_usb_ep0_on_setup+0x98>)
    54d8:	88db      	ldrh	r3, [r3, #6]
    54da:	2b00      	cmp	r3, #0
    54dc:	d022      	beq.n	5524 <_usb_ep0_on_setup+0x8c>
				udd_ctrl_prev_payload_nb_trans = 0;
    54de:	2300      	movs	r3, #0
    54e0:	4a17      	ldr	r2, [pc, #92]	; (5540 <_usb_ep0_on_setup+0xa8>)
    54e2:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    54e4:	4a17      	ldr	r2, [pc, #92]	; (5544 <_usb_ep0_on_setup+0xac>)
    54e6:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    54e8:	2201      	movs	r2, #1
    54ea:	4b10      	ldr	r3, [pc, #64]	; (552c <_usb_ep0_on_setup+0x94>)
    54ec:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    54ee:	2340      	movs	r3, #64	; 0x40
    54f0:	4a15      	ldr	r2, [pc, #84]	; (5548 <_usb_ep0_on_setup+0xb0>)
    54f2:	2100      	movs	r1, #0
    54f4:	4815      	ldr	r0, [pc, #84]	; (554c <_usb_ep0_on_setup+0xb4>)
    54f6:	4c16      	ldr	r4, [pc, #88]	; (5550 <_usb_ep0_on_setup+0xb8>)
    54f8:	47a0      	blx	r4
    54fa:	e7e0      	b.n	54be <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    54fc:	4b0d      	ldr	r3, [pc, #52]	; (5534 <_usb_ep0_on_setup+0x9c>)
    54fe:	4798      	blx	r3
			return;
    5500:	e7dd      	b.n	54be <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    5502:	2300      	movs	r3, #0
    5504:	4a0e      	ldr	r2, [pc, #56]	; (5540 <_usb_ep0_on_setup+0xa8>)
    5506:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    5508:	4a0e      	ldr	r2, [pc, #56]	; (5544 <_usb_ep0_on_setup+0xac>)
    550a:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    550c:	2202      	movs	r2, #2
    550e:	4b07      	ldr	r3, [pc, #28]	; (552c <_usb_ep0_on_setup+0x94>)
    5510:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    5512:	2340      	movs	r3, #64	; 0x40
    5514:	4a0c      	ldr	r2, [pc, #48]	; (5548 <_usb_ep0_on_setup+0xb0>)
    5516:	2100      	movs	r1, #0
    5518:	480c      	ldr	r0, [pc, #48]	; (554c <_usb_ep0_on_setup+0xb4>)
    551a:	4c0d      	ldr	r4, [pc, #52]	; (5550 <_usb_ep0_on_setup+0xb8>)
    551c:	47a0      	blx	r4
			udd_ctrl_in_sent();
    551e:	4b0d      	ldr	r3, [pc, #52]	; (5554 <_usb_ep0_on_setup+0xbc>)
    5520:	4798      	blx	r3
    5522:	e7cc      	b.n	54be <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    5524:	4b0c      	ldr	r3, [pc, #48]	; (5558 <_usb_ep0_on_setup+0xc0>)
    5526:	4798      	blx	r3
				return;
    5528:	e7c9      	b.n	54be <_usb_ep0_on_setup+0x26>
    552a:	46c0      	nop			; (mov r8, r8)
    552c:	20000e8a 	.word	0x20000e8a
    5530:	20002858 	.word	0x20002858
    5534:	000051a9 	.word	0x000051a9
    5538:	00004f31 	.word	0x00004f31
    553c:	000086b1 	.word	0x000086b1
    5540:	20000e88 	.word	0x20000e88
    5544:	20000e86 	.word	0x20000e86
    5548:	20002870 	.word	0x20002870
    554c:	200026f0 	.word	0x200026f0
    5550:	000067b5 	.word	0x000067b5
    5554:	000053f1 	.word	0x000053f1
    5558:	00005361 	.word	0x00005361

0000555c <_usb_on_sof_notify>:
{
    555c:	b510      	push	{r4, lr}
	udc_sof_notify();
    555e:	4b01      	ldr	r3, [pc, #4]	; (5564 <_usb_on_sof_notify+0x8>)
    5560:	4798      	blx	r3
}
    5562:	bd10      	pop	{r4, pc}
    5564:	00008679 	.word	0x00008679

00005568 <udd_ep_abort>:
{
    5568:	b510      	push	{r4, lr}
    556a:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    556c:	0001      	movs	r1, r0
    556e:	480a      	ldr	r0, [pc, #40]	; (5598 <udd_ep_abort+0x30>)
    5570:	4b0a      	ldr	r3, [pc, #40]	; (559c <udd_ep_abort+0x34>)
    5572:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    5574:	0020      	movs	r0, r4
    5576:	4b0a      	ldr	r3, [pc, #40]	; (55a0 <udd_ep_abort+0x38>)
    5578:	4798      	blx	r3
	if (!ptr_job->busy) {
    557a:	7c83      	ldrb	r3, [r0, #18]
    557c:	07db      	lsls	r3, r3, #31
    557e:	d50a      	bpl.n	5596 <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    5580:	7c83      	ldrb	r3, [r0, #18]
    5582:	2201      	movs	r2, #1
    5584:	4393      	bics	r3, r2
    5586:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    5588:	6803      	ldr	r3, [r0, #0]
    558a:	2b00      	cmp	r3, #0
    558c:	d003      	beq.n	5596 <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    558e:	68c1      	ldr	r1, [r0, #12]
    5590:	0022      	movs	r2, r4
    5592:	2001      	movs	r0, #1
    5594:	4798      	blx	r3
}
    5596:	bd10      	pop	{r4, pc}
    5598:	200026f0 	.word	0x200026f0
    559c:	00006659 	.word	0x00006659
    55a0:	00004f05 	.word	0x00004f05

000055a4 <udd_is_high_speed>:
}
    55a4:	2000      	movs	r0, #0
    55a6:	4770      	bx	lr

000055a8 <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    55a8:	4b02      	ldr	r3, [pc, #8]	; (55b4 <udd_get_frame_number+0xc>)
    55aa:	681b      	ldr	r3, [r3, #0]
    55ac:	8a18      	ldrh	r0, [r3, #16]
    55ae:	0480      	lsls	r0, r0, #18
    55b0:	0d40      	lsrs	r0, r0, #21
}
    55b2:	4770      	bx	lr
    55b4:	200026f0 	.word	0x200026f0

000055b8 <udd_get_micro_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    55b8:	4b02      	ldr	r3, [pc, #8]	; (55c4 <udd_get_micro_frame_number+0xc>)
    55ba:	681b      	ldr	r3, [r3, #0]
    55bc:	8a18      	ldrh	r0, [r3, #16]
    55be:	b280      	uxth	r0, r0
}
    55c0:	4770      	bx	lr
    55c2:	46c0      	nop			; (mov r8, r8)
    55c4:	200026f0 	.word	0x200026f0

000055c8 <udd_ep_free>:
{
    55c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    55ca:	b083      	sub	sp, #12
    55cc:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    55ce:	ad01      	add	r5, sp, #4
    55d0:	0028      	movs	r0, r5
    55d2:	4b0d      	ldr	r3, [pc, #52]	; (5608 <udd_ep_free+0x40>)
    55d4:	4798      	blx	r3
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    55d6:	270f      	movs	r7, #15
    55d8:	4027      	ands	r7, r4
	udd_ep_abort(ep);
    55da:	0020      	movs	r0, r4
    55dc:	4b0b      	ldr	r3, [pc, #44]	; (560c <udd_ep_free+0x44>)
    55de:	4798      	blx	r3
	config_ep.ep_address = ep;
    55e0:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    55e2:	2300      	movs	r3, #0
    55e4:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    55e6:	4e0a      	ldr	r6, [pc, #40]	; (5610 <udd_ep_free+0x48>)
    55e8:	0029      	movs	r1, r5
    55ea:	0030      	movs	r0, r6
    55ec:	4b09      	ldr	r3, [pc, #36]	; (5614 <udd_ep_free+0x4c>)
    55ee:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    55f0:	2200      	movs	r2, #0
    55f2:	0039      	movs	r1, r7
    55f4:	0030      	movs	r0, r6
    55f6:	4b08      	ldr	r3, [pc, #32]	; (5618 <udd_ep_free+0x50>)
    55f8:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    55fa:	2200      	movs	r2, #0
    55fc:	0021      	movs	r1, r4
    55fe:	0030      	movs	r0, r6
    5600:	4b06      	ldr	r3, [pc, #24]	; (561c <udd_ep_free+0x54>)
    5602:	4798      	blx	r3
}
    5604:	b003      	add	sp, #12
    5606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5608:	00006419 	.word	0x00006419
    560c:	00005569 	.word	0x00005569
    5610:	200026f0 	.word	0x200026f0
    5614:	00006429 	.word	0x00006429
    5618:	00006229 	.word	0x00006229
    561c:	00006335 	.word	0x00006335

00005620 <udd_ep_alloc>:
{
    5620:	b5f0      	push	{r4, r5, r6, r7, lr}
    5622:	b083      	sub	sp, #12
    5624:	0004      	movs	r4, r0
    5626:	000f      	movs	r7, r1
    5628:	0015      	movs	r5, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    562a:	ae01      	add	r6, sp, #4
    562c:	0030      	movs	r0, r6
    562e:	4b37      	ldr	r3, [pc, #220]	; (570c <udd_ep_alloc+0xec>)
    5630:	4798      	blx	r3
	config_ep.ep_address = ep;
    5632:	7034      	strb	r4, [r6, #0]
	if(MaxEndpointSize <= 8) {
    5634:	2d08      	cmp	r5, #8
    5636:	d810      	bhi.n	565a <udd_ep_alloc+0x3a>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    5638:	2200      	movs	r2, #0
    563a:	ab01      	add	r3, sp, #4
    563c:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    563e:	0020      	movs	r0, r4
    5640:	4b33      	ldr	r3, [pc, #204]	; (5710 <udd_ep_alloc+0xf0>)
    5642:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    5644:	8205      	strh	r5, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    5646:	2103      	movs	r1, #3
    5648:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    564a:	2901      	cmp	r1, #1
    564c:	d034      	beq.n	56b8 <udd_ep_alloc+0x98>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    564e:	2902      	cmp	r1, #2
    5650:	d040      	beq.n	56d4 <udd_ep_alloc+0xb4>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    5652:	2903      	cmp	r1, #3
    5654:	d042      	beq.n	56dc <udd_ep_alloc+0xbc>
		return false;
    5656:	2000      	movs	r0, #0
    5658:	e03a      	b.n	56d0 <udd_ep_alloc+0xb0>
	} else if(MaxEndpointSize <= 16) {
    565a:	2d10      	cmp	r5, #16
    565c:	d803      	bhi.n	5666 <udd_ep_alloc+0x46>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    565e:	2201      	movs	r2, #1
    5660:	ab01      	add	r3, sp, #4
    5662:	705a      	strb	r2, [r3, #1]
    5664:	e7eb      	b.n	563e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    5666:	2d20      	cmp	r5, #32
    5668:	d803      	bhi.n	5672 <udd_ep_alloc+0x52>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    566a:	2202      	movs	r2, #2
    566c:	ab01      	add	r3, sp, #4
    566e:	705a      	strb	r2, [r3, #1]
    5670:	e7e5      	b.n	563e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    5672:	2d40      	cmp	r5, #64	; 0x40
    5674:	d803      	bhi.n	567e <udd_ep_alloc+0x5e>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    5676:	2203      	movs	r2, #3
    5678:	ab01      	add	r3, sp, #4
    567a:	705a      	strb	r2, [r3, #1]
    567c:	e7df      	b.n	563e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    567e:	2d80      	cmp	r5, #128	; 0x80
    5680:	d803      	bhi.n	568a <udd_ep_alloc+0x6a>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    5682:	2204      	movs	r2, #4
    5684:	ab01      	add	r3, sp, #4
    5686:	705a      	strb	r2, [r3, #1]
    5688:	e7d9      	b.n	563e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    568a:	2380      	movs	r3, #128	; 0x80
    568c:	005b      	lsls	r3, r3, #1
    568e:	429d      	cmp	r5, r3
    5690:	d803      	bhi.n	569a <udd_ep_alloc+0x7a>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    5692:	2205      	movs	r2, #5
    5694:	ab01      	add	r3, sp, #4
    5696:	705a      	strb	r2, [r3, #1]
    5698:	e7d1      	b.n	563e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    569a:	2380      	movs	r3, #128	; 0x80
    569c:	009b      	lsls	r3, r3, #2
    569e:	429d      	cmp	r5, r3
    56a0:	d803      	bhi.n	56aa <udd_ep_alloc+0x8a>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    56a2:	2206      	movs	r2, #6
    56a4:	ab01      	add	r3, sp, #4
    56a6:	705a      	strb	r2, [r3, #1]
    56a8:	e7c9      	b.n	563e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    56aa:	4b1a      	ldr	r3, [pc, #104]	; (5714 <udd_ep_alloc+0xf4>)
    56ac:	429d      	cmp	r5, r3
    56ae:	d82b      	bhi.n	5708 <udd_ep_alloc+0xe8>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    56b0:	2207      	movs	r2, #7
    56b2:	ab01      	add	r3, sp, #4
    56b4:	705a      	strb	r2, [r3, #1]
    56b6:	e7c2      	b.n	563e <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    56b8:	2202      	movs	r2, #2
    56ba:	ab01      	add	r3, sp, #4
    56bc:	70da      	strb	r2, [r3, #3]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    56be:	250f      	movs	r5, #15
    56c0:	4025      	ands	r5, r4
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    56c2:	a901      	add	r1, sp, #4
    56c4:	4814      	ldr	r0, [pc, #80]	; (5718 <udd_ep_alloc+0xf8>)
    56c6:	4b15      	ldr	r3, [pc, #84]	; (571c <udd_ep_alloc+0xfc>)
    56c8:	4798      	blx	r3
    56ca:	2800      	cmp	r0, #0
    56cc:	d00a      	beq.n	56e4 <udd_ep_alloc+0xc4>
		return false;
    56ce:	2000      	movs	r0, #0
}
    56d0:	b003      	add	sp, #12
    56d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    56d4:	2203      	movs	r2, #3
    56d6:	ab01      	add	r3, sp, #4
    56d8:	70da      	strb	r2, [r3, #3]
    56da:	e7f0      	b.n	56be <udd_ep_alloc+0x9e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    56dc:	2204      	movs	r2, #4
    56de:	ab01      	add	r3, sp, #4
    56e0:	70da      	strb	r2, [r3, #3]
    56e2:	e7ec      	b.n	56be <udd_ep_alloc+0x9e>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    56e4:	4e0c      	ldr	r6, [pc, #48]	; (5718 <udd_ep_alloc+0xf8>)
    56e6:	4b0e      	ldr	r3, [pc, #56]	; (5720 <udd_ep_alloc+0x100>)
    56e8:	2200      	movs	r2, #0
    56ea:	0029      	movs	r1, r5
    56ec:	0030      	movs	r0, r6
    56ee:	4d0d      	ldr	r5, [pc, #52]	; (5724 <udd_ep_alloc+0x104>)
    56f0:	47a8      	blx	r5
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    56f2:	2200      	movs	r2, #0
    56f4:	0021      	movs	r1, r4
    56f6:	0030      	movs	r0, r6
    56f8:	4d0b      	ldr	r5, [pc, #44]	; (5728 <udd_ep_alloc+0x108>)
    56fa:	47a8      	blx	r5
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    56fc:	2201      	movs	r2, #1
    56fe:	0021      	movs	r1, r4
    5700:	0030      	movs	r0, r6
    5702:	47a8      	blx	r5
	return true;
    5704:	2001      	movs	r0, #1
    5706:	e7e3      	b.n	56d0 <udd_ep_alloc+0xb0>
		return false;
    5708:	2000      	movs	r0, #0
    570a:	e7e1      	b.n	56d0 <udd_ep_alloc+0xb0>
    570c:	00006419 	.word	0x00006419
    5710:	00004f05 	.word	0x00004f05
    5714:	000003ff 	.word	0x000003ff
    5718:	200026f0 	.word	0x200026f0
    571c:	00006429 	.word	0x00006429
    5720:	00005155 	.word	0x00005155
    5724:	00006201 	.word	0x00006201
    5728:	00006251 	.word	0x00006251

0000572c <udd_ep_is_halted>:
{
    572c:	b510      	push	{r4, lr}
    572e:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    5730:	4801      	ldr	r0, [pc, #4]	; (5738 <udd_ep_is_halted+0xc>)
    5732:	4b02      	ldr	r3, [pc, #8]	; (573c <udd_ep_is_halted+0x10>)
    5734:	4798      	blx	r3
}
    5736:	bd10      	pop	{r4, pc}
    5738:	200026f0 	.word	0x200026f0
    573c:	0000668f 	.word	0x0000668f

00005740 <udd_ep_set_halt>:
{
    5740:	b510      	push	{r4, lr}
    5742:	0004      	movs	r4, r0
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5744:	230f      	movs	r3, #15
    5746:	4003      	ands	r3, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    5748:	2b03      	cmp	r3, #3
    574a:	d901      	bls.n	5750 <udd_ep_set_halt+0x10>
		return false;
    574c:	2000      	movs	r0, #0
}
    574e:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    5750:	0001      	movs	r1, r0
    5752:	4804      	ldr	r0, [pc, #16]	; (5764 <udd_ep_set_halt+0x24>)
    5754:	4b04      	ldr	r3, [pc, #16]	; (5768 <udd_ep_set_halt+0x28>)
    5756:	4798      	blx	r3
	udd_ep_abort(ep);
    5758:	0020      	movs	r0, r4
    575a:	4b04      	ldr	r3, [pc, #16]	; (576c <udd_ep_set_halt+0x2c>)
    575c:	4798      	blx	r3
	return true;
    575e:	2001      	movs	r0, #1
    5760:	e7f5      	b.n	574e <udd_ep_set_halt+0xe>
    5762:	46c0      	nop			; (mov r8, r8)
    5764:	200026f0 	.word	0x200026f0
    5768:	000066bd 	.word	0x000066bd
    576c:	00005569 	.word	0x00005569

00005770 <udd_ctrl_out_received>:
{
    5770:	b570      	push	{r4, r5, r6, lr}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    5772:	8805      	ldrh	r5, [r0, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    5774:	4b2a      	ldr	r3, [pc, #168]	; (5820 <udd_ctrl_out_received+0xb0>)
    5776:	899b      	ldrh	r3, [r3, #12]
    5778:	4a2a      	ldr	r2, [pc, #168]	; (5824 <udd_ctrl_out_received+0xb4>)
    577a:	8814      	ldrh	r4, [r2, #0]
    577c:	1962      	adds	r2, r4, r5
    577e:	4293      	cmp	r3, r2
    5780:	da01      	bge.n	5786 <udd_ctrl_out_received+0x16>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    5782:	1b1d      	subs	r5, r3, r4
    5784:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    5786:	4b26      	ldr	r3, [pc, #152]	; (5820 <udd_ctrl_out_received+0xb0>)
    5788:	6898      	ldr	r0, [r3, #8]
    578a:	1900      	adds	r0, r0, r4
    578c:	002a      	movs	r2, r5
    578e:	4926      	ldr	r1, [pc, #152]	; (5828 <udd_ctrl_out_received+0xb8>)
    5790:	4b26      	ldr	r3, [pc, #152]	; (582c <udd_ctrl_out_received+0xbc>)
    5792:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    5794:	192c      	adds	r4, r5, r4
    5796:	b2a4      	uxth	r4, r4
    5798:	4b22      	ldr	r3, [pc, #136]	; (5824 <udd_ctrl_out_received+0xb4>)
    579a:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    579c:	2d40      	cmp	r5, #64	; 0x40
    579e:	d00a      	beq.n	57b6 <udd_ctrl_out_received+0x46>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    57a0:	4b1f      	ldr	r3, [pc, #124]	; (5820 <udd_ctrl_out_received+0xb0>)
    57a2:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    57a4:	695b      	ldr	r3, [r3, #20]
    57a6:	2b00      	cmp	r3, #0
    57a8:	d002      	beq.n	57b0 <udd_ctrl_out_received+0x40>
			if (!udd_g_ctrlreq.over_under_run()) {
    57aa:	4798      	blx	r3
    57ac:	2800      	cmp	r0, #0
    57ae:	d014      	beq.n	57da <udd_ctrl_out_received+0x6a>
		udd_ctrl_send_zlp_in();
    57b0:	4b1f      	ldr	r3, [pc, #124]	; (5830 <udd_ctrl_out_received+0xc0>)
    57b2:	4798      	blx	r3
}
    57b4:	bd70      	pop	{r4, r5, r6, pc}
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    57b6:	4b1a      	ldr	r3, [pc, #104]	; (5820 <udd_ctrl_out_received+0xb0>)
    57b8:	88da      	ldrh	r2, [r3, #6]
    57ba:	4b1e      	ldr	r3, [pc, #120]	; (5834 <udd_ctrl_out_received+0xc4>)
    57bc:	881b      	ldrh	r3, [r3, #0]
    57be:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    57c0:	429a      	cmp	r2, r3
    57c2:	dded      	ble.n	57a0 <udd_ctrl_out_received+0x30>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    57c4:	4b16      	ldr	r3, [pc, #88]	; (5820 <udd_ctrl_out_received+0xb0>)
    57c6:	899b      	ldrh	r3, [r3, #12]
    57c8:	429c      	cmp	r4, r3
    57ca:	d00c      	beq.n	57e6 <udd_ctrl_out_received+0x76>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    57cc:	2340      	movs	r3, #64	; 0x40
    57ce:	4a16      	ldr	r2, [pc, #88]	; (5828 <udd_ctrl_out_received+0xb8>)
    57d0:	2100      	movs	r1, #0
    57d2:	4819      	ldr	r0, [pc, #100]	; (5838 <udd_ctrl_out_received+0xc8>)
    57d4:	4c19      	ldr	r4, [pc, #100]	; (583c <udd_ctrl_out_received+0xcc>)
    57d6:	47a0      	blx	r4
    57d8:	e7ec      	b.n	57b4 <udd_ctrl_out_received+0x44>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    57da:	2205      	movs	r2, #5
    57dc:	4b18      	ldr	r3, [pc, #96]	; (5840 <udd_ctrl_out_received+0xd0>)
    57de:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    57e0:	4b18      	ldr	r3, [pc, #96]	; (5844 <udd_ctrl_out_received+0xd4>)
    57e2:	4798      	blx	r3
				return;
    57e4:	e7e6      	b.n	57b4 <udd_ctrl_out_received+0x44>
		if (!udd_g_ctrlreq.over_under_run) {
    57e6:	4b0e      	ldr	r3, [pc, #56]	; (5820 <udd_ctrl_out_received+0xb0>)
    57e8:	695b      	ldr	r3, [r3, #20]
    57ea:	2b00      	cmp	r3, #0
    57ec:	d00b      	beq.n	5806 <udd_ctrl_out_received+0x96>
		if (!udd_g_ctrlreq.over_under_run()) {
    57ee:	4798      	blx	r3
    57f0:	2800      	cmp	r0, #0
    57f2:	d00f      	beq.n	5814 <udd_ctrl_out_received+0xa4>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    57f4:	490f      	ldr	r1, [pc, #60]	; (5834 <udd_ctrl_out_received+0xc4>)
    57f6:	4a0b      	ldr	r2, [pc, #44]	; (5824 <udd_ctrl_out_received+0xb4>)
    57f8:	880b      	ldrh	r3, [r1, #0]
    57fa:	8810      	ldrh	r0, [r2, #0]
    57fc:	181b      	adds	r3, r3, r0
    57fe:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    5800:	2300      	movs	r3, #0
    5802:	8013      	strh	r3, [r2, #0]
    5804:	e7e2      	b.n	57cc <udd_ctrl_out_received+0x5c>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    5806:	2205      	movs	r2, #5
    5808:	4b0d      	ldr	r3, [pc, #52]	; (5840 <udd_ctrl_out_received+0xd0>)
    580a:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    580c:	2000      	movs	r0, #0
    580e:	4b0d      	ldr	r3, [pc, #52]	; (5844 <udd_ctrl_out_received+0xd4>)
    5810:	4798      	blx	r3
			return;
    5812:	e7cf      	b.n	57b4 <udd_ctrl_out_received+0x44>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    5814:	2205      	movs	r2, #5
    5816:	4b0a      	ldr	r3, [pc, #40]	; (5840 <udd_ctrl_out_received+0xd0>)
    5818:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    581a:	4b0a      	ldr	r3, [pc, #40]	; (5844 <udd_ctrl_out_received+0xd4>)
    581c:	4798      	blx	r3
			return;
    581e:	e7c9      	b.n	57b4 <udd_ctrl_out_received+0x44>
    5820:	20002858 	.word	0x20002858
    5824:	20000e86 	.word	0x20000e86
    5828:	20002870 	.word	0x20002870
    582c:	0000c38d 	.word	0x0000c38d
    5830:	00005361 	.word	0x00005361
    5834:	20000e88 	.word	0x20000e88
    5838:	200026f0 	.word	0x200026f0
    583c:	000067b5 	.word	0x000067b5
    5840:	20000e8a 	.word	0x20000e8a
    5844:	00005741 	.word	0x00005741

00005848 <_usb_ep0_on_tansfer_ok>:
{
    5848:	b510      	push	{r4, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    584a:	4b0b      	ldr	r3, [pc, #44]	; (5878 <_usb_ep0_on_tansfer_ok+0x30>)
    584c:	781b      	ldrb	r3, [r3, #0]
    584e:	2b01      	cmp	r3, #1
    5850:	d00a      	beq.n	5868 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    5852:	2b02      	cmp	r3, #2
    5854:	d00c      	beq.n	5870 <_usb_ep0_on_tansfer_ok+0x28>
			if (NULL != udd_g_ctrlreq.callback) {
    5856:	4b09      	ldr	r3, [pc, #36]	; (587c <_usb_ep0_on_tansfer_ok+0x34>)
    5858:	691b      	ldr	r3, [r3, #16]
    585a:	2b00      	cmp	r3, #0
    585c:	d000      	beq.n	5860 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    585e:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    5860:	2200      	movs	r2, #0
    5862:	4b05      	ldr	r3, [pc, #20]	; (5878 <_usb_ep0_on_tansfer_ok+0x30>)
    5864:	701a      	strb	r2, [r3, #0]
}
    5866:	bd10      	pop	{r4, pc}
			udd_ctrl_out_received(pointer);
    5868:	0008      	movs	r0, r1
    586a:	4b05      	ldr	r3, [pc, #20]	; (5880 <_usb_ep0_on_tansfer_ok+0x38>)
    586c:	4798      	blx	r3
    586e:	e7fa      	b.n	5866 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    5870:	4b04      	ldr	r3, [pc, #16]	; (5884 <_usb_ep0_on_tansfer_ok+0x3c>)
    5872:	4798      	blx	r3
    5874:	e7f7      	b.n	5866 <_usb_ep0_on_tansfer_ok+0x1e>
    5876:	46c0      	nop			; (mov r8, r8)
    5878:	20000e8a 	.word	0x20000e8a
    587c:	20002858 	.word	0x20002858
    5880:	00005771 	.word	0x00005771
    5884:	000053f1 	.word	0x000053f1

00005888 <udd_ep_clear_halt>:
{
    5888:	b570      	push	{r4, r5, r6, lr}
    588a:	0004      	movs	r4, r0
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    588c:	230f      	movs	r3, #15
    588e:	4003      	ands	r3, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    5890:	2b03      	cmp	r3, #3
    5892:	d901      	bls.n	5898 <udd_ep_clear_halt+0x10>
		return false;
    5894:	2000      	movs	r0, #0
}
    5896:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    5898:	4b09      	ldr	r3, [pc, #36]	; (58c0 <udd_ep_clear_halt+0x38>)
    589a:	4798      	blx	r3
    589c:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    589e:	0021      	movs	r1, r4
    58a0:	4808      	ldr	r0, [pc, #32]	; (58c4 <udd_ep_clear_halt+0x3c>)
    58a2:	4b09      	ldr	r3, [pc, #36]	; (58c8 <udd_ep_clear_halt+0x40>)
    58a4:	4798      	blx	r3
	if (ptr_job->busy == true) {
    58a6:	7cab      	ldrb	r3, [r5, #18]
    58a8:	07db      	lsls	r3, r3, #31
    58aa:	d401      	bmi.n	58b0 <udd_ep_clear_halt+0x28>
	return true;
    58ac:	2001      	movs	r0, #1
    58ae:	e7f2      	b.n	5896 <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    58b0:	7cab      	ldrb	r3, [r5, #18]
    58b2:	2201      	movs	r2, #1
    58b4:	4393      	bics	r3, r2
    58b6:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    58b8:	682b      	ldr	r3, [r5, #0]
    58ba:	4798      	blx	r3
	return true;
    58bc:	2001      	movs	r0, #1
    58be:	e7ea      	b.n	5896 <udd_ep_clear_halt+0xe>
    58c0:	00004f05 	.word	0x00004f05
    58c4:	200026f0 	.word	0x200026f0
    58c8:	000066e3 	.word	0x000066e3

000058cc <udd_ep_run>:
{
    58cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    58ce:	b087      	sub	sp, #28
    58d0:	0005      	movs	r5, r0
    58d2:	9103      	str	r1, [sp, #12]
    58d4:	9202      	str	r2, [sp, #8]
    58d6:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    58d8:	260f      	movs	r6, #15
    58da:	4006      	ands	r6, r0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    58dc:	2e03      	cmp	r6, #3
    58de:	d903      	bls.n	58e8 <udd_ep_run+0x1c>
		return false;
    58e0:	2400      	movs	r4, #0
}
    58e2:	0020      	movs	r0, r4
    58e4:	b007      	add	sp, #28
    58e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    58e8:	4b66      	ldr	r3, [pc, #408]	; (5a84 <udd_ep_run+0x1b8>)
    58ea:	4798      	blx	r3
    58ec:	1e04      	subs	r4, r0, #0
    58ee:	d000      	beq.n	58f2 <udd_ep_run+0x26>
    58f0:	e0c2      	b.n	5a78 <udd_ep_run+0x1ac>
	ptr_job = udd_ep_get_job(ep);
    58f2:	0028      	movs	r0, r5
    58f4:	4b64      	ldr	r3, [pc, #400]	; (5a88 <udd_ep_run+0x1bc>)
    58f6:	4798      	blx	r3
    58f8:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    58fa:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    58fe:	425a      	negs	r2, r3
    5900:	4153      	adcs	r3, r2
    5902:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    5904:	b672      	cpsid	i
    5906:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    590a:	2200      	movs	r2, #0
    590c:	4b5f      	ldr	r3, [pc, #380]	; (5a8c <udd_ep_run+0x1c0>)
    590e:	701a      	strb	r2, [r3, #0]
	return flags;
    5910:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    5912:	7c83      	ldrb	r3, [r0, #18]
    5914:	07db      	lsls	r3, r3, #31
    5916:	d508      	bpl.n	592a <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    5918:	2a00      	cmp	r2, #0
    591a:	d0e2      	beq.n	58e2 <udd_ep_run+0x16>
		cpu_irq_enable();
    591c:	2201      	movs	r2, #1
    591e:	4b5b      	ldr	r3, [pc, #364]	; (5a8c <udd_ep_run+0x1c0>)
    5920:	701a      	strb	r2, [r3, #0]
    5922:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5926:	b662      	cpsie	i
    5928:	e7db      	b.n	58e2 <udd_ep_run+0x16>
	ptr_job->busy = true;
    592a:	7c83      	ldrb	r3, [r0, #18]
    592c:	2101      	movs	r1, #1
    592e:	430b      	orrs	r3, r1
    5930:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    5932:	2a00      	cmp	r2, #0
    5934:	d005      	beq.n	5942 <udd_ep_run+0x76>
		cpu_irq_enable();
    5936:	2201      	movs	r2, #1
    5938:	4b54      	ldr	r3, [pc, #336]	; (5a8c <udd_ep_run+0x1c0>)
    593a:	701a      	strb	r2, [r3, #0]
    593c:	f3bf 8f5f 	dmb	sy
    5940:	b662      	cpsie	i
	ptr_job->buf = buf;
    5942:	9b02      	ldr	r3, [sp, #8]
    5944:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    5946:	9b01      	ldr	r3, [sp, #4]
    5948:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    594a:	2300      	movs	r3, #0
    594c:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    594e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5950:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    5952:	2301      	movs	r3, #1
    5954:	9a03      	ldr	r2, [sp, #12]
    5956:	4013      	ands	r3, r2
    5958:	005a      	lsls	r2, r3, #1
    595a:	7cbb      	ldrb	r3, [r7, #18]
    595c:	2102      	movs	r1, #2
    595e:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    5960:	4313      	orrs	r3, r2
    5962:	2204      	movs	r2, #4
    5964:	4393      	bics	r3, r2
    5966:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    5968:	b26b      	sxtb	r3, r5
    596a:	2b00      	cmp	r3, #0
    596c:	db21      	blt.n	59b2 <udd_ep_run+0xe6>
		if (0 != ptr_job->buf_size) {
    596e:	9b01      	ldr	r3, [sp, #4]
    5970:	2b00      	cmp	r3, #0
    5972:	d074      	beq.n	5a5e <udd_ep_run+0x192>
			next_trans = ptr_job->buf_size;
    5974:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    5976:	4b46      	ldr	r3, [pc, #280]	; (5a90 <udd_ep_run+0x1c4>)
    5978:	429c      	cmp	r4, r3
    597a:	d95e      	bls.n	5a3a <udd_ep_run+0x16e>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    597c:	8a39      	ldrh	r1, [r7, #16]
    597e:	001c      	movs	r4, r3
    5980:	0018      	movs	r0, r3
    5982:	4b44      	ldr	r3, [pc, #272]	; (5a94 <udd_ep_run+0x1c8>)
    5984:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    5986:	b289      	uxth	r1, r1
    5988:	1a63      	subs	r3, r4, r1
    598a:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    598c:	8a3b      	ldrh	r3, [r7, #16]
    598e:	429a      	cmp	r2, r3
    5990:	d25b      	bcs.n	5a4a <udd_ep_run+0x17e>
				ptr_job->b_use_out_cache_buffer = true;
    5992:	7cba      	ldrb	r2, [r7, #18]
    5994:	2104      	movs	r1, #4
    5996:	430a      	orrs	r2, r1
    5998:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    599a:	1e72      	subs	r2, r6, #1
    599c:	0192      	lsls	r2, r2, #6
    599e:	493e      	ldr	r1, [pc, #248]	; (5a98 <udd_ep_run+0x1cc>)
    59a0:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    59a2:	0031      	movs	r1, r6
    59a4:	483d      	ldr	r0, [pc, #244]	; (5a9c <udd_ep_run+0x1d0>)
    59a6:	4c3e      	ldr	r4, [pc, #248]	; (5aa0 <udd_ep_run+0x1d4>)
    59a8:	47a0      	blx	r4
				return (STATUS_OK ==
    59aa:	4244      	negs	r4, r0
    59ac:	4144      	adcs	r4, r0
    59ae:	b2e4      	uxtb	r4, r4
    59b0:	e797      	b.n	58e2 <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    59b2:	9b01      	ldr	r3, [sp, #4]
    59b4:	2b00      	cmp	r3, #0
    59b6:	d02a      	beq.n	5a0e <udd_ep_run+0x142>
			next_trans = ptr_job->buf_size;
    59b8:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    59ba:	4b35      	ldr	r3, [pc, #212]	; (5a90 <udd_ep_run+0x1c4>)
    59bc:	429c      	cmp	r4, r3
    59be:	d907      	bls.n	59d0 <udd_ep_run+0x104>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    59c0:	8a39      	ldrh	r1, [r7, #16]
    59c2:	001c      	movs	r4, r3
    59c4:	0018      	movs	r0, r3
    59c6:	4b33      	ldr	r3, [pc, #204]	; (5a94 <udd_ep_run+0x1c8>)
    59c8:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    59ca:	b289      	uxth	r1, r1
    59cc:	1a63      	subs	r3, r4, r1
    59ce:	b29c      	uxth	r4, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    59d0:	7cbb      	ldrb	r3, [r7, #18]
    59d2:	079b      	lsls	r3, r3, #30
    59d4:	d508      	bpl.n	59e8 <udd_ep_run+0x11c>
					(0 == (next_trans % ptr_job->ep_size));
    59d6:	8a39      	ldrh	r1, [r7, #16]
    59d8:	0020      	movs	r0, r4
    59da:	4b32      	ldr	r3, [pc, #200]	; (5aa4 <udd_ep_run+0x1d8>)
    59dc:	4798      	blx	r3
    59de:	b289      	uxth	r1, r1
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    59e0:	2900      	cmp	r1, #0
    59e2:	d012      	beq.n	5a0a <udd_ep_run+0x13e>
    59e4:	2200      	movs	r2, #0
    59e6:	e000      	b.n	59ea <udd_ep_run+0x11e>
    59e8:	2200      	movs	r2, #0
    59ea:	0052      	lsls	r2, r2, #1
    59ec:	7cbb      	ldrb	r3, [r7, #18]
    59ee:	2102      	movs	r1, #2
    59f0:	438b      	bics	r3, r1
    59f2:	4313      	orrs	r3, r2
    59f4:	74bb      	strb	r3, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    59f6:	0023      	movs	r3, r4
    59f8:	9a02      	ldr	r2, [sp, #8]
    59fa:	0031      	movs	r1, r6
    59fc:	4827      	ldr	r0, [pc, #156]	; (5a9c <udd_ep_run+0x1d0>)
    59fe:	4c2a      	ldr	r4, [pc, #168]	; (5aa8 <udd_ep_run+0x1dc>)
    5a00:	47a0      	blx	r4
		return (STATUS_OK ==
    5a02:	4244      	negs	r4, r0
    5a04:	4144      	adcs	r4, r0
    5a06:	b2e4      	uxtb	r4, r4
    5a08:	e76b      	b.n	58e2 <udd_ep_run+0x16>
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    5a0a:	2201      	movs	r2, #1
    5a0c:	e7ed      	b.n	59ea <udd_ep_run+0x11e>
		} else if (true == ptr_job->b_shortpacket) {
    5a0e:	7cbb      	ldrb	r3, [r7, #18]
    5a10:	079b      	lsls	r3, r3, #30
    5a12:	d505      	bpl.n	5a20 <udd_ep_run+0x154>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    5a14:	7cbb      	ldrb	r3, [r7, #18]
    5a16:	2202      	movs	r2, #2
    5a18:	4393      	bics	r3, r2
    5a1a:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    5a1c:	2400      	movs	r4, #0
    5a1e:	e7ea      	b.n	59f6 <udd_ep_run+0x12a>
			ptr_job->busy = false;
    5a20:	7cbb      	ldrb	r3, [r7, #18]
    5a22:	2201      	movs	r2, #1
    5a24:	4393      	bics	r3, r2
    5a26:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    5a28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5a2a:	2b00      	cmp	r3, #0
    5a2c:	d026      	beq.n	5a7c <udd_ep_run+0x1b0>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    5a2e:	002a      	movs	r2, r5
    5a30:	2100      	movs	r1, #0
    5a32:	2000      	movs	r0, #0
    5a34:	4798      	blx	r3
			return true;
    5a36:	2401      	movs	r4, #1
    5a38:	e753      	b.n	58e2 <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    5a3a:	8a39      	ldrh	r1, [r7, #16]
    5a3c:	0020      	movs	r0, r4
    5a3e:	4b19      	ldr	r3, [pc, #100]	; (5aa4 <udd_ep_run+0x1d8>)
    5a40:	4798      	blx	r3
    5a42:	b289      	uxth	r1, r1
    5a44:	1a63      	subs	r3, r4, r1
    5a46:	b29a      	uxth	r2, r3
    5a48:	e7a0      	b.n	598c <udd_ep_run+0xc0>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    5a4a:	0013      	movs	r3, r2
    5a4c:	9a02      	ldr	r2, [sp, #8]
    5a4e:	0031      	movs	r1, r6
    5a50:	4812      	ldr	r0, [pc, #72]	; (5a9c <udd_ep_run+0x1d0>)
    5a52:	4c13      	ldr	r4, [pc, #76]	; (5aa0 <udd_ep_run+0x1d4>)
    5a54:	47a0      	blx	r4
				return (STATUS_OK ==
    5a56:	4244      	negs	r4, r0
    5a58:	4144      	adcs	r4, r0
    5a5a:	b2e4      	uxtb	r4, r4
    5a5c:	e741      	b.n	58e2 <udd_ep_run+0x16>
			ptr_job->busy = false;
    5a5e:	7cbb      	ldrb	r3, [r7, #18]
    5a60:	2201      	movs	r2, #1
    5a62:	4393      	bics	r3, r2
    5a64:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    5a66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5a68:	2b00      	cmp	r3, #0
    5a6a:	d009      	beq.n	5a80 <udd_ep_run+0x1b4>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    5a6c:	002a      	movs	r2, r5
    5a6e:	2100      	movs	r1, #0
    5a70:	2000      	movs	r0, #0
    5a72:	4798      	blx	r3
			return true;
    5a74:	2401      	movs	r4, #1
    5a76:	e734      	b.n	58e2 <udd_ep_run+0x16>
		return false;
    5a78:	2400      	movs	r4, #0
    5a7a:	e732      	b.n	58e2 <udd_ep_run+0x16>
			return true;
    5a7c:	2401      	movs	r4, #1
    5a7e:	e730      	b.n	58e2 <udd_ep_run+0x16>
			return true;
    5a80:	2401      	movs	r4, #1
    5a82:	e72e      	b.n	58e2 <udd_ep_run+0x16>
    5a84:	0000572d 	.word	0x0000572d
    5a88:	00004f05 	.word	0x00004f05
    5a8c:	20000108 	.word	0x20000108
    5a90:	00001fff 	.word	0x00001fff
    5a94:	000097dd 	.word	0x000097dd
    5a98:	20002630 	.word	0x20002630
    5a9c:	200026f0 	.word	0x200026f0
    5aa0:	000067b5 	.word	0x000067b5
    5aa4:	00009609 	.word	0x00009609
    5aa8:	00006765 	.word	0x00006765

00005aac <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    5aac:	4b03      	ldr	r3, [pc, #12]	; (5abc <udd_set_address+0x10>)
    5aae:	681a      	ldr	r2, [r3, #0]
    5ab0:	2380      	movs	r3, #128	; 0x80
    5ab2:	425b      	negs	r3, r3
    5ab4:	4318      	orrs	r0, r3
    5ab6:	b2c0      	uxtb	r0, r0
    5ab8:	7290      	strb	r0, [r2, #10]
}
    5aba:	4770      	bx	lr
    5abc:	200026f0 	.word	0x200026f0

00005ac0 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    5ac0:	4b02      	ldr	r3, [pc, #8]	; (5acc <udd_getaddress+0xc>)
    5ac2:	681b      	ldr	r3, [r3, #0]
    5ac4:	7a98      	ldrb	r0, [r3, #10]
    5ac6:	0640      	lsls	r0, r0, #25
    5ac8:	0e40      	lsrs	r0, r0, #25
}
    5aca:	4770      	bx	lr
    5acc:	200026f0 	.word	0x200026f0

00005ad0 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    5ad0:	4b01      	ldr	r3, [pc, #4]	; (5ad8 <udd_set_setup_payload+0x8>)
    5ad2:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    5ad4:	8199      	strh	r1, [r3, #12]
}
    5ad6:	4770      	bx	lr
    5ad8:	20002858 	.word	0x20002858

00005adc <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    5adc:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    5ade:	2003      	movs	r0, #3
    5ae0:	4b16      	ldr	r3, [pc, #88]	; (5b3c <udd_attach+0x60>)
    5ae2:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    5ae4:	4c16      	ldr	r4, [pc, #88]	; (5b40 <udd_attach+0x64>)
    5ae6:	6822      	ldr	r2, [r4, #0]
    5ae8:	8913      	ldrh	r3, [r2, #8]
    5aea:	2101      	movs	r1, #1
    5aec:	438b      	bics	r3, r1
    5aee:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    5af0:	4a14      	ldr	r2, [pc, #80]	; (5b44 <udd_attach+0x68>)
    5af2:	3103      	adds	r1, #3
    5af4:	0020      	movs	r0, r4
    5af6:	4e14      	ldr	r6, [pc, #80]	; (5b48 <udd_attach+0x6c>)
    5af8:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    5afa:	4a14      	ldr	r2, [pc, #80]	; (5b4c <udd_attach+0x70>)
    5afc:	2100      	movs	r1, #0
    5afe:	0020      	movs	r0, r4
    5b00:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    5b02:	4a13      	ldr	r2, [pc, #76]	; (5b50 <udd_attach+0x74>)
    5b04:	2101      	movs	r1, #1
    5b06:	0020      	movs	r0, r4
    5b08:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    5b0a:	4a12      	ldr	r2, [pc, #72]	; (5b54 <udd_attach+0x78>)
    5b0c:	2102      	movs	r1, #2
    5b0e:	0020      	movs	r0, r4
    5b10:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    5b12:	2104      	movs	r1, #4
    5b14:	0020      	movs	r0, r4
    5b16:	4d10      	ldr	r5, [pc, #64]	; (5b58 <udd_attach+0x7c>)
    5b18:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    5b1a:	2100      	movs	r1, #0
    5b1c:	0020      	movs	r0, r4
    5b1e:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    5b20:	2101      	movs	r1, #1
    5b22:	0020      	movs	r0, r4
    5b24:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    5b26:	2102      	movs	r1, #2
    5b28:	0020      	movs	r0, r4
    5b2a:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    5b2c:	4a0b      	ldr	r2, [pc, #44]	; (5b5c <udd_attach+0x80>)
    5b2e:	2106      	movs	r1, #6
    5b30:	0020      	movs	r0, r4
    5b32:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    5b34:	2106      	movs	r1, #6
    5b36:	0020      	movs	r0, r4
    5b38:	47a8      	blx	r5
#endif
}
    5b3a:	bd70      	pop	{r4, r5, r6, pc}
    5b3c:	00004e4d 	.word	0x00004e4d
    5b40:	200026f0 	.word	0x200026f0
    5b44:	00005271 	.word	0x00005271
    5b48:	000061a5 	.word	0x000061a5
    5b4c:	0000555d 	.word	0x0000555d
    5b50:	00005341 	.word	0x00005341
    5b54:	00005209 	.word	0x00005209
    5b58:	000061c5 	.word	0x000061c5
    5b5c:	000051d5 	.word	0x000051d5

00005b60 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    5b60:	b570      	push	{r4, r5, r6, lr}
    5b62:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5b64:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    5b68:	425a      	negs	r2, r3
    5b6a:	4153      	adcs	r3, r2
    5b6c:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    5b6e:	b672      	cpsid	i
    5b70:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5b74:	2600      	movs	r6, #0
    5b76:	4b17      	ldr	r3, [pc, #92]	; (5bd4 <udd_enable+0x74>)
    5b78:	701e      	strb	r6, [r3, #0]
	return flags;
    5b7a:	9d00      	ldr	r5, [sp, #0]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    5b7c:	ac01      	add	r4, sp, #4
    5b7e:	0020      	movs	r0, r4
    5b80:	4b15      	ldr	r3, [pc, #84]	; (5bd8 <udd_enable+0x78>)
    5b82:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    5b84:	70a6      	strb	r6, [r4, #2]
	usb_init(&usb_device, USB, &config_usb);
    5b86:	4e15      	ldr	r6, [pc, #84]	; (5bdc <udd_enable+0x7c>)
    5b88:	0022      	movs	r2, r4
    5b8a:	4915      	ldr	r1, [pc, #84]	; (5be0 <udd_enable+0x80>)
    5b8c:	0030      	movs	r0, r6
    5b8e:	4b15      	ldr	r3, [pc, #84]	; (5be4 <udd_enable+0x84>)
    5b90:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    5b92:	0030      	movs	r0, r6
    5b94:	4b14      	ldr	r3, [pc, #80]	; (5be8 <udd_enable+0x88>)
    5b96:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    5b98:	4b14      	ldr	r3, [pc, #80]	; (5bec <udd_enable+0x8c>)
    5b9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    5b9c:	069b      	lsls	r3, r3, #26
    5b9e:	d414      	bmi.n	5bca <udd_enable+0x6a>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    5ba0:	4b12      	ldr	r3, [pc, #72]	; (5bec <udd_enable+0x8c>)
    5ba2:	68da      	ldr	r2, [r3, #12]
    5ba4:	23d0      	movs	r3, #208	; 0xd0
    5ba6:	4013      	ands	r3, r2
    5ba8:	2bd0      	cmp	r3, #208	; 0xd0
    5baa:	d1f9      	bne.n	5ba0 <udd_enable+0x40>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    5bac:	2001      	movs	r0, #1
    5bae:	4b10      	ldr	r3, [pc, #64]	; (5bf0 <udd_enable+0x90>)
    5bb0:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    5bb2:	4b10      	ldr	r3, [pc, #64]	; (5bf4 <udd_enable+0x94>)
    5bb4:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    5bb6:	2d00      	cmp	r5, #0
    5bb8:	d005      	beq.n	5bc6 <udd_enable+0x66>
		cpu_irq_enable();
    5bba:	2201      	movs	r2, #1
    5bbc:	4b05      	ldr	r3, [pc, #20]	; (5bd4 <udd_enable+0x74>)
    5bbe:	701a      	strb	r2, [r3, #0]
    5bc0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5bc4:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    5bc6:	b002      	add	sp, #8
    5bc8:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    5bca:	4b08      	ldr	r3, [pc, #32]	; (5bec <udd_enable+0x8c>)
    5bcc:	68db      	ldr	r3, [r3, #12]
    5bce:	06db      	lsls	r3, r3, #27
    5bd0:	d5fb      	bpl.n	5bca <udd_enable+0x6a>
    5bd2:	e7eb      	b.n	5bac <udd_enable+0x4c>
    5bd4:	20000108 	.word	0x20000108
    5bd8:	00006871 	.word	0x00006871
    5bdc:	200026f0 	.word	0x200026f0
    5be0:	41005000 	.word	0x41005000
    5be4:	00006881 	.word	0x00006881
    5be8:	00006831 	.word	0x00006831
    5bec:	40000800 	.word	0x40000800
    5bf0:	00004e4d 	.word	0x00004e4d
    5bf4:	00005add 	.word	0x00005add

00005bf8 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    5bf8:	b510      	push	{r4, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    5bfa:	2201      	movs	r2, #1
    5bfc:	4b03      	ldr	r3, [pc, #12]	; (5c0c <WDT_Handler+0x14>)
    5bfe:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
    5c00:	4b03      	ldr	r3, [pc, #12]	; (5c10 <WDT_Handler+0x18>)
    5c02:	681b      	ldr	r3, [r3, #0]
    5c04:	2b00      	cmp	r3, #0
    5c06:	d000      	beq.n	5c0a <WDT_Handler+0x12>
		wdt_early_warning_callback();
    5c08:	4798      	blx	r3
	}
}
    5c0a:	bd10      	pop	{r4, pc}
    5c0c:	40001000 	.word	0x40001000
    5c10:	200028b0 	.word	0x200028b0

00005c14 <_usb_device_interrupt_handler>:

	return STATUS_OK;
}

static void _usb_device_interrupt_handler(void)
{
    5c14:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c16:	b083      	sub	sp, #12
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    5c18:	4ba2      	ldr	r3, [pc, #648]	; (5ea4 <_usb_device_interrupt_handler+0x290>)
    5c1a:	6818      	ldr	r0, [r3, #0]
    5c1c:	6806      	ldr	r6, [r0, #0]
    5c1e:	8c35      	ldrh	r5, [r6, #32]
    5c20:	b2ad      	uxth	r5, r5

	/* device interrupt */
	if (0 == ep_inst) {
    5c22:	2d00      	cmp	r5, #0
    5c24:	d000      	beq.n	5c28 <_usb_device_interrupt_handler+0x14>
    5c26:	e13a      	b.n	5e9e <_usb_device_interrupt_handler+0x28a>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    5c28:	8bb6      	ldrh	r6, [r6, #28]
    5c2a:	b2b6      	uxth	r6, r6
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    5c2c:	23ab      	movs	r3, #171	; 0xab
    5c2e:	005b      	lsls	r3, r3, #1
    5c30:	5ac5      	ldrh	r5, [r0, r3]
				_usb_instances->device_registered_callback_mask;
    5c32:	3b02      	subs	r3, #2
    5c34:	5ac3      	ldrh	r3, [r0, r3]
		flags_run = flags &
    5c36:	4035      	ands	r5, r6
    5c38:	401d      	ands	r5, r3

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    5c3a:	2400      	movs	r4, #0
    5c3c:	e008      	b.n	5c50 <_usb_device_interrupt_handler+0x3c>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    5c3e:	4b99      	ldr	r3, [pc, #612]	; (5ea4 <_usb_device_interrupt_handler+0x290>)
    5c40:	6818      	ldr	r0, [r3, #0]
    5c42:	0023      	movs	r3, r4
    5c44:	332e      	adds	r3, #46	; 0x2e
    5c46:	009b      	lsls	r3, r3, #2
    5c48:	581b      	ldr	r3, [r3, r0]
    5c4a:	4997      	ldr	r1, [pc, #604]	; (5ea8 <_usb_device_interrupt_handler+0x294>)
    5c4c:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    5c4e:	3401      	adds	r4, #1
    5c50:	2c06      	cmp	r4, #6
    5c52:	dc2a      	bgt.n	5caa <_usb_device_interrupt_handler+0x96>
			if (flags & _usb_device_irq_bits[i]) {
    5c54:	0063      	lsls	r3, r4, #1
    5c56:	4a95      	ldr	r2, [pc, #596]	; (5eac <_usb_device_interrupt_handler+0x298>)
    5c58:	5a9b      	ldrh	r3, [r3, r2]
    5c5a:	4233      	tst	r3, r6
    5c5c:	d003      	beq.n	5c66 <_usb_device_interrupt_handler+0x52>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    5c5e:	4a91      	ldr	r2, [pc, #580]	; (5ea4 <_usb_device_interrupt_handler+0x290>)
    5c60:	6812      	ldr	r2, [r2, #0]
    5c62:	6812      	ldr	r2, [r2, #0]
    5c64:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    5c66:	422b      	tst	r3, r5
    5c68:	d0f1      	beq.n	5c4e <_usb_device_interrupt_handler+0x3a>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    5c6a:	2c06      	cmp	r4, #6
    5c6c:	d1e7      	bne.n	5c3e <_usb_device_interrupt_handler+0x2a>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    5c6e:	4b90      	ldr	r3, [pc, #576]	; (5eb0 <_usb_device_interrupt_handler+0x29c>)
    5c70:	891b      	ldrh	r3, [r3, #8]
    5c72:	045b      	lsls	r3, r3, #17
    5c74:	0d5b      	lsrs	r3, r3, #21
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    5c76:	2280      	movs	r2, #128	; 0x80
    5c78:	0052      	lsls	r2, r2, #1
    5c7a:	4013      	ands	r3, r2
					device_callback_lpm_wakeup_enable =
    5c7c:	4a8a      	ldr	r2, [pc, #552]	; (5ea8 <_usb_device_interrupt_handler+0x294>)
    5c7e:	6013      	str	r3, [r2, #0]
    5c80:	e7dd      	b.n	5c3e <_usb_device_interrupt_handler+0x2a>
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->device_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    5c82:	001a      	movs	r2, r3
    5c84:	3208      	adds	r2, #8
    5c86:	0152      	lsls	r2, r2, #5
    5c88:	18b2      	adds	r2, r6, r2
    5c8a:	79d2      	ldrb	r2, [r2, #7]
    5c8c:	0652      	lsls	r2, r2, #25
    5c8e:	d50e      	bpl.n	5cae <_usb_device_interrupt_handler+0x9a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    5c90:	001a      	movs	r2, r3
    5c92:	3208      	adds	r2, #8
    5c94:	0152      	lsls	r2, r2, #5
    5c96:	18b6      	adds	r6, r6, r2
    5c98:	2240      	movs	r2, #64	; 0x40
    5c9a:	71f2      	strb	r2, [r6, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    5c9c:	3ac0      	subs	r2, #192	; 0xc0
    5c9e:	4313      	orrs	r3, r2
    5ca0:	4a84      	ldr	r2, [pc, #528]	; (5eb4 <_usb_device_interrupt_handler+0x2a0>)
    5ca2:	7193      	strb	r3, [r2, #6]
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    5ca4:	2360      	movs	r3, #96	; 0x60
    5ca6:	420b      	tst	r3, r1
    5ca8:	d112      	bne.n	5cd0 <_usb_device_interrupt_handler+0xbc>
					return;
				}
			}
		}
	}
}
    5caa:	b003      	add	sp, #12
    5cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    5cae:	9c01      	ldr	r4, [sp, #4]
    5cb0:	0022      	movs	r2, r4
    5cb2:	3208      	adds	r2, #8
    5cb4:	0152      	lsls	r2, r2, #5
    5cb6:	18b2      	adds	r2, r6, r2
    5cb8:	79d2      	ldrb	r2, [r2, #7]
    5cba:	0692      	lsls	r2, r2, #26
    5cbc:	d5f2      	bpl.n	5ca4 <_usb_device_interrupt_handler+0x90>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    5cbe:	0022      	movs	r2, r4
    5cc0:	3208      	adds	r2, #8
    5cc2:	0152      	lsls	r2, r2, #5
    5cc4:	18b6      	adds	r6, r6, r2
    5cc6:	2220      	movs	r2, #32
    5cc8:	71f2      	strb	r2, [r6, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    5cca:	4a7a      	ldr	r2, [pc, #488]	; (5eb4 <_usb_device_interrupt_handler+0x2a0>)
    5ccc:	7193      	strb	r3, [r2, #6]
    5cce:	e7e9      	b.n	5ca4 <_usb_device_interrupt_handler+0x90>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    5cd0:	9b01      	ldr	r3, [sp, #4]
    5cd2:	011b      	lsls	r3, r3, #4
    5cd4:	18c3      	adds	r3, r0, r3
    5cd6:	33e0      	adds	r3, #224	; 0xe0
    5cd8:	681b      	ldr	r3, [r3, #0]
    5cda:	4976      	ldr	r1, [pc, #472]	; (5eb4 <_usb_device_interrupt_handler+0x2a0>)
    5cdc:	4798      	blx	r3
    5cde:	e7e4      	b.n	5caa <_usb_device_interrupt_handler+0x96>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    5ce0:	9a01      	ldr	r2, [sp, #4]
    5ce2:	0013      	movs	r3, r2
    5ce4:	3308      	adds	r3, #8
    5ce6:	015b      	lsls	r3, r3, #5
    5ce8:	18f6      	adds	r6, r6, r3
    5cea:	2310      	movs	r3, #16
    5cec:	71f3      	strb	r3, [r6, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    5cee:	1883      	adds	r3, r0, r2
    5cf0:	3361      	adds	r3, #97	; 0x61
    5cf2:	33ff      	adds	r3, #255	; 0xff
    5cf4:	781b      	ldrb	r3, [r3, #0]
    5cf6:	06db      	lsls	r3, r3, #27
    5cf8:	d5d7      	bpl.n	5caa <_usb_device_interrupt_handler+0x96>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    5cfa:	0014      	movs	r4, r2
    5cfc:	0152      	lsls	r2, r2, #5
    5cfe:	4b6c      	ldr	r3, [pc, #432]	; (5eb0 <_usb_device_interrupt_handler+0x29c>)
    5d00:	189b      	adds	r3, r3, r2
    5d02:	685b      	ldr	r3, [r3, #4]
    5d04:	049b      	lsls	r3, r3, #18
    5d06:	0c9b      	lsrs	r3, r3, #18
    5d08:	496a      	ldr	r1, [pc, #424]	; (5eb4 <_usb_device_interrupt_handler+0x2a0>)
    5d0a:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    5d0c:	0123      	lsls	r3, r4, #4
    5d0e:	18c3      	adds	r3, r0, r3
    5d10:	33dc      	adds	r3, #220	; 0xdc
    5d12:	681b      	ldr	r3, [r3, #0]
    5d14:	4798      	blx	r3
    5d16:	e7c8      	b.n	5caa <_usb_device_interrupt_handler+0x96>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    5d18:	9c01      	ldr	r4, [sp, #4]
    5d1a:	0022      	movs	r2, r4
    5d1c:	3208      	adds	r2, #8
    5d1e:	0152      	lsls	r2, r2, #5
    5d20:	18b2      	adds	r2, r6, r2
    5d22:	79d2      	ldrb	r2, [r2, #7]
    5d24:	0792      	lsls	r2, r2, #30
    5d26:	d51b      	bpl.n	5d60 <_usb_device_interrupt_handler+0x14c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    5d28:	0022      	movs	r2, r4
    5d2a:	3208      	adds	r2, #8
    5d2c:	0152      	lsls	r2, r2, #5
    5d2e:	18b6      	adds	r6, r6, r2
    5d30:	2202      	movs	r2, #2
    5d32:	71f2      	strb	r2, [r6, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    5d34:	4d5f      	ldr	r5, [pc, #380]	; (5eb4 <_usb_device_interrupt_handler+0x2a0>)
    5d36:	3a82      	subs	r2, #130	; 0x82
    5d38:	4313      	orrs	r3, r2
    5d3a:	71ab      	strb	r3, [r5, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    5d3c:	0162      	lsls	r2, r4, #5
    5d3e:	4b5c      	ldr	r3, [pc, #368]	; (5eb0 <_usb_device_interrupt_handler+0x29c>)
    5d40:	189b      	adds	r3, r3, r2
    5d42:	3310      	adds	r3, #16
    5d44:	685b      	ldr	r3, [r3, #4]
    5d46:	049b      	lsls	r3, r3, #18
    5d48:	0c9b      	lsrs	r3, r3, #18
    5d4a:	806b      	strh	r3, [r5, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    5d4c:	078b      	lsls	r3, r1, #30
    5d4e:	d0ac      	beq.n	5caa <_usb_device_interrupt_handler+0x96>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    5d50:	9b01      	ldr	r3, [sp, #4]
    5d52:	330d      	adds	r3, #13
    5d54:	011b      	lsls	r3, r3, #4
    5d56:	18c3      	adds	r3, r0, r3
    5d58:	685b      	ldr	r3, [r3, #4]
    5d5a:	4956      	ldr	r1, [pc, #344]	; (5eb4 <_usb_device_interrupt_handler+0x2a0>)
    5d5c:	4798      	blx	r3
    5d5e:	e7a4      	b.n	5caa <_usb_device_interrupt_handler+0x96>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    5d60:	9c01      	ldr	r4, [sp, #4]
    5d62:	0022      	movs	r2, r4
    5d64:	3208      	adds	r2, #8
    5d66:	0152      	lsls	r2, r2, #5
    5d68:	18b2      	adds	r2, r6, r2
    5d6a:	79d2      	ldrb	r2, [r2, #7]
    5d6c:	07d2      	lsls	r2, r2, #31
    5d6e:	d5ed      	bpl.n	5d4c <_usb_device_interrupt_handler+0x138>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    5d70:	0022      	movs	r2, r4
    5d72:	3208      	adds	r2, #8
    5d74:	0152      	lsls	r2, r2, #5
    5d76:	18b6      	adds	r6, r6, r2
    5d78:	2201      	movs	r2, #1
    5d7a:	71f2      	strb	r2, [r6, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    5d7c:	4d4d      	ldr	r5, [pc, #308]	; (5eb4 <_usb_device_interrupt_handler+0x2a0>)
    5d7e:	71ab      	strb	r3, [r5, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    5d80:	0163      	lsls	r3, r4, #5
    5d82:	4a4b      	ldr	r2, [pc, #300]	; (5eb0 <_usb_device_interrupt_handler+0x29c>)
    5d84:	18d2      	adds	r2, r2, r3
    5d86:	6853      	ldr	r3, [r2, #4]
    5d88:	049b      	lsls	r3, r3, #18
    5d8a:	0c9b      	lsrs	r3, r3, #18
    5d8c:	802b      	strh	r3, [r5, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    5d8e:	6853      	ldr	r3, [r2, #4]
    5d90:	011b      	lsls	r3, r3, #4
    5d92:	0c9b      	lsrs	r3, r3, #18
    5d94:	80ab      	strh	r3, [r5, #4]
    5d96:	e7d9      	b.n	5d4c <_usb_device_interrupt_handler+0x138>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    5d98:	9c01      	ldr	r4, [sp, #4]
    5d9a:	0022      	movs	r2, r4
    5d9c:	3208      	adds	r2, #8
    5d9e:	0152      	lsls	r2, r2, #5
    5da0:	18b2      	adds	r2, r6, r2
    5da2:	79d2      	ldrb	r2, [r2, #7]
    5da4:	0752      	lsls	r2, r2, #29
    5da6:	d56e      	bpl.n	5e86 <_usb_device_interrupt_handler+0x272>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    5da8:	0022      	movs	r2, r4
    5daa:	3208      	adds	r2, #8
    5dac:	0152      	lsls	r2, r2, #5
    5dae:	18b6      	adds	r6, r6, r2
    5db0:	2204      	movs	r2, #4
    5db2:	71f2      	strb	r2, [r6, #7]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    5db4:	0165      	lsls	r5, r4, #5
    5db6:	4a3e      	ldr	r2, [pc, #248]	; (5eb0 <_usb_device_interrupt_handler+0x29c>)
    5db8:	1952      	adds	r2, r2, r5
    5dba:	7a92      	ldrb	r2, [r2, #10]
    5dbc:	0792      	lsls	r2, r2, #30
    5dbe:	d505      	bpl.n	5dcc <_usb_device_interrupt_handler+0x1b8>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    5dc0:	4a3b      	ldr	r2, [pc, #236]	; (5eb0 <_usb_device_interrupt_handler+0x29c>)
    5dc2:	1952      	adds	r2, r2, r5
    5dc4:	7a95      	ldrb	r5, [r2, #10]
    5dc6:	2602      	movs	r6, #2
    5dc8:	43b5      	bics	r5, r6
    5dca:	7295      	strb	r5, [r2, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    5dcc:	4a39      	ldr	r2, [pc, #228]	; (5eb4 <_usb_device_interrupt_handler+0x2a0>)
    5dce:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    5dd0:	9b01      	ldr	r3, [sp, #4]
    5dd2:	3308      	adds	r3, #8
    5dd4:	015b      	lsls	r3, r3, #5
    5dd6:	6802      	ldr	r2, [r0, #0]
    5dd8:	4694      	mov	ip, r2
    5dda:	4463      	add	r3, ip
    5ddc:	79db      	ldrb	r3, [r3, #7]
    5dde:	07db      	lsls	r3, r3, #31
    5de0:	d551      	bpl.n	5e86 <_usb_device_interrupt_handler+0x272>
    5de2:	e762      	b.n	5caa <_usb_device_interrupt_handler+0x96>
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    5de4:	3301      	adds	r3, #1
    5de6:	b2db      	uxtb	r3, r3
    5de8:	2b07      	cmp	r3, #7
    5dea:	d900      	bls.n	5dee <_usb_device_interrupt_handler+0x1da>
    5dec:	e75d      	b.n	5caa <_usb_device_interrupt_handler+0x96>
			if (ep_inst & (1 << i)) {
    5dee:	9301      	str	r3, [sp, #4]
    5df0:	002a      	movs	r2, r5
    5df2:	411a      	asrs	r2, r3
    5df4:	07d2      	lsls	r2, r2, #31
    5df6:	d5f5      	bpl.n	5de4 <_usb_device_interrupt_handler+0x1d0>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    5df8:	001a      	movs	r2, r3
    5dfa:	3208      	adds	r2, #8
    5dfc:	0152      	lsls	r2, r2, #5
    5dfe:	18b2      	adds	r2, r6, r2
    5e00:	79d2      	ldrb	r2, [r2, #7]
    5e02:	b2d2      	uxtb	r2, r2
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    5e04:	18c1      	adds	r1, r0, r3
    5e06:	000f      	movs	r7, r1
    5e08:	3761      	adds	r7, #97	; 0x61
    5e0a:	37ff      	adds	r7, #255	; 0xff
    5e0c:	783f      	ldrb	r7, [r7, #0]
						_usb_instances->device_endpoint_registered_callback_mask[i];
    5e0e:	3159      	adds	r1, #89	; 0x59
    5e10:	31ff      	adds	r1, #255	; 0xff
    5e12:	780c      	ldrb	r4, [r1, #0]
    5e14:	0039      	movs	r1, r7
    5e16:	4011      	ands	r1, r2
    5e18:	4021      	ands	r1, r4
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    5e1a:	2760      	movs	r7, #96	; 0x60
    5e1c:	4217      	tst	r7, r2
    5e1e:	d000      	beq.n	5e22 <_usb_device_interrupt_handler+0x20e>
    5e20:	e72f      	b.n	5c82 <_usb_device_interrupt_handler+0x6e>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    5e22:	06d4      	lsls	r4, r2, #27
    5e24:	d500      	bpl.n	5e28 <_usb_device_interrupt_handler+0x214>
    5e26:	e75b      	b.n	5ce0 <_usb_device_interrupt_handler+0xcc>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    5e28:	0794      	lsls	r4, r2, #30
    5e2a:	d000      	beq.n	5e2e <_usb_device_interrupt_handler+0x21a>
    5e2c:	e774      	b.n	5d18 <_usb_device_interrupt_handler+0x104>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    5e2e:	270c      	movs	r7, #12
    5e30:	4217      	tst	r7, r2
    5e32:	d0d7      	beq.n	5de4 <_usb_device_interrupt_handler+0x1d0>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    5e34:	9c01      	ldr	r4, [sp, #4]
    5e36:	0022      	movs	r2, r4
    5e38:	3208      	adds	r2, #8
    5e3a:	0152      	lsls	r2, r2, #5
    5e3c:	18b2      	adds	r2, r6, r2
    5e3e:	79d2      	ldrb	r2, [r2, #7]
    5e40:	0712      	lsls	r2, r2, #28
    5e42:	d5a9      	bpl.n	5d98 <_usb_device_interrupt_handler+0x184>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    5e44:	0022      	movs	r2, r4
    5e46:	3208      	adds	r2, #8
    5e48:	0152      	lsls	r2, r2, #5
    5e4a:	18b6      	adds	r6, r6, r2
    5e4c:	2208      	movs	r2, #8
    5e4e:	71f2      	strb	r2, [r6, #7]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    5e50:	0165      	lsls	r5, r4, #5
    5e52:	4a17      	ldr	r2, [pc, #92]	; (5eb0 <_usb_device_interrupt_handler+0x29c>)
    5e54:	1952      	adds	r2, r2, r5
    5e56:	7e92      	ldrb	r2, [r2, #26]
    5e58:	0792      	lsls	r2, r2, #30
    5e5a:	d505      	bpl.n	5e68 <_usb_device_interrupt_handler+0x254>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    5e5c:	4a14      	ldr	r2, [pc, #80]	; (5eb0 <_usb_device_interrupt_handler+0x29c>)
    5e5e:	1952      	adds	r2, r2, r5
    5e60:	7e95      	ldrb	r5, [r2, #26]
    5e62:	2602      	movs	r6, #2
    5e64:	43b5      	bics	r5, r6
    5e66:	7695      	strb	r5, [r2, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    5e68:	2280      	movs	r2, #128	; 0x80
    5e6a:	4252      	negs	r2, r2
    5e6c:	4313      	orrs	r3, r2
    5e6e:	4a11      	ldr	r2, [pc, #68]	; (5eb4 <_usb_device_interrupt_handler+0x2a0>)
    5e70:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    5e72:	9b01      	ldr	r3, [sp, #4]
    5e74:	3308      	adds	r3, #8
    5e76:	015b      	lsls	r3, r3, #5
    5e78:	6802      	ldr	r2, [r0, #0]
    5e7a:	4694      	mov	ip, r2
    5e7c:	4463      	add	r3, ip
    5e7e:	79db      	ldrb	r3, [r3, #7]
    5e80:	079b      	lsls	r3, r3, #30
    5e82:	d500      	bpl.n	5e86 <_usb_device_interrupt_handler+0x272>
    5e84:	e711      	b.n	5caa <_usb_device_interrupt_handler+0x96>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    5e86:	230c      	movs	r3, #12
    5e88:	420b      	tst	r3, r1
    5e8a:	d100      	bne.n	5e8e <_usb_device_interrupt_handler+0x27a>
    5e8c:	e70d      	b.n	5caa <_usb_device_interrupt_handler+0x96>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    5e8e:	9b01      	ldr	r3, [sp, #4]
    5e90:	011b      	lsls	r3, r3, #4
    5e92:	18c3      	adds	r3, r0, r3
    5e94:	33d8      	adds	r3, #216	; 0xd8
    5e96:	681b      	ldr	r3, [r3, #0]
    5e98:	4906      	ldr	r1, [pc, #24]	; (5eb4 <_usb_device_interrupt_handler+0x2a0>)
    5e9a:	4798      	blx	r3
    5e9c:	e705      	b.n	5caa <_usb_device_interrupt_handler+0x96>
    5e9e:	2300      	movs	r3, #0
    5ea0:	e7a2      	b.n	5de8 <_usb_device_interrupt_handler+0x1d4>
    5ea2:	46c0      	nop			; (mov r8, r8)
    5ea4:	20000f08 	.word	0x20000f08
    5ea8:	20000f0c 	.word	0x20000f0c
    5eac:	0000ca74 	.word	0x0000ca74
    5eb0:	200028b4 	.word	0x200028b4
    5eb4:	20000f10 	.word	0x20000f10

00005eb8 <_usb_host_interrupt_handler>:
{
    5eb8:	b570      	push	{r4, r5, r6, lr}
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    5eba:	4bb4      	ldr	r3, [pc, #720]	; (618c <_usb_host_interrupt_handler+0x2d4>)
    5ebc:	681e      	ldr	r6, [r3, #0]
    5ebe:	6835      	ldr	r5, [r6, #0]
    5ec0:	8c2b      	ldrh	r3, [r5, #32]
    5ec2:	b29b      	uxth	r3, r3
    5ec4:	2b00      	cmp	r3, #0
    5ec6:	d100      	bne.n	5eca <_usb_host_interrupt_handler+0x12>
    5ec8:	e0b0      	b.n	602c <_usb_host_interrupt_handler+0x174>
    5eca:	8c28      	ldrh	r0, [r5, #32]
    5ecc:	b280      	uxth	r0, r0
    5ece:	4bb0      	ldr	r3, [pc, #704]	; (6190 <_usb_host_interrupt_handler+0x2d8>)
    5ed0:	4798      	blx	r3
    5ed2:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    5ed4:	2c1f      	cmp	r4, #31
    5ed6:	d900      	bls.n	5eda <_usb_host_interrupt_handler+0x22>
    5ed8:	e0d8      	b.n	608c <_usb_host_interrupt_handler+0x1d4>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    5eda:	0023      	movs	r3, r4
    5edc:	3308      	adds	r3, #8
    5ede:	015b      	lsls	r3, r3, #5
    5ee0:	18ed      	adds	r5, r5, r3
    5ee2:	79ed      	ldrb	r5, [r5, #7]
    5ee4:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    5ee6:	07ab      	lsls	r3, r5, #30
    5ee8:	d041      	beq.n	5f6e <_usb_host_interrupt_handler+0xb6>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    5eea:	2301      	movs	r3, #1
    5eec:	40a3      	lsls	r3, r4
    5eee:	4aa9      	ldr	r2, [pc, #676]	; (6194 <_usb_host_interrupt_handler+0x2dc>)
    5ef0:	6811      	ldr	r1, [r2, #0]
    5ef2:	4399      	bics	r1, r3
    5ef4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    5ef6:	0023      	movs	r3, r4
    5ef8:	3308      	adds	r3, #8
    5efa:	015b      	lsls	r3, r3, #5
    5efc:	6832      	ldr	r2, [r6, #0]
    5efe:	4694      	mov	ip, r2
    5f00:	4463      	add	r3, ip
    5f02:	2203      	movs	r2, #3
    5f04:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    5f06:	1933      	adds	r3, r6, r4
    5f08:	33ae      	adds	r3, #174	; 0xae
    5f0a:	781b      	ldrb	r3, [r3, #0]
    5f0c:	07db      	lsls	r3, r3, #31
    5f0e:	d52e      	bpl.n	5f6e <_usb_host_interrupt_handler+0xb6>
				pipe_callback_para.pipe_num = pipe_int;
    5f10:	4ba1      	ldr	r3, [pc, #644]	; (6198 <_usb_host_interrupt_handler+0x2e0>)
    5f12:	701c      	strb	r4, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    5f14:	6832      	ldr	r2, [r6, #0]
    5f16:	0023      	movs	r3, r4
    5f18:	3308      	adds	r3, #8
    5f1a:	015b      	lsls	r3, r3, #5
    5f1c:	5c9b      	ldrb	r3, [r3, r2]
    5f1e:	079b      	lsls	r3, r3, #30
    5f20:	0f9b      	lsrs	r3, r3, #30
    5f22:	2b01      	cmp	r3, #1
    5f24:	d100      	bne.n	5f28 <_usb_host_interrupt_handler+0x70>
    5f26:	e083      	b.n	6030 <_usb_host_interrupt_handler+0x178>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    5f28:	0162      	lsls	r2, r4, #5
    5f2a:	4b9c      	ldr	r3, [pc, #624]	; (619c <_usb_host_interrupt_handler+0x2e4>)
    5f2c:	189b      	adds	r3, r3, r2
    5f2e:	685a      	ldr	r2, [r3, #4]
    5f30:	0112      	lsls	r2, r2, #4
    5f32:	0c92      	lsrs	r2, r2, #18
    5f34:	b290      	uxth	r0, r2
    5f36:	4998      	ldr	r1, [pc, #608]	; (6198 <_usb_host_interrupt_handler+0x2e0>)
    5f38:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    5f3a:	685a      	ldr	r2, [r3, #4]
    5f3c:	0492      	lsls	r2, r2, #18
    5f3e:	0c92      	lsrs	r2, r2, #18
    5f40:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    5f42:	6859      	ldr	r1, [r3, #4]
    5f44:	4a96      	ldr	r2, [pc, #600]	; (61a0 <_usb_host_interrupt_handler+0x2e8>)
    5f46:	400a      	ands	r2, r1
    5f48:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    5f4a:	2800      	cmp	r0, #0
    5f4c:	d107      	bne.n	5f5e <_usb_host_interrupt_handler+0xa6>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    5f4e:	0162      	lsls	r2, r4, #5
    5f50:	4b92      	ldr	r3, [pc, #584]	; (619c <_usb_host_interrupt_handler+0x2e4>)
    5f52:	189b      	adds	r3, r3, r2
    5f54:	685b      	ldr	r3, [r3, #4]
    5f56:	049b      	lsls	r3, r3, #18
    5f58:	0c9b      	lsrs	r3, r3, #18
    5f5a:	4a8f      	ldr	r2, [pc, #572]	; (6198 <_usb_host_interrupt_handler+0x2e0>)
    5f5c:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    5f5e:	4b8b      	ldr	r3, [pc, #556]	; (618c <_usb_host_interrupt_handler+0x2d4>)
    5f60:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    5f62:	1ca3      	adds	r3, r4, #2
    5f64:	011b      	lsls	r3, r3, #4
    5f66:	18c3      	adds	r3, r0, r3
    5f68:	685b      	ldr	r3, [r3, #4]
    5f6a:	498b      	ldr	r1, [pc, #556]	; (6198 <_usb_host_interrupt_handler+0x2e0>)
    5f6c:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    5f6e:	076b      	lsls	r3, r5, #29
    5f70:	d50e      	bpl.n	5f90 <_usb_host_interrupt_handler+0xd8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    5f72:	2301      	movs	r3, #1
    5f74:	40a3      	lsls	r3, r4
    5f76:	4a87      	ldr	r2, [pc, #540]	; (6194 <_usb_host_interrupt_handler+0x2dc>)
    5f78:	6811      	ldr	r1, [r2, #0]
    5f7a:	4399      	bics	r1, r3
    5f7c:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    5f7e:	4b83      	ldr	r3, [pc, #524]	; (618c <_usb_host_interrupt_handler+0x2d4>)
    5f80:	681b      	ldr	r3, [r3, #0]
    5f82:	681b      	ldr	r3, [r3, #0]
    5f84:	0022      	movs	r2, r4
    5f86:	3208      	adds	r2, #8
    5f88:	0152      	lsls	r2, r2, #5
    5f8a:	189b      	adds	r3, r3, r2
    5f8c:	2204      	movs	r2, #4
    5f8e:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    5f90:	072b      	lsls	r3, r5, #28
    5f92:	d514      	bpl.n	5fbe <_usb_host_interrupt_handler+0x106>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    5f94:	2301      	movs	r3, #1
    5f96:	40a3      	lsls	r3, r4
    5f98:	4a7e      	ldr	r2, [pc, #504]	; (6194 <_usb_host_interrupt_handler+0x2dc>)
    5f9a:	6811      	ldr	r1, [r2, #0]
    5f9c:	4399      	bics	r1, r3
    5f9e:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    5fa0:	4b7a      	ldr	r3, [pc, #488]	; (618c <_usb_host_interrupt_handler+0x2d4>)
    5fa2:	6818      	ldr	r0, [r3, #0]
    5fa4:	0023      	movs	r3, r4
    5fa6:	3308      	adds	r3, #8
    5fa8:	015b      	lsls	r3, r3, #5
    5faa:	6802      	ldr	r2, [r0, #0]
    5fac:	4694      	mov	ip, r2
    5fae:	4463      	add	r3, ip
    5fb0:	2208      	movs	r2, #8
    5fb2:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    5fb4:	1903      	adds	r3, r0, r4
    5fb6:	33ae      	adds	r3, #174	; 0xae
    5fb8:	781b      	ldrb	r3, [r3, #0]
    5fba:	079b      	lsls	r3, r3, #30
    5fbc:	d449      	bmi.n	6052 <_usb_host_interrupt_handler+0x19a>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    5fbe:	06eb      	lsls	r3, r5, #27
    5fc0:	d514      	bpl.n	5fec <_usb_host_interrupt_handler+0x134>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    5fc2:	2301      	movs	r3, #1
    5fc4:	40a3      	lsls	r3, r4
    5fc6:	4a73      	ldr	r2, [pc, #460]	; (6194 <_usb_host_interrupt_handler+0x2dc>)
    5fc8:	6811      	ldr	r1, [r2, #0]
    5fca:	4399      	bics	r1, r3
    5fcc:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    5fce:	4b6f      	ldr	r3, [pc, #444]	; (618c <_usb_host_interrupt_handler+0x2d4>)
    5fd0:	6818      	ldr	r0, [r3, #0]
    5fd2:	0023      	movs	r3, r4
    5fd4:	3308      	adds	r3, #8
    5fd6:	015b      	lsls	r3, r3, #5
    5fd8:	6802      	ldr	r2, [r0, #0]
    5fda:	4694      	mov	ip, r2
    5fdc:	4463      	add	r3, ip
    5fde:	2210      	movs	r2, #16
    5fe0:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    5fe2:	1903      	adds	r3, r0, r4
    5fe4:	33ae      	adds	r3, #174	; 0xae
    5fe6:	781b      	ldrb	r3, [r3, #0]
    5fe8:	075b      	lsls	r3, r3, #29
    5fea:	d440      	bmi.n	606e <_usb_host_interrupt_handler+0x1b6>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    5fec:	06ab      	lsls	r3, r5, #26
    5fee:	d400      	bmi.n	5ff2 <_usb_host_interrupt_handler+0x13a>
    5ff0:	e0b2      	b.n	6158 <_usb_host_interrupt_handler+0x2a0>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    5ff2:	2301      	movs	r3, #1
    5ff4:	40a3      	lsls	r3, r4
    5ff6:	4a67      	ldr	r2, [pc, #412]	; (6194 <_usb_host_interrupt_handler+0x2dc>)
    5ff8:	6811      	ldr	r1, [r2, #0]
    5ffa:	4399      	bics	r1, r3
    5ffc:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    5ffe:	4b63      	ldr	r3, [pc, #396]	; (618c <_usb_host_interrupt_handler+0x2d4>)
    6000:	6818      	ldr	r0, [r3, #0]
    6002:	0023      	movs	r3, r4
    6004:	3308      	adds	r3, #8
    6006:	015b      	lsls	r3, r3, #5
    6008:	6802      	ldr	r2, [r0, #0]
    600a:	4694      	mov	ip, r2
    600c:	4463      	add	r3, ip
    600e:	2220      	movs	r2, #32
    6010:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6012:	1903      	adds	r3, r0, r4
    6014:	33ae      	adds	r3, #174	; 0xae
    6016:	781b      	ldrb	r3, [r3, #0]
    6018:	071b      	lsls	r3, r3, #28
    601a:	d400      	bmi.n	601e <_usb_host_interrupt_handler+0x166>
    601c:	e09c      	b.n	6158 <_usb_host_interrupt_handler+0x2a0>
				pipe_callback_para.pipe_num = pipe_int;
    601e:	495e      	ldr	r1, [pc, #376]	; (6198 <_usb_host_interrupt_handler+0x2e0>)
    6020:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    6022:	0124      	lsls	r4, r4, #4
    6024:	1904      	adds	r4, r0, r4
    6026:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6028:	4798      	blx	r3
    602a:	e095      	b.n	6158 <_usb_host_interrupt_handler+0x2a0>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    602c:	2420      	movs	r4, #32
    602e:	e751      	b.n	5ed4 <_usb_host_interrupt_handler+0x1c>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6030:	0162      	lsls	r2, r4, #5
    6032:	4b5a      	ldr	r3, [pc, #360]	; (619c <_usb_host_interrupt_handler+0x2e4>)
    6034:	189b      	adds	r3, r3, r2
    6036:	685a      	ldr	r2, [r3, #4]
    6038:	0492      	lsls	r2, r2, #18
    603a:	0c92      	lsrs	r2, r2, #18
    603c:	4956      	ldr	r1, [pc, #344]	; (6198 <_usb_host_interrupt_handler+0x2e0>)
    603e:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6040:	685a      	ldr	r2, [r3, #4]
    6042:	0112      	lsls	r2, r2, #4
    6044:	0c92      	lsrs	r2, r2, #18
    6046:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6048:	685a      	ldr	r2, [r3, #4]
    604a:	0b92      	lsrs	r2, r2, #14
    604c:	0391      	lsls	r1, r2, #14
    604e:	6059      	str	r1, [r3, #4]
    6050:	e785      	b.n	5f5e <_usb_host_interrupt_handler+0xa6>
				pipe_callback_para.pipe_num = pipe_int;
    6052:	4951      	ldr	r1, [pc, #324]	; (6198 <_usb_host_interrupt_handler+0x2e0>)
    6054:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    6056:	0162      	lsls	r2, r4, #5
    6058:	4b50      	ldr	r3, [pc, #320]	; (619c <_usb_host_interrupt_handler+0x2e4>)
    605a:	189b      	adds	r3, r3, r2
    605c:	89db      	ldrh	r3, [r3, #14]
    605e:	221f      	movs	r2, #31
    6060:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    6062:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    6064:	0123      	lsls	r3, r4, #4
    6066:	18c3      	adds	r3, r0, r3
    6068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    606a:	4798      	blx	r3
    606c:	e7a7      	b.n	5fbe <_usb_host_interrupt_handler+0x106>
				pipe_callback_para.pipe_num = pipe_int;
    606e:	494a      	ldr	r1, [pc, #296]	; (6198 <_usb_host_interrupt_handler+0x2e0>)
    6070:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6072:	0162      	lsls	r2, r4, #5
    6074:	4b49      	ldr	r3, [pc, #292]	; (619c <_usb_host_interrupt_handler+0x2e4>)
    6076:	189b      	adds	r3, r3, r2
    6078:	685b      	ldr	r3, [r3, #4]
    607a:	011b      	lsls	r3, r3, #4
    607c:	0c9b      	lsrs	r3, r3, #18
    607e:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    6080:	0123      	lsls	r3, r4, #4
    6082:	18c3      	adds	r3, r0, r3
    6084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6086:	2100      	movs	r1, #0
    6088:	4798      	blx	r3
    608a:	e7af      	b.n	5fec <_usb_host_interrupt_handler+0x134>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    608c:	8bac      	ldrh	r4, [r5, #28]
    608e:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    6090:	0763      	lsls	r3, r4, #29
    6092:	d505      	bpl.n	60a0 <_usb_host_interrupt_handler+0x1e8>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    6094:	2304      	movs	r3, #4
    6096:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    6098:	33a1      	adds	r3, #161	; 0xa1
    609a:	5cf3      	ldrb	r3, [r6, r3]
    609c:	07db      	lsls	r3, r3, #31
    609e:	d45c      	bmi.n	615a <_usb_host_interrupt_handler+0x2a2>
		if (flags & USB_HOST_INTFLAG_RST) {
    60a0:	0723      	lsls	r3, r4, #28
    60a2:	d50b      	bpl.n	60bc <_usb_host_interrupt_handler+0x204>
			host_pipe_job_busy_status = 0;
    60a4:	2200      	movs	r2, #0
    60a6:	4b3b      	ldr	r3, [pc, #236]	; (6194 <_usb_host_interrupt_handler+0x2dc>)
    60a8:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    60aa:	4b38      	ldr	r3, [pc, #224]	; (618c <_usb_host_interrupt_handler+0x2d4>)
    60ac:	6818      	ldr	r0, [r3, #0]
    60ae:	2308      	movs	r3, #8
    60b0:	6802      	ldr	r2, [r0, #0]
    60b2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    60b4:	339d      	adds	r3, #157	; 0x9d
    60b6:	5cc3      	ldrb	r3, [r0, r3]
    60b8:	079b      	lsls	r3, r3, #30
    60ba:	d452      	bmi.n	6162 <_usb_host_interrupt_handler+0x2aa>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    60bc:	0663      	lsls	r3, r4, #25
    60be:	d508      	bpl.n	60d2 <_usb_host_interrupt_handler+0x21a>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    60c0:	4b32      	ldr	r3, [pc, #200]	; (618c <_usb_host_interrupt_handler+0x2d4>)
    60c2:	6818      	ldr	r0, [r3, #0]
    60c4:	2340      	movs	r3, #64	; 0x40
    60c6:	6802      	ldr	r2, [r0, #0]
    60c8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    60ca:	3365      	adds	r3, #101	; 0x65
    60cc:	5cc3      	ldrb	r3, [r0, r3]
    60ce:	06db      	lsls	r3, r3, #27
    60d0:	d44a      	bmi.n	6168 <_usb_host_interrupt_handler+0x2b0>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    60d2:	06a3      	lsls	r3, r4, #26
    60d4:	d508      	bpl.n	60e8 <_usb_host_interrupt_handler+0x230>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    60d6:	4b2d      	ldr	r3, [pc, #180]	; (618c <_usb_host_interrupt_handler+0x2d4>)
    60d8:	6818      	ldr	r0, [r3, #0]
    60da:	2320      	movs	r3, #32
    60dc:	6802      	ldr	r2, [r0, #0]
    60de:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    60e0:	3385      	adds	r3, #133	; 0x85
    60e2:	5cc3      	ldrb	r3, [r0, r3]
    60e4:	071b      	lsls	r3, r3, #28
    60e6:	d442      	bmi.n	616e <_usb_host_interrupt_handler+0x2b6>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    60e8:	06e3      	lsls	r3, r4, #27
    60ea:	d508      	bpl.n	60fe <_usb_host_interrupt_handler+0x246>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    60ec:	4b27      	ldr	r3, [pc, #156]	; (618c <_usb_host_interrupt_handler+0x2d4>)
    60ee:	6818      	ldr	r0, [r3, #0]
    60f0:	2310      	movs	r3, #16
    60f2:	6802      	ldr	r2, [r0, #0]
    60f4:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    60f6:	3395      	adds	r3, #149	; 0x95
    60f8:	5cc3      	ldrb	r3, [r0, r3]
    60fa:	075b      	lsls	r3, r3, #29
    60fc:	d43a      	bmi.n	6174 <_usb_host_interrupt_handler+0x2bc>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    60fe:	0623      	lsls	r3, r4, #24
    6100:	d50b      	bpl.n	611a <_usb_host_interrupt_handler+0x262>
			host_pipe_job_busy_status = 0;
    6102:	2200      	movs	r2, #0
    6104:	4b23      	ldr	r3, [pc, #140]	; (6194 <_usb_host_interrupt_handler+0x2dc>)
    6106:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    6108:	4b20      	ldr	r3, [pc, #128]	; (618c <_usb_host_interrupt_handler+0x2d4>)
    610a:	6818      	ldr	r0, [r3, #0]
    610c:	2380      	movs	r3, #128	; 0x80
    610e:	6802      	ldr	r2, [r0, #0]
    6110:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    6112:	3325      	adds	r3, #37	; 0x25
    6114:	5cc3      	ldrb	r3, [r0, r3]
    6116:	069b      	lsls	r3, r3, #26
    6118:	d42f      	bmi.n	617a <_usb_host_interrupt_handler+0x2c2>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    611a:	05e3      	lsls	r3, r4, #23
    611c:	d50c      	bpl.n	6138 <_usb_host_interrupt_handler+0x280>
			host_pipe_job_busy_status = 0;
    611e:	2200      	movs	r2, #0
    6120:	4b1c      	ldr	r3, [pc, #112]	; (6194 <_usb_host_interrupt_handler+0x2dc>)
    6122:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    6124:	4b19      	ldr	r3, [pc, #100]	; (618c <_usb_host_interrupt_handler+0x2d4>)
    6126:	6818      	ldr	r0, [r3, #0]
    6128:	2380      	movs	r3, #128	; 0x80
    612a:	005b      	lsls	r3, r3, #1
    612c:	6802      	ldr	r2, [r0, #0]
    612e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    6130:	3b5b      	subs	r3, #91	; 0x5b
    6132:	5cc3      	ldrb	r3, [r0, r3]
    6134:	065b      	lsls	r3, r3, #25
    6136:	d423      	bmi.n	6180 <_usb_host_interrupt_handler+0x2c8>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    6138:	05a3      	lsls	r3, r4, #22
    613a:	d50d      	bpl.n	6158 <_usb_host_interrupt_handler+0x2a0>
			host_pipe_job_busy_status = 0;
    613c:	2200      	movs	r2, #0
    613e:	4b15      	ldr	r3, [pc, #84]	; (6194 <_usb_host_interrupt_handler+0x2dc>)
    6140:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    6142:	4b12      	ldr	r3, [pc, #72]	; (618c <_usb_host_interrupt_handler+0x2d4>)
    6144:	6818      	ldr	r0, [r3, #0]
    6146:	2380      	movs	r3, #128	; 0x80
    6148:	009b      	lsls	r3, r3, #2
    614a:	6802      	ldr	r2, [r0, #0]
    614c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    614e:	3b5c      	subs	r3, #92	; 0x5c
    6150:	3bff      	subs	r3, #255	; 0xff
    6152:	56c3      	ldrsb	r3, [r0, r3]
    6154:	2b00      	cmp	r3, #0
    6156:	db16      	blt.n	6186 <_usb_host_interrupt_handler+0x2ce>
}
    6158:	bd70      	pop	{r4, r5, r6, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    615a:	6873      	ldr	r3, [r6, #4]
    615c:	0030      	movs	r0, r6
    615e:	4798      	blx	r3
    6160:	e79e      	b.n	60a0 <_usb_host_interrupt_handler+0x1e8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    6162:	6883      	ldr	r3, [r0, #8]
    6164:	4798      	blx	r3
    6166:	e7a9      	b.n	60bc <_usb_host_interrupt_handler+0x204>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    6168:	6943      	ldr	r3, [r0, #20]
    616a:	4798      	blx	r3
    616c:	e7b1      	b.n	60d2 <_usb_host_interrupt_handler+0x21a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    616e:	6903      	ldr	r3, [r0, #16]
    6170:	4798      	blx	r3
    6172:	e7b9      	b.n	60e8 <_usb_host_interrupt_handler+0x230>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    6174:	68c3      	ldr	r3, [r0, #12]
    6176:	4798      	blx	r3
    6178:	e7c1      	b.n	60fe <_usb_host_interrupt_handler+0x246>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    617a:	6983      	ldr	r3, [r0, #24]
    617c:	4798      	blx	r3
    617e:	e7cc      	b.n	611a <_usb_host_interrupt_handler+0x262>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    6180:	69c3      	ldr	r3, [r0, #28]
    6182:	4798      	blx	r3
    6184:	e7d8      	b.n	6138 <_usb_host_interrupt_handler+0x280>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    6186:	6a03      	ldr	r3, [r0, #32]
    6188:	4798      	blx	r3
}
    618a:	e7e5      	b.n	6158 <_usb_host_interrupt_handler+0x2a0>
    618c:	20000f08 	.word	0x20000f08
    6190:	00009899 	.word	0x00009899
    6194:	20000f18 	.word	0x20000f18
    6198:	20000f1c 	.word	0x20000f1c
    619c:	200028b4 	.word	0x200028b4
    61a0:	f0003fff 	.word	0xf0003fff

000061a4 <usb_device_register_callback>:
	module_inst->device_callback[callback_type] = callback_func;
    61a4:	000b      	movs	r3, r1
    61a6:	332e      	adds	r3, #46	; 0x2e
    61a8:	009b      	lsls	r3, r3, #2
    61aa:	501a      	str	r2, [r3, r0]
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    61ac:	0049      	lsls	r1, r1, #1
    61ae:	4b04      	ldr	r3, [pc, #16]	; (61c0 <usb_device_register_callback+0x1c>)
    61b0:	5acb      	ldrh	r3, [r1, r3]
    61b2:	22aa      	movs	r2, #170	; 0xaa
    61b4:	0052      	lsls	r2, r2, #1
    61b6:	5a81      	ldrh	r1, [r0, r2]
    61b8:	430b      	orrs	r3, r1
    61ba:	5283      	strh	r3, [r0, r2]
}
    61bc:	2000      	movs	r0, #0
    61be:	4770      	bx	lr
    61c0:	0000ca74 	.word	0x0000ca74

000061c4 <usb_device_enable_callback>:
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    61c4:	0049      	lsls	r1, r1, #1
    61c6:	4b06      	ldr	r3, [pc, #24]	; (61e0 <usb_device_enable_callback+0x1c>)
    61c8:	5acb      	ldrh	r3, [r1, r3]
    61ca:	6802      	ldr	r2, [r0, #0]
    61cc:	8393      	strh	r3, [r2, #28]
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    61ce:	21ab      	movs	r1, #171	; 0xab
    61d0:	0049      	lsls	r1, r1, #1
    61d2:	5a42      	ldrh	r2, [r0, r1]
    61d4:	431a      	orrs	r2, r3
    61d6:	5242      	strh	r2, [r0, r1]
	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    61d8:	6802      	ldr	r2, [r0, #0]
    61da:	8313      	strh	r3, [r2, #24]
}
    61dc:	2000      	movs	r0, #0
    61de:	4770      	bx	lr
    61e0:	0000ca74 	.word	0x0000ca74

000061e4 <usb_device_disable_callback>:
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    61e4:	0049      	lsls	r1, r1, #1
    61e6:	4b05      	ldr	r3, [pc, #20]	; (61fc <usb_device_disable_callback+0x18>)
    61e8:	5aca      	ldrh	r2, [r1, r3]
    61ea:	21ab      	movs	r1, #171	; 0xab
    61ec:	0049      	lsls	r1, r1, #1
    61ee:	5a43      	ldrh	r3, [r0, r1]
    61f0:	4393      	bics	r3, r2
    61f2:	5243      	strh	r3, [r0, r1]
	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    61f4:	6803      	ldr	r3, [r0, #0]
    61f6:	829a      	strh	r2, [r3, #20]
}
    61f8:	2000      	movs	r0, #0
    61fa:	4770      	bx	lr
    61fc:	0000ca74 	.word	0x0000ca74

00006200 <usb_device_endpoint_register_callback>:
{
    6200:	b510      	push	{r4, lr}
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    6202:	008c      	lsls	r4, r1, #2
    6204:	18a4      	adds	r4, r4, r2
    6206:	3434      	adds	r4, #52	; 0x34
    6208:	00a4      	lsls	r4, r4, #2
    620a:	1904      	adds	r4, r0, r4
    620c:	6063      	str	r3, [r4, #4]
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    620e:	4b05      	ldr	r3, [pc, #20]	; (6224 <usb_device_endpoint_register_callback+0x24>)
    6210:	5c9b      	ldrb	r3, [r3, r2]
    6212:	1840      	adds	r0, r0, r1
    6214:	3059      	adds	r0, #89	; 0x59
    6216:	30ff      	adds	r0, #255	; 0xff
    6218:	7802      	ldrb	r2, [r0, #0]
    621a:	4313      	orrs	r3, r2
    621c:	7003      	strb	r3, [r0, #0]
}
    621e:	2000      	movs	r0, #0
    6220:	bd10      	pop	{r4, pc}
    6222:	46c0      	nop			; (mov r8, r8)
    6224:	0000ca84 	.word	0x0000ca84

00006228 <usb_device_endpoint_unregister_callback>:
{
    6228:	b510      	push	{r4, lr}
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    622a:	008b      	lsls	r3, r1, #2
    622c:	189b      	adds	r3, r3, r2
    622e:	3334      	adds	r3, #52	; 0x34
    6230:	009b      	lsls	r3, r3, #2
    6232:	18c3      	adds	r3, r0, r3
    6234:	2400      	movs	r4, #0
    6236:	605c      	str	r4, [r3, #4]
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    6238:	4b04      	ldr	r3, [pc, #16]	; (624c <usb_device_endpoint_unregister_callback+0x24>)
    623a:	5c9a      	ldrb	r2, [r3, r2]
    623c:	1840      	adds	r0, r0, r1
    623e:	3059      	adds	r0, #89	; 0x59
    6240:	30ff      	adds	r0, #255	; 0xff
    6242:	7803      	ldrb	r3, [r0, #0]
    6244:	4393      	bics	r3, r2
    6246:	7003      	strb	r3, [r0, #0]
}
    6248:	2000      	movs	r0, #0
    624a:	bd10      	pop	{r4, pc}
    624c:	0000ca84 	.word	0x0000ca84

00006250 <usb_device_endpoint_enable_callback>:
{
    6250:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    6252:	230f      	movs	r3, #15
    6254:	400b      	ands	r3, r1
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    6256:	4c36      	ldr	r4, [pc, #216]	; (6330 <usb_device_endpoint_enable_callback+0xe0>)
    6258:	5ca5      	ldrb	r5, [r4, r2]
    625a:	18c4      	adds	r4, r0, r3
    625c:	3461      	adds	r4, #97	; 0x61
    625e:	34ff      	adds	r4, #255	; 0xff
    6260:	7826      	ldrb	r6, [r4, #0]
    6262:	4335      	orrs	r5, r6
    6264:	7025      	strb	r5, [r4, #0]
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    6266:	2a00      	cmp	r2, #0
    6268:	d109      	bne.n	627e <usb_device_endpoint_enable_callback+0x2e>
		if (ep_num == 0) { // control endpoint
    626a:	2b00      	cmp	r3, #0
    626c:	d10f      	bne.n	628e <usb_device_endpoint_enable_callback+0x3e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    626e:	015c      	lsls	r4, r3, #5
    6270:	6805      	ldr	r5, [r0, #0]
    6272:	46ac      	mov	ip, r5
    6274:	4464      	add	r4, ip
    6276:	340a      	adds	r4, #10
    6278:	34ff      	adds	r4, #255	; 0xff
    627a:	2503      	movs	r5, #3
    627c:	7025      	strb	r5, [r4, #0]
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    627e:	2a01      	cmp	r2, #1
    6280:	d01a      	beq.n	62b8 <usb_device_endpoint_enable_callback+0x68>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    6282:	2a02      	cmp	r2, #2
    6284:	d038      	beq.n	62f8 <usb_device_endpoint_enable_callback+0xa8>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    6286:	2a03      	cmp	r2, #3
    6288:	d03f      	beq.n	630a <usb_device_endpoint_enable_callback+0xba>
}
    628a:	2000      	movs	r0, #0
    628c:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    628e:	b24c      	sxtb	r4, r1
    6290:	2c00      	cmp	r4, #0
    6292:	db08      	blt.n	62a6 <usb_device_endpoint_enable_callback+0x56>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    6294:	015c      	lsls	r4, r3, #5
    6296:	6805      	ldr	r5, [r0, #0]
    6298:	46ac      	mov	ip, r5
    629a:	4464      	add	r4, ip
    629c:	340a      	adds	r4, #10
    629e:	34ff      	adds	r4, #255	; 0xff
    62a0:	2501      	movs	r5, #1
    62a2:	7025      	strb	r5, [r4, #0]
    62a4:	e7eb      	b.n	627e <usb_device_endpoint_enable_callback+0x2e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    62a6:	015c      	lsls	r4, r3, #5
    62a8:	6805      	ldr	r5, [r0, #0]
    62aa:	46ac      	mov	ip, r5
    62ac:	4464      	add	r4, ip
    62ae:	340a      	adds	r4, #10
    62b0:	34ff      	adds	r4, #255	; 0xff
    62b2:	2502      	movs	r5, #2
    62b4:	7025      	strb	r5, [r4, #0]
    62b6:	e7e2      	b.n	627e <usb_device_endpoint_enable_callback+0x2e>
		if (ep_num == 0) { // control endpoint
    62b8:	2b00      	cmp	r3, #0
    62ba:	d108      	bne.n	62ce <usb_device_endpoint_enable_callback+0x7e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    62bc:	015c      	lsls	r4, r3, #5
    62be:	6805      	ldr	r5, [r0, #0]
    62c0:	46ac      	mov	ip, r5
    62c2:	4464      	add	r4, ip
    62c4:	340a      	adds	r4, #10
    62c6:	34ff      	adds	r4, #255	; 0xff
    62c8:	250c      	movs	r5, #12
    62ca:	7025      	strb	r5, [r4, #0]
    62cc:	e7d9      	b.n	6282 <usb_device_endpoint_enable_callback+0x32>
		} else if (ep & USB_EP_DIR_IN) {
    62ce:	b24c      	sxtb	r4, r1
    62d0:	2c00      	cmp	r4, #0
    62d2:	db08      	blt.n	62e6 <usb_device_endpoint_enable_callback+0x96>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    62d4:	015c      	lsls	r4, r3, #5
    62d6:	6805      	ldr	r5, [r0, #0]
    62d8:	46ac      	mov	ip, r5
    62da:	4464      	add	r4, ip
    62dc:	340a      	adds	r4, #10
    62de:	34ff      	adds	r4, #255	; 0xff
    62e0:	2504      	movs	r5, #4
    62e2:	7025      	strb	r5, [r4, #0]
    62e4:	e7cd      	b.n	6282 <usb_device_endpoint_enable_callback+0x32>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    62e6:	015c      	lsls	r4, r3, #5
    62e8:	6805      	ldr	r5, [r0, #0]
    62ea:	46ac      	mov	ip, r5
    62ec:	4464      	add	r4, ip
    62ee:	340a      	adds	r4, #10
    62f0:	34ff      	adds	r4, #255	; 0xff
    62f2:	2508      	movs	r5, #8
    62f4:	7025      	strb	r5, [r4, #0]
    62f6:	e7c4      	b.n	6282 <usb_device_endpoint_enable_callback+0x32>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    62f8:	015c      	lsls	r4, r3, #5
    62fa:	6805      	ldr	r5, [r0, #0]
    62fc:	46ac      	mov	ip, r5
    62fe:	4464      	add	r4, ip
    6300:	340a      	adds	r4, #10
    6302:	34ff      	adds	r4, #255	; 0xff
    6304:	2510      	movs	r5, #16
    6306:	7025      	strb	r5, [r4, #0]
    6308:	e7bd      	b.n	6286 <usb_device_endpoint_enable_callback+0x36>
		if (ep & USB_EP_DIR_IN) {
    630a:	b249      	sxtb	r1, r1
    630c:	2900      	cmp	r1, #0
    630e:	db07      	blt.n	6320 <usb_device_endpoint_enable_callback+0xd0>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    6310:	6802      	ldr	r2, [r0, #0]
    6312:	015b      	lsls	r3, r3, #5
    6314:	18d3      	adds	r3, r2, r3
    6316:	330a      	adds	r3, #10
    6318:	33ff      	adds	r3, #255	; 0xff
    631a:	2220      	movs	r2, #32
    631c:	701a      	strb	r2, [r3, #0]
    631e:	e7b4      	b.n	628a <usb_device_endpoint_enable_callback+0x3a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    6320:	6802      	ldr	r2, [r0, #0]
    6322:	015b      	lsls	r3, r3, #5
    6324:	18d3      	adds	r3, r2, r3
    6326:	330a      	adds	r3, #10
    6328:	33ff      	adds	r3, #255	; 0xff
    632a:	2240      	movs	r2, #64	; 0x40
    632c:	701a      	strb	r2, [r3, #0]
    632e:	e7ac      	b.n	628a <usb_device_endpoint_enable_callback+0x3a>
    6330:	0000ca84 	.word	0x0000ca84

00006334 <usb_device_endpoint_disable_callback>:
{
    6334:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    6336:	230f      	movs	r3, #15
    6338:	400b      	ands	r3, r1
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    633a:	4c36      	ldr	r4, [pc, #216]	; (6414 <usb_device_endpoint_disable_callback+0xe0>)
    633c:	5ca6      	ldrb	r6, [r4, r2]
    633e:	18c4      	adds	r4, r0, r3
    6340:	3461      	adds	r4, #97	; 0x61
    6342:	34ff      	adds	r4, #255	; 0xff
    6344:	7825      	ldrb	r5, [r4, #0]
    6346:	43b5      	bics	r5, r6
    6348:	7025      	strb	r5, [r4, #0]
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    634a:	2a00      	cmp	r2, #0
    634c:	d109      	bne.n	6362 <usb_device_endpoint_disable_callback+0x2e>
		if (ep_num == 0) { // control endpoint
    634e:	2b00      	cmp	r3, #0
    6350:	d10f      	bne.n	6372 <usb_device_endpoint_disable_callback+0x3e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    6352:	015c      	lsls	r4, r3, #5
    6354:	6805      	ldr	r5, [r0, #0]
    6356:	46ac      	mov	ip, r5
    6358:	4464      	add	r4, ip
    635a:	3409      	adds	r4, #9
    635c:	34ff      	adds	r4, #255	; 0xff
    635e:	2503      	movs	r5, #3
    6360:	7025      	strb	r5, [r4, #0]
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    6362:	2a01      	cmp	r2, #1
    6364:	d01a      	beq.n	639c <usb_device_endpoint_disable_callback+0x68>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    6366:	2a02      	cmp	r2, #2
    6368:	d038      	beq.n	63dc <usb_device_endpoint_disable_callback+0xa8>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    636a:	2a03      	cmp	r2, #3
    636c:	d03f      	beq.n	63ee <usb_device_endpoint_disable_callback+0xba>
}
    636e:	2000      	movs	r0, #0
    6370:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    6372:	b24c      	sxtb	r4, r1
    6374:	2c00      	cmp	r4, #0
    6376:	db08      	blt.n	638a <usb_device_endpoint_disable_callback+0x56>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    6378:	015c      	lsls	r4, r3, #5
    637a:	6805      	ldr	r5, [r0, #0]
    637c:	46ac      	mov	ip, r5
    637e:	4464      	add	r4, ip
    6380:	3409      	adds	r4, #9
    6382:	34ff      	adds	r4, #255	; 0xff
    6384:	2501      	movs	r5, #1
    6386:	7025      	strb	r5, [r4, #0]
    6388:	e7eb      	b.n	6362 <usb_device_endpoint_disable_callback+0x2e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    638a:	015c      	lsls	r4, r3, #5
    638c:	6805      	ldr	r5, [r0, #0]
    638e:	46ac      	mov	ip, r5
    6390:	4464      	add	r4, ip
    6392:	3409      	adds	r4, #9
    6394:	34ff      	adds	r4, #255	; 0xff
    6396:	2502      	movs	r5, #2
    6398:	7025      	strb	r5, [r4, #0]
    639a:	e7e2      	b.n	6362 <usb_device_endpoint_disable_callback+0x2e>
		if (ep_num == 0) { // control endpoint
    639c:	2b00      	cmp	r3, #0
    639e:	d108      	bne.n	63b2 <usb_device_endpoint_disable_callback+0x7e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    63a0:	015c      	lsls	r4, r3, #5
    63a2:	6805      	ldr	r5, [r0, #0]
    63a4:	46ac      	mov	ip, r5
    63a6:	4464      	add	r4, ip
    63a8:	3409      	adds	r4, #9
    63aa:	34ff      	adds	r4, #255	; 0xff
    63ac:	250c      	movs	r5, #12
    63ae:	7025      	strb	r5, [r4, #0]
    63b0:	e7d9      	b.n	6366 <usb_device_endpoint_disable_callback+0x32>
		} else if (ep & USB_EP_DIR_IN) {
    63b2:	b24c      	sxtb	r4, r1
    63b4:	2c00      	cmp	r4, #0
    63b6:	db08      	blt.n	63ca <usb_device_endpoint_disable_callback+0x96>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    63b8:	015c      	lsls	r4, r3, #5
    63ba:	6805      	ldr	r5, [r0, #0]
    63bc:	46ac      	mov	ip, r5
    63be:	4464      	add	r4, ip
    63c0:	3409      	adds	r4, #9
    63c2:	34ff      	adds	r4, #255	; 0xff
    63c4:	2504      	movs	r5, #4
    63c6:	7025      	strb	r5, [r4, #0]
    63c8:	e7cd      	b.n	6366 <usb_device_endpoint_disable_callback+0x32>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    63ca:	015c      	lsls	r4, r3, #5
    63cc:	6805      	ldr	r5, [r0, #0]
    63ce:	46ac      	mov	ip, r5
    63d0:	4464      	add	r4, ip
    63d2:	3409      	adds	r4, #9
    63d4:	34ff      	adds	r4, #255	; 0xff
    63d6:	2508      	movs	r5, #8
    63d8:	7025      	strb	r5, [r4, #0]
    63da:	e7c4      	b.n	6366 <usb_device_endpoint_disable_callback+0x32>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    63dc:	015c      	lsls	r4, r3, #5
    63de:	6805      	ldr	r5, [r0, #0]
    63e0:	46ac      	mov	ip, r5
    63e2:	4464      	add	r4, ip
    63e4:	3409      	adds	r4, #9
    63e6:	34ff      	adds	r4, #255	; 0xff
    63e8:	2510      	movs	r5, #16
    63ea:	7025      	strb	r5, [r4, #0]
    63ec:	e7bd      	b.n	636a <usb_device_endpoint_disable_callback+0x36>
		if (ep & USB_EP_DIR_IN) {
    63ee:	b249      	sxtb	r1, r1
    63f0:	2900      	cmp	r1, #0
    63f2:	db07      	blt.n	6404 <usb_device_endpoint_disable_callback+0xd0>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    63f4:	6802      	ldr	r2, [r0, #0]
    63f6:	015b      	lsls	r3, r3, #5
    63f8:	18d3      	adds	r3, r2, r3
    63fa:	3309      	adds	r3, #9
    63fc:	33ff      	adds	r3, #255	; 0xff
    63fe:	2220      	movs	r2, #32
    6400:	701a      	strb	r2, [r3, #0]
    6402:	e7b4      	b.n	636e <usb_device_endpoint_disable_callback+0x3a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    6404:	6802      	ldr	r2, [r0, #0]
    6406:	015b      	lsls	r3, r3, #5
    6408:	18d3      	adds	r3, r2, r3
    640a:	3309      	adds	r3, #9
    640c:	33ff      	adds	r3, #255	; 0xff
    640e:	2240      	movs	r2, #64	; 0x40
    6410:	701a      	strb	r2, [r3, #0]
    6412:	e7ac      	b.n	636e <usb_device_endpoint_disable_callback+0x3a>
    6414:	0000ca84 	.word	0x0000ca84

00006418 <usb_device_endpoint_get_config_defaults>:
	ep_config->ep_address = 0;
    6418:	2300      	movs	r3, #0
    641a:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    641c:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    641e:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    6420:	3301      	adds	r3, #1
    6422:	70c3      	strb	r3, [r0, #3]
}
    6424:	4770      	bx	lr
	...

00006428 <usb_device_endpoint_set_config>:
{
    6428:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    642a:	780a      	ldrb	r2, [r1, #0]
    642c:	230f      	movs	r3, #15
    642e:	4013      	ands	r3, r2
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    6430:	b252      	sxtb	r2, r2
    6432:	0fd5      	lsrs	r5, r2, #31
	switch (ep_config->ep_type) {
    6434:	78cc      	ldrb	r4, [r1, #3]
    6436:	2c04      	cmp	r4, #4
    6438:	d900      	bls.n	643c <usb_device_endpoint_set_config+0x14>
    643a:	e086      	b.n	654a <usb_device_endpoint_set_config+0x122>
    643c:	00a4      	lsls	r4, r4, #2
    643e:	4e83      	ldr	r6, [pc, #524]	; (664c <usb_device_endpoint_set_config+0x224>)
    6440:	5934      	ldr	r4, [r6, r4]
    6442:	46a7      	mov	pc, r4
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    6444:	6802      	ldr	r2, [r0, #0]
    6446:	3308      	adds	r3, #8
    6448:	015b      	lsls	r3, r3, #5
    644a:	2100      	movs	r1, #0
    644c:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    644e:	2000      	movs	r0, #0
    6450:	e096      	b.n	6580 <usb_device_endpoint_set_config+0x158>
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    6452:	6804      	ldr	r4, [r0, #0]
    6454:	001a      	movs	r2, r3
    6456:	3208      	adds	r2, #8
    6458:	0152      	lsls	r2, r2, #5
    645a:	5d12      	ldrb	r2, [r2, r4]
    645c:	0752      	lsls	r2, r2, #29
    645e:	d001      	beq.n	6464 <usb_device_endpoint_set_config+0x3c>
				return STATUS_ERR_DENIED;
    6460:	201c      	movs	r0, #28
    6462:	e08d      	b.n	6580 <usb_device_endpoint_set_config+0x158>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    6464:	001a      	movs	r2, r3
    6466:	3208      	adds	r2, #8
    6468:	0152      	lsls	r2, r2, #5
    646a:	5d15      	ldrb	r5, [r2, r4]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    646c:	2270      	movs	r2, #112	; 0x70
    646e:	4215      	tst	r5, r2
    6470:	d001      	beq.n	6476 <usb_device_endpoint_set_config+0x4e>
				return STATUS_ERR_DENIED;
    6472:	201c      	movs	r0, #28
    6474:	e084      	b.n	6580 <usb_device_endpoint_set_config+0x158>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    6476:	001a      	movs	r2, r3
    6478:	3208      	adds	r2, #8
    647a:	0152      	lsls	r2, r2, #5
    647c:	2511      	movs	r5, #17
    647e:	5515      	strb	r5, [r2, r4]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6480:	6804      	ldr	r4, [r0, #0]
    6482:	18a4      	adds	r4, r4, r2
    6484:	352f      	adds	r5, #47	; 0x2f
    6486:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6488:	6800      	ldr	r0, [r0, #0]
    648a:	1882      	adds	r2, r0, r2
    648c:	2080      	movs	r0, #128	; 0x80
    648e:	7110      	strb	r0, [r2, #4]
			if (true == ep_config->auto_zlp) {
    6490:	788a      	ldrb	r2, [r1, #2]
    6492:	2a00      	cmp	r2, #0
    6494:	d01f      	beq.n	64d6 <usb_device_endpoint_set_config+0xae>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6496:	0158      	lsls	r0, r3, #5
    6498:	4a6d      	ldr	r2, [pc, #436]	; (6650 <usb_device_endpoint_set_config+0x228>)
    649a:	1812      	adds	r2, r2, r0
    649c:	6854      	ldr	r4, [r2, #4]
    649e:	2080      	movs	r0, #128	; 0x80
    64a0:	0600      	lsls	r0, r0, #24
    64a2:	4304      	orrs	r4, r0
    64a4:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    64a6:	6954      	ldr	r4, [r2, #20]
    64a8:	4320      	orrs	r0, r4
    64aa:	6150      	str	r0, [r2, #20]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    64ac:	784c      	ldrb	r4, [r1, #1]
    64ae:	2207      	movs	r2, #7
    64b0:	4014      	ands	r4, r2
    64b2:	015b      	lsls	r3, r3, #5
    64b4:	4866      	ldr	r0, [pc, #408]	; (6650 <usb_device_endpoint_set_config+0x228>)
    64b6:	18c0      	adds	r0, r0, r3
    64b8:	6845      	ldr	r5, [r0, #4]
    64ba:	0724      	lsls	r4, r4, #28
    64bc:	4e65      	ldr	r6, [pc, #404]	; (6654 <usb_device_endpoint_set_config+0x22c>)
    64be:	4035      	ands	r5, r6
    64c0:	432c      	orrs	r4, r5
    64c2:	6044      	str	r4, [r0, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    64c4:	784b      	ldrb	r3, [r1, #1]
    64c6:	6941      	ldr	r1, [r0, #20]
    64c8:	4013      	ands	r3, r2
    64ca:	071b      	lsls	r3, r3, #28
    64cc:	4031      	ands	r1, r6
    64ce:	430b      	orrs	r3, r1
    64d0:	6143      	str	r3, [r0, #20]
			return STATUS_OK;
    64d2:	2000      	movs	r0, #0
    64d4:	e054      	b.n	6580 <usb_device_endpoint_set_config+0x158>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    64d6:	0158      	lsls	r0, r3, #5
    64d8:	4a5d      	ldr	r2, [pc, #372]	; (6650 <usb_device_endpoint_set_config+0x228>)
    64da:	1812      	adds	r2, r2, r0
    64dc:	6850      	ldr	r0, [r2, #4]
    64de:	0040      	lsls	r0, r0, #1
    64e0:	0840      	lsrs	r0, r0, #1
    64e2:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    64e4:	6950      	ldr	r0, [r2, #20]
    64e6:	0040      	lsls	r0, r0, #1
    64e8:	0840      	lsrs	r0, r0, #1
    64ea:	6150      	str	r0, [r2, #20]
    64ec:	e7de      	b.n	64ac <usb_device_endpoint_set_config+0x84>
			if (ep_bank) {
    64ee:	2a00      	cmp	r2, #0
    64f0:	db08      	blt.n	6504 <usb_device_endpoint_set_config+0xdc>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    64f2:	6804      	ldr	r4, [r0, #0]
    64f4:	001a      	movs	r2, r3
    64f6:	3208      	adds	r2, #8
    64f8:	0152      	lsls	r2, r2, #5
    64fa:	5d12      	ldrb	r2, [r2, r4]
    64fc:	0752      	lsls	r2, r2, #29
    64fe:	d018      	beq.n	6532 <usb_device_endpoint_set_config+0x10a>
					return STATUS_ERR_DENIED;
    6500:	201c      	movs	r0, #28
    6502:	e03d      	b.n	6580 <usb_device_endpoint_set_config+0x158>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6504:	6804      	ldr	r4, [r0, #0]
    6506:	001a      	movs	r2, r3
    6508:	3208      	adds	r2, #8
    650a:	0152      	lsls	r2, r2, #5
    650c:	5d16      	ldrb	r6, [r2, r4]
    650e:	2270      	movs	r2, #112	; 0x70
    6510:	4216      	tst	r6, r2
    6512:	d001      	beq.n	6518 <usb_device_endpoint_set_config+0xf0>
					return STATUS_ERR_DENIED;
    6514:	201c      	movs	r0, #28
    6516:	e033      	b.n	6580 <usb_device_endpoint_set_config+0x158>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    6518:	001a      	movs	r2, r3
    651a:	3208      	adds	r2, #8
    651c:	0152      	lsls	r2, r2, #5
    651e:	5d16      	ldrb	r6, [r2, r4]
    6520:	2720      	movs	r7, #32
    6522:	433e      	orrs	r6, r7
    6524:	b2f6      	uxtb	r6, r6
    6526:	5516      	strb	r6, [r2, r4]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6528:	6800      	ldr	r0, [r0, #0]
    652a:	1882      	adds	r2, r0, r2
    652c:	2080      	movs	r0, #128	; 0x80
    652e:	7110      	strb	r0, [r2, #4]
    6530:	e00b      	b.n	654a <usb_device_endpoint_set_config+0x122>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    6532:	001a      	movs	r2, r3
    6534:	3208      	adds	r2, #8
    6536:	0152      	lsls	r2, r2, #5
    6538:	5d16      	ldrb	r6, [r2, r4]
    653a:	2702      	movs	r7, #2
    653c:	433e      	orrs	r6, r7
    653e:	b2f6      	uxtb	r6, r6
    6540:	5516      	strb	r6, [r2, r4]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6542:	6800      	ldr	r0, [r0, #0]
    6544:	1882      	adds	r2, r0, r2
    6546:	2040      	movs	r0, #64	; 0x40
    6548:	7150      	strb	r0, [r2, #5]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    654a:	784e      	ldrb	r6, [r1, #1]
    654c:	0058      	lsls	r0, r3, #1
    654e:	1940      	adds	r0, r0, r5
    6550:	0100      	lsls	r0, r0, #4
    6552:	4c3f      	ldr	r4, [pc, #252]	; (6650 <usb_device_endpoint_set_config+0x228>)
    6554:	1820      	adds	r0, r4, r0
    6556:	6844      	ldr	r4, [r0, #4]
    6558:	2207      	movs	r2, #7
    655a:	4032      	ands	r2, r6
    655c:	0712      	lsls	r2, r2, #28
    655e:	4e3d      	ldr	r6, [pc, #244]	; (6654 <usb_device_endpoint_set_config+0x22c>)
    6560:	4034      	ands	r4, r6
    6562:	4322      	orrs	r2, r4
    6564:	6042      	str	r2, [r0, #4]
	if (true == ep_config->auto_zlp) {
    6566:	788a      	ldrb	r2, [r1, #2]
    6568:	2a00      	cmp	r2, #0
    656a:	d168      	bne.n	663e <usb_device_endpoint_set_config+0x216>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    656c:	005b      	lsls	r3, r3, #1
    656e:	195b      	adds	r3, r3, r5
    6570:	011b      	lsls	r3, r3, #4
    6572:	4a37      	ldr	r2, [pc, #220]	; (6650 <usb_device_endpoint_set_config+0x228>)
    6574:	18d3      	adds	r3, r2, r3
    6576:	685a      	ldr	r2, [r3, #4]
    6578:	0052      	lsls	r2, r2, #1
    657a:	0852      	lsrs	r2, r2, #1
    657c:	605a      	str	r2, [r3, #4]
	return STATUS_OK;
    657e:	2000      	movs	r0, #0
}
    6580:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (ep_bank) {
    6582:	2a00      	cmp	r2, #0
    6584:	db08      	blt.n	6598 <usb_device_endpoint_set_config+0x170>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6586:	6804      	ldr	r4, [r0, #0]
    6588:	001a      	movs	r2, r3
    658a:	3208      	adds	r2, #8
    658c:	0152      	lsls	r2, r2, #5
    658e:	5d12      	ldrb	r2, [r2, r4]
    6590:	0752      	lsls	r2, r2, #29
    6592:	d018      	beq.n	65c6 <usb_device_endpoint_set_config+0x19e>
					return STATUS_ERR_DENIED;
    6594:	201c      	movs	r0, #28
    6596:	e7f3      	b.n	6580 <usb_device_endpoint_set_config+0x158>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6598:	6804      	ldr	r4, [r0, #0]
    659a:	001a      	movs	r2, r3
    659c:	3208      	adds	r2, #8
    659e:	0152      	lsls	r2, r2, #5
    65a0:	5d16      	ldrb	r6, [r2, r4]
    65a2:	2270      	movs	r2, #112	; 0x70
    65a4:	4216      	tst	r6, r2
    65a6:	d001      	beq.n	65ac <usb_device_endpoint_set_config+0x184>
					return STATUS_ERR_DENIED;
    65a8:	201c      	movs	r0, #28
    65aa:	e7e9      	b.n	6580 <usb_device_endpoint_set_config+0x158>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    65ac:	001a      	movs	r2, r3
    65ae:	3208      	adds	r2, #8
    65b0:	0152      	lsls	r2, r2, #5
    65b2:	5d16      	ldrb	r6, [r2, r4]
    65b4:	2730      	movs	r7, #48	; 0x30
    65b6:	433e      	orrs	r6, r7
    65b8:	b2f6      	uxtb	r6, r6
    65ba:	5516      	strb	r6, [r2, r4]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    65bc:	6800      	ldr	r0, [r0, #0]
    65be:	1882      	adds	r2, r0, r2
    65c0:	2080      	movs	r0, #128	; 0x80
    65c2:	7110      	strb	r0, [r2, #4]
    65c4:	e7c1      	b.n	654a <usb_device_endpoint_set_config+0x122>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    65c6:	001a      	movs	r2, r3
    65c8:	3208      	adds	r2, #8
    65ca:	0152      	lsls	r2, r2, #5
    65cc:	5d16      	ldrb	r6, [r2, r4]
    65ce:	2703      	movs	r7, #3
    65d0:	433e      	orrs	r6, r7
    65d2:	b2f6      	uxtb	r6, r6
    65d4:	5516      	strb	r6, [r2, r4]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    65d6:	6800      	ldr	r0, [r0, #0]
    65d8:	1882      	adds	r2, r0, r2
    65da:	2040      	movs	r0, #64	; 0x40
    65dc:	7150      	strb	r0, [r2, #5]
    65de:	e7b4      	b.n	654a <usb_device_endpoint_set_config+0x122>
			if (ep_bank) {
    65e0:	2a00      	cmp	r2, #0
    65e2:	db08      	blt.n	65f6 <usb_device_endpoint_set_config+0x1ce>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    65e4:	6804      	ldr	r4, [r0, #0]
    65e6:	001a      	movs	r2, r3
    65e8:	3208      	adds	r2, #8
    65ea:	0152      	lsls	r2, r2, #5
    65ec:	5d12      	ldrb	r2, [r2, r4]
    65ee:	0752      	lsls	r2, r2, #29
    65f0:	d018      	beq.n	6624 <usb_device_endpoint_set_config+0x1fc>
					return STATUS_ERR_DENIED;
    65f2:	201c      	movs	r0, #28
    65f4:	e7c4      	b.n	6580 <usb_device_endpoint_set_config+0x158>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    65f6:	6804      	ldr	r4, [r0, #0]
    65f8:	001a      	movs	r2, r3
    65fa:	3208      	adds	r2, #8
    65fc:	0152      	lsls	r2, r2, #5
    65fe:	5d16      	ldrb	r6, [r2, r4]
    6600:	2270      	movs	r2, #112	; 0x70
    6602:	4216      	tst	r6, r2
    6604:	d001      	beq.n	660a <usb_device_endpoint_set_config+0x1e2>
					return STATUS_ERR_DENIED;
    6606:	201c      	movs	r0, #28
    6608:	e7ba      	b.n	6580 <usb_device_endpoint_set_config+0x158>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    660a:	001a      	movs	r2, r3
    660c:	3208      	adds	r2, #8
    660e:	0152      	lsls	r2, r2, #5
    6610:	5d16      	ldrb	r6, [r2, r4]
    6612:	2740      	movs	r7, #64	; 0x40
    6614:	433e      	orrs	r6, r7
    6616:	b2f6      	uxtb	r6, r6
    6618:	5516      	strb	r6, [r2, r4]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    661a:	6800      	ldr	r0, [r0, #0]
    661c:	1882      	adds	r2, r0, r2
    661e:	2080      	movs	r0, #128	; 0x80
    6620:	7110      	strb	r0, [r2, #4]
    6622:	e792      	b.n	654a <usb_device_endpoint_set_config+0x122>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    6624:	001a      	movs	r2, r3
    6626:	3208      	adds	r2, #8
    6628:	0152      	lsls	r2, r2, #5
    662a:	5d16      	ldrb	r6, [r2, r4]
    662c:	2704      	movs	r7, #4
    662e:	433e      	orrs	r6, r7
    6630:	b2f6      	uxtb	r6, r6
    6632:	5516      	strb	r6, [r2, r4]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6634:	6800      	ldr	r0, [r0, #0]
    6636:	1882      	adds	r2, r0, r2
    6638:	2040      	movs	r0, #64	; 0x40
    663a:	7150      	strb	r0, [r2, #5]
    663c:	e785      	b.n	654a <usb_device_endpoint_set_config+0x122>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    663e:	6841      	ldr	r1, [r0, #4]
    6640:	2280      	movs	r2, #128	; 0x80
    6642:	0612      	lsls	r2, r2, #24
    6644:	430a      	orrs	r2, r1
    6646:	6042      	str	r2, [r0, #4]
	return STATUS_OK;
    6648:	2000      	movs	r0, #0
    664a:	e799      	b.n	6580 <usb_device_endpoint_set_config+0x158>
    664c:	0000ca60 	.word	0x0000ca60
    6650:	200028b4 	.word	0x200028b4
    6654:	8fffffff 	.word	0x8fffffff

00006658 <usb_device_endpoint_abort_job>:
	ep_num = ep & USB_EP_ADDR_MASK;
    6658:	230f      	movs	r3, #15
    665a:	400b      	ands	r3, r1
	if (ep & USB_EP_DIR_IN) {
    665c:	b249      	sxtb	r1, r1
    665e:	2900      	cmp	r1, #0
    6660:	db0a      	blt.n	6678 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6662:	3308      	adds	r3, #8
    6664:	015b      	lsls	r3, r3, #5
    6666:	6802      	ldr	r2, [r0, #0]
    6668:	18d2      	adds	r2, r2, r3
    666a:	2140      	movs	r1, #64	; 0x40
    666c:	7151      	strb	r1, [r2, #5]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    666e:	6802      	ldr	r2, [r0, #0]
    6670:	18d3      	adds	r3, r2, r3
    6672:	2201      	movs	r2, #1
    6674:	71da      	strb	r2, [r3, #7]
}
    6676:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6678:	3308      	adds	r3, #8
    667a:	015b      	lsls	r3, r3, #5
    667c:	6802      	ldr	r2, [r0, #0]
    667e:	18d2      	adds	r2, r2, r3
    6680:	2180      	movs	r1, #128	; 0x80
    6682:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    6684:	6802      	ldr	r2, [r0, #0]
    6686:	18d3      	adds	r3, r2, r3
    6688:	2202      	movs	r2, #2
    668a:	71da      	strb	r2, [r3, #7]
    668c:	e7f3      	b.n	6676 <usb_device_endpoint_abort_job+0x1e>

0000668e <usb_device_endpoint_is_halted>:
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    668e:	230f      	movs	r3, #15
    6690:	400b      	ands	r3, r1
	if (ep & USB_EP_DIR_IN) {
    6692:	b249      	sxtb	r1, r1
    6694:	2900      	cmp	r1, #0
    6696:	db08      	blt.n	66aa <usb_device_endpoint_is_halted+0x1c>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    6698:	6802      	ldr	r2, [r0, #0]
    669a:	3308      	adds	r3, #8
    669c:	015b      	lsls	r3, r3, #5
    669e:	18d3      	adds	r3, r2, r3
    66a0:	799b      	ldrb	r3, [r3, #6]
    66a2:	091b      	lsrs	r3, r3, #4
    66a4:	2001      	movs	r0, #1
    66a6:	4018      	ands	r0, r3
}
    66a8:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    66aa:	6802      	ldr	r2, [r0, #0]
    66ac:	3308      	adds	r3, #8
    66ae:	015b      	lsls	r3, r3, #5
    66b0:	18d3      	adds	r3, r2, r3
    66b2:	799b      	ldrb	r3, [r3, #6]
    66b4:	095b      	lsrs	r3, r3, #5
    66b6:	2001      	movs	r0, #1
    66b8:	4018      	ands	r0, r3
    66ba:	e7f5      	b.n	66a8 <usb_device_endpoint_is_halted+0x1a>

000066bc <usb_device_endpoint_set_halt>:
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    66bc:	230f      	movs	r3, #15
    66be:	400b      	ands	r3, r1
	if (ep & USB_EP_DIR_IN) {
    66c0:	b249      	sxtb	r1, r1
    66c2:	2900      	cmp	r1, #0
    66c4:	db06      	blt.n	66d4 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    66c6:	6802      	ldr	r2, [r0, #0]
    66c8:	3308      	adds	r3, #8
    66ca:	015b      	lsls	r3, r3, #5
    66cc:	18d3      	adds	r3, r2, r3
    66ce:	2210      	movs	r2, #16
    66d0:	715a      	strb	r2, [r3, #5]
}
    66d2:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    66d4:	6802      	ldr	r2, [r0, #0]
    66d6:	3308      	adds	r3, #8
    66d8:	015b      	lsls	r3, r3, #5
    66da:	18d3      	adds	r3, r2, r3
    66dc:	2220      	movs	r2, #32
    66de:	715a      	strb	r2, [r3, #5]
    66e0:	e7f7      	b.n	66d2 <usb_device_endpoint_set_halt+0x16>

000066e2 <usb_device_endpoint_clear_halt>:
{
    66e2:	b510      	push	{r4, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    66e4:	230f      	movs	r3, #15
    66e6:	400b      	ands	r3, r1
	if (ep & USB_EP_DIR_IN) {
    66e8:	b249      	sxtb	r1, r1
    66ea:	2900      	cmp	r1, #0
    66ec:	db1c      	blt.n	6728 <usb_device_endpoint_clear_halt+0x46>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    66ee:	6801      	ldr	r1, [r0, #0]
    66f0:	001a      	movs	r2, r3
    66f2:	3208      	adds	r2, #8
    66f4:	0152      	lsls	r2, r2, #5
    66f6:	188a      	adds	r2, r1, r2
    66f8:	7992      	ldrb	r2, [r2, #6]
    66fa:	06d2      	lsls	r2, r2, #27
    66fc:	d513      	bpl.n	6726 <usb_device_endpoint_clear_halt+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    66fe:	001a      	movs	r2, r3
    6700:	3208      	adds	r2, #8
    6702:	0152      	lsls	r2, r2, #5
    6704:	1889      	adds	r1, r1, r2
    6706:	2410      	movs	r4, #16
    6708:	710c      	strb	r4, [r1, #4]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    670a:	6801      	ldr	r1, [r0, #0]
    670c:	188a      	adds	r2, r1, r2
    670e:	79d2      	ldrb	r2, [r2, #7]
    6710:	0692      	lsls	r2, r2, #26
    6712:	d508      	bpl.n	6726 <usb_device_endpoint_clear_halt+0x44>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    6714:	3308      	adds	r3, #8
    6716:	015b      	lsls	r3, r3, #5
    6718:	18c9      	adds	r1, r1, r3
    671a:	2220      	movs	r2, #32
    671c:	71ca      	strb	r2, [r1, #7]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    671e:	6802      	ldr	r2, [r0, #0]
    6720:	18d3      	adds	r3, r2, r3
    6722:	2201      	movs	r2, #1
    6724:	711a      	strb	r2, [r3, #4]
}
    6726:	bd10      	pop	{r4, pc}
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    6728:	6801      	ldr	r1, [r0, #0]
    672a:	001a      	movs	r2, r3
    672c:	3208      	adds	r2, #8
    672e:	0152      	lsls	r2, r2, #5
    6730:	188a      	adds	r2, r1, r2
    6732:	7992      	ldrb	r2, [r2, #6]
    6734:	0692      	lsls	r2, r2, #26
    6736:	d5f6      	bpl.n	6726 <usb_device_endpoint_clear_halt+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    6738:	001a      	movs	r2, r3
    673a:	3208      	adds	r2, #8
    673c:	0152      	lsls	r2, r2, #5
    673e:	1889      	adds	r1, r1, r2
    6740:	2420      	movs	r4, #32
    6742:	710c      	strb	r4, [r1, #4]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    6744:	6801      	ldr	r1, [r0, #0]
    6746:	188a      	adds	r2, r1, r2
    6748:	79d2      	ldrb	r2, [r2, #7]
    674a:	0652      	lsls	r2, r2, #25
    674c:	d5eb      	bpl.n	6726 <usb_device_endpoint_clear_halt+0x44>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    674e:	3308      	adds	r3, #8
    6750:	015b      	lsls	r3, r3, #5
    6752:	18c9      	adds	r1, r1, r3
    6754:	2240      	movs	r2, #64	; 0x40
    6756:	71ca      	strb	r2, [r1, #7]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    6758:	6802      	ldr	r2, [r0, #0]
    675a:	18d3      	adds	r3, r2, r3
    675c:	2202      	movs	r2, #2
    675e:	711a      	strb	r2, [r3, #4]
    6760:	e7e1      	b.n	6726 <usb_device_endpoint_clear_halt+0x44>
	...

00006764 <usb_device_endpoint_write_buffer_job>:
{
    6764:	b530      	push	{r4, r5, lr}
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    6766:	000c      	movs	r4, r1
    6768:	3408      	adds	r4, #8
    676a:	0164      	lsls	r4, r4, #5
    676c:	6805      	ldr	r5, [r0, #0]
    676e:	5d64      	ldrb	r4, [r4, r5]
    6770:	0664      	lsls	r4, r4, #25
    6772:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    6774:	d101      	bne.n	677a <usb_device_endpoint_write_buffer_job+0x16>
		return STATUS_ERR_DENIED;
    6776:	201c      	movs	r0, #28
}
    6778:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    677a:	014c      	lsls	r4, r1, #5
    677c:	4d0b      	ldr	r5, [pc, #44]	; (67ac <usb_device_endpoint_write_buffer_job+0x48>)
    677e:	192d      	adds	r5, r5, r4
    6780:	002c      	movs	r4, r5
    6782:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    6784:	696d      	ldr	r5, [r5, #20]
    6786:	4a0a      	ldr	r2, [pc, #40]	; (67b0 <usb_device_endpoint_write_buffer_job+0x4c>)
    6788:	402a      	ands	r2, r5
    678a:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    678c:	6962      	ldr	r2, [r4, #20]
    678e:	049b      	lsls	r3, r3, #18
    6790:	0c9b      	lsrs	r3, r3, #18
    6792:	0b92      	lsrs	r2, r2, #14
    6794:	0392      	lsls	r2, r2, #14
    6796:	4313      	orrs	r3, r2
    6798:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    679a:	6803      	ldr	r3, [r0, #0]
    679c:	3108      	adds	r1, #8
    679e:	0149      	lsls	r1, r1, #5
    67a0:	1859      	adds	r1, r3, r1
    67a2:	2380      	movs	r3, #128	; 0x80
    67a4:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    67a6:	2000      	movs	r0, #0
    67a8:	e7e6      	b.n	6778 <usb_device_endpoint_write_buffer_job+0x14>
    67aa:	46c0      	nop			; (mov r8, r8)
    67ac:	200028b4 	.word	0x200028b4
    67b0:	f0003fff 	.word	0xf0003fff

000067b4 <usb_device_endpoint_read_buffer_job>:
{
    67b4:	b530      	push	{r4, r5, lr}
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    67b6:	000c      	movs	r4, r1
    67b8:	3408      	adds	r4, #8
    67ba:	0164      	lsls	r4, r4, #5
    67bc:	6805      	ldr	r5, [r0, #0]
    67be:	5d64      	ldrb	r4, [r4, r5]
    67c0:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    67c2:	d101      	bne.n	67c8 <usb_device_endpoint_read_buffer_job+0x14>
		return STATUS_ERR_DENIED;
    67c4:	201c      	movs	r0, #28
}
    67c6:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    67c8:	4c0b      	ldr	r4, [pc, #44]	; (67f8 <usb_device_endpoint_read_buffer_job+0x44>)
    67ca:	014d      	lsls	r5, r1, #5
    67cc:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    67ce:	1962      	adds	r2, r4, r5
    67d0:	6854      	ldr	r4, [r2, #4]
    67d2:	049b      	lsls	r3, r3, #18
    67d4:	091b      	lsrs	r3, r3, #4
    67d6:	4d09      	ldr	r5, [pc, #36]	; (67fc <usb_device_endpoint_read_buffer_job+0x48>)
    67d8:	402c      	ands	r4, r5
    67da:	4323      	orrs	r3, r4
    67dc:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    67de:	6853      	ldr	r3, [r2, #4]
    67e0:	0b9b      	lsrs	r3, r3, #14
    67e2:	039c      	lsls	r4, r3, #14
    67e4:	6054      	str	r4, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    67e6:	6803      	ldr	r3, [r0, #0]
    67e8:	3108      	adds	r1, #8
    67ea:	0149      	lsls	r1, r1, #5
    67ec:	1859      	adds	r1, r3, r1
    67ee:	2340      	movs	r3, #64	; 0x40
    67f0:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    67f2:	2000      	movs	r0, #0
    67f4:	e7e7      	b.n	67c6 <usb_device_endpoint_read_buffer_job+0x12>
    67f6:	46c0      	nop			; (mov r8, r8)
    67f8:	200028b4 	.word	0x200028b4
    67fc:	f0003fff 	.word	0xf0003fff

00006800 <usb_device_endpoint_setup_buffer_job>:
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    6800:	4b09      	ldr	r3, [pc, #36]	; (6828 <usb_device_endpoint_setup_buffer_job+0x28>)
    6802:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    6804:	6859      	ldr	r1, [r3, #4]
    6806:	4a09      	ldr	r2, [pc, #36]	; (682c <usb_device_endpoint_setup_buffer_job+0x2c>)
    6808:	4011      	ands	r1, r2
    680a:	2280      	movs	r2, #128	; 0x80
    680c:	0292      	lsls	r2, r2, #10
    680e:	430a      	orrs	r2, r1
    6810:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6812:	685a      	ldr	r2, [r3, #4]
    6814:	0b92      	lsrs	r2, r2, #14
    6816:	0391      	lsls	r1, r2, #14
    6818:	6059      	str	r1, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    681a:	6802      	ldr	r2, [r0, #0]
    681c:	2140      	movs	r1, #64	; 0x40
    681e:	2382      	movs	r3, #130	; 0x82
    6820:	005b      	lsls	r3, r3, #1
    6822:	54d1      	strb	r1, [r2, r3]
}
    6824:	2000      	movs	r0, #0
    6826:	4770      	bx	lr
    6828:	200028b4 	.word	0x200028b4
    682c:	f0003fff 	.word	0xf0003fff

00006830 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    6830:	6802      	ldr	r2, [r0, #0]
    6832:	7813      	ldrb	r3, [r2, #0]
    6834:	2102      	movs	r1, #2
    6836:	430b      	orrs	r3, r1
    6838:	b2db      	uxtb	r3, r3
    683a:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    683c:	6803      	ldr	r3, [r0, #0]
    683e:	789b      	ldrb	r3, [r3, #2]
    6840:	2b02      	cmp	r3, #2
    6842:	d0fb      	beq.n	683c <usb_enable+0xc>
}
    6844:	4770      	bx	lr
	...

00006848 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    6848:	b510      	push	{r4, lr}
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    684a:	4b06      	ldr	r3, [pc, #24]	; (6864 <USB_Handler+0x1c>)
    684c:	681b      	ldr	r3, [r3, #0]
    684e:	681b      	ldr	r3, [r3, #0]
    6850:	781b      	ldrb	r3, [r3, #0]
    6852:	09db      	lsrs	r3, r3, #7
    6854:	d102      	bne.n	685c <USB_Handler+0x14>
		/*host mode ISR */
		_usb_host_interrupt_handler();
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
    6856:	4b04      	ldr	r3, [pc, #16]	; (6868 <USB_Handler+0x20>)
    6858:	4798      	blx	r3
	}
}
    685a:	bd10      	pop	{r4, pc}
		_usb_host_interrupt_handler();
    685c:	4b03      	ldr	r3, [pc, #12]	; (686c <USB_Handler+0x24>)
    685e:	4798      	blx	r3
    6860:	e7fb      	b.n	685a <USB_Handler+0x12>
    6862:	46c0      	nop			; (mov r8, r8)
    6864:	20000f08 	.word	0x20000f08
    6868:	00005c15 	.word	0x00005c15
    686c:	00005eb9 	.word	0x00005eb9

00006870 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    6870:	2200      	movs	r2, #0
    6872:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    6874:	2301      	movs	r3, #1
    6876:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    6878:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    687a:	70c3      	strb	r3, [r0, #3]
}
    687c:	4770      	bx	lr
	...

00006880 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    6880:	b5f0      	push	{r4, r5, r6, r7, lr}
    6882:	46ce      	mov	lr, r9
    6884:	4647      	mov	r7, r8
    6886:	b580      	push	{r7, lr}
    6888:	b083      	sub	sp, #12
    688a:	0004      	movs	r4, r0
    688c:	000d      	movs	r5, r1
    688e:	0017      	movs	r7, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    6890:	2300      	movs	r3, #0
    6892:	4a79      	ldr	r2, [pc, #484]	; (6a78 <usb_init+0x1f8>)
    6894:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    6896:	4a79      	ldr	r2, [pc, #484]	; (6a7c <usb_init+0x1fc>)
    6898:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    689a:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    689c:	4978      	ldr	r1, [pc, #480]	; (6a80 <usb_init+0x200>)
    689e:	69ca      	ldr	r2, [r1, #28]
    68a0:	2020      	movs	r0, #32
    68a2:	4302      	orrs	r2, r0
    68a4:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    68a6:	ae01      	add	r6, sp, #4
    68a8:	7073      	strb	r3, [r6, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    68aa:	2201      	movs	r2, #1
    68ac:	70b2      	strb	r2, [r6, #2]
	config->powersave    = false;
    68ae:	70f3      	strb	r3, [r6, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    68b0:	3306      	adds	r3, #6
    68b2:	4699      	mov	r9, r3
    68b4:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    68b6:	0031      	movs	r1, r6
    68b8:	3808      	subs	r0, #8
    68ba:	4b72      	ldr	r3, [pc, #456]	; (6a84 <usb_init+0x204>)
    68bc:	4698      	mov	r8, r3
    68be:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    68c0:	464b      	mov	r3, r9
    68c2:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    68c4:	0031      	movs	r1, r6
    68c6:	2019      	movs	r0, #25
    68c8:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    68ca:	78bb      	ldrb	r3, [r7, #2]
    68cc:	466a      	mov	r2, sp
    68ce:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    68d0:	4669      	mov	r1, sp
    68d2:	2006      	movs	r0, #6
    68d4:	4b6c      	ldr	r3, [pc, #432]	; (6a88 <usb_init+0x208>)
    68d6:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    68d8:	2006      	movs	r0, #6
    68da:	4b6c      	ldr	r3, [pc, #432]	; (6a8c <usb_init+0x20c>)
    68dc:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    68de:	782b      	ldrb	r3, [r5, #0]
    68e0:	2201      	movs	r2, #1
    68e2:	4313      	orrs	r3, r2
    68e4:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    68e6:	78ab      	ldrb	r3, [r5, #2]
    68e8:	07db      	lsls	r3, r3, #31
    68ea:	d4fc      	bmi.n	68e6 <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    68ec:	4a68      	ldr	r2, [pc, #416]	; (6a90 <usb_init+0x210>)
    68ee:	78d3      	ldrb	r3, [r2, #3]
    68f0:	2103      	movs	r1, #3
    68f2:	438b      	bics	r3, r1
    68f4:	2102      	movs	r1, #2
    68f6:	430b      	orrs	r3, r1
    68f8:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    68fa:	78d3      	ldrb	r3, [r2, #3]
    68fc:	210c      	movs	r1, #12
    68fe:	438b      	bics	r3, r1
    6900:	2108      	movs	r1, #8
    6902:	430b      	orrs	r3, r1
    6904:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    6906:	4b63      	ldr	r3, [pc, #396]	; (6a94 <usb_init+0x214>)
    6908:	681a      	ldr	r2, [r3, #0]
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    690a:	0b52      	lsrs	r2, r2, #13
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    690c:	231f      	movs	r3, #31
    690e:	4013      	ands	r3, r2
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    6910:	2b1f      	cmp	r3, #31
    6912:	d044      	beq.n	699e <usb_init+0x11e>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    6914:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    6916:	019b      	lsls	r3, r3, #6
    6918:	495f      	ldr	r1, [pc, #380]	; (6a98 <usb_init+0x218>)
    691a:	400a      	ands	r2, r1
    691c:	4313      	orrs	r3, r2
    691e:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    6920:	4b5c      	ldr	r3, [pc, #368]	; (6a94 <usb_init+0x214>)
    6922:	681a      	ldr	r2, [r3, #0]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    6924:	0c92      	lsrs	r2, r2, #18
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    6926:	231f      	movs	r3, #31
    6928:	401a      	ands	r2, r3
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    692a:	2a1f      	cmp	r2, #31
    692c:	d039      	beq.n	69a2 <usb_init+0x122>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    692e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    6930:	211f      	movs	r1, #31
    6932:	438b      	bics	r3, r1
    6934:	4313      	orrs	r3, r2
    6936:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    6938:	4b56      	ldr	r3, [pc, #344]	; (6a94 <usb_init+0x214>)
    693a:	681a      	ldr	r2, [r3, #0]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    693c:	0dd2      	lsrs	r2, r2, #23
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    693e:	2307      	movs	r3, #7
    6940:	4013      	ands	r3, r2
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    6942:	2b07      	cmp	r3, #7
    6944:	d02f      	beq.n	69a6 <usb_init+0x126>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    6946:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    6948:	031b      	lsls	r3, r3, #12
    694a:	4954      	ldr	r1, [pc, #336]	; (6a9c <usb_init+0x21c>)
    694c:	400a      	ands	r2, r1
    694e:	4313      	orrs	r3, r2
    6950:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    6952:	783a      	ldrb	r2, [r7, #0]
    6954:	7829      	ldrb	r1, [r5, #0]
    6956:	01d2      	lsls	r2, r2, #7
    6958:	237f      	movs	r3, #127	; 0x7f
    695a:	400b      	ands	r3, r1
    695c:	4313      	orrs	r3, r2
    695e:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    6960:	7879      	ldrb	r1, [r7, #1]
    6962:	782b      	ldrb	r3, [r5, #0]
    6964:	2201      	movs	r2, #1
    6966:	400a      	ands	r2, r1
    6968:	0092      	lsls	r2, r2, #2
    696a:	2104      	movs	r1, #4
    696c:	438b      	bics	r3, r1
    696e:	4313      	orrs	r3, r2
    6970:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    6972:	4b4b      	ldr	r3, [pc, #300]	; (6aa0 <usb_init+0x220>)
    6974:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    6976:	78fb      	ldrb	r3, [r7, #3]
    6978:	2b01      	cmp	r3, #1
    697a:	d016      	beq.n	69aa <usb_init+0x12a>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    697c:	2b00      	cmp	r3, #0
    697e:	d106      	bne.n	698e <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    6980:	6822      	ldr	r2, [r4, #0]
    6982:	8913      	ldrh	r3, [r2, #8]
    6984:	210c      	movs	r1, #12
    6986:	438b      	bics	r3, r1
    6988:	2104      	movs	r1, #4
    698a:	430b      	orrs	r3, r1
    698c:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    698e:	2280      	movs	r2, #128	; 0x80
    6990:	0052      	lsls	r2, r2, #1
    6992:	2100      	movs	r1, #0
    6994:	4842      	ldr	r0, [pc, #264]	; (6aa0 <usb_init+0x220>)
    6996:	4b43      	ldr	r3, [pc, #268]	; (6aa4 <usb_init+0x224>)
    6998:	4798      	blx	r3
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    699a:	2300      	movs	r3, #0
    699c:	e010      	b.n	69c0 <usb_init+0x140>
		pad_transn = 5;
    699e:	3b1a      	subs	r3, #26
    69a0:	e7b8      	b.n	6914 <usb_init+0x94>
		pad_transp = 29;
    69a2:	3a02      	subs	r2, #2
    69a4:	e7c3      	b.n	692e <usb_init+0xae>
		pad_trim = 3;
    69a6:	3b04      	subs	r3, #4
    69a8:	e7cd      	b.n	6946 <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    69aa:	6822      	ldr	r2, [r4, #0]
    69ac:	8913      	ldrh	r3, [r2, #8]
    69ae:	3108      	adds	r1, #8
    69b0:	438b      	bics	r3, r1
    69b2:	8113      	strh	r3, [r2, #8]
    69b4:	e7eb      	b.n	698e <usb_init+0x10e>
		module_inst->host_callback[i] = NULL;
    69b6:	009a      	lsls	r2, r3, #2
    69b8:	18a2      	adds	r2, r4, r2
    69ba:	2100      	movs	r1, #0
    69bc:	6051      	str	r1, [r2, #4]
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    69be:	3301      	adds	r3, #1
    69c0:	2b07      	cmp	r3, #7
    69c2:	d9f8      	bls.n	69b6 <usb_init+0x136>
    69c4:	2000      	movs	r0, #0
    69c6:	e00a      	b.n	69de <usb_init+0x15e>
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    69c8:	0083      	lsls	r3, r0, #2
    69ca:	189b      	adds	r3, r3, r2
    69cc:	3308      	adds	r3, #8
    69ce:	009b      	lsls	r3, r3, #2
    69d0:	18e3      	adds	r3, r4, r3
    69d2:	2100      	movs	r1, #0
    69d4:	6059      	str	r1, [r3, #4]
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    69d6:	3201      	adds	r2, #1
    69d8:	2a03      	cmp	r2, #3
    69da:	d9f5      	bls.n	69c8 <usb_init+0x148>
	for (i = 0; i < USB_PIPE_NUM; i++) {
    69dc:	3001      	adds	r0, #1
    69de:	2807      	cmp	r0, #7
    69e0:	d801      	bhi.n	69e6 <usb_init+0x166>
    69e2:	2200      	movs	r2, #0
    69e4:	e7f8      	b.n	69d8 <usb_init+0x158>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    69e6:	2300      	movs	r3, #0
    69e8:	22a4      	movs	r2, #164	; 0xa4
    69ea:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    69ec:	3201      	adds	r2, #1
    69ee:	54a3      	strb	r3, [r4, r2]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    69f0:	2200      	movs	r2, #0
    69f2:	e007      	b.n	6a04 <usb_init+0x184>
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    69f4:	18a3      	adds	r3, r4, r2
    69f6:	0018      	movs	r0, r3
    69f8:	30a6      	adds	r0, #166	; 0xa6
    69fa:	2100      	movs	r1, #0
    69fc:	7001      	strb	r1, [r0, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    69fe:	33ae      	adds	r3, #174	; 0xae
    6a00:	7019      	strb	r1, [r3, #0]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    6a02:	3201      	adds	r2, #1
    6a04:	2a07      	cmp	r2, #7
    6a06:	d9f5      	bls.n	69f4 <usb_init+0x174>
    6a08:	2300      	movs	r3, #0
    6a0a:	e005      	b.n	6a18 <usb_init+0x198>
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    6a0c:	001a      	movs	r2, r3
    6a0e:	322e      	adds	r2, #46	; 0x2e
    6a10:	0092      	lsls	r2, r2, #2
    6a12:	2100      	movs	r1, #0
    6a14:	5111      	str	r1, [r2, r4]
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    6a16:	3301      	adds	r3, #1
    6a18:	2b06      	cmp	r3, #6
    6a1a:	d9f7      	bls.n	6a0c <usb_init+0x18c>
    6a1c:	2000      	movs	r0, #0
    6a1e:	e00a      	b.n	6a36 <usb_init+0x1b6>
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    6a20:	0083      	lsls	r3, r0, #2
    6a22:	189b      	adds	r3, r3, r2
    6a24:	3334      	adds	r3, #52	; 0x34
    6a26:	009b      	lsls	r3, r3, #2
    6a28:	18e3      	adds	r3, r4, r3
    6a2a:	2100      	movs	r1, #0
    6a2c:	6059      	str	r1, [r3, #4]
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    6a2e:	3201      	adds	r2, #1
    6a30:	2a03      	cmp	r2, #3
    6a32:	d9f5      	bls.n	6a20 <usb_init+0x1a0>
	for (i = 0; i < USB_EPT_NUM; i++) {
    6a34:	3001      	adds	r0, #1
    6a36:	2807      	cmp	r0, #7
    6a38:	d801      	bhi.n	6a3e <usb_init+0x1be>
    6a3a:	2200      	movs	r2, #0
    6a3c:	e7f8      	b.n	6a30 <usb_init+0x1b0>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    6a3e:	2300      	movs	r3, #0
    6a40:	22aa      	movs	r2, #170	; 0xaa
    6a42:	0052      	lsls	r2, r2, #1
    6a44:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    6a46:	3202      	adds	r2, #2
    6a48:	52a3      	strh	r3, [r4, r2]
	for (j = 0; j < USB_EPT_NUM; j++) {
    6a4a:	2200      	movs	r2, #0
    6a4c:	e009      	b.n	6a62 <usb_init+0x1e2>
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    6a4e:	18a3      	adds	r3, r4, r2
    6a50:	0018      	movs	r0, r3
    6a52:	3059      	adds	r0, #89	; 0x59
    6a54:	30ff      	adds	r0, #255	; 0xff
    6a56:	2100      	movs	r1, #0
    6a58:	7001      	strb	r1, [r0, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    6a5a:	3361      	adds	r3, #97	; 0x61
    6a5c:	33ff      	adds	r3, #255	; 0xff
    6a5e:	7019      	strb	r1, [r3, #0]
	for (j = 0; j < USB_EPT_NUM; j++) {
    6a60:	3201      	adds	r2, #1
    6a62:	2a07      	cmp	r2, #7
    6a64:	d9f3      	bls.n	6a4e <usb_init+0x1ce>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6a66:	2280      	movs	r2, #128	; 0x80
    6a68:	4b0f      	ldr	r3, [pc, #60]	; (6aa8 <usb_init+0x228>)
    6a6a:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    6a6c:	2000      	movs	r0, #0
    6a6e:	b003      	add	sp, #12
    6a70:	bc0c      	pop	{r2, r3}
    6a72:	4690      	mov	r8, r2
    6a74:	4699      	mov	r9, r3
    6a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a78:	20000f18 	.word	0x20000f18
    6a7c:	20000f08 	.word	0x20000f08
    6a80:	40000400 	.word	0x40000400
    6a84:	00009085 	.word	0x00009085
    6a88:	00008fa1 	.word	0x00008fa1
    6a8c:	00008f19 	.word	0x00008f19
    6a90:	41005000 	.word	0x41005000
    6a94:	00806024 	.word	0x00806024
    6a98:	fffff83f 	.word	0xfffff83f
    6a9c:	ffff8fff 	.word	0xffff8fff
    6aa0:	200028b4 	.word	0x200028b4
    6aa4:	0000c39f 	.word	0x0000c39f
    6aa8:	e000e100 	.word	0xe000e100

00006aac <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    6aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    6aae:	46de      	mov	lr, fp
    6ab0:	4657      	mov	r7, sl
    6ab2:	464e      	mov	r6, r9
    6ab4:	4645      	mov	r5, r8
    6ab6:	b5e0      	push	{r5, r6, r7, lr}
    6ab8:	b087      	sub	sp, #28
    6aba:	0004      	movs	r4, r0
    6abc:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6abe:	6806      	ldr	r6, [r0, #0]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6ac0:	0030      	movs	r0, r6
    6ac2:	4b6b      	ldr	r3, [pc, #428]	; (6c70 <_usart_set_config+0x1c4>)
    6ac4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6ac6:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    6ac8:	2200      	movs	r2, #0
    6aca:	230e      	movs	r3, #14
    6acc:	a902      	add	r1, sp, #8
    6ace:	468c      	mov	ip, r1
    6ad0:	4463      	add	r3, ip
    6ad2:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    6ad4:	8a2a      	ldrh	r2, [r5, #16]
    6ad6:	2380      	movs	r3, #128	; 0x80
    6ad8:	01db      	lsls	r3, r3, #7
    6ada:	429a      	cmp	r2, r3
    6adc:	d03b      	beq.n	6b56 <_usart_set_config+0xaa>
    6ade:	d90c      	bls.n	6afa <_usart_set_config+0x4e>
    6ae0:	23c0      	movs	r3, #192	; 0xc0
    6ae2:	01db      	lsls	r3, r3, #7
    6ae4:	429a      	cmp	r2, r3
    6ae6:	d031      	beq.n	6b4c <_usart_set_config+0xa0>
    6ae8:	2380      	movs	r3, #128	; 0x80
    6aea:	021b      	lsls	r3, r3, #8
    6aec:	429a      	cmp	r2, r3
    6aee:	d10d      	bne.n	6b0c <_usart_set_config+0x60>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    6af0:	2303      	movs	r3, #3
    6af2:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    6af4:	2300      	movs	r3, #0
    6af6:	4699      	mov	r9, r3
			break;
    6af8:	e00c      	b.n	6b14 <_usart_set_config+0x68>
	switch (config->sample_rate) {
    6afa:	2380      	movs	r3, #128	; 0x80
    6afc:	019b      	lsls	r3, r3, #6
    6afe:	429a      	cmp	r2, r3
    6b00:	d104      	bne.n	6b0c <_usart_set_config+0x60>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    6b02:	2310      	movs	r3, #16
    6b04:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    6b06:	3b0f      	subs	r3, #15
    6b08:	4699      	mov	r9, r3
			break;
    6b0a:	e003      	b.n	6b14 <_usart_set_config+0x68>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    6b0c:	2310      	movs	r3, #16
    6b0e:	469a      	mov	sl, r3
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    6b10:	2300      	movs	r3, #0
    6b12:	4699      	mov	r9, r3
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    6b14:	682b      	ldr	r3, [r5, #0]
    6b16:	68e9      	ldr	r1, [r5, #12]
    6b18:	430b      	orrs	r3, r1
		(uint32_t)config->mux_setting |
    6b1a:	6969      	ldr	r1, [r5, #20]
    6b1c:	430b      	orrs	r3, r1
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    6b1e:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    6b20:	7e2a      	ldrb	r2, [r5, #24]
    6b22:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    6b24:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    6b26:	2226      	movs	r2, #38	; 0x26
    6b28:	5caf      	ldrb	r7, [r5, r2]
    6b2a:	077f      	lsls	r7, r7, #29
	ctrla = (uint32_t)config->data_order |
    6b2c:	431f      	orrs	r7, r3
    6b2e:	9703      	str	r7, [sp, #12]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    6b30:	686b      	ldr	r3, [r5, #4]
    6b32:	4698      	mov	r8, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    6b34:	2b00      	cmp	r3, #0
    6b36:	d021      	beq.n	6b7c <_usart_set_config+0xd0>
    6b38:	2380      	movs	r3, #128	; 0x80
    6b3a:	055b      	lsls	r3, r3, #21
    6b3c:	4598      	cmp	r8, r3
    6b3e:	d13e      	bne.n	6bbe <_usart_set_config+0x112>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    6b40:	2327      	movs	r3, #39	; 0x27
    6b42:	5ceb      	ldrb	r3, [r5, r3]
    6b44:	2b00      	cmp	r3, #0
    6b46:	d00b      	beq.n	6b60 <_usart_set_config+0xb4>
	enum status_code status_code = STATUS_OK;
    6b48:	2000      	movs	r0, #0
    6b4a:	e039      	b.n	6bc0 <_usart_set_config+0x114>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    6b4c:	2308      	movs	r3, #8
    6b4e:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    6b50:	3b07      	subs	r3, #7
    6b52:	4699      	mov	r9, r3
			break;
    6b54:	e7de      	b.n	6b14 <_usart_set_config+0x68>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    6b56:	2308      	movs	r3, #8
    6b58:	469a      	mov	sl, r3
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    6b5a:	2300      	movs	r3, #0
    6b5c:	4699      	mov	r9, r3
    6b5e:	e7d9      	b.n	6b14 <_usart_set_config+0x68>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    6b60:	6a2b      	ldr	r3, [r5, #32]
    6b62:	4699      	mov	r9, r3
    6b64:	b2c0      	uxtb	r0, r0
    6b66:	4b43      	ldr	r3, [pc, #268]	; (6c74 <_usart_set_config+0x1c8>)
    6b68:	4798      	blx	r3
    6b6a:	0001      	movs	r1, r0
    6b6c:	220e      	movs	r2, #14
    6b6e:	ab02      	add	r3, sp, #8
    6b70:	469c      	mov	ip, r3
    6b72:	4462      	add	r2, ip
    6b74:	4648      	mov	r0, r9
    6b76:	4b40      	ldr	r3, [pc, #256]	; (6c78 <_usart_set_config+0x1cc>)
    6b78:	4798      	blx	r3
    6b7a:	e021      	b.n	6bc0 <_usart_set_config+0x114>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    6b7c:	2327      	movs	r3, #39	; 0x27
    6b7e:	5ceb      	ldrb	r3, [r5, r3]
    6b80:	2b00      	cmp	r3, #0
    6b82:	d00b      	beq.n	6b9c <_usart_set_config+0xf0>
				status_code =
    6b84:	4653      	mov	r3, sl
    6b86:	9300      	str	r3, [sp, #0]
    6b88:	464b      	mov	r3, r9
    6b8a:	220e      	movs	r2, #14
    6b8c:	a902      	add	r1, sp, #8
    6b8e:	468c      	mov	ip, r1
    6b90:	4462      	add	r2, ip
    6b92:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    6b94:	6a28      	ldr	r0, [r5, #32]
    6b96:	4f39      	ldr	r7, [pc, #228]	; (6c7c <_usart_set_config+0x1d0>)
    6b98:	47b8      	blx	r7
    6b9a:	e011      	b.n	6bc0 <_usart_set_config+0x114>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    6b9c:	6a2b      	ldr	r3, [r5, #32]
    6b9e:	469b      	mov	fp, r3
    6ba0:	b2c0      	uxtb	r0, r0
    6ba2:	4b34      	ldr	r3, [pc, #208]	; (6c74 <_usart_set_config+0x1c8>)
    6ba4:	4798      	blx	r3
    6ba6:	0001      	movs	r1, r0
				status_code =
    6ba8:	4653      	mov	r3, sl
    6baa:	9300      	str	r3, [sp, #0]
    6bac:	464b      	mov	r3, r9
    6bae:	220e      	movs	r2, #14
    6bb0:	a802      	add	r0, sp, #8
    6bb2:	4684      	mov	ip, r0
    6bb4:	4462      	add	r2, ip
    6bb6:	4658      	mov	r0, fp
    6bb8:	4f30      	ldr	r7, [pc, #192]	; (6c7c <_usart_set_config+0x1d0>)
    6bba:	47b8      	blx	r7
    6bbc:	e000      	b.n	6bc0 <_usart_set_config+0x114>
	enum status_code status_code = STATUS_OK;
    6bbe:	2000      	movs	r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    6bc0:	2800      	cmp	r0, #0
    6bc2:	d146      	bne.n	6c52 <_usart_set_config+0x1a6>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    6bc4:	7e6b      	ldrb	r3, [r5, #25]
    6bc6:	2b00      	cmp	r3, #0
    6bc8:	d001      	beq.n	6bce <_usart_set_config+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    6bca:	7eab      	ldrb	r3, [r5, #26]
    6bcc:	73b3      	strb	r3, [r6, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6bce:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    6bd0:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    6bd2:	2b00      	cmp	r3, #0
    6bd4:	d1fb      	bne.n	6bce <_usart_set_config+0x122>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    6bd6:	330e      	adds	r3, #14
    6bd8:	aa02      	add	r2, sp, #8
    6bda:	4694      	mov	ip, r2
    6bdc:	4463      	add	r3, ip
    6bde:	881b      	ldrh	r3, [r3, #0]
    6be0:	81b3      	strh	r3, [r6, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    6be2:	4643      	mov	r3, r8
    6be4:	9f03      	ldr	r7, [sp, #12]
    6be6:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    6be8:	2327      	movs	r3, #39	; 0x27
    6bea:	5ceb      	ldrb	r3, [r5, r3]
    6bec:	2b00      	cmp	r3, #0
    6bee:	d101      	bne.n	6bf4 <_usart_set_config+0x148>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    6bf0:	3304      	adds	r3, #4
    6bf2:	431f      	orrs	r7, r3
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    6bf4:	7e6a      	ldrb	r2, [r5, #25]
    6bf6:	0292      	lsls	r2, r2, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6bf8:	7f2b      	ldrb	r3, [r5, #28]
    6bfa:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    6bfc:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    6bfe:	7f6b      	ldrb	r3, [r5, #29]
    6c00:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6c02:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6c04:	2324      	movs	r3, #36	; 0x24
    6c06:	5ceb      	ldrb	r3, [r5, r3]
    6c08:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    6c0a:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    6c0c:	2325      	movs	r3, #37	; 0x25
    6c0e:	5ceb      	ldrb	r3, [r5, r3]
    6c10:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6c12:	431a      	orrs	r2, r3
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    6c14:	7aab      	ldrb	r3, [r5, #10]
    6c16:	431a      	orrs	r2, r3
	ctrlb |= (uint32_t)config->character_size;
    6c18:	7aeb      	ldrb	r3, [r5, #11]
    6c1a:	431a      	orrs	r2, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    6c1c:	892b      	ldrh	r3, [r5, #8]
    6c1e:	2bff      	cmp	r3, #255	; 0xff
    6c20:	d01e      	beq.n	6c60 <_usart_set_config+0x1b4>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    6c22:	2180      	movs	r1, #128	; 0x80
    6c24:	0449      	lsls	r1, r1, #17
    6c26:	430f      	orrs	r7, r1
		ctrlb |= config->parity;
    6c28:	431a      	orrs	r2, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    6c2a:	232c      	movs	r3, #44	; 0x2c
    6c2c:	5ceb      	ldrb	r3, [r5, r3]
    6c2e:	2b00      	cmp	r3, #0
    6c30:	d103      	bne.n	6c3a <_usart_set_config+0x18e>
    6c32:	4b13      	ldr	r3, [pc, #76]	; (6c80 <_usart_set_config+0x1d4>)
    6c34:	789b      	ldrb	r3, [r3, #2]
    6c36:	079b      	lsls	r3, r3, #30
    6c38:	d501      	bpl.n	6c3e <_usart_set_config+0x192>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    6c3a:	2380      	movs	r3, #128	; 0x80
    6c3c:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    6c3e:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    6c40:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    6c42:	2b00      	cmp	r3, #0
    6c44:	d1fb      	bne.n	6c3e <_usart_set_config+0x192>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    6c46:	6072      	str	r2, [r6, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6c48:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    6c4a:	69db      	ldr	r3, [r3, #28]
	while (usart_is_syncing(module)) {
    6c4c:	2b00      	cmp	r3, #0
    6c4e:	d1fb      	bne.n	6c48 <_usart_set_config+0x19c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    6c50:	6037      	str	r7, [r6, #0]
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
}
    6c52:	b007      	add	sp, #28
    6c54:	bc3c      	pop	{r2, r3, r4, r5}
    6c56:	4690      	mov	r8, r2
    6c58:	4699      	mov	r9, r3
    6c5a:	46a2      	mov	sl, r4
    6c5c:	46ab      	mov	fp, r5
    6c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(config->lin_slave_enable) {
    6c60:	7eeb      	ldrb	r3, [r5, #27]
    6c62:	2b00      	cmp	r3, #0
    6c64:	d0e1      	beq.n	6c2a <_usart_set_config+0x17e>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    6c66:	2380      	movs	r3, #128	; 0x80
    6c68:	04db      	lsls	r3, r3, #19
    6c6a:	431f      	orrs	r7, r3
    6c6c:	e7dd      	b.n	6c2a <_usart_set_config+0x17e>
    6c6e:	46c0      	nop			; (mov r8, r8)
    6c70:	00007425 	.word	0x00007425
    6c74:	00008fbd 	.word	0x00008fbd
    6c78:	0000719b 	.word	0x0000719b
    6c7c:	000071c5 	.word	0x000071c5
    6c80:	41002000 	.word	0x41002000

00006c84 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    6c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c86:	b089      	sub	sp, #36	; 0x24
    6c88:	0006      	movs	r6, r0
    6c8a:	000c      	movs	r4, r1
    6c8c:	0017      	movs	r7, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    6c8e:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6c90:	0008      	movs	r0, r1
    6c92:	4b42      	ldr	r3, [pc, #264]	; (6d9c <usart_init+0x118>)
    6c94:	4798      	blx	r3
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    6c96:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6c98:	3014      	adds	r0, #20
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    6c9a:	6823      	ldr	r3, [r4, #0]
    6c9c:	07db      	lsls	r3, r3, #31
    6c9e:	d503      	bpl.n	6ca8 <usart_init+0x24>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    6ca0:	2505      	movs	r5, #5
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    6ca2:	0028      	movs	r0, r5
    6ca4:	b009      	add	sp, #36	; 0x24
    6ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    6ca8:	6823      	ldr	r3, [r4, #0]
    6caa:	079b      	lsls	r3, r3, #30
    6cac:	d501      	bpl.n	6cb2 <usart_init+0x2e>
		return STATUS_ERR_DENIED;
    6cae:	251c      	movs	r5, #28
    6cb0:	e7f7      	b.n	6ca2 <usart_init+0x1e>
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    6cb2:	2301      	movs	r3, #1
    6cb4:	4093      	lsls	r3, r2
			PM->APBCMASK.reg |= mask;
    6cb6:	4a3a      	ldr	r2, [pc, #232]	; (6da0 <usart_init+0x11c>)
    6cb8:	6a11      	ldr	r1, [r2, #32]
    6cba:	430b      	orrs	r3, r1
    6cbc:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    6cbe:	252d      	movs	r5, #45	; 0x2d
    6cc0:	5d7b      	ldrb	r3, [r7, r5]
    6cc2:	a907      	add	r1, sp, #28
    6cc4:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6cc6:	b2c3      	uxtb	r3, r0
    6cc8:	9301      	str	r3, [sp, #4]
    6cca:	0018      	movs	r0, r3
    6ccc:	4b35      	ldr	r3, [pc, #212]	; (6da4 <usart_init+0x120>)
    6cce:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6cd0:	9801      	ldr	r0, [sp, #4]
    6cd2:	4b35      	ldr	r3, [pc, #212]	; (6da8 <usart_init+0x124>)
    6cd4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    6cd6:	5d78      	ldrb	r0, [r7, r5]
    6cd8:	2100      	movs	r1, #0
    6cda:	4b34      	ldr	r3, [pc, #208]	; (6dac <usart_init+0x128>)
    6cdc:	4798      	blx	r3
	module->character_size = config->character_size;
    6cde:	7afb      	ldrb	r3, [r7, #11]
    6ce0:	7173      	strb	r3, [r6, #5]
	module->receiver_enabled = config->receiver_enable;
    6ce2:	2324      	movs	r3, #36	; 0x24
    6ce4:	5cfb      	ldrb	r3, [r7, r3]
    6ce6:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
    6ce8:	2325      	movs	r3, #37	; 0x25
    6cea:	5cfb      	ldrb	r3, [r7, r3]
    6cec:	71f3      	strb	r3, [r6, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    6cee:	7efb      	ldrb	r3, [r7, #27]
    6cf0:	7233      	strb	r3, [r6, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    6cf2:	7f3b      	ldrb	r3, [r7, #28]
    6cf4:	7273      	strb	r3, [r6, #9]
	status_code = _usart_set_config(module, config);
    6cf6:	0039      	movs	r1, r7
    6cf8:	0030      	movs	r0, r6
    6cfa:	4b2d      	ldr	r3, [pc, #180]	; (6db0 <usart_init+0x12c>)
    6cfc:	4798      	blx	r3
    6cfe:	1e05      	subs	r5, r0, #0
	if(status_code != STATUS_OK) {
    6d00:	d1cf      	bne.n	6ca2 <usart_init+0x1e>
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6d02:	ab06      	add	r3, sp, #24
    6d04:	2280      	movs	r2, #128	; 0x80
    6d06:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6d08:	2200      	movs	r2, #0
    6d0a:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    6d0c:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    6d0e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    6d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6d12:	9302      	str	r3, [sp, #8]
    6d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6d16:	9303      	str	r3, [sp, #12]
    6d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d1a:	9304      	str	r3, [sp, #16]
			config->pinmux_pad2, config->pinmux_pad3
    6d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6d1e:	9301      	str	r3, [sp, #4]
	uint32_t pad_pinmuxes[] = {
    6d20:	9305      	str	r3, [sp, #20]
	for (uint8_t pad = 0; pad < 4; pad++) {
    6d22:	2700      	movs	r7, #0
    6d24:	e006      	b.n	6d34 <usart_init+0xb0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6d26:	0039      	movs	r1, r7
    6d28:	0020      	movs	r0, r4
    6d2a:	4b22      	ldr	r3, [pc, #136]	; (6db4 <usart_init+0x130>)
    6d2c:	4798      	blx	r3
    6d2e:	e008      	b.n	6d42 <usart_init+0xbe>
	for (uint8_t pad = 0; pad < 4; pad++) {
    6d30:	3701      	adds	r7, #1
    6d32:	b2ff      	uxtb	r7, r7
    6d34:	2f03      	cmp	r7, #3
    6d36:	d80d      	bhi.n	6d54 <usart_init+0xd0>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6d38:	00bb      	lsls	r3, r7, #2
    6d3a:	aa02      	add	r2, sp, #8
    6d3c:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    6d3e:	2800      	cmp	r0, #0
    6d40:	d0f1      	beq.n	6d26 <usart_init+0xa2>
		if (current_pinmux != PINMUX_UNUSED) {
    6d42:	1c43      	adds	r3, r0, #1
    6d44:	d0f4      	beq.n	6d30 <usart_init+0xac>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6d46:	a906      	add	r1, sp, #24
    6d48:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6d4a:	0c00      	lsrs	r0, r0, #16
    6d4c:	b2c0      	uxtb	r0, r0
    6d4e:	4b1a      	ldr	r3, [pc, #104]	; (6db8 <usart_init+0x134>)
    6d50:	4798      	blx	r3
    6d52:	e7ed      	b.n	6d30 <usart_init+0xac>
    6d54:	2200      	movs	r2, #0
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    6d56:	2a05      	cmp	r2, #5
    6d58:	d806      	bhi.n	6d68 <usart_init+0xe4>
		module->callback[i]            = NULL;
    6d5a:	1c93      	adds	r3, r2, #2
    6d5c:	009b      	lsls	r3, r3, #2
    6d5e:	18f3      	adds	r3, r6, r3
    6d60:	2100      	movs	r1, #0
    6d62:	6059      	str	r1, [r3, #4]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    6d64:	3201      	adds	r2, #1
    6d66:	e7f6      	b.n	6d56 <usart_init+0xd2>
	module->tx_buffer_ptr              = NULL;
    6d68:	2200      	movs	r2, #0
    6d6a:	62b2      	str	r2, [r6, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    6d6c:	6272      	str	r2, [r6, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    6d6e:	2300      	movs	r3, #0
    6d70:	85f2      	strh	r2, [r6, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    6d72:	85b2      	strh	r2, [r6, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    6d74:	3230      	adds	r2, #48	; 0x30
    6d76:	54b3      	strb	r3, [r6, r2]
	module->callback_enable_mask       = 0x00;
    6d78:	3201      	adds	r2, #1
    6d7a:	54b3      	strb	r3, [r6, r2]
	module->rx_status                  = STATUS_OK;
    6d7c:	3201      	adds	r2, #1
    6d7e:	54b3      	strb	r3, [r6, r2]
	module->tx_status                  = STATUS_OK;
    6d80:	3201      	adds	r2, #1
    6d82:	54b3      	strb	r3, [r6, r2]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    6d84:	6830      	ldr	r0, [r6, #0]
    6d86:	4b05      	ldr	r3, [pc, #20]	; (6d9c <usart_init+0x118>)
    6d88:	4798      	blx	r3
    6d8a:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    6d8c:	490b      	ldr	r1, [pc, #44]	; (6dbc <usart_init+0x138>)
    6d8e:	4b0c      	ldr	r3, [pc, #48]	; (6dc0 <usart_init+0x13c>)
    6d90:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    6d92:	00a4      	lsls	r4, r4, #2
    6d94:	4b0b      	ldr	r3, [pc, #44]	; (6dc4 <usart_init+0x140>)
    6d96:	50e6      	str	r6, [r4, r3]
	return status_code;
    6d98:	e783      	b.n	6ca2 <usart_init+0x1e>
    6d9a:	46c0      	nop			; (mov r8, r8)
    6d9c:	00007425 	.word	0x00007425
    6da0:	40000400 	.word	0x40000400
    6da4:	00008fa1 	.word	0x00008fa1
    6da8:	00008f19 	.word	0x00008f19
    6dac:	00007261 	.word	0x00007261
    6db0:	00006aad 	.word	0x00006aad
    6db4:	000072ad 	.word	0x000072ad
    6db8:	00009085 	.word	0x00009085
    6dbc:	00006f4d 	.word	0x00006f4d
    6dc0:	0000745d 	.word	0x0000745d
    6dc4:	200029b4 	.word	0x200029b4

00006dc8 <usart_write_wait>:
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6dc8:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    6dca:	79c2      	ldrb	r2, [r0, #7]
    6dcc:	2a00      	cmp	r2, #0
    6dce:	d101      	bne.n	6dd4 <usart_write_wait+0xc>
		return STATUS_ERR_DENIED;
    6dd0:	201c      	movs	r0, #28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    6dd2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    6dd4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    6dd6:	b292      	uxth	r2, r2
    6dd8:	2a00      	cmp	r2, #0
    6dda:	d001      	beq.n	6de0 <usart_write_wait+0x18>
		return STATUS_BUSY;
    6ddc:	2005      	movs	r0, #5
    6dde:	e7f8      	b.n	6dd2 <usart_write_wait+0xa>
	return (usart_hw->SYNCBUSY.reg);
    6de0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    6de2:	2a00      	cmp	r2, #0
    6de4:	d1fc      	bne.n	6de0 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    6de6:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    6de8:	7e1a      	ldrb	r2, [r3, #24]
    6dea:	0792      	lsls	r2, r2, #30
    6dec:	d5fc      	bpl.n	6de8 <usart_write_wait+0x20>
	return STATUS_OK;
    6dee:	2000      	movs	r0, #0
    6df0:	e7ef      	b.n	6dd2 <usart_write_wait+0xa>
	...

00006df4 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    6df4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6df6:	46c6      	mov	lr, r8
    6df8:	b500      	push	{lr}
    6dfa:	0004      	movs	r4, r0
    6dfc:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    6dfe:	2a00      	cmp	r2, #0
    6e00:	d103      	bne.n	6e0a <usart_write_buffer_wait+0x16>
		return STATUS_ERR_INVALID_ARG;
    6e02:	2017      	movs	r0, #23
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    6e04:	bc04      	pop	{r2}
    6e06:	4690      	mov	r8, r2
    6e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    6e0a:	79c3      	ldrb	r3, [r0, #7]
    6e0c:	2b00      	cmp	r3, #0
    6e0e:	d101      	bne.n	6e14 <usart_write_buffer_wait+0x20>
		return STATUS_ERR_DENIED;
    6e10:	201c      	movs	r0, #28
    6e12:	e7f7      	b.n	6e04 <usart_write_buffer_wait+0x10>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6e14:	6806      	ldr	r6, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    6e16:	69f3      	ldr	r3, [r6, #28]
	while (usart_is_syncing(module)) {
    6e18:	2b00      	cmp	r3, #0
    6e1a:	d1fc      	bne.n	6e16 <usart_write_buffer_wait+0x22>
    6e1c:	2000      	movs	r0, #0
    6e1e:	e00c      	b.n	6e3a <usart_write_buffer_wait+0x46>
		uint16_t data_to_send = tx_data[tx_pos++];
    6e20:	1c43      	adds	r3, r0, #1
    6e22:	b29b      	uxth	r3, r3
    6e24:	4698      	mov	r8, r3
    6e26:	5c2b      	ldrb	r3, [r5, r0]
    6e28:	b299      	uxth	r1, r3
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6e2a:	7962      	ldrb	r2, [r4, #5]
    6e2c:	2a01      	cmp	r2, #1
    6e2e:	d014      	beq.n	6e5a <usart_write_buffer_wait+0x66>
		usart_write_wait(module, data_to_send);
    6e30:	0020      	movs	r0, r4
    6e32:	4b18      	ldr	r3, [pc, #96]	; (6e94 <usart_write_buffer_wait+0xa0>)
    6e34:	4798      	blx	r3
	while (length--) {
    6e36:	4640      	mov	r0, r8
    6e38:	003a      	movs	r2, r7
    6e3a:	1e57      	subs	r7, r2, #1
    6e3c:	b2bf      	uxth	r7, r7
    6e3e:	2a00      	cmp	r2, #0
    6e40:	d013      	beq.n	6e6a <usart_write_buffer_wait+0x76>
    6e42:	2300      	movs	r3, #0
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6e44:	4a14      	ldr	r2, [pc, #80]	; (6e98 <usart_write_buffer_wait+0xa4>)
    6e46:	4293      	cmp	r3, r2
    6e48:	d8ea      	bhi.n	6e20 <usart_write_buffer_wait+0x2c>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    6e4a:	7e32      	ldrb	r2, [r6, #24]
    6e4c:	07d2      	lsls	r2, r2, #31
    6e4e:	d4e7      	bmi.n	6e20 <usart_write_buffer_wait+0x2c>
			} else if (i == USART_TIMEOUT) {
    6e50:	4a11      	ldr	r2, [pc, #68]	; (6e98 <usart_write_buffer_wait+0xa4>)
    6e52:	4293      	cmp	r3, r2
    6e54:	d019      	beq.n	6e8a <usart_write_buffer_wait+0x96>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6e56:	3301      	adds	r3, #1
    6e58:	e7f4      	b.n	6e44 <usart_write_buffer_wait+0x50>
			data_to_send |= (tx_data[tx_pos++] << 8);
    6e5a:	3002      	adds	r0, #2
    6e5c:	4642      	mov	r2, r8
    6e5e:	5ca9      	ldrb	r1, [r5, r2]
    6e60:	0209      	lsls	r1, r1, #8
    6e62:	4319      	orrs	r1, r3
    6e64:	b283      	uxth	r3, r0
    6e66:	4698      	mov	r8, r3
    6e68:	e7e2      	b.n	6e30 <usart_write_buffer_wait+0x3c>
    6e6a:	2300      	movs	r3, #0
    6e6c:	e000      	b.n	6e70 <usart_write_buffer_wait+0x7c>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6e6e:	3301      	adds	r3, #1
    6e70:	4a09      	ldr	r2, [pc, #36]	; (6e98 <usart_write_buffer_wait+0xa4>)
    6e72:	4293      	cmp	r3, r2
    6e74:	d807      	bhi.n	6e86 <usart_write_buffer_wait+0x92>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    6e76:	7e32      	ldrb	r2, [r6, #24]
    6e78:	0792      	lsls	r2, r2, #30
    6e7a:	d408      	bmi.n	6e8e <usart_write_buffer_wait+0x9a>
		} else if (i == USART_TIMEOUT) {
    6e7c:	4a06      	ldr	r2, [pc, #24]	; (6e98 <usart_write_buffer_wait+0xa4>)
    6e7e:	4293      	cmp	r3, r2
    6e80:	d1f5      	bne.n	6e6e <usart_write_buffer_wait+0x7a>
			return STATUS_ERR_TIMEOUT;
    6e82:	2012      	movs	r0, #18
    6e84:	e7be      	b.n	6e04 <usart_write_buffer_wait+0x10>
	return STATUS_OK;
    6e86:	2000      	movs	r0, #0
    6e88:	e7bc      	b.n	6e04 <usart_write_buffer_wait+0x10>
				return STATUS_ERR_TIMEOUT;
    6e8a:	2012      	movs	r0, #18
    6e8c:	e7ba      	b.n	6e04 <usart_write_buffer_wait+0x10>
	return STATUS_OK;
    6e8e:	2000      	movs	r0, #0
    6e90:	e7b8      	b.n	6e04 <usart_write_buffer_wait+0x10>
    6e92:	46c0      	nop			; (mov r8, r8)
    6e94:	00006dc9 	.word	0x00006dc9
    6e98:	0000ffff 	.word	0x0000ffff

00006e9c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e9e:	0004      	movs	r4, r0
    6ea0:	000d      	movs	r5, r1
    6ea2:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6ea4:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    6ea6:	4b10      	ldr	r3, [pc, #64]	; (6ee8 <_usart_read_buffer+0x4c>)
    6ea8:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    6eaa:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    6eac:	b29b      	uxth	r3, r3
    6eae:	2b00      	cmp	r3, #0
    6eb0:	d003      	beq.n	6eba <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    6eb2:	4b0e      	ldr	r3, [pc, #56]	; (6eec <_usart_read_buffer+0x50>)
    6eb4:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    6eb6:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    6eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    6eba:	85a6      	strh	r6, [r4, #44]	; 0x2c
    6ebc:	4b0b      	ldr	r3, [pc, #44]	; (6eec <_usart_read_buffer+0x50>)
    6ebe:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    6ec0:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    6ec2:	2205      	movs	r2, #5
    6ec4:	2332      	movs	r3, #50	; 0x32
    6ec6:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    6ec8:	3b2e      	subs	r3, #46	; 0x2e
    6eca:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    6ecc:	7a23      	ldrb	r3, [r4, #8]
    6ece:	2b00      	cmp	r3, #0
    6ed0:	d001      	beq.n	6ed6 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    6ed2:	2320      	movs	r3, #32
    6ed4:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    6ed6:	7a63      	ldrb	r3, [r4, #9]
    6ed8:	2b00      	cmp	r3, #0
    6eda:	d003      	beq.n	6ee4 <_usart_read_buffer+0x48>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    6edc:	2308      	movs	r3, #8
    6ede:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    6ee0:	2000      	movs	r0, #0
    6ee2:	e7e9      	b.n	6eb8 <_usart_read_buffer+0x1c>
    6ee4:	2000      	movs	r0, #0
    6ee6:	e7e7      	b.n	6eb8 <_usart_read_buffer+0x1c>
    6ee8:	000087ed 	.word	0x000087ed
    6eec:	0000882d 	.word	0x0000882d

00006ef0 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6ef0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    6ef2:	2a00      	cmp	r2, #0
    6ef4:	d101      	bne.n	6efa <usart_read_buffer_job+0xa>
		return STATUS_ERR_INVALID_ARG;
    6ef6:	2017      	movs	r0, #23
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    6ef8:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    6efa:	7983      	ldrb	r3, [r0, #6]
    6efc:	2b00      	cmp	r3, #0
    6efe:	d101      	bne.n	6f04 <usart_read_buffer_job+0x14>
		return STATUS_ERR_DENIED;
    6f00:	201c      	movs	r0, #28
    6f02:	e7f9      	b.n	6ef8 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    6f04:	4b01      	ldr	r3, [pc, #4]	; (6f0c <usart_read_buffer_job+0x1c>)
    6f06:	4798      	blx	r3
    6f08:	e7f6      	b.n	6ef8 <usart_read_buffer_job+0x8>
    6f0a:	46c0      	nop			; (mov r8, r8)
    6f0c:	00006e9d 	.word	0x00006e9d

00006f10 <usart_abort_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6f10:	6803      	ldr	r3, [r0, #0]

	switch(transceiver_type) {
    6f12:	2900      	cmp	r1, #0
    6f14:	d002      	beq.n	6f1c <usart_abort_job+0xc>
    6f16:	2901      	cmp	r1, #1
    6f18:	d005      	beq.n	6f26 <usart_abort_job+0x16>
			/* Clear the software reception buffer */
			module->remaining_tx_buffer_length = 0;

			break;
	}
}
    6f1a:	4770      	bx	lr
			usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
    6f1c:	2204      	movs	r2, #4
    6f1e:	761a      	strb	r2, [r3, #24]
			module->remaining_rx_buffer_length = 0;
    6f20:	2300      	movs	r3, #0
    6f22:	8583      	strh	r3, [r0, #44]	; 0x2c
			break;
    6f24:	e7f9      	b.n	6f1a <usart_abort_job+0xa>
			usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
    6f26:	2202      	movs	r2, #2
    6f28:	761a      	strb	r2, [r3, #24]
			module->remaining_tx_buffer_length = 0;
    6f2a:	2300      	movs	r3, #0
    6f2c:	85c3      	strh	r3, [r0, #46]	; 0x2e
}
    6f2e:	e7f4      	b.n	6f1a <usart_abort_job+0xa>

00006f30 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    6f30:	2900      	cmp	r1, #0
    6f32:	d003      	beq.n	6f3c <usart_get_job_status+0xc>
    6f34:	2901      	cmp	r1, #1
    6f36:	d005      	beq.n	6f44 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    6f38:	2017      	movs	r0, #23
    6f3a:	e002      	b.n	6f42 <usart_get_job_status+0x12>
			status_code = module->rx_status;
    6f3c:	2332      	movs	r3, #50	; 0x32
    6f3e:	5cc0      	ldrb	r0, [r0, r3]
    6f40:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    6f42:	4770      	bx	lr
			status_code = module->tx_status;
    6f44:	2333      	movs	r3, #51	; 0x33
    6f46:	5cc0      	ldrb	r0, [r0, r3]
    6f48:	b2c0      	uxtb	r0, r0
			break;
    6f4a:	e7fa      	b.n	6f42 <usart_get_job_status+0x12>

00006f4c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    6f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f4e:	46c6      	mov	lr, r8
    6f50:	b500      	push	{lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    6f52:	0080      	lsls	r0, r0, #2
    6f54:	4b64      	ldr	r3, [pc, #400]	; (70e8 <_usart_interrupt_handler+0x19c>)
    6f56:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    6f58:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    6f5a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    6f5c:	2b00      	cmp	r3, #0
    6f5e:	d1fc      	bne.n	6f5a <_usart_interrupt_handler+0xe>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    6f60:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    6f62:	7da6      	ldrb	r6, [r4, #22]
    6f64:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    6f66:	2330      	movs	r3, #48	; 0x30
    6f68:	5ceb      	ldrb	r3, [r5, r3]
			module->callback_enable_mask;
    6f6a:	2231      	movs	r2, #49	; 0x31
    6f6c:	5caf      	ldrb	r7, [r5, r2]
	callback_status = module->callback_reg_mask &
    6f6e:	401f      	ands	r7, r3

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    6f70:	07f3      	lsls	r3, r6, #31
    6f72:	d525      	bpl.n	6fc0 <_usart_interrupt_handler+0x74>
		if (module->remaining_tx_buffer_length) {
    6f74:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    6f76:	b29b      	uxth	r3, r3
    6f78:	2b00      	cmp	r3, #0
    6f7a:	d01f      	beq.n	6fbc <_usart_interrupt_handler+0x70>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    6f7c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    6f7e:	780a      	ldrb	r2, [r1, #0]
    6f80:	b2d2      	uxtb	r2, r2
    6f82:	b293      	uxth	r3, r2
    6f84:	4698      	mov	r8, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    6f86:	1c48      	adds	r0, r1, #1
    6f88:	62a8      	str	r0, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6f8a:	796b      	ldrb	r3, [r5, #5]
    6f8c:	2b01      	cmp	r3, #1
    6f8e:	d00e      	beq.n	6fae <_usart_interrupt_handler+0x62>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    6f90:	4643      	mov	r3, r8
    6f92:	05db      	lsls	r3, r3, #23
    6f94:	0ddb      	lsrs	r3, r3, #23
    6f96:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    6f98:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    6f9a:	3b01      	subs	r3, #1
    6f9c:	b29b      	uxth	r3, r3
    6f9e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    6fa0:	2b00      	cmp	r3, #0
    6fa2:	d10d      	bne.n	6fc0 <_usart_interrupt_handler+0x74>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6fa4:	3301      	adds	r3, #1
    6fa6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    6fa8:	3301      	adds	r3, #1
    6faa:	75a3      	strb	r3, [r4, #22]
    6fac:	e008      	b.n	6fc0 <_usart_interrupt_handler+0x74>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    6fae:	784b      	ldrb	r3, [r1, #1]
    6fb0:	021b      	lsls	r3, r3, #8
    6fb2:	4313      	orrs	r3, r2
    6fb4:	4698      	mov	r8, r3
				(module->tx_buffer_ptr)++;
    6fb6:	1c88      	adds	r0, r1, #2
    6fb8:	62a8      	str	r0, [r5, #40]	; 0x28
    6fba:	e7e9      	b.n	6f90 <_usart_interrupt_handler+0x44>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6fbc:	2301      	movs	r3, #1
    6fbe:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    6fc0:	07b3      	lsls	r3, r6, #30
    6fc2:	d506      	bpl.n	6fd2 <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    6fc4:	2302      	movs	r3, #2
    6fc6:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    6fc8:	2200      	movs	r2, #0
    6fca:	3331      	adds	r3, #49	; 0x31
    6fcc:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    6fce:	07fb      	lsls	r3, r7, #31
    6fd0:	d41c      	bmi.n	700c <_usart_interrupt_handler+0xc0>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    6fd2:	0773      	lsls	r3, r6, #29
    6fd4:	d564      	bpl.n	70a0 <_usart_interrupt_handler+0x154>

		if (module->remaining_rx_buffer_length) {
    6fd6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    6fd8:	b29b      	uxth	r3, r3
    6fda:	2b00      	cmp	r3, #0
    6fdc:	d05e      	beq.n	709c <_usart_interrupt_handler+0x150>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6fde:	8b62      	ldrh	r2, [r4, #26]
    6fe0:	b2d2      	uxtb	r2, r2
    6fe2:	233f      	movs	r3, #63	; 0x3f
    6fe4:	4013      	ands	r3, r2
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    6fe6:	0711      	lsls	r1, r2, #28
    6fe8:	d501      	bpl.n	6fee <_usart_interrupt_handler+0xa2>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    6fea:	2337      	movs	r3, #55	; 0x37
    6fec:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    6fee:	2b00      	cmp	r3, #0
    6ff0:	d031      	beq.n	7056 <_usart_interrupt_handler+0x10a>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    6ff2:	079a      	lsls	r2, r3, #30
    6ff4:	d50e      	bpl.n	7014 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    6ff6:	221a      	movs	r2, #26
    6ff8:	2332      	movs	r3, #50	; 0x32
    6ffa:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    6ffc:	3b30      	subs	r3, #48	; 0x30
    6ffe:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    7000:	077b      	lsls	r3, r7, #29
    7002:	d54d      	bpl.n	70a0 <_usart_interrupt_handler+0x154>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    7004:	0028      	movs	r0, r5
    7006:	696b      	ldr	r3, [r5, #20]
    7008:	4798      	blx	r3
    700a:	e049      	b.n	70a0 <_usart_interrupt_handler+0x154>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    700c:	0028      	movs	r0, r5
    700e:	68eb      	ldr	r3, [r5, #12]
    7010:	4798      	blx	r3
    7012:	e7de      	b.n	6fd2 <_usart_interrupt_handler+0x86>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    7014:	075a      	lsls	r2, r3, #29
    7016:	d505      	bpl.n	7024 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    7018:	221e      	movs	r2, #30
    701a:	2332      	movs	r3, #50	; 0x32
    701c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    701e:	3b2e      	subs	r3, #46	; 0x2e
    7020:	8363      	strh	r3, [r4, #26]
    7022:	e7ed      	b.n	7000 <_usart_interrupt_handler+0xb4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    7024:	07da      	lsls	r2, r3, #31
    7026:	d505      	bpl.n	7034 <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
    7028:	2213      	movs	r2, #19
    702a:	2332      	movs	r3, #50	; 0x32
    702c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    702e:	3b31      	subs	r3, #49	; 0x31
    7030:	8363      	strh	r3, [r4, #26]
    7032:	e7e5      	b.n	7000 <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    7034:	06da      	lsls	r2, r3, #27
    7036:	d505      	bpl.n	7044 <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
    7038:	2242      	movs	r2, #66	; 0x42
    703a:	2332      	movs	r3, #50	; 0x32
    703c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    703e:	3b22      	subs	r3, #34	; 0x22
    7040:	8363      	strh	r3, [r4, #26]
    7042:	e7dd      	b.n	7000 <_usart_interrupt_handler+0xb4>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    7044:	2220      	movs	r2, #32
    7046:	421a      	tst	r2, r3
    7048:	d0da      	beq.n	7000 <_usart_interrupt_handler+0xb4>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    704a:	3221      	adds	r2, #33	; 0x21
    704c:	2332      	movs	r3, #50	; 0x32
    704e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    7050:	3b12      	subs	r3, #18
    7052:	8363      	strh	r3, [r4, #26]
    7054:	e7d4      	b.n	7000 <_usart_interrupt_handler+0xb4>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    7056:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    7058:	05db      	lsls	r3, r3, #23
    705a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    705c:	b2da      	uxtb	r2, r3
    705e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    7060:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    7062:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    7064:	1c51      	adds	r1, r2, #1
    7066:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7068:	7969      	ldrb	r1, [r5, #5]
    706a:	2901      	cmp	r1, #1
    706c:	d010      	beq.n	7090 <_usart_interrupt_handler+0x144>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    706e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    7070:	3b01      	subs	r3, #1
    7072:	b29b      	uxth	r3, r3
    7074:	85ab      	strh	r3, [r5, #44]	; 0x2c
    7076:	2b00      	cmp	r3, #0
    7078:	d112      	bne.n	70a0 <_usart_interrupt_handler+0x154>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    707a:	3304      	adds	r3, #4
    707c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    707e:	2200      	movs	r2, #0
    7080:	332e      	adds	r3, #46	; 0x2e
    7082:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    7084:	07bb      	lsls	r3, r7, #30
    7086:	d50b      	bpl.n	70a0 <_usart_interrupt_handler+0x154>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    7088:	0028      	movs	r0, r5
    708a:	692b      	ldr	r3, [r5, #16]
    708c:	4798      	blx	r3
    708e:	e007      	b.n	70a0 <_usart_interrupt_handler+0x154>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    7090:	0a1b      	lsrs	r3, r3, #8
    7092:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    7094:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7096:	3301      	adds	r3, #1
    7098:	626b      	str	r3, [r5, #36]	; 0x24
    709a:	e7e8      	b.n	706e <_usart_interrupt_handler+0x122>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    709c:	2304      	movs	r3, #4
    709e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    70a0:	06f3      	lsls	r3, r6, #27
    70a2:	d504      	bpl.n	70ae <_usart_interrupt_handler+0x162>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    70a4:	2310      	movs	r3, #16
    70a6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    70a8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    70aa:	06fb      	lsls	r3, r7, #27
    70ac:	d410      	bmi.n	70d0 <_usart_interrupt_handler+0x184>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    70ae:	06b3      	lsls	r3, r6, #26
    70b0:	d504      	bpl.n	70bc <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    70b2:	2320      	movs	r3, #32
    70b4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    70b6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    70b8:	073b      	lsls	r3, r7, #28
    70ba:	d40d      	bmi.n	70d8 <_usart_interrupt_handler+0x18c>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    70bc:	0733      	lsls	r3, r6, #28
    70be:	d504      	bpl.n	70ca <_usart_interrupt_handler+0x17e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    70c0:	2308      	movs	r3, #8
    70c2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    70c4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    70c6:	06bb      	lsls	r3, r7, #26
    70c8:	d40a      	bmi.n	70e0 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    70ca:	bc04      	pop	{r2}
    70cc:	4690      	mov	r8, r2
    70ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    70d0:	0028      	movs	r0, r5
    70d2:	69eb      	ldr	r3, [r5, #28]
    70d4:	4798      	blx	r3
    70d6:	e7ea      	b.n	70ae <_usart_interrupt_handler+0x162>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    70d8:	0028      	movs	r0, r5
    70da:	69ab      	ldr	r3, [r5, #24]
    70dc:	4798      	blx	r3
    70de:	e7ed      	b.n	70bc <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    70e0:	6a2b      	ldr	r3, [r5, #32]
    70e2:	0028      	movs	r0, r5
    70e4:	4798      	blx	r3
}
    70e6:	e7f0      	b.n	70ca <_usart_interrupt_handler+0x17e>
    70e8:	200029b4 	.word	0x200029b4

000070ec <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    70ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    70ee:	46de      	mov	lr, fp
    70f0:	4657      	mov	r7, sl
    70f2:	464e      	mov	r6, r9
    70f4:	4645      	mov	r5, r8
    70f6:	b5e0      	push	{r5, r6, r7, lr}
    70f8:	b085      	sub	sp, #20
    70fa:	4689      	mov	r9, r1
    70fc:	0016      	movs	r6, r2
    70fe:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    7100:	2200      	movs	r2, #0
    7102:	2300      	movs	r3, #0
    7104:	2100      	movs	r1, #0
    7106:	468b      	mov	fp, r1
    7108:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
    710a:	253f      	movs	r5, #63	; 0x3f
    710c:	9600      	str	r6, [sp, #0]
    710e:	9701      	str	r7, [sp, #4]
    7110:	9002      	str	r0, [sp, #8]
    7112:	4649      	mov	r1, r9
    7114:	9103      	str	r1, [sp, #12]
    7116:	e011      	b.n	713c <long_division+0x50>
		bit_shift = (uint64_t)1 << i;
    7118:	2120      	movs	r1, #32
    711a:	1b49      	subs	r1, r1, r5
    711c:	2400      	movs	r4, #0
    711e:	3401      	adds	r4, #1
    7120:	40cc      	lsrs	r4, r1
    7122:	e013      	b.n	714c <long_division+0x60>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    7124:	9800      	ldr	r0, [sp, #0]
    7126:	9901      	ldr	r1, [sp, #4]
    7128:	1a12      	subs	r2, r2, r0
    712a:	418b      	sbcs	r3, r1
			q |= bit_shift;
    712c:	4659      	mov	r1, fp
    712e:	4660      	mov	r0, ip
    7130:	4301      	orrs	r1, r0
    7132:	468b      	mov	fp, r1
    7134:	4651      	mov	r1, sl
    7136:	4321      	orrs	r1, r4
    7138:	468a      	mov	sl, r1
	for (i = 63; i >= 0; i--) {
    713a:	3d01      	subs	r5, #1
    713c:	2d00      	cmp	r5, #0
    713e:	db23      	blt.n	7188 <long_division+0x9c>
		bit_shift = (uint64_t)1 << i;
    7140:	2120      	movs	r1, #32
    7142:	4249      	negs	r1, r1
    7144:	1869      	adds	r1, r5, r1
    7146:	d4e7      	bmi.n	7118 <long_division+0x2c>
    7148:	2401      	movs	r4, #1
    714a:	408c      	lsls	r4, r1
    714c:	2101      	movs	r1, #1
    714e:	40a9      	lsls	r1, r5
    7150:	468c      	mov	ip, r1
		r = r << 1;
    7152:	1892      	adds	r2, r2, r2
    7154:	415b      	adcs	r3, r3
    7156:	0010      	movs	r0, r2
    7158:	0019      	movs	r1, r3
		if (n & bit_shift) {
    715a:	9e02      	ldr	r6, [sp, #8]
    715c:	4667      	mov	r7, ip
    715e:	403e      	ands	r6, r7
    7160:	46b1      	mov	r9, r6
    7162:	9e03      	ldr	r6, [sp, #12]
    7164:	4026      	ands	r6, r4
    7166:	46b0      	mov	r8, r6
    7168:	464e      	mov	r6, r9
    716a:	4647      	mov	r7, r8
    716c:	433e      	orrs	r6, r7
    716e:	d003      	beq.n	7178 <long_division+0x8c>
			r |= 0x01;
    7170:	2601      	movs	r6, #1
    7172:	4306      	orrs	r6, r0
    7174:	0032      	movs	r2, r6
    7176:	000b      	movs	r3, r1
		if (r >= d) {
    7178:	9800      	ldr	r0, [sp, #0]
    717a:	9901      	ldr	r1, [sp, #4]
    717c:	4299      	cmp	r1, r3
    717e:	d8dc      	bhi.n	713a <long_division+0x4e>
    7180:	d1d0      	bne.n	7124 <long_division+0x38>
    7182:	4290      	cmp	r0, r2
    7184:	d8d9      	bhi.n	713a <long_division+0x4e>
    7186:	e7cd      	b.n	7124 <long_division+0x38>
		}
	}

	return q;
}
    7188:	4658      	mov	r0, fp
    718a:	4651      	mov	r1, sl
    718c:	b005      	add	sp, #20
    718e:	bc3c      	pop	{r2, r3, r4, r5}
    7190:	4690      	mov	r8, r2
    7192:	4699      	mov	r9, r3
    7194:	46a2      	mov	sl, r4
    7196:	46ab      	mov	fp, r5
    7198:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000719a <_sercom_get_sync_baud_val>:
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    719a:	0849      	lsrs	r1, r1, #1
    719c:	4281      	cmp	r1, r0
    719e:	d201      	bcs.n	71a4 <_sercom_get_sync_baud_val+0xa>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    71a0:	2040      	movs	r0, #64	; 0x40
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    71a2:	4770      	bx	lr
    71a4:	2300      	movs	r3, #0
    71a6:	e002      	b.n	71ae <_sercom_get_sync_baud_val+0x14>
		clock_value = clock_value - baudrate;
    71a8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    71aa:	3301      	adds	r3, #1
    71ac:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    71ae:	4281      	cmp	r1, r0
    71b0:	d2fa      	bcs.n	71a8 <_sercom_get_sync_baud_val+0xe>
	baud_calculated = baud_calculated - 1;
    71b2:	3b01      	subs	r3, #1
    71b4:	b29b      	uxth	r3, r3
	if (baud_calculated > 0xFF) {
    71b6:	2bff      	cmp	r3, #255	; 0xff
    71b8:	d901      	bls.n	71be <_sercom_get_sync_baud_val+0x24>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    71ba:	2040      	movs	r0, #64	; 0x40
    71bc:	e7f1      	b.n	71a2 <_sercom_get_sync_baud_val+0x8>
		*baudvalue = baud_calculated;
    71be:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
    71c0:	2000      	movs	r0, #0
    71c2:	e7ee      	b.n	71a2 <_sercom_get_sync_baud_val+0x8>

000071c4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    71c4:	b570      	push	{r4, r5, r6, lr}
    71c6:	b082      	sub	sp, #8
    71c8:	000c      	movs	r4, r1
    71ca:	0015      	movs	r5, r2
    71cc:	aa06      	add	r2, sp, #24
    71ce:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    71d0:	0002      	movs	r2, r0
    71d2:	434a      	muls	r2, r1
    71d4:	42a2      	cmp	r2, r4
    71d6:	d902      	bls.n	71de <_sercom_get_async_baud_val+0x1a>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    71d8:	2040      	movs	r0, #64	; 0x40
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    71da:	b002      	add	sp, #8
    71dc:	bd70      	pop	{r4, r5, r6, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    71de:	2b00      	cmp	r3, #0
    71e0:	d114      	bne.n	720c <_sercom_get_async_baud_val+0x48>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    71e2:	0002      	movs	r2, r0
    71e4:	0008      	movs	r0, r1
    71e6:	2100      	movs	r1, #0
    71e8:	4e1b      	ldr	r6, [pc, #108]	; (7258 <_sercom_get_async_baud_val+0x94>)
    71ea:	47b0      	blx	r6
    71ec:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    71ee:	0022      	movs	r2, r4
    71f0:	2300      	movs	r3, #0
    71f2:	2000      	movs	r0, #0
    71f4:	4c19      	ldr	r4, [pc, #100]	; (725c <_sercom_get_async_baud_val+0x98>)
    71f6:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    71f8:	2200      	movs	r2, #0
    71fa:	2301      	movs	r3, #1
    71fc:	1a12      	subs	r2, r2, r0
    71fe:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    7200:	0c10      	lsrs	r0, r2, #16
    7202:	041b      	lsls	r3, r3, #16
    7204:	4318      	orrs	r0, r3
	*baudval = baud_calculated;
    7206:	8028      	strh	r0, [r5, #0]
	return STATUS_OK;
    7208:	2000      	movs	r0, #0
    720a:	e7e6      	b.n	71da <_sercom_get_async_baud_val+0x16>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    720c:	2b01      	cmp	r3, #1
    720e:	d001      	beq.n	7214 <_sercom_get_async_baud_val+0x50>
	uint64_t baud_calculated = 0;
    7210:	2000      	movs	r0, #0
    7212:	e7f8      	b.n	7206 <_sercom_get_async_baud_val+0x42>
		temp1 = ((uint64_t)baudrate * sample_num);
    7214:	000a      	movs	r2, r1
    7216:	2300      	movs	r3, #0
    7218:	2100      	movs	r1, #0
    721a:	4e0f      	ldr	r6, [pc, #60]	; (7258 <_sercom_get_async_baud_val+0x94>)
    721c:	47b0      	blx	r6
    721e:	0002      	movs	r2, r0
    7220:	000b      	movs	r3, r1
    7222:	9200      	str	r2, [sp, #0]
    7224:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    7226:	0020      	movs	r0, r4
    7228:	2100      	movs	r1, #0
    722a:	4e0c      	ldr	r6, [pc, #48]	; (725c <_sercom_get_async_baud_val+0x98>)
    722c:	47b0      	blx	r6
    722e:	0006      	movs	r6, r0
		if(baud_int > BAUD_INT_MAX) {
    7230:	2380      	movs	r3, #128	; 0x80
    7232:	019b      	lsls	r3, r3, #6
    7234:	4298      	cmp	r0, r3
    7236:	d901      	bls.n	723c <_sercom_get_async_baud_val+0x78>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7238:	2040      	movs	r0, #64	; 0x40
    723a:	e7ce      	b.n	71da <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    723c:	0f61      	lsrs	r1, r4, #29
    723e:	00e0      	lsls	r0, r4, #3
    7240:	9a00      	ldr	r2, [sp, #0]
    7242:	9b01      	ldr	r3, [sp, #4]
    7244:	4c05      	ldr	r4, [pc, #20]	; (725c <_sercom_get_async_baud_val+0x98>)
    7246:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    7248:	b2c0      	uxtb	r0, r0
    724a:	00f3      	lsls	r3, r6, #3
    724c:	b2db      	uxtb	r3, r3
    724e:	1ac0      	subs	r0, r0, r3
    7250:	b2c0      	uxtb	r0, r0
		baud_calculated = baud_int | (baud_fp << 13);
    7252:	0340      	lsls	r0, r0, #13
    7254:	4330      	orrs	r0, r6
    7256:	e7d6      	b.n	7206 <_sercom_get_async_baud_val+0x42>
    7258:	00009919 	.word	0x00009919
    725c:	000070ed 	.word	0x000070ed

00007260 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    7260:	b510      	push	{r4, lr}
    7262:	b082      	sub	sp, #8
    7264:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    7266:	4b0e      	ldr	r3, [pc, #56]	; (72a0 <sercom_set_gclk_generator+0x40>)
    7268:	781b      	ldrb	r3, [r3, #0]
    726a:	2b00      	cmp	r3, #0
    726c:	d007      	beq.n	727e <sercom_set_gclk_generator+0x1e>
    726e:	2900      	cmp	r1, #0
    7270:	d105      	bne.n	727e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    7272:	4b0b      	ldr	r3, [pc, #44]	; (72a0 <sercom_set_gclk_generator+0x40>)
    7274:	785b      	ldrb	r3, [r3, #1]
    7276:	4283      	cmp	r3, r0
    7278:	d010      	beq.n	729c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    727a:	201d      	movs	r0, #29
    727c:	e00c      	b.n	7298 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    727e:	a901      	add	r1, sp, #4
    7280:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    7282:	2013      	movs	r0, #19
    7284:	4b07      	ldr	r3, [pc, #28]	; (72a4 <sercom_set_gclk_generator+0x44>)
    7286:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    7288:	2013      	movs	r0, #19
    728a:	4b07      	ldr	r3, [pc, #28]	; (72a8 <sercom_set_gclk_generator+0x48>)
    728c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    728e:	4b04      	ldr	r3, [pc, #16]	; (72a0 <sercom_set_gclk_generator+0x40>)
    7290:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    7292:	2201      	movs	r2, #1
    7294:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    7296:	2000      	movs	r0, #0
}
    7298:	b002      	add	sp, #8
    729a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    729c:	2000      	movs	r0, #0
    729e:	e7fb      	b.n	7298 <sercom_set_gclk_generator+0x38>
    72a0:	20000f24 	.word	0x20000f24
    72a4:	00008fa1 	.word	0x00008fa1
    72a8:	00008f19 	.word	0x00008f19

000072ac <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    72ac:	4b40      	ldr	r3, [pc, #256]	; (73b0 <_sercom_get_default_pad+0x104>)
    72ae:	4298      	cmp	r0, r3
    72b0:	d031      	beq.n	7316 <_sercom_get_default_pad+0x6a>
    72b2:	d90a      	bls.n	72ca <_sercom_get_default_pad+0x1e>
    72b4:	4b3f      	ldr	r3, [pc, #252]	; (73b4 <_sercom_get_default_pad+0x108>)
    72b6:	4298      	cmp	r0, r3
    72b8:	d04d      	beq.n	7356 <_sercom_get_default_pad+0xaa>
    72ba:	4b3f      	ldr	r3, [pc, #252]	; (73b8 <_sercom_get_default_pad+0x10c>)
    72bc:	4298      	cmp	r0, r3
    72be:	d05a      	beq.n	7376 <_sercom_get_default_pad+0xca>
    72c0:	4b3e      	ldr	r3, [pc, #248]	; (73bc <_sercom_get_default_pad+0x110>)
    72c2:	4298      	cmp	r0, r3
    72c4:	d037      	beq.n	7336 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    72c6:	2000      	movs	r0, #0
}
    72c8:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    72ca:	4b3d      	ldr	r3, [pc, #244]	; (73c0 <_sercom_get_default_pad+0x114>)
    72cc:	4298      	cmp	r0, r3
    72ce:	d00c      	beq.n	72ea <_sercom_get_default_pad+0x3e>
    72d0:	4b3c      	ldr	r3, [pc, #240]	; (73c4 <_sercom_get_default_pad+0x118>)
    72d2:	4298      	cmp	r0, r3
    72d4:	d1f7      	bne.n	72c6 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    72d6:	2901      	cmp	r1, #1
    72d8:	d05f      	beq.n	739a <_sercom_get_default_pad+0xee>
    72da:	2900      	cmp	r1, #0
    72dc:	d015      	beq.n	730a <_sercom_get_default_pad+0x5e>
    72de:	2902      	cmp	r1, #2
    72e0:	d015      	beq.n	730e <_sercom_get_default_pad+0x62>
    72e2:	2903      	cmp	r1, #3
    72e4:	d015      	beq.n	7312 <_sercom_get_default_pad+0x66>
	return 0;
    72e6:	2000      	movs	r0, #0
    72e8:	e7ee      	b.n	72c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    72ea:	2901      	cmp	r1, #1
    72ec:	d053      	beq.n	7396 <_sercom_get_default_pad+0xea>
    72ee:	2900      	cmp	r1, #0
    72f0:	d005      	beq.n	72fe <_sercom_get_default_pad+0x52>
    72f2:	2902      	cmp	r1, #2
    72f4:	d005      	beq.n	7302 <_sercom_get_default_pad+0x56>
    72f6:	2903      	cmp	r1, #3
    72f8:	d005      	beq.n	7306 <_sercom_get_default_pad+0x5a>
	return 0;
    72fa:	2000      	movs	r0, #0
    72fc:	e7e4      	b.n	72c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    72fe:	4832      	ldr	r0, [pc, #200]	; (73c8 <_sercom_get_default_pad+0x11c>)
    7300:	e7e2      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7302:	4832      	ldr	r0, [pc, #200]	; (73cc <_sercom_get_default_pad+0x120>)
    7304:	e7e0      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7306:	4832      	ldr	r0, [pc, #200]	; (73d0 <_sercom_get_default_pad+0x124>)
    7308:	e7de      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    730a:	2003      	movs	r0, #3
    730c:	e7dc      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    730e:	4831      	ldr	r0, [pc, #196]	; (73d4 <_sercom_get_default_pad+0x128>)
    7310:	e7da      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7312:	4831      	ldr	r0, [pc, #196]	; (73d8 <_sercom_get_default_pad+0x12c>)
    7314:	e7d8      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7316:	2901      	cmp	r1, #1
    7318:	d041      	beq.n	739e <_sercom_get_default_pad+0xf2>
    731a:	2900      	cmp	r1, #0
    731c:	d005      	beq.n	732a <_sercom_get_default_pad+0x7e>
    731e:	2902      	cmp	r1, #2
    7320:	d005      	beq.n	732e <_sercom_get_default_pad+0x82>
    7322:	2903      	cmp	r1, #3
    7324:	d005      	beq.n	7332 <_sercom_get_default_pad+0x86>
	return 0;
    7326:	2000      	movs	r0, #0
    7328:	e7ce      	b.n	72c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    732a:	482c      	ldr	r0, [pc, #176]	; (73dc <_sercom_get_default_pad+0x130>)
    732c:	e7cc      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    732e:	482c      	ldr	r0, [pc, #176]	; (73e0 <_sercom_get_default_pad+0x134>)
    7330:	e7ca      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7332:	482c      	ldr	r0, [pc, #176]	; (73e4 <_sercom_get_default_pad+0x138>)
    7334:	e7c8      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7336:	2901      	cmp	r1, #1
    7338:	d033      	beq.n	73a2 <_sercom_get_default_pad+0xf6>
    733a:	2900      	cmp	r1, #0
    733c:	d005      	beq.n	734a <_sercom_get_default_pad+0x9e>
    733e:	2902      	cmp	r1, #2
    7340:	d005      	beq.n	734e <_sercom_get_default_pad+0xa2>
    7342:	2903      	cmp	r1, #3
    7344:	d005      	beq.n	7352 <_sercom_get_default_pad+0xa6>
	return 0;
    7346:	2000      	movs	r0, #0
    7348:	e7be      	b.n	72c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    734a:	4827      	ldr	r0, [pc, #156]	; (73e8 <_sercom_get_default_pad+0x13c>)
    734c:	e7bc      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    734e:	4827      	ldr	r0, [pc, #156]	; (73ec <_sercom_get_default_pad+0x140>)
    7350:	e7ba      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7352:	4827      	ldr	r0, [pc, #156]	; (73f0 <_sercom_get_default_pad+0x144>)
    7354:	e7b8      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7356:	2901      	cmp	r1, #1
    7358:	d025      	beq.n	73a6 <_sercom_get_default_pad+0xfa>
    735a:	2900      	cmp	r1, #0
    735c:	d005      	beq.n	736a <_sercom_get_default_pad+0xbe>
    735e:	2902      	cmp	r1, #2
    7360:	d005      	beq.n	736e <_sercom_get_default_pad+0xc2>
    7362:	2903      	cmp	r1, #3
    7364:	d005      	beq.n	7372 <_sercom_get_default_pad+0xc6>
	return 0;
    7366:	2000      	movs	r0, #0
    7368:	e7ae      	b.n	72c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    736a:	4822      	ldr	r0, [pc, #136]	; (73f4 <_sercom_get_default_pad+0x148>)
    736c:	e7ac      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    736e:	4822      	ldr	r0, [pc, #136]	; (73f8 <_sercom_get_default_pad+0x14c>)
    7370:	e7aa      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7372:	4822      	ldr	r0, [pc, #136]	; (73fc <_sercom_get_default_pad+0x150>)
    7374:	e7a8      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7376:	2901      	cmp	r1, #1
    7378:	d017      	beq.n	73aa <_sercom_get_default_pad+0xfe>
    737a:	2900      	cmp	r1, #0
    737c:	d005      	beq.n	738a <_sercom_get_default_pad+0xde>
    737e:	2902      	cmp	r1, #2
    7380:	d005      	beq.n	738e <_sercom_get_default_pad+0xe2>
    7382:	2903      	cmp	r1, #3
    7384:	d005      	beq.n	7392 <_sercom_get_default_pad+0xe6>
	return 0;
    7386:	2000      	movs	r0, #0
    7388:	e79e      	b.n	72c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    738a:	481d      	ldr	r0, [pc, #116]	; (7400 <_sercom_get_default_pad+0x154>)
    738c:	e79c      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    738e:	481d      	ldr	r0, [pc, #116]	; (7404 <_sercom_get_default_pad+0x158>)
    7390:	e79a      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7392:	481d      	ldr	r0, [pc, #116]	; (7408 <_sercom_get_default_pad+0x15c>)
    7394:	e798      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7396:	481d      	ldr	r0, [pc, #116]	; (740c <_sercom_get_default_pad+0x160>)
    7398:	e796      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    739a:	481d      	ldr	r0, [pc, #116]	; (7410 <_sercom_get_default_pad+0x164>)
    739c:	e794      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    739e:	481d      	ldr	r0, [pc, #116]	; (7414 <_sercom_get_default_pad+0x168>)
    73a0:	e792      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    73a2:	481d      	ldr	r0, [pc, #116]	; (7418 <_sercom_get_default_pad+0x16c>)
    73a4:	e790      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    73a6:	481d      	ldr	r0, [pc, #116]	; (741c <_sercom_get_default_pad+0x170>)
    73a8:	e78e      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    73aa:	481d      	ldr	r0, [pc, #116]	; (7420 <_sercom_get_default_pad+0x174>)
    73ac:	e78c      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    73ae:	46c0      	nop			; (mov r8, r8)
    73b0:	42001000 	.word	0x42001000
    73b4:	42001800 	.word	0x42001800
    73b8:	42001c00 	.word	0x42001c00
    73bc:	42001400 	.word	0x42001400
    73c0:	42000800 	.word	0x42000800
    73c4:	42000c00 	.word	0x42000c00
    73c8:	00040003 	.word	0x00040003
    73cc:	00060003 	.word	0x00060003
    73d0:	00070003 	.word	0x00070003
    73d4:	001e0003 	.word	0x001e0003
    73d8:	001f0003 	.word	0x001f0003
    73dc:	00080003 	.word	0x00080003
    73e0:	000a0003 	.word	0x000a0003
    73e4:	000b0003 	.word	0x000b0003
    73e8:	00100003 	.word	0x00100003
    73ec:	00120003 	.word	0x00120003
    73f0:	00130003 	.word	0x00130003
    73f4:	000c0003 	.word	0x000c0003
    73f8:	000e0003 	.word	0x000e0003
    73fc:	000f0003 	.word	0x000f0003
    7400:	00160003 	.word	0x00160003
    7404:	00180003 	.word	0x00180003
    7408:	00190003 	.word	0x00190003
    740c:	00050003 	.word	0x00050003
    7410:	00010003 	.word	0x00010003
    7414:	00090003 	.word	0x00090003
    7418:	00110003 	.word	0x00110003
    741c:	000d0003 	.word	0x000d0003
    7420:	00170003 	.word	0x00170003

00007424 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    7424:	b530      	push	{r4, r5, lr}
    7426:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    7428:	4c0a      	ldr	r4, [pc, #40]	; (7454 <_sercom_get_sercom_inst_index+0x30>)
    742a:	466b      	mov	r3, sp
    742c:	0022      	movs	r2, r4
    742e:	ca32      	ldmia	r2!, {r1, r4, r5}
    7430:	c332      	stmia	r3!, {r1, r4, r5}
    7432:	ca32      	ldmia	r2!, {r1, r4, r5}
    7434:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7436:	2300      	movs	r3, #0
    7438:	2b05      	cmp	r3, #5
    743a:	d808      	bhi.n	744e <_sercom_get_sercom_inst_index+0x2a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    743c:	009a      	lsls	r2, r3, #2
    743e:	4669      	mov	r1, sp
    7440:	5852      	ldr	r2, [r2, r1]
    7442:	4282      	cmp	r2, r0
    7444:	d001      	beq.n	744a <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7446:	3301      	adds	r3, #1
    7448:	e7f6      	b.n	7438 <_sercom_get_sercom_inst_index+0x14>
			return i;
    744a:	b2d8      	uxtb	r0, r3
    744c:	e000      	b.n	7450 <_sercom_get_sercom_inst_index+0x2c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    744e:	2000      	movs	r0, #0
}
    7450:	b007      	add	sp, #28
    7452:	bd30      	pop	{r4, r5, pc}
    7454:	0000ca88 	.word	0x0000ca88

00007458 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    7458:	4770      	bx	lr
	...

0000745c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    745c:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    745e:	4b0b      	ldr	r3, [pc, #44]	; (748c <_sercom_set_handler+0x30>)
    7460:	781b      	ldrb	r3, [r3, #0]
    7462:	2b00      	cmp	r3, #0
    7464:	d008      	beq.n	7478 <_sercom_set_handler+0x1c>
    7466:	e00c      	b.n	7482 <_sercom_set_handler+0x26>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    7468:	009a      	lsls	r2, r3, #2
    746a:	4d09      	ldr	r5, [pc, #36]	; (7490 <_sercom_set_handler+0x34>)
    746c:	4c09      	ldr	r4, [pc, #36]	; (7494 <_sercom_set_handler+0x38>)
    746e:	5115      	str	r5, [r2, r4]
			_sercom_instances[i] = NULL;
    7470:	2500      	movs	r5, #0
    7472:	4c09      	ldr	r4, [pc, #36]	; (7498 <_sercom_set_handler+0x3c>)
    7474:	5115      	str	r5, [r2, r4]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7476:	3301      	adds	r3, #1
    7478:	2b05      	cmp	r3, #5
    747a:	d9f5      	bls.n	7468 <_sercom_set_handler+0xc>
		}

		_handler_table_initialized = true;
    747c:	2201      	movs	r2, #1
    747e:	4b03      	ldr	r3, [pc, #12]	; (748c <_sercom_set_handler+0x30>)
    7480:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    7482:	0080      	lsls	r0, r0, #2
    7484:	4b03      	ldr	r3, [pc, #12]	; (7494 <_sercom_set_handler+0x38>)
    7486:	50c1      	str	r1, [r0, r3]
}
    7488:	bd30      	pop	{r4, r5, pc}
    748a:	46c0      	nop			; (mov r8, r8)
    748c:	20000f26 	.word	0x20000f26
    7490:	00007459 	.word	0x00007459
    7494:	20000f28 	.word	0x20000f28
    7498:	200029b4 	.word	0x200029b4

0000749c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    749c:	b500      	push	{lr}
    749e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    74a0:	4b05      	ldr	r3, [pc, #20]	; (74b8 <_sercom_get_interrupt_vector+0x1c>)
    74a2:	681a      	ldr	r2, [r3, #0]
    74a4:	9200      	str	r2, [sp, #0]
    74a6:	889b      	ldrh	r3, [r3, #4]
    74a8:	466a      	mov	r2, sp
    74aa:	8093      	strh	r3, [r2, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    74ac:	4b03      	ldr	r3, [pc, #12]	; (74bc <_sercom_get_interrupt_vector+0x20>)
    74ae:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    74b0:	466b      	mov	r3, sp
    74b2:	5618      	ldrsb	r0, [r3, r0]
}
    74b4:	b003      	add	sp, #12
    74b6:	bd00      	pop	{pc}
    74b8:	0000caa0 	.word	0x0000caa0
    74bc:	00007425 	.word	0x00007425

000074c0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    74c0:	b510      	push	{r4, lr}
    74c2:	4b02      	ldr	r3, [pc, #8]	; (74cc <SERCOM0_Handler+0xc>)
    74c4:	681b      	ldr	r3, [r3, #0]
    74c6:	2000      	movs	r0, #0
    74c8:	4798      	blx	r3
    74ca:	bd10      	pop	{r4, pc}
    74cc:	20000f28 	.word	0x20000f28

000074d0 <SERCOM1_Handler>:
    74d0:	b510      	push	{r4, lr}
    74d2:	4b02      	ldr	r3, [pc, #8]	; (74dc <SERCOM1_Handler+0xc>)
    74d4:	685b      	ldr	r3, [r3, #4]
    74d6:	2001      	movs	r0, #1
    74d8:	4798      	blx	r3
    74da:	bd10      	pop	{r4, pc}
    74dc:	20000f28 	.word	0x20000f28

000074e0 <SERCOM2_Handler>:
    74e0:	b510      	push	{r4, lr}
    74e2:	4b02      	ldr	r3, [pc, #8]	; (74ec <SERCOM2_Handler+0xc>)
    74e4:	689b      	ldr	r3, [r3, #8]
    74e6:	2002      	movs	r0, #2
    74e8:	4798      	blx	r3
    74ea:	bd10      	pop	{r4, pc}
    74ec:	20000f28 	.word	0x20000f28

000074f0 <SERCOM3_Handler>:
    74f0:	b510      	push	{r4, lr}
    74f2:	4b02      	ldr	r3, [pc, #8]	; (74fc <SERCOM3_Handler+0xc>)
    74f4:	68db      	ldr	r3, [r3, #12]
    74f6:	2003      	movs	r0, #3
    74f8:	4798      	blx	r3
    74fa:	bd10      	pop	{r4, pc}
    74fc:	20000f28 	.word	0x20000f28

00007500 <SERCOM4_Handler>:
    7500:	b510      	push	{r4, lr}
    7502:	4b02      	ldr	r3, [pc, #8]	; (750c <SERCOM4_Handler+0xc>)
    7504:	691b      	ldr	r3, [r3, #16]
    7506:	2004      	movs	r0, #4
    7508:	4798      	blx	r3
    750a:	bd10      	pop	{r4, pc}
    750c:	20000f28 	.word	0x20000f28

00007510 <SERCOM5_Handler>:
    7510:	b510      	push	{r4, lr}
    7512:	4b02      	ldr	r3, [pc, #8]	; (751c <SERCOM5_Handler+0xc>)
    7514:	695b      	ldr	r3, [r3, #20]
    7516:	2005      	movs	r0, #5
    7518:	4798      	blx	r3
    751a:	bd10      	pop	{r4, pc}
    751c:	20000f28 	.word	0x20000f28

00007520 <_i2s_interrupt_handler>:
#include "i2s_callback.h"

struct i2s_module *_i2s_instances[I2S_INST_NUM];

static void _i2s_interrupt_handler(const uint8_t instance)
{
    7520:	b5f0      	push	{r4, r5, r6, r7, lr}
    7522:	46c6      	mov	lr, r8
    7524:	b500      	push	{lr}
    7526:	b082      	sub	sp, #8
	struct i2s_module *module = _i2s_instances[instance];
    7528:	0080      	lsls	r0, r0, #2
    752a:	4b84      	ldr	r3, [pc, #528]	; (773c <_i2s_interrupt_handler+0x21c>)
    752c:	58c6      	ldr	r6, [r0, r3]
	struct i2s_serializer_module *data_module;

	/* Get interrupt flags */
	uint32_t intflag = module->hw->INTFLAG.reg;
    752e:	6833      	ldr	r3, [r6, #0]
    7530:	4698      	mov	r8, r3
    7532:	8a9f      	ldrh	r7, [r3, #20]
    7534:	b2bf      	uxth	r7, r7
	uint32_t inten = intflag & module->hw->INTENSET.reg;
    7536:	8a18      	ldrh	r0, [r3, #16]
    7538:	4038      	ands	r0, r7
	uint32_t run_flags = (I2S_INTFLAG_TXUR0 | I2S_INTFLAG_RXOR0);
	uint32_t ready_flags = (I2S_INTFLAG_TXRDY0 | I2S_INTFLAG_RXRDY0);
	uint32_t call_mask;
	uint8_t serializer;

	for (serializer = 0; serializer < 2; serializer ++) {
    753a:	2300      	movs	r3, #0
	uint32_t ready_flags = (I2S_INTFLAG_TXRDY0 | I2S_INTFLAG_RXRDY0);
    753c:	2502      	movs	r5, #2
    753e:	35ff      	adds	r5, #255	; 0xff
	uint32_t run_flags = (I2S_INTFLAG_TXUR0 | I2S_INTFLAG_RXOR0);
    7540:	4c7f      	ldr	r4, [pc, #508]	; (7740 <_i2s_interrupt_handler+0x220>)
	for (serializer = 0; serializer < 2; serializer ++) {
    7542:	e0d0      	b.n	76e6 <_i2s_interrupt_handler+0x1c6>

		if (intflag & (run_flags | ready_flags)) {
			/* Serializer Tx ready */
			if ((I2S_INTFLAG_TXRDY0 << serializer) & inten) {

				if (data_module->transferred_words <
    7544:	00d8      	lsls	r0, r3, #3
    7546:	1ac0      	subs	r0, r0, r3
    7548:	0083      	lsls	r3, r0, #2
    754a:	18f3      	adds	r3, r6, r3
    754c:	6958      	ldr	r0, [r3, #20]
					data_module->requested_words) {
    754e:	691b      	ldr	r3, [r3, #16]
				if (data_module->transferred_words <
    7550:	4298      	cmp	r0, r3
    7552:	d233      	bcs.n	75bc <_i2s_interrupt_handler+0x9c>

					/* Write data word */
					while (module->hw->SYNCBUSY.reg &
    7554:	4643      	mov	r3, r8
    7556:	8b1b      	ldrh	r3, [r3, #24]
    7558:	4213      	tst	r3, r2
    755a:	d1fb      	bne.n	7554 <_i2s_interrupt_handler+0x34>
						(I2S_SYNCBUSY_DATA0 << serializer)) {
						/* Wait sync */
					}
					switch(data_module->data_size) {
    755c:	9b01      	ldr	r3, [sp, #4]
    755e:	00dc      	lsls	r4, r3, #3
    7560:	1ae4      	subs	r4, r4, r3
    7562:	00a3      	lsls	r3, r4, #2
    7564:	18f3      	adds	r3, r6, r3
    7566:	7f1b      	ldrb	r3, [r3, #28]
    7568:	2b03      	cmp	r3, #3
    756a:	d90f      	bls.n	758c <_i2s_interrupt_handler+0x6c>
    756c:	2b05      	cmp	r3, #5
    756e:	d844      	bhi.n	75fa <_i2s_interrupt_handler+0xda>
								[data_module->transferred_words];
						break;
					case I2S_DATA_SIZE_16BIT:
					case I2S_DATA_SIZE_16BIT_COMPACT:
						module->hw->DATA[serializer].reg =
							((uint16_t*)data_module->job_buffer) \
    7570:	9901      	ldr	r1, [sp, #4]
    7572:	00cc      	lsls	r4, r1, #3
    7574:	1a64      	subs	r4, r4, r1
    7576:	00a3      	lsls	r3, r4, #2
    7578:	18f3      	adds	r3, r6, r3
    757a:	68db      	ldr	r3, [r3, #12]
								[data_module->transferred_words];
    757c:	0040      	lsls	r0, r0, #1
    757e:	5ac0      	ldrh	r0, [r0, r3]
						module->hw->DATA[serializer].reg =
    7580:	000b      	movs	r3, r1
    7582:	330c      	adds	r3, #12
    7584:	009b      	lsls	r3, r3, #2
    7586:	4641      	mov	r1, r8
    7588:	5058      	str	r0, [r3, r1]
						break;
    758a:	e00c      	b.n	75a6 <_i2s_interrupt_handler+0x86>
							((uint32_t*)data_module->job_buffer) \
    758c:	9901      	ldr	r1, [sp, #4]
    758e:	00cc      	lsls	r4, r1, #3
    7590:	1a64      	subs	r4, r4, r1
    7592:	00a3      	lsls	r3, r4, #2
    7594:	18f3      	adds	r3, r6, r3
    7596:	68db      	ldr	r3, [r3, #12]
								[data_module->transferred_words];
    7598:	0080      	lsls	r0, r0, #2
    759a:	58c0      	ldr	r0, [r0, r3]
						module->hw->DATA[serializer].reg =
    759c:	000b      	movs	r3, r1
    759e:	330c      	adds	r3, #12
    75a0:	009b      	lsls	r3, r3, #2
    75a2:	4641      	mov	r1, r8
    75a4:	5058      	str	r0, [r3, r1]
						module->hw->DATA[serializer].reg =
							((uint8_t*)data_module->job_buffer) \
								[data_module->transferred_words];
					}
					/* Clear interrupt status */
					module->hw->INTFLAG.reg = I2S_INTFLAG_TXRDY0 << serializer;
    75a6:	b293      	uxth	r3, r2
    75a8:	6831      	ldr	r1, [r6, #0]
    75aa:	828b      	strh	r3, [r1, #20]

					/* Count data */
					data_module->transferred_words ++;
    75ac:	9b01      	ldr	r3, [sp, #4]
    75ae:	00d8      	lsls	r0, r3, #3
    75b0:	1ac0      	subs	r0, r0, r3
    75b2:	0083      	lsls	r3, r0, #2
    75b4:	18f3      	adds	r3, r6, r3
    75b6:	6959      	ldr	r1, [r3, #20]
    75b8:	1c48      	adds	r0, r1, #1
    75ba:	6158      	str	r0, [r3, #20]
				}

				/* Check if the buffer is done */
				if (data_module->transferred_words >=
    75bc:	9901      	ldr	r1, [sp, #4]
    75be:	00c8      	lsls	r0, r1, #3
    75c0:	1a40      	subs	r0, r0, r1
    75c2:	0083      	lsls	r3, r0, #2
    75c4:	18f3      	adds	r3, r6, r3
    75c6:	6958      	ldr	r0, [r3, #20]
					data_module->requested_words) {
    75c8:	691b      	ldr	r3, [r3, #16]
				if (data_module->transferred_words >=
    75ca:	4298      	cmp	r0, r3
    75cc:	d200      	bcs.n	75d0 <_i2s_interrupt_handler+0xb0>
    75ce:	e0b1      	b.n	7734 <_i2s_interrupt_handler+0x214>
					/* It's done */
					data_module->job_status = STATUS_OK;
    75d0:	00c8      	lsls	r0, r1, #3
    75d2:	1a40      	subs	r0, r0, r1
    75d4:	0083      	lsls	r3, r0, #2
    75d6:	18f3      	adds	r3, r6, r3
    75d8:	2000      	movs	r0, #0
    75da:	7698      	strb	r0, [r3, #26]
					/* Disable interrupt */
					module->hw->INTENCLR.reg =
    75dc:	b292      	uxth	r2, r2
    75de:	6833      	ldr	r3, [r6, #0]
    75e0:	819a      	strh	r2, [r3, #12]
							I2S_INTFLAG_TXRDY0 << serializer;
					/* Invoke callback */
					if ((1 << I2S_SERIALIZER_CALLBACK_BUFFER_DONE) &
    75e2:	4663      	mov	r3, ip
    75e4:	07db      	lsls	r3, r3, #31
    75e6:	d400      	bmi.n	75ea <_i2s_interrupt_handler+0xca>
    75e8:	e0a4      	b.n	7734 <_i2s_interrupt_handler+0x214>
						call_mask) {
						(data_module->callback \
							[I2S_SERIALIZER_CALLBACK_BUFFER_DONE])(module);
    75ea:	00ca      	lsls	r2, r1, #3
    75ec:	1a52      	subs	r2, r2, r1
    75ee:	0093      	lsls	r3, r2, #2
    75f0:	18f3      	adds	r3, r6, r3
    75f2:	685b      	ldr	r3, [r3, #4]
    75f4:	0030      	movs	r0, r6
    75f6:	4798      	blx	r3
    75f8:	e09c      	b.n	7734 <_i2s_interrupt_handler+0x214>
							((uint8_t*)data_module->job_buffer) \
    75fa:	9901      	ldr	r1, [sp, #4]
    75fc:	00cc      	lsls	r4, r1, #3
    75fe:	1a64      	subs	r4, r4, r1
    7600:	00a3      	lsls	r3, r4, #2
    7602:	18f3      	adds	r3, r6, r3
    7604:	68db      	ldr	r3, [r3, #12]
								[data_module->transferred_words];
    7606:	5c18      	ldrb	r0, [r3, r0]
						module->hw->DATA[serializer].reg =
    7608:	000b      	movs	r3, r1
    760a:	330c      	adds	r3, #12
    760c:	009b      	lsls	r3, r3, #2
    760e:	4641      	mov	r1, r8
    7610:	5058      	str	r0, [r3, r1]
    7612:	e7c8      	b.n	75a6 <_i2s_interrupt_handler+0x86>
				return;
			}
			/* Serializer Rx ready */
			if ((I2S_INTFLAG_RXRDY0 << serializer) & inten) {
				/* Read data word */
				switch(data_module->data_size) {
    7614:	00c8      	lsls	r0, r1, #3
    7616:	1a40      	subs	r0, r0, r1
    7618:	0083      	lsls	r3, r0, #2
    761a:	18f3      	adds	r3, r6, r3
    761c:	7f1b      	ldrb	r3, [r3, #28]
    761e:	2b03      	cmp	r3, #3
    7620:	d910      	bls.n	7644 <_i2s_interrupt_handler+0x124>
    7622:	2b05      	cmp	r3, #5
    7624:	d844      	bhi.n	76b0 <_i2s_interrupt_handler+0x190>
							[data_module->transferred_words] =
									module->hw->DATA[serializer].reg;
					break;
				case I2S_DATA_SIZE_16BIT:
				case I2S_DATA_SIZE_16BIT_COMPACT:
					((uint16_t*)data_module->job_buffer) \
    7626:	9901      	ldr	r1, [sp, #4]
    7628:	00c8      	lsls	r0, r1, #3
    762a:	1a40      	subs	r0, r0, r1
    762c:	0083      	lsls	r3, r0, #2
    762e:	18f3      	adds	r3, r6, r3
    7630:	68dc      	ldr	r4, [r3, #12]
							[data_module->transferred_words] =
    7632:	695b      	ldr	r3, [r3, #20]
    7634:	005b      	lsls	r3, r3, #1
									(uint16_t)module->hw->DATA[serializer].reg;
    7636:	0008      	movs	r0, r1
    7638:	300c      	adds	r0, #12
    763a:	0080      	lsls	r0, r0, #2
    763c:	4641      	mov	r1, r8
    763e:	5840      	ldr	r0, [r0, r1]
							[data_module->transferred_words] =
    7640:	52e0      	strh	r0, [r4, r3]
					break;
    7642:	e00d      	b.n	7660 <_i2s_interrupt_handler+0x140>
					((uint32_t*)data_module->job_buffer) \
    7644:	9901      	ldr	r1, [sp, #4]
    7646:	00c8      	lsls	r0, r1, #3
    7648:	1a40      	subs	r0, r0, r1
    764a:	0083      	lsls	r3, r0, #2
    764c:	18f3      	adds	r3, r6, r3
    764e:	68dc      	ldr	r4, [r3, #12]
							[data_module->transferred_words] =
    7650:	695b      	ldr	r3, [r3, #20]
    7652:	009b      	lsls	r3, r3, #2
									module->hw->DATA[serializer].reg;
    7654:	0008      	movs	r0, r1
    7656:	300c      	adds	r0, #12
    7658:	0080      	lsls	r0, r0, #2
    765a:	4641      	mov	r1, r8
    765c:	5840      	ldr	r0, [r0, r1]
							[data_module->transferred_words] =
    765e:	50e0      	str	r0, [r4, r3]
							[data_module->transferred_words] =
									(uint8_t)module->hw->DATA[serializer].reg;

				}
				/* Clear interrupt status */
				module->hw->INTFLAG.reg = I2S_INTFLAG_RXRDY0 << serializer;
    7660:	b292      	uxth	r2, r2
    7662:	6833      	ldr	r3, [r6, #0]
    7664:	829a      	strh	r2, [r3, #20]

				/* Count data */
				data_module->transferred_words ++;
    7666:	9901      	ldr	r1, [sp, #4]
    7668:	00c8      	lsls	r0, r1, #3
    766a:	1a40      	subs	r0, r0, r1
    766c:	0083      	lsls	r3, r0, #2
    766e:	18f3      	adds	r3, r6, r3
    7670:	6958      	ldr	r0, [r3, #20]
    7672:	3001      	adds	r0, #1
    7674:	6158      	str	r0, [r3, #20]

				/* Check if the buffer is done */
				if (data_module->transferred_words >=
					data_module->requested_words) {
    7676:	691b      	ldr	r3, [r3, #16]
				if (data_module->transferred_words >=
    7678:	4298      	cmp	r0, r3
    767a:	d35b      	bcc.n	7734 <_i2s_interrupt_handler+0x214>
					if (data_module->job_status == STATUS_BUSY) {
    767c:	00c8      	lsls	r0, r1, #3
    767e:	1a40      	subs	r0, r0, r1
    7680:	0083      	lsls	r3, r0, #2
    7682:	18f3      	adds	r3, r6, r3
    7684:	7e9b      	ldrb	r3, [r3, #26]
    7686:	2b05      	cmp	r3, #5
    7688:	d154      	bne.n	7734 <_i2s_interrupt_handler+0x214>
						data_module->job_status = STATUS_OK;
    768a:	00c8      	lsls	r0, r1, #3
    768c:	1a40      	subs	r0, r0, r1
    768e:	0083      	lsls	r3, r0, #2
    7690:	18f3      	adds	r3, r6, r3
    7692:	2000      	movs	r0, #0
    7694:	7698      	strb	r0, [r3, #26]
						/* Disable interrupt */
						module->hw->INTENCLR.reg =
    7696:	6833      	ldr	r3, [r6, #0]
    7698:	819a      	strh	r2, [r3, #12]
								I2S_INTFLAG_RXRDY0 << serializer;
						/* Invoke callback */
						if ((1 << I2S_SERIALIZER_CALLBACK_BUFFER_DONE) &
    769a:	4663      	mov	r3, ip
    769c:	07db      	lsls	r3, r3, #31
    769e:	d549      	bpl.n	7734 <_i2s_interrupt_handler+0x214>
							call_mask) {
							(data_module->callback \
								[I2S_SERIALIZER_CALLBACK_BUFFER_DONE])(module);
    76a0:	00ca      	lsls	r2, r1, #3
    76a2:	1a52      	subs	r2, r2, r1
    76a4:	0093      	lsls	r3, r2, #2
    76a6:	18f3      	adds	r3, r6, r3
    76a8:	685b      	ldr	r3, [r3, #4]
    76aa:	0030      	movs	r0, r6
    76ac:	4798      	blx	r3
    76ae:	e041      	b.n	7734 <_i2s_interrupt_handler+0x214>
					((uint8_t*)data_module->job_buffer) \
    76b0:	9901      	ldr	r1, [sp, #4]
    76b2:	00c8      	lsls	r0, r1, #3
    76b4:	1a40      	subs	r0, r0, r1
    76b6:	0083      	lsls	r3, r0, #2
    76b8:	18f3      	adds	r3, r6, r3
    76ba:	68dc      	ldr	r4, [r3, #12]
							[data_module->transferred_words] =
    76bc:	6958      	ldr	r0, [r3, #20]
									(uint8_t)module->hw->DATA[serializer].reg;
    76be:	000b      	movs	r3, r1
    76c0:	330c      	adds	r3, #12
    76c2:	009b      	lsls	r3, r3, #2
    76c4:	4641      	mov	r1, r8
    76c6:	585b      	ldr	r3, [r3, r1]
							[data_module->transferred_words] =
    76c8:	5423      	strb	r3, [r4, r0]
    76ca:	e7c9      	b.n	7660 <_i2s_interrupt_handler+0x140>
			if (run_flags & inten) {
				module->hw->INTFLAG.reg = I2S_INTFLAG_TXUR0 << serializer;
				if ((1 << I2S_SERIALIZER_CALLBACK_OVER_UNDER_RUN) &
					call_mask) {
					(data_module->callback \
						[I2S_SERIALIZER_CALLBACK_OVER_UNDER_RUN])(module);
    76cc:	9b01      	ldr	r3, [sp, #4]
    76ce:	00da      	lsls	r2, r3, #3
    76d0:	1ad2      	subs	r2, r2, r3
    76d2:	0093      	lsls	r3, r2, #2
    76d4:	18f3      	adds	r3, r6, r3
    76d6:	689b      	ldr	r3, [r3, #8]
    76d8:	0030      	movs	r0, r6
    76da:	4798      	blx	r3
    76dc:	e02a      	b.n	7734 <_i2s_interrupt_handler+0x214>
				}
				return;
			}
		}
		run_flags <<= 1;
    76de:	0064      	lsls	r4, r4, #1
		ready_flags <<= 1;
    76e0:	006d      	lsls	r5, r5, #1
	for (serializer = 0; serializer < 2; serializer ++) {
    76e2:	3301      	adds	r3, #1
    76e4:	b2db      	uxtb	r3, r3
    76e6:	2b01      	cmp	r3, #1
    76e8:	d824      	bhi.n	7734 <_i2s_interrupt_handler+0x214>
		data_module = &module->serializer[serializer];
    76ea:	9301      	str	r3, [sp, #4]
		call_mask = data_module->registered_callback_mask &
    76ec:	00d9      	lsls	r1, r3, #3
    76ee:	1ac9      	subs	r1, r1, r3
    76f0:	008a      	lsls	r2, r1, #2
    76f2:	18b2      	adds	r2, r6, r2
    76f4:	7e11      	ldrb	r1, [r2, #24]
				data_module->enabled_callback_mask;
    76f6:	7e52      	ldrb	r2, [r2, #25]
		call_mask = data_module->registered_callback_mask &
    76f8:	4011      	ands	r1, r2
    76fa:	468c      	mov	ip, r1
		if (intflag & (run_flags | ready_flags)) {
    76fc:	0022      	movs	r2, r4
    76fe:	432a      	orrs	r2, r5
    7700:	423a      	tst	r2, r7
    7702:	d0ec      	beq.n	76de <_i2s_interrupt_handler+0x1be>
			if ((I2S_INTFLAG_TXRDY0 << serializer) & inten) {
    7704:	2280      	movs	r2, #128	; 0x80
    7706:	0052      	lsls	r2, r2, #1
    7708:	409a      	lsls	r2, r3
    770a:	4202      	tst	r2, r0
    770c:	d000      	beq.n	7710 <_i2s_interrupt_handler+0x1f0>
    770e:	e719      	b.n	7544 <_i2s_interrupt_handler+0x24>
			if ((I2S_INTFLAG_RXRDY0 << serializer) & inten) {
    7710:	2201      	movs	r2, #1
    7712:	9901      	ldr	r1, [sp, #4]
    7714:	408a      	lsls	r2, r1
    7716:	4202      	tst	r2, r0
    7718:	d000      	beq.n	771c <_i2s_interrupt_handler+0x1fc>
    771a:	e77b      	b.n	7614 <_i2s_interrupt_handler+0xf4>
			if (run_flags & inten) {
    771c:	4220      	tst	r0, r4
    771e:	d0de      	beq.n	76de <_i2s_interrupt_handler+0x1be>
				module->hw->INTFLAG.reg = I2S_INTFLAG_TXUR0 << serializer;
    7720:	2380      	movs	r3, #128	; 0x80
    7722:	015b      	lsls	r3, r3, #5
    7724:	9a01      	ldr	r2, [sp, #4]
    7726:	4093      	lsls	r3, r2
    7728:	b29b      	uxth	r3, r3
    772a:	4642      	mov	r2, r8
    772c:	8293      	strh	r3, [r2, #20]
				if ((1 << I2S_SERIALIZER_CALLBACK_OVER_UNDER_RUN) &
    772e:	4663      	mov	r3, ip
    7730:	079b      	lsls	r3, r3, #30
    7732:	d4cb      	bmi.n	76cc <_i2s_interrupt_handler+0x1ac>
	}

}
    7734:	b002      	add	sp, #8
    7736:	bc04      	pop	{r2}
    7738:	4690      	mov	r8, r2
    773a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    773c:	200029cc 	.word	0x200029cc
    7740:	00001010 	.word	0x00001010

00007744 <I2S_Handler>:

/** Interrupt handler for the I<SUP>2</SUP>S module */
void I2S_Handler(void)
{
    7744:	b510      	push	{r4, lr}
	_i2s_interrupt_handler(0);
    7746:	2000      	movs	r0, #0
    7748:	4b01      	ldr	r3, [pc, #4]	; (7750 <I2S_Handler+0xc>)
    774a:	4798      	blx	r3
}
    774c:	bd10      	pop	{r4, pc}
    774e:	46c0      	nop			; (mov r8, r8)
    7750:	00007521 	.word	0x00007521

00007754 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    7754:	b510      	push	{r4, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    7756:	2200      	movs	r2, #0
    7758:	4b0f      	ldr	r3, [pc, #60]	; (7798 <EIC_Handler+0x44>)
    775a:	701a      	strb	r2, [r3, #0]
    775c:	e005      	b.n	776a <EIC_Handler+0x16>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    775e:	480f      	ldr	r0, [pc, #60]	; (779c <EIC_Handler+0x48>)
    7760:	e00a      	b.n	7778 <EIC_Handler+0x24>
    7762:	4a0d      	ldr	r2, [pc, #52]	; (7798 <EIC_Handler+0x44>)
    7764:	7813      	ldrb	r3, [r2, #0]
    7766:	3301      	adds	r3, #1
    7768:	7013      	strb	r3, [r2, #0]
    776a:	4b0b      	ldr	r3, [pc, #44]	; (7798 <EIC_Handler+0x44>)
    776c:	781b      	ldrb	r3, [r3, #0]
    776e:	2b0f      	cmp	r3, #15
    7770:	d811      	bhi.n	7796 <EIC_Handler+0x42>
	if (eic_index < EIC_INST_NUM) {
    7772:	2b1f      	cmp	r3, #31
    7774:	d9f3      	bls.n	775e <EIC_Handler+0xa>
	} else {
		Assert(false);
		return NULL;
    7776:	2000      	movs	r0, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    7778:	211f      	movs	r1, #31
    777a:	4019      	ands	r1, r3
    777c:	2201      	movs	r2, #1
    777e:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    7780:	6901      	ldr	r1, [r0, #16]
		if (extint_chan_is_detected(_current_channel)) {
    7782:	4211      	tst	r1, r2
    7784:	d0ed      	beq.n	7762 <EIC_Handler+0xe>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    7786:	6102      	str	r2, [r0, #16]
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    7788:	009b      	lsls	r3, r3, #2
    778a:	4a05      	ldr	r2, [pc, #20]	; (77a0 <EIC_Handler+0x4c>)
    778c:	589b      	ldr	r3, [r3, r2]
    778e:	2b00      	cmp	r3, #0
    7790:	d0e7      	beq.n	7762 <EIC_Handler+0xe>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    7792:	4798      	blx	r3
    7794:	e7e5      	b.n	7762 <EIC_Handler+0xe>
			}
		}
	}
}
    7796:	bd10      	pop	{r4, pc}
    7798:	200029d0 	.word	0x200029d0
    779c:	40001800 	.word	0x40001800
    77a0:	200025e0 	.word	0x200025e0

000077a4 <ac_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    77a4:	0093      	lsls	r3, r2, #2
    77a6:	18c3      	adds	r3, r0, r3
    77a8:	6059      	str	r1, [r3, #4]

	/* Set software flag for callback */
	module->register_callback_mask |= (1 << callback_type);
    77aa:	2301      	movs	r3, #1
    77ac:	4093      	lsls	r3, r2
    77ae:	001a      	movs	r2, r3
    77b0:	7e03      	ldrb	r3, [r0, #24]
    77b2:	4313      	orrs	r3, r2
    77b4:	7603      	strb	r3, [r0, #24]

	return STATUS_OK;
}
    77b6:	2000      	movs	r0, #0
    77b8:	4770      	bx	lr
	...

000077bc <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
    77bc:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
    77be:	0080      	lsls	r0, r0, #2
    77c0:	4b11      	ldr	r3, [pc, #68]	; (7808 <_ac_interrupt_handler+0x4c>)
    77c2:	58c4      	ldr	r4, [r0, r3]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
    77c4:	6823      	ldr	r3, [r4, #0]
    77c6:	799d      	ldrb	r5, [r3, #6]
			(module->register_callback_mask & module->enable_callback_mask);
    77c8:	7e22      	ldrb	r2, [r4, #24]
    77ca:	7e63      	ldrb	r3, [r4, #25]
	interrupt_and_callback_status_mask =
    77cc:	4013      	ands	r3, r2
    77ce:	401d      	ands	r5, r3

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
    77d0:	07eb      	lsls	r3, r5, #31
    77d2:	d404      	bmi.n	77de <_ac_interrupt_handler+0x22>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
    77d4:	07ab      	lsls	r3, r5, #30
    77d6:	d409      	bmi.n	77ec <_ac_interrupt_handler+0x30>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
    77d8:	06eb      	lsls	r3, r5, #27
    77da:	d40e      	bmi.n	77fa <_ac_interrupt_handler+0x3e>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#  endif
#endif /* (AC_NUM_CMP > 2) */
}
    77dc:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
    77de:	0020      	movs	r0, r4
    77e0:	6863      	ldr	r3, [r4, #4]
    77e2:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
    77e4:	2301      	movs	r3, #1
    77e6:	6822      	ldr	r2, [r4, #0]
    77e8:	7193      	strb	r3, [r2, #6]
    77ea:	e7f3      	b.n	77d4 <_ac_interrupt_handler+0x18>
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
    77ec:	0020      	movs	r0, r4
    77ee:	68a3      	ldr	r3, [r4, #8]
    77f0:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
    77f2:	2302      	movs	r3, #2
    77f4:	6822      	ldr	r2, [r4, #0]
    77f6:	7193      	strb	r3, [r2, #6]
    77f8:	e7ee      	b.n	77d8 <_ac_interrupt_handler+0x1c>
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
    77fa:	0020      	movs	r0, r4
    77fc:	6963      	ldr	r3, [r4, #20]
    77fe:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
    7800:	6823      	ldr	r3, [r4, #0]
    7802:	2210      	movs	r2, #16
    7804:	719a      	strb	r2, [r3, #6]
}
    7806:	e7e9      	b.n	77dc <_ac_interrupt_handler+0x20>
    7808:	200029d4 	.word	0x200029d4

0000780c <AC_Handler>:
{
    780c:	b510      	push	{r4, lr}
	_ac_interrupt_handler(0);
    780e:	2000      	movs	r0, #0
    7810:	4b01      	ldr	r3, [pc, #4]	; (7818 <AC_Handler+0xc>)
    7812:	4798      	blx	r3
}
    7814:	bd10      	pop	{r4, pc}
    7816:	46c0      	nop			; (mov r8, r8)
    7818:	000077bd 	.word	0x000077bd

0000781c <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
    781c:	4a02      	ldr	r2, [pc, #8]	; (7828 <udi_cdc_comm_disable+0xc>)
    781e:	7813      	ldrb	r3, [r2, #0]
    7820:	3b01      	subs	r3, #1
    7822:	b2db      	uxtb	r3, r3
    7824:	7013      	strb	r3, [r2, #0]
}
    7826:	4770      	bx	lr
    7828:	20000f4b 	.word	0x20000f4b

0000782c <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
    782c:	2000      	movs	r0, #0
    782e:	4770      	bx	lr

00007830 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
    7830:	2000      	movs	r0, #0
    7832:	4770      	bx	lr

00007834 <udi_cdc_setup_to_port>:
	default:
		port = 0;
		break;
	}
	return port;
}
    7834:	2000      	movs	r0, #0
    7836:	4770      	bx	lr

00007838 <udi_cdc_comm_setup>:
{
    7838:	b510      	push	{r4, lr}
	uint8_t port = udi_cdc_setup_to_port();
    783a:	4b22      	ldr	r3, [pc, #136]	; (78c4 <udi_cdc_comm_setup+0x8c>)
    783c:	4798      	blx	r3
	if (Udd_setup_is_in()) {
    783e:	4b22      	ldr	r3, [pc, #136]	; (78c8 <udi_cdc_comm_setup+0x90>)
    7840:	781b      	ldrb	r3, [r3, #0]
    7842:	b25a      	sxtb	r2, r3
    7844:	2a00      	cmp	r2, #0
    7846:	db07      	blt.n	7858 <udi_cdc_comm_setup+0x20>
	if (Udd_setup_is_out()) {
    7848:	2a00      	cmp	r2, #0
    784a:	db37      	blt.n	78bc <udi_cdc_comm_setup+0x84>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    784c:	2260      	movs	r2, #96	; 0x60
    784e:	4013      	ands	r3, r2
    7850:	2b20      	cmp	r3, #32
    7852:	d019      	beq.n	7888 <udi_cdc_comm_setup+0x50>
	return false;  // request Not supported
    7854:	2000      	movs	r0, #0
}
    7856:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    7858:	2160      	movs	r1, #96	; 0x60
    785a:	4019      	ands	r1, r3
    785c:	2920      	cmp	r1, #32
    785e:	d1f3      	bne.n	7848 <udi_cdc_comm_setup+0x10>
			switch (udd_g_ctrlreq.req.bRequest) {
    7860:	4919      	ldr	r1, [pc, #100]	; (78c8 <udi_cdc_comm_setup+0x90>)
    7862:	7849      	ldrb	r1, [r1, #1]
    7864:	2921      	cmp	r1, #33	; 0x21
    7866:	d1ef      	bne.n	7848 <udi_cdc_comm_setup+0x10>
						udd_g_ctrlreq.req.wLength)
    7868:	4b17      	ldr	r3, [pc, #92]	; (78c8 <udi_cdc_comm_setup+0x90>)
    786a:	88db      	ldrh	r3, [r3, #6]
				if (sizeof(usb_cdc_line_coding_t) !=
    786c:	2b07      	cmp	r3, #7
    786e:	d001      	beq.n	7874 <udi_cdc_comm_setup+0x3c>
					return false; // Error for USB host
    7870:	2000      	movs	r0, #0
    7872:	e7f0      	b.n	7856 <udi_cdc_comm_setup+0x1e>
						(uint8_t *) &
    7874:	00c3      	lsls	r3, r0, #3
    7876:	1a1b      	subs	r3, r3, r0
    7878:	4814      	ldr	r0, [pc, #80]	; (78cc <udi_cdc_comm_setup+0x94>)
    787a:	18c0      	adds	r0, r0, r3
				udd_g_ctrlreq.payload =
    787c:	4b12      	ldr	r3, [pc, #72]	; (78c8 <udi_cdc_comm_setup+0x90>)
    787e:	6098      	str	r0, [r3, #8]
				udd_g_ctrlreq.payload_size =
    7880:	2207      	movs	r2, #7
    7882:	819a      	strh	r2, [r3, #12]
				return true;
    7884:	2001      	movs	r0, #1
    7886:	e7e6      	b.n	7856 <udi_cdc_comm_setup+0x1e>
			switch (udd_g_ctrlreq.req.bRequest) {
    7888:	4b0f      	ldr	r3, [pc, #60]	; (78c8 <udi_cdc_comm_setup+0x90>)
    788a:	785b      	ldrb	r3, [r3, #1]
    788c:	2b20      	cmp	r3, #32
    788e:	d003      	beq.n	7898 <udi_cdc_comm_setup+0x60>
    7890:	2b22      	cmp	r3, #34	; 0x22
    7892:	d115      	bne.n	78c0 <udi_cdc_comm_setup+0x88>
				return true;
    7894:	2001      	movs	r0, #1
    7896:	e7de      	b.n	7856 <udi_cdc_comm_setup+0x1e>
						udd_g_ctrlreq.req.wLength)
    7898:	4b0b      	ldr	r3, [pc, #44]	; (78c8 <udi_cdc_comm_setup+0x90>)
    789a:	88db      	ldrh	r3, [r3, #6]
				if (sizeof(usb_cdc_line_coding_t) !=
    789c:	2b07      	cmp	r3, #7
    789e:	d001      	beq.n	78a4 <udi_cdc_comm_setup+0x6c>
					return false; // Error for USB host
    78a0:	2000      	movs	r0, #0
    78a2:	e7d8      	b.n	7856 <udi_cdc_comm_setup+0x1e>
				udd_g_ctrlreq.callback =
    78a4:	4b08      	ldr	r3, [pc, #32]	; (78c8 <udi_cdc_comm_setup+0x90>)
    78a6:	4a0a      	ldr	r2, [pc, #40]	; (78d0 <udi_cdc_comm_setup+0x98>)
    78a8:	611a      	str	r2, [r3, #16]
						(uint8_t *) &
    78aa:	00c2      	lsls	r2, r0, #3
    78ac:	1a12      	subs	r2, r2, r0
    78ae:	4807      	ldr	r0, [pc, #28]	; (78cc <udi_cdc_comm_setup+0x94>)
    78b0:	1880      	adds	r0, r0, r2
				udd_g_ctrlreq.payload =
    78b2:	6098      	str	r0, [r3, #8]
				udd_g_ctrlreq.payload_size =
    78b4:	2207      	movs	r2, #7
    78b6:	819a      	strh	r2, [r3, #12]
				return true;
    78b8:	2001      	movs	r0, #1
    78ba:	e7cc      	b.n	7856 <udi_cdc_comm_setup+0x1e>
	return false;  // request Not supported
    78bc:	2000      	movs	r0, #0
    78be:	e7ca      	b.n	7856 <udi_cdc_comm_setup+0x1e>
    78c0:	2000      	movs	r0, #0
    78c2:	e7c8      	b.n	7856 <udi_cdc_comm_setup+0x1e>
    78c4:	00007835 	.word	0x00007835
    78c8:	20002858 	.word	0x20002858
    78cc:	20000f44 	.word	0x20000f44
    78d0:	000078d5 	.word	0x000078d5

000078d4 <udi_cdc_line_coding_received>:
{
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
    78d4:	4770      	bx	lr
	...

000078d8 <udi_cdc_comm_enable>:
{
    78d8:	b510      	push	{r4, lr}
	udi_cdc_nb_comm_enabled = 0;
    78da:	2200      	movs	r2, #0
    78dc:	4b10      	ldr	r3, [pc, #64]	; (7920 <udi_cdc_comm_enable+0x48>)
    78de:	701a      	strb	r2, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
    78e0:	2100      	movs	r1, #0
    78e2:	4b10      	ldr	r3, [pc, #64]	; (7924 <udi_cdc_comm_enable+0x4c>)
    78e4:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
    78e6:	4b10      	ldr	r3, [pc, #64]	; (7928 <udi_cdc_comm_enable+0x50>)
    78e8:	20a1      	movs	r0, #161	; 0xa1
    78ea:	7018      	strb	r0, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
    78ec:	3881      	subs	r0, #129	; 0x81
    78ee:	7058      	strb	r0, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
    78f0:	805a      	strh	r2, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
    78f2:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
    78f4:	381e      	subs	r0, #30
    78f6:	80d8      	strh	r0, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
    78f8:	811a      	strh	r2, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    78fa:	4b0c      	ldr	r3, [pc, #48]	; (792c <udi_cdc_comm_enable+0x54>)
    78fc:	22e1      	movs	r2, #225	; 0xe1
    78fe:	0252      	lsls	r2, r2, #9
    7900:	601a      	str	r2, [r3, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
    7902:	7119      	strb	r1, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
    7904:	7159      	strb	r1, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
    7906:	2208      	movs	r2, #8
    7908:	719a      	strb	r2, [r3, #6]
	if (!UDI_CDC_ENABLE_EXT(port)) {
    790a:	4b09      	ldr	r3, [pc, #36]	; (7930 <udi_cdc_comm_enable+0x58>)
    790c:	4798      	blx	r3
    790e:	2800      	cmp	r0, #0
    7910:	d004      	beq.n	791c <udi_cdc_comm_enable+0x44>
	udi_cdc_nb_comm_enabled++;
    7912:	4a03      	ldr	r2, [pc, #12]	; (7920 <udi_cdc_comm_enable+0x48>)
    7914:	7813      	ldrb	r3, [r2, #0]
    7916:	3301      	adds	r3, #1
    7918:	b2db      	uxtb	r3, r3
    791a:	7013      	strb	r3, [r2, #0]
}
    791c:	bd10      	pop	{r4, pc}
    791e:	46c0      	nop			; (mov r8, r8)
    7920:	20000f4b 	.word	0x20000f4b
    7924:	20000fe0 	.word	0x20000fe0
    7928:	20001078 	.word	0x20001078
    792c:	20000f44 	.word	0x20000f44
    7930:	00002e2d 	.word	0x00002e2d

00007934 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
    7934:	b530      	push	{r4, r5, lr}
    7936:	b085      	sub	sp, #20

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
    7938:	4b46      	ldr	r3, [pc, #280]	; (7a54 <udi_cdc_tx_send+0x120>)
    793a:	781b      	ldrb	r3, [r3, #0]
    793c:	2b00      	cmp	r3, #0
    793e:	d001      	beq.n	7944 <udi_cdc_tx_send+0x10>
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
    7940:	b005      	add	sp, #20
    7942:	bd30      	pop	{r4, r5, pc}
	if (udd_is_high_speed()) {
    7944:	4b44      	ldr	r3, [pc, #272]	; (7a58 <udi_cdc_tx_send+0x124>)
    7946:	4798      	blx	r3
    7948:	2800      	cmp	r0, #0
    794a:	d043      	beq.n	79d4 <udi_cdc_tx_send+0xa0>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
    794c:	4b43      	ldr	r3, [pc, #268]	; (7a5c <udi_cdc_tx_send+0x128>)
    794e:	881c      	ldrh	r4, [r3, #0]
    7950:	4b43      	ldr	r3, [pc, #268]	; (7a60 <udi_cdc_tx_send+0x12c>)
    7952:	4798      	blx	r3
    7954:	4284      	cmp	r4, r0
    7956:	d0f3      	beq.n	7940 <udi_cdc_tx_send+0xc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7958:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    795c:	425a      	negs	r2, r3
    795e:	4153      	adcs	r3, r2
    7960:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    7962:	b672      	cpsid	i
    7964:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    7968:	2200      	movs	r2, #0
    796a:	4b3e      	ldr	r3, [pc, #248]	; (7a64 <udi_cdc_tx_send+0x130>)
    796c:	701a      	strb	r2, [r3, #0]
	return flags;
    796e:	9d03      	ldr	r5, [sp, #12]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
    7970:	4b3d      	ldr	r3, [pc, #244]	; (7a68 <udi_cdc_tx_send+0x134>)
    7972:	781c      	ldrb	r4, [r3, #0]
    7974:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
    7976:	0062      	lsls	r2, r4, #1
    7978:	4b3c      	ldr	r3, [pc, #240]	; (7a6c <udi_cdc_tx_send+0x138>)
    797a:	5ad3      	ldrh	r3, [r2, r3]
    797c:	2b00      	cmp	r3, #0
    797e:	d030      	beq.n	79e2 <udi_cdc_tx_send+0xae>
	sof_zlp_counter = 0;
    7980:	2200      	movs	r2, #0
    7982:	4b3b      	ldr	r3, [pc, #236]	; (7a70 <udi_cdc_tx_send+0x13c>)
    7984:	801a      	strh	r2, [r3, #0]
	if (!udi_cdc_tx_both_buf_to_send[port]) {
    7986:	4b3b      	ldr	r3, [pc, #236]	; (7a74 <udi_cdc_tx_send+0x140>)
    7988:	781b      	ldrb	r3, [r3, #0]
    798a:	2b00      	cmp	r3, #0
    798c:	d148      	bne.n	7a20 <udi_cdc_tx_send+0xec>
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    798e:	4263      	negs	r3, r4
    7990:	4163      	adcs	r3, r4
    7992:	b2db      	uxtb	r3, r3
    7994:	4a34      	ldr	r2, [pc, #208]	; (7a68 <udi_cdc_tx_send+0x134>)
    7996:	7013      	strb	r3, [r2, #0]
	udi_cdc_tx_trans_ongoing[port] = true;
    7998:	2201      	movs	r2, #1
    799a:	4b2e      	ldr	r3, [pc, #184]	; (7a54 <udi_cdc_tx_send+0x120>)
    799c:	701a      	strb	r2, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
    799e:	2d00      	cmp	r5, #0
    79a0:	d004      	beq.n	79ac <udi_cdc_tx_send+0x78>
		cpu_irq_enable();
    79a2:	4b30      	ldr	r3, [pc, #192]	; (7a64 <udi_cdc_tx_send+0x130>)
    79a4:	701a      	strb	r2, [r3, #0]
    79a6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    79aa:	b662      	cpsie	i
	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
    79ac:	0025      	movs	r5, r4
    79ae:	0064      	lsls	r4, r4, #1
    79b0:	4b2e      	ldr	r3, [pc, #184]	; (7a6c <udi_cdc_tx_send+0x138>)
    79b2:	5ae3      	ldrh	r3, [r4, r3]
    79b4:	0019      	movs	r1, r3
    79b6:	3940      	subs	r1, #64	; 0x40
    79b8:	1e4a      	subs	r2, r1, #1
    79ba:	4191      	sbcs	r1, r2
    79bc:	b2cc      	uxtb	r4, r1
	if (b_short_packet) {
    79be:	2b40      	cmp	r3, #64	; 0x40
    79c0:	d037      	beq.n	7a32 <udi_cdc_tx_send+0xfe>
		if (udd_is_high_speed()) {
    79c2:	4b25      	ldr	r3, [pc, #148]	; (7a58 <udi_cdc_tx_send+0x124>)
    79c4:	4798      	blx	r3
    79c6:	2800      	cmp	r0, #0
    79c8:	d02e      	beq.n	7a28 <udi_cdc_tx_send+0xf4>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
    79ca:	4b25      	ldr	r3, [pc, #148]	; (7a60 <udi_cdc_tx_send+0x12c>)
    79cc:	4798      	blx	r3
    79ce:	4b23      	ldr	r3, [pc, #140]	; (7a5c <udi_cdc_tx_send+0x128>)
    79d0:	8018      	strh	r0, [r3, #0]
    79d2:	e031      	b.n	7a38 <udi_cdc_tx_send+0x104>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
    79d4:	4b21      	ldr	r3, [pc, #132]	; (7a5c <udi_cdc_tx_send+0x128>)
    79d6:	881c      	ldrh	r4, [r3, #0]
    79d8:	4b27      	ldr	r3, [pc, #156]	; (7a78 <udi_cdc_tx_send+0x144>)
    79da:	4798      	blx	r3
    79dc:	4284      	cmp	r4, r0
    79de:	d1bb      	bne.n	7958 <udi_cdc_tx_send+0x24>
    79e0:	e7ae      	b.n	7940 <udi_cdc_tx_send+0xc>
		sof_zlp_counter++;
    79e2:	4a23      	ldr	r2, [pc, #140]	; (7a70 <udi_cdc_tx_send+0x13c>)
    79e4:	8813      	ldrh	r3, [r2, #0]
    79e6:	3301      	adds	r3, #1
    79e8:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
    79ea:	4b1b      	ldr	r3, [pc, #108]	; (7a58 <udi_cdc_tx_send+0x124>)
    79ec:	4798      	blx	r3
    79ee:	2800      	cmp	r0, #0
    79f0:	d103      	bne.n	79fa <udi_cdc_tx_send+0xc6>
    79f2:	4b1f      	ldr	r3, [pc, #124]	; (7a70 <udi_cdc_tx_send+0x13c>)
    79f4:	881b      	ldrh	r3, [r3, #0]
    79f6:	2b63      	cmp	r3, #99	; 0x63
    79f8:	d908      	bls.n	7a0c <udi_cdc_tx_send+0xd8>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
    79fa:	4b17      	ldr	r3, [pc, #92]	; (7a58 <udi_cdc_tx_send+0x124>)
    79fc:	4798      	blx	r3
    79fe:	2800      	cmp	r0, #0
    7a00:	d0be      	beq.n	7980 <udi_cdc_tx_send+0x4c>
    7a02:	4b1b      	ldr	r3, [pc, #108]	; (7a70 <udi_cdc_tx_send+0x13c>)
    7a04:	881a      	ldrh	r2, [r3, #0]
    7a06:	4b1d      	ldr	r3, [pc, #116]	; (7a7c <udi_cdc_tx_send+0x148>)
    7a08:	429a      	cmp	r2, r3
    7a0a:	d8b9      	bhi.n	7980 <udi_cdc_tx_send+0x4c>
	if (cpu_irq_is_enabled_flags(flags))
    7a0c:	2d00      	cmp	r5, #0
    7a0e:	d100      	bne.n	7a12 <udi_cdc_tx_send+0xde>
    7a10:	e796      	b.n	7940 <udi_cdc_tx_send+0xc>
		cpu_irq_enable();
    7a12:	2201      	movs	r2, #1
    7a14:	4b13      	ldr	r3, [pc, #76]	; (7a64 <udi_cdc_tx_send+0x130>)
    7a16:	701a      	strb	r2, [r3, #0]
    7a18:	f3bf 8f5f 	dmb	sy
    7a1c:	b662      	cpsie	i
    7a1e:	e78f      	b.n	7940 <udi_cdc_tx_send+0xc>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
    7a20:	4263      	negs	r3, r4
    7a22:	415c      	adcs	r4, r3
    7a24:	b2e4      	uxtb	r4, r4
    7a26:	e7b7      	b.n	7998 <udi_cdc_tx_send+0x64>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
    7a28:	4b13      	ldr	r3, [pc, #76]	; (7a78 <udi_cdc_tx_send+0x144>)
    7a2a:	4798      	blx	r3
    7a2c:	4b0b      	ldr	r3, [pc, #44]	; (7a5c <udi_cdc_tx_send+0x128>)
    7a2e:	8018      	strh	r0, [r3, #0]
    7a30:	e002      	b.n	7a38 <udi_cdc_tx_send+0x104>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
    7a32:	2200      	movs	r2, #0
    7a34:	4b09      	ldr	r3, [pc, #36]	; (7a5c <udi_cdc_tx_send+0x128>)
    7a36:	801a      	strh	r2, [r3, #0]
			udi_cdc_tx_buf[port][buf_sel_trans],
    7a38:	01ab      	lsls	r3, r5, #6
    7a3a:	4a11      	ldr	r2, [pc, #68]	; (7a80 <udi_cdc_tx_send+0x14c>)
    7a3c:	18d2      	adds	r2, r2, r3
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
    7a3e:	006d      	lsls	r5, r5, #1
    7a40:	490a      	ldr	r1, [pc, #40]	; (7a6c <udi_cdc_tx_send+0x138>)
    7a42:	5a6b      	ldrh	r3, [r5, r1]
	udd_ep_run( ep,
    7a44:	490f      	ldr	r1, [pc, #60]	; (7a84 <udi_cdc_tx_send+0x150>)
    7a46:	9100      	str	r1, [sp, #0]
    7a48:	0021      	movs	r1, r4
    7a4a:	2081      	movs	r0, #129	; 0x81
    7a4c:	4c0e      	ldr	r4, [pc, #56]	; (7a88 <udi_cdc_tx_send+0x154>)
    7a4e:	47a0      	blx	r4
    7a50:	e776      	b.n	7940 <udi_cdc_tx_send+0xc>
    7a52:	46c0      	nop			; (mov r8, r8)
    7a54:	20001074 	.word	0x20001074
    7a58:	000055a5 	.word	0x000055a5
    7a5c:	20001070 	.word	0x20001070
    7a60:	000055b9 	.word	0x000055b9
    7a64:	20000108 	.word	0x20000108
    7a68:	2000106c 	.word	0x2000106c
    7a6c:	20001068 	.word	0x20001068
    7a70:	20000f40 	.word	0x20000f40
    7a74:	20000fe4 	.word	0x20000fe4
    7a78:	000055a9 	.word	0x000055a9
    7a7c:	0000031f 	.word	0x0000031f
    7a80:	20000fe8 	.word	0x20000fe8
    7a84:	00007a8d 	.word	0x00007a8d
    7a88:	000058cd 	.word	0x000058cd

00007a8c <udi_cdc_data_sent>:
{
    7a8c:	b510      	push	{r4, lr}
	if (UDD_EP_TRANSFER_OK != status) {
    7a8e:	2800      	cmp	r0, #0
    7a90:	d000      	beq.n	7a94 <udi_cdc_data_sent+0x8>
}
    7a92:	bd10      	pop	{r4, pc}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
    7a94:	4b07      	ldr	r3, [pc, #28]	; (7ab4 <udi_cdc_data_sent+0x28>)
    7a96:	781b      	ldrb	r3, [r3, #0]
    7a98:	425a      	negs	r2, r3
    7a9a:	4153      	adcs	r3, r2
    7a9c:	005b      	lsls	r3, r3, #1
    7a9e:	2200      	movs	r2, #0
    7aa0:	4905      	ldr	r1, [pc, #20]	; (7ab8 <udi_cdc_data_sent+0x2c>)
    7aa2:	5258      	strh	r0, [r3, r1]
	udi_cdc_tx_both_buf_to_send[port] = false;
    7aa4:	4b05      	ldr	r3, [pc, #20]	; (7abc <udi_cdc_data_sent+0x30>)
    7aa6:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
    7aa8:	4b05      	ldr	r3, [pc, #20]	; (7ac0 <udi_cdc_data_sent+0x34>)
    7aaa:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_send(port);
    7aac:	4b05      	ldr	r3, [pc, #20]	; (7ac4 <udi_cdc_data_sent+0x38>)
    7aae:	4798      	blx	r3
    7ab0:	e7ef      	b.n	7a92 <udi_cdc_data_sent+0x6>
    7ab2:	46c0      	nop			; (mov r8, r8)
    7ab4:	2000106c 	.word	0x2000106c
    7ab8:	20001068 	.word	0x20001068
    7abc:	20000fe4 	.word	0x20000fe4
    7ac0:	20001074 	.word	0x20001074
    7ac4:	00007935 	.word	0x00007935

00007ac8 <udi_cdc_data_sof_notify>:
{
    7ac8:	b510      	push	{r4, lr}
	udi_cdc_tx_send(port_notify);
    7aca:	2000      	movs	r0, #0
    7acc:	4b01      	ldr	r3, [pc, #4]	; (7ad4 <udi_cdc_data_sof_notify+0xc>)
    7ace:	4798      	blx	r3
}
    7ad0:	bd10      	pop	{r4, pc}
    7ad2:	46c0      	nop			; (mov r8, r8)
    7ad4:	00007935 	.word	0x00007935

00007ad8 <udi_cdc_data_disable>:
{
    7ad8:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled--;
    7ada:	4a05      	ldr	r2, [pc, #20]	; (7af0 <udi_cdc_data_disable+0x18>)
    7adc:	7813      	ldrb	r3, [r2, #0]
    7ade:	3b01      	subs	r3, #1
    7ae0:	b2db      	uxtb	r3, r3
    7ae2:	7013      	strb	r3, [r2, #0]
	UDI_CDC_DISABLE_EXT(udi_cdc_nb_data_enabled);
    7ae4:	4b03      	ldr	r3, [pc, #12]	; (7af4 <udi_cdc_data_disable+0x1c>)
    7ae6:	4798      	blx	r3
	udi_cdc_data_running = false;
    7ae8:	2200      	movs	r2, #0
    7aea:	4b03      	ldr	r3, [pc, #12]	; (7af8 <udi_cdc_data_disable+0x20>)
    7aec:	701a      	strb	r2, [r3, #0]
}
    7aee:	bd10      	pop	{r4, pc}
    7af0:	20000f4c 	.word	0x20000f4c
    7af4:	00002e31 	.word	0x00002e31
    7af8:	20000f42 	.word	0x20000f42

00007afc <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
    7afc:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7afe:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    7b02:	425a      	negs	r2, r3
    7b04:	4153      	adcs	r3, r2
    7b06:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    7b08:	b672      	cpsid	i
    7b0a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    7b0e:	2200      	movs	r2, #0
    7b10:	4b0a      	ldr	r3, [pc, #40]	; (7b3c <udi_cdc_multi_get_nb_received_data+0x40>)
    7b12:	701a      	strb	r2, [r3, #0]
	return flags;
    7b14:	9a01      	ldr	r2, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
    7b16:	4b0a      	ldr	r3, [pc, #40]	; (7b40 <udi_cdc_multi_get_nb_received_data+0x44>)
    7b18:	8819      	ldrh	r1, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    7b1a:	4b0a      	ldr	r3, [pc, #40]	; (7b44 <udi_cdc_multi_get_nb_received_data+0x48>)
    7b1c:	781b      	ldrb	r3, [r3, #0]
    7b1e:	005b      	lsls	r3, r3, #1
    7b20:	4809      	ldr	r0, [pc, #36]	; (7b48 <udi_cdc_multi_get_nb_received_data+0x4c>)
    7b22:	5a18      	ldrh	r0, [r3, r0]
    7b24:	1a40      	subs	r0, r0, r1
	if (cpu_irq_is_enabled_flags(flags))
    7b26:	2a00      	cmp	r2, #0
    7b28:	d005      	beq.n	7b36 <udi_cdc_multi_get_nb_received_data+0x3a>
		cpu_irq_enable();
    7b2a:	2201      	movs	r2, #1
    7b2c:	4b03      	ldr	r3, [pc, #12]	; (7b3c <udi_cdc_multi_get_nb_received_data+0x40>)
    7b2e:	701a      	strb	r2, [r3, #0]
    7b30:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    7b34:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
    7b36:	b002      	add	sp, #8
    7b38:	4770      	bx	lr
    7b3a:	46c0      	nop			; (mov r8, r8)
    7b3c:	20000108 	.word	0x20000108
    7b40:	20000fd8 	.word	0x20000fd8
    7b44:	20000fd4 	.word	0x20000fd4
    7b48:	20000fd0 	.word	0x20000fd0

00007b4c <udi_cdc_get_nb_received_data>:

iram_size_t udi_cdc_get_nb_received_data(void)
{
    7b4c:	b510      	push	{r4, lr}
	return udi_cdc_multi_get_nb_received_data(0);
    7b4e:	2000      	movs	r0, #0
    7b50:	4b01      	ldr	r3, [pc, #4]	; (7b58 <udi_cdc_get_nb_received_data+0xc>)
    7b52:	4798      	blx	r3
}
    7b54:	bd10      	pop	{r4, pc}
    7b56:	46c0      	nop			; (mov r8, r8)
    7b58:	00007afd 	.word	0x00007afd

00007b5c <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
    7b5c:	b510      	push	{r4, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    7b5e:	4b03      	ldr	r3, [pc, #12]	; (7b6c <udi_cdc_multi_is_rx_ready+0x10>)
    7b60:	4798      	blx	r3
    7b62:	1e43      	subs	r3, r0, #1
    7b64:	4198      	sbcs	r0, r3
    7b66:	b2c0      	uxtb	r0, r0
}
    7b68:	bd10      	pop	{r4, pc}
    7b6a:	46c0      	nop			; (mov r8, r8)
    7b6c:	00007afd 	.word	0x00007afd

00007b70 <udi_cdc_rx_start>:
{
    7b70:	b510      	push	{r4, lr}
    7b72:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7b74:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    7b78:	425a      	negs	r2, r3
    7b7a:	4153      	adcs	r3, r2
    7b7c:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    7b7e:	b672      	cpsid	i
    7b80:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    7b84:	2200      	movs	r2, #0
    7b86:	4b20      	ldr	r3, [pc, #128]	; (7c08 <udi_cdc_rx_start+0x98>)
    7b88:	701a      	strb	r2, [r3, #0]
	return flags;
    7b8a:	9b03      	ldr	r3, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    7b8c:	4a1f      	ldr	r2, [pc, #124]	; (7c0c <udi_cdc_rx_start+0x9c>)
    7b8e:	7814      	ldrb	r4, [r2, #0]
    7b90:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
    7b92:	4a1f      	ldr	r2, [pc, #124]	; (7c10 <udi_cdc_rx_start+0xa0>)
    7b94:	7812      	ldrb	r2, [r2, #0]
    7b96:	2a00      	cmp	r2, #0
    7b98:	d108      	bne.n	7bac <udi_cdc_rx_start+0x3c>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    7b9a:	4a1e      	ldr	r2, [pc, #120]	; (7c14 <udi_cdc_rx_start+0xa4>)
    7b9c:	8811      	ldrh	r1, [r2, #0]
    7b9e:	b289      	uxth	r1, r1
    7ba0:	0062      	lsls	r2, r4, #1
    7ba2:	481d      	ldr	r0, [pc, #116]	; (7c18 <udi_cdc_rx_start+0xa8>)
    7ba4:	5a12      	ldrh	r2, [r2, r0]
    7ba6:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
    7ba8:	4291      	cmp	r1, r2
    7baa:	d20a      	bcs.n	7bc2 <udi_cdc_rx_start+0x52>
	if (cpu_irq_is_enabled_flags(flags))
    7bac:	2b00      	cmp	r3, #0
    7bae:	d029      	beq.n	7c04 <udi_cdc_rx_start+0x94>
		cpu_irq_enable();
    7bb0:	2201      	movs	r2, #1
    7bb2:	4b15      	ldr	r3, [pc, #84]	; (7c08 <udi_cdc_rx_start+0x98>)
    7bb4:	701a      	strb	r2, [r3, #0]
    7bb6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    7bba:	b662      	cpsie	i
		return false;
    7bbc:	2000      	movs	r0, #0
}
    7bbe:	b004      	add	sp, #16
    7bc0:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
    7bc2:	2100      	movs	r1, #0
    7bc4:	4a13      	ldr	r2, [pc, #76]	; (7c14 <udi_cdc_rx_start+0xa4>)
    7bc6:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    7bc8:	4262      	negs	r2, r4
    7bca:	4162      	adcs	r2, r4
    7bcc:	b2d2      	uxtb	r2, r2
    7bce:	490f      	ldr	r1, [pc, #60]	; (7c0c <udi_cdc_rx_start+0x9c>)
    7bd0:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
    7bd2:	2101      	movs	r1, #1
    7bd4:	4a0e      	ldr	r2, [pc, #56]	; (7c10 <udi_cdc_rx_start+0xa0>)
    7bd6:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
    7bd8:	2b00      	cmp	r3, #0
    7bda:	d005      	beq.n	7be8 <udi_cdc_rx_start+0x78>
		cpu_irq_enable();
    7bdc:	2201      	movs	r2, #1
    7bde:	4b0a      	ldr	r3, [pc, #40]	; (7c08 <udi_cdc_rx_start+0x98>)
    7be0:	701a      	strb	r2, [r3, #0]
    7be2:	f3bf 8f5f 	dmb	sy
    7be6:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
    7be8:	2000      	movs	r0, #0
    7bea:	4b0c      	ldr	r3, [pc, #48]	; (7c1c <udi_cdc_rx_start+0xac>)
    7bec:	4798      	blx	r3
			udi_cdc_rx_buf[port][buf_sel_trans],
    7bee:	01a4      	lsls	r4, r4, #6
    7bf0:	4a0b      	ldr	r2, [pc, #44]	; (7c20 <udi_cdc_rx_start+0xb0>)
    7bf2:	1912      	adds	r2, r2, r4
	return udd_ep_run(ep,
    7bf4:	4b0b      	ldr	r3, [pc, #44]	; (7c24 <udi_cdc_rx_start+0xb4>)
    7bf6:	9300      	str	r3, [sp, #0]
    7bf8:	2340      	movs	r3, #64	; 0x40
    7bfa:	2101      	movs	r1, #1
    7bfc:	2002      	movs	r0, #2
    7bfe:	4c0a      	ldr	r4, [pc, #40]	; (7c28 <udi_cdc_rx_start+0xb8>)
    7c00:	47a0      	blx	r4
    7c02:	e7dc      	b.n	7bbe <udi_cdc_rx_start+0x4e>
		return false;
    7c04:	2000      	movs	r0, #0
    7c06:	e7da      	b.n	7bbe <udi_cdc_rx_start+0x4e>
    7c08:	20000108 	.word	0x20000108
    7c0c:	20000fd4 	.word	0x20000fd4
    7c10:	20000fdc 	.word	0x20000fdc
    7c14:	20000fd8 	.word	0x20000fd8
    7c18:	20000fd0 	.word	0x20000fd0
    7c1c:	00007b5d 	.word	0x00007b5d
    7c20:	20000f50 	.word	0x20000f50
    7c24:	00007cbd 	.word	0x00007cbd
    7c28:	000058cd 	.word	0x000058cd

00007c2c <udi_cdc_data_enable>:
{
    7c2c:	b570      	push	{r4, r5, r6, lr}
	udi_cdc_nb_data_enabled = 0;
    7c2e:	2400      	movs	r4, #0
    7c30:	4b15      	ldr	r3, [pc, #84]	; (7c88 <udi_cdc_data_enable+0x5c>)
    7c32:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
    7c34:	4b15      	ldr	r3, [pc, #84]	; (7c8c <udi_cdc_data_enable+0x60>)
    7c36:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
    7c38:	4b15      	ldr	r3, [pc, #84]	; (7c90 <udi_cdc_data_enable+0x64>)
    7c3a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
    7c3c:	4b15      	ldr	r3, [pc, #84]	; (7c94 <udi_cdc_data_enable+0x68>)
    7c3e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
    7c40:	4b15      	ldr	r3, [pc, #84]	; (7c98 <udi_cdc_data_enable+0x6c>)
    7c42:	2500      	movs	r5, #0
    7c44:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
    7c46:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
    7c48:	4b14      	ldr	r3, [pc, #80]	; (7c9c <udi_cdc_data_enable+0x70>)
    7c4a:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
    7c4c:	2000      	movs	r0, #0
    7c4e:	4b14      	ldr	r3, [pc, #80]	; (7ca0 <udi_cdc_data_enable+0x74>)
    7c50:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
    7c52:	4b14      	ldr	r3, [pc, #80]	; (7ca4 <udi_cdc_data_enable+0x78>)
    7c54:	701d      	strb	r5, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
    7c56:	4b14      	ldr	r3, [pc, #80]	; (7ca8 <udi_cdc_data_enable+0x7c>)
    7c58:	701d      	strb	r5, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
    7c5a:	4b14      	ldr	r3, [pc, #80]	; (7cac <udi_cdc_data_enable+0x80>)
    7c5c:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
    7c5e:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
    7c60:	4b13      	ldr	r3, [pc, #76]	; (7cb0 <udi_cdc_data_enable+0x84>)
    7c62:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
    7c64:	2000      	movs	r0, #0
    7c66:	4b13      	ldr	r3, [pc, #76]	; (7cb4 <udi_cdc_data_enable+0x88>)
    7c68:	4798      	blx	r3
    7c6a:	2800      	cmp	r0, #0
    7c6c:	d007      	beq.n	7c7e <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
    7c6e:	4a06      	ldr	r2, [pc, #24]	; (7c88 <udi_cdc_data_enable+0x5c>)
    7c70:	7813      	ldrb	r3, [r2, #0]
    7c72:	3301      	adds	r3, #1
    7c74:	b2db      	uxtb	r3, r3
    7c76:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    7c78:	7813      	ldrb	r3, [r2, #0]
    7c7a:	2b01      	cmp	r3, #1
    7c7c:	d000      	beq.n	7c80 <udi_cdc_data_enable+0x54>
}
    7c7e:	bd70      	pop	{r4, r5, r6, pc}
		udi_cdc_data_running = true;
    7c80:	2201      	movs	r2, #1
    7c82:	4b0d      	ldr	r3, [pc, #52]	; (7cb8 <udi_cdc_data_enable+0x8c>)
    7c84:	701a      	strb	r2, [r3, #0]
    7c86:	e7fa      	b.n	7c7e <udi_cdc_data_enable+0x52>
    7c88:	20000f4c 	.word	0x20000f4c
    7c8c:	20001074 	.word	0x20001074
    7c90:	20000fe4 	.word	0x20000fe4
    7c94:	2000106c 	.word	0x2000106c
    7c98:	20001068 	.word	0x20001068
    7c9c:	20001070 	.word	0x20001070
    7ca0:	00007935 	.word	0x00007935
    7ca4:	20000fdc 	.word	0x20000fdc
    7ca8:	20000fd4 	.word	0x20000fd4
    7cac:	20000fd0 	.word	0x20000fd0
    7cb0:	20000fd8 	.word	0x20000fd8
    7cb4:	00007b71 	.word	0x00007b71
    7cb8:	20000f42 	.word	0x20000f42

00007cbc <udi_cdc_data_received>:
{
    7cbc:	b510      	push	{r4, lr}
    7cbe:	b082      	sub	sp, #8
    7cc0:	0014      	movs	r4, r2
	if (UDD_EP_TRANSFER_OK != status) {
    7cc2:	2800      	cmp	r0, #0
    7cc4:	d110      	bne.n	7ce8 <udi_cdc_data_received+0x2c>
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
    7cc6:	4b0f      	ldr	r3, [pc, #60]	; (7d04 <udi_cdc_data_received+0x48>)
    7cc8:	781a      	ldrb	r2, [r3, #0]
    7cca:	4253      	negs	r3, r2
    7ccc:	415a      	adcs	r2, r3
    7cce:	b2d2      	uxtb	r2, r2
	if (!n) {
    7cd0:	2900      	cmp	r1, #0
    7cd2:	d00b      	beq.n	7cec <udi_cdc_data_received+0x30>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    7cd4:	b289      	uxth	r1, r1
    7cd6:	0052      	lsls	r2, r2, #1
    7cd8:	4b0b      	ldr	r3, [pc, #44]	; (7d08 <udi_cdc_data_received+0x4c>)
    7cda:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_trans_ongoing[port] = false;
    7cdc:	2200      	movs	r2, #0
    7cde:	4b0b      	ldr	r3, [pc, #44]	; (7d0c <udi_cdc_data_received+0x50>)
    7ce0:	701a      	strb	r2, [r3, #0]
	udi_cdc_rx_start(port);
    7ce2:	2000      	movs	r0, #0
    7ce4:	4b0a      	ldr	r3, [pc, #40]	; (7d10 <udi_cdc_data_received+0x54>)
    7ce6:	4798      	blx	r3
}
    7ce8:	b002      	add	sp, #8
    7cea:	bd10      	pop	{r4, pc}
				udi_cdc_rx_buf[port][buf_sel_trans],
    7cec:	0192      	lsls	r2, r2, #6
    7cee:	4b09      	ldr	r3, [pc, #36]	; (7d14 <udi_cdc_data_received+0x58>)
    7cf0:	189a      	adds	r2, r3, r2
		udd_ep_run( ep,
    7cf2:	4b09      	ldr	r3, [pc, #36]	; (7d18 <udi_cdc_data_received+0x5c>)
    7cf4:	9300      	str	r3, [sp, #0]
    7cf6:	2340      	movs	r3, #64	; 0x40
    7cf8:	3101      	adds	r1, #1
    7cfa:	0020      	movs	r0, r4
    7cfc:	4c07      	ldr	r4, [pc, #28]	; (7d1c <udi_cdc_data_received+0x60>)
    7cfe:	47a0      	blx	r4
		return;
    7d00:	e7f2      	b.n	7ce8 <udi_cdc_data_received+0x2c>
    7d02:	46c0      	nop			; (mov r8, r8)
    7d04:	20000fd4 	.word	0x20000fd4
    7d08:	20000fd0 	.word	0x20000fd0
    7d0c:	20000fdc 	.word	0x20000fdc
    7d10:	00007b71 	.word	0x00007b71
    7d14:	20000f50 	.word	0x20000f50
    7d18:	00007cbd 	.word	0x00007cbd
    7d1c:	000058cd 	.word	0x000058cd

00007d20 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
    7d20:	b570      	push	{r4, r5, r6, lr}
    7d22:	b082      	sub	sp, #8
    7d24:	0015      	movs	r5, r2
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
    7d26:	000e      	movs	r6, r1
    7d28:	e01a      	b.n	7d60 <udi_cdc_multi_read_buf+0x40>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
    7d2a:	005a      	lsls	r2, r3, #1
    7d2c:	4820      	ldr	r0, [pc, #128]	; (7db0 <udi_cdc_multi_read_buf+0x90>)
    7d2e:	5a14      	ldrh	r4, [r2, r0]
    7d30:	1a64      	subs	r4, r4, r1
	if (copy_nb>size) {
    7d32:	42a5      	cmp	r5, r4
    7d34:	d200      	bcs.n	7d38 <udi_cdc_multi_read_buf+0x18>
		copy_nb = size;
    7d36:	002c      	movs	r4, r5
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
    7d38:	019b      	lsls	r3, r3, #6
    7d3a:	185b      	adds	r3, r3, r1
    7d3c:	491d      	ldr	r1, [pc, #116]	; (7db4 <udi_cdc_multi_read_buf+0x94>)
    7d3e:	18c9      	adds	r1, r1, r3
    7d40:	0022      	movs	r2, r4
    7d42:	0030      	movs	r0, r6
    7d44:	4b1c      	ldr	r3, [pc, #112]	; (7db8 <udi_cdc_multi_read_buf+0x98>)
    7d46:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
    7d48:	4a1c      	ldr	r2, [pc, #112]	; (7dbc <udi_cdc_multi_read_buf+0x9c>)
    7d4a:	8813      	ldrh	r3, [r2, #0]
    7d4c:	191b      	adds	r3, r3, r4
    7d4e:	b29b      	uxth	r3, r3
    7d50:	8013      	strh	r3, [r2, #0]
	ptr_buf += copy_nb;
    7d52:	1936      	adds	r6, r6, r4
	size -= copy_nb;
    7d54:	1b2d      	subs	r5, r5, r4
	udi_cdc_rx_start(port);
    7d56:	2000      	movs	r0, #0
    7d58:	4b19      	ldr	r3, [pc, #100]	; (7dc0 <udi_cdc_multi_read_buf+0xa0>)
    7d5a:	4798      	blx	r3

	if (size) {
    7d5c:	2d00      	cmp	r5, #0
    7d5e:	d023      	beq.n	7da8 <udi_cdc_multi_read_buf+0x88>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7d60:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    7d64:	425a      	negs	r2, r3
    7d66:	4153      	adcs	r3, r2
    7d68:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    7d6a:	b672      	cpsid	i
    7d6c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    7d70:	2200      	movs	r2, #0
    7d72:	4b14      	ldr	r3, [pc, #80]	; (7dc4 <udi_cdc_multi_read_buf+0xa4>)
    7d74:	701a      	strb	r2, [r3, #0]
	return flags;
    7d76:	9801      	ldr	r0, [sp, #4]
	pos = udi_cdc_rx_pos[port];
    7d78:	4b10      	ldr	r3, [pc, #64]	; (7dbc <udi_cdc_multi_read_buf+0x9c>)
    7d7a:	8819      	ldrh	r1, [r3, #0]
    7d7c:	b289      	uxth	r1, r1
	buf_sel = udi_cdc_rx_buf_sel[port];
    7d7e:	4b12      	ldr	r3, [pc, #72]	; (7dc8 <udi_cdc_multi_read_buf+0xa8>)
    7d80:	781b      	ldrb	r3, [r3, #0]
    7d82:	b2db      	uxtb	r3, r3
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    7d84:	005c      	lsls	r4, r3, #1
    7d86:	4a0a      	ldr	r2, [pc, #40]	; (7db0 <udi_cdc_multi_read_buf+0x90>)
    7d88:	5aa2      	ldrh	r2, [r4, r2]
    7d8a:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
    7d8c:	2800      	cmp	r0, #0
    7d8e:	d005      	beq.n	7d9c <udi_cdc_multi_read_buf+0x7c>
		cpu_irq_enable();
    7d90:	2401      	movs	r4, #1
    7d92:	480c      	ldr	r0, [pc, #48]	; (7dc4 <udi_cdc_multi_read_buf+0xa4>)
    7d94:	7004      	strb	r4, [r0, #0]
    7d96:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    7d9a:	b662      	cpsie	i
	while (again) {
    7d9c:	4291      	cmp	r1, r2
    7d9e:	d3c4      	bcc.n	7d2a <udi_cdc_multi_read_buf+0xa>
		if (!udi_cdc_data_running) {
    7da0:	4b0a      	ldr	r3, [pc, #40]	; (7dcc <udi_cdc_multi_read_buf+0xac>)
    7da2:	781b      	ldrb	r3, [r3, #0]
    7da4:	2b00      	cmp	r3, #0
    7da6:	d1db      	bne.n	7d60 <udi_cdc_multi_read_buf+0x40>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
    7da8:	0028      	movs	r0, r5
    7daa:	b002      	add	sp, #8
    7dac:	bd70      	pop	{r4, r5, r6, pc}
    7dae:	46c0      	nop			; (mov r8, r8)
    7db0:	20000fd0 	.word	0x20000fd0
    7db4:	20000f50 	.word	0x20000f50
    7db8:	0000c38d 	.word	0x0000c38d
    7dbc:	20000fd8 	.word	0x20000fd8
    7dc0:	00007b71 	.word	0x00007b71
    7dc4:	20000108 	.word	0x20000108
    7dc8:	20000fd4 	.word	0x20000fd4
    7dcc:	20000f42 	.word	0x20000f42

00007dd0 <udi_cdc_read_buf>:
{
	return udi_cdc_multi_read_no_polling(0, buf, size);
}

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
    7dd0:	b510      	push	{r4, lr}
    7dd2:	000a      	movs	r2, r1
	return udi_cdc_multi_read_buf(0, buf, size);
    7dd4:	0001      	movs	r1, r0
    7dd6:	2000      	movs	r0, #0
    7dd8:	4b01      	ldr	r3, [pc, #4]	; (7de0 <udi_cdc_read_buf+0x10>)
    7dda:	4798      	blx	r3
}
    7ddc:	bd10      	pop	{r4, pc}
    7dde:	46c0      	nop			; (mov r8, r8)
    7de0:	00007d21 	.word	0x00007d21

00007de4 <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
    7de4:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7de6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    7dea:	425a      	negs	r2, r3
    7dec:	4153      	adcs	r3, r2
    7dee:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    7df0:	b672      	cpsid	i
    7df2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    7df6:	2200      	movs	r2, #0
    7df8:	4b14      	ldr	r3, [pc, #80]	; (7e4c <udi_cdc_multi_get_free_tx_buffer+0x68>)
    7dfa:	701a      	strb	r2, [r3, #0]
	return flags;
    7dfc:	9901      	ldr	r1, [sp, #4]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    7dfe:	4b14      	ldr	r3, [pc, #80]	; (7e50 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
    7e00:	781b      	ldrb	r3, [r3, #0]
    7e02:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    7e04:	0058      	lsls	r0, r3, #1
    7e06:	4a13      	ldr	r2, [pc, #76]	; (7e54 <udi_cdc_multi_get_free_tx_buffer+0x70>)
    7e08:	5a82      	ldrh	r2, [r0, r2]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
    7e0a:	2a40      	cmp	r2, #64	; 0x40
    7e0c:	d00b      	beq.n	7e26 <udi_cdc_multi_get_free_tx_buffer+0x42>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
    7e0e:	2040      	movs	r0, #64	; 0x40
    7e10:	1a80      	subs	r0, r0, r2
	if (cpu_irq_is_enabled_flags(flags))
    7e12:	2900      	cmp	r1, #0
    7e14:	d005      	beq.n	7e22 <udi_cdc_multi_get_free_tx_buffer+0x3e>
		cpu_irq_enable();
    7e16:	2201      	movs	r2, #1
    7e18:	4b0c      	ldr	r3, [pc, #48]	; (7e4c <udi_cdc_multi_get_free_tx_buffer+0x68>)
    7e1a:	701a      	strb	r2, [r3, #0]
    7e1c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    7e20:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
    7e22:	b002      	add	sp, #8
    7e24:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
    7e26:	480c      	ldr	r0, [pc, #48]	; (7e58 <udi_cdc_multi_get_free_tx_buffer+0x74>)
    7e28:	7800      	ldrb	r0, [r0, #0]
    7e2a:	2800      	cmp	r0, #0
    7e2c:	d1ef      	bne.n	7e0e <udi_cdc_multi_get_free_tx_buffer+0x2a>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
    7e2e:	480b      	ldr	r0, [pc, #44]	; (7e5c <udi_cdc_multi_get_free_tx_buffer+0x78>)
    7e30:	7800      	ldrb	r0, [r0, #0]
    7e32:	2800      	cmp	r0, #0
    7e34:	d1eb      	bne.n	7e0e <udi_cdc_multi_get_free_tx_buffer+0x2a>
			udi_cdc_tx_both_buf_to_send[port] = true;
    7e36:	3001      	adds	r0, #1
    7e38:	4a08      	ldr	r2, [pc, #32]	; (7e5c <udi_cdc_multi_get_free_tx_buffer+0x78>)
    7e3a:	7010      	strb	r0, [r2, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
    7e3c:	425a      	negs	r2, r3
    7e3e:	4153      	adcs	r3, r2
    7e40:	b2db      	uxtb	r3, r3
    7e42:	4a03      	ldr	r2, [pc, #12]	; (7e50 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
    7e44:	7013      	strb	r3, [r2, #0]
			buf_sel_nb = 0;
    7e46:	2200      	movs	r2, #0
    7e48:	e7e1      	b.n	7e0e <udi_cdc_multi_get_free_tx_buffer+0x2a>
    7e4a:	46c0      	nop			; (mov r8, r8)
    7e4c:	20000108 	.word	0x20000108
    7e50:	2000106c 	.word	0x2000106c
    7e54:	20001068 	.word	0x20001068
    7e58:	20001074 	.word	0x20001074
    7e5c:	20000fe4 	.word	0x20000fe4

00007e60 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    7e60:	b510      	push	{r4, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
    7e62:	4b03      	ldr	r3, [pc, #12]	; (7e70 <udi_cdc_multi_is_tx_ready+0x10>)
    7e64:	4798      	blx	r3
    7e66:	1e43      	subs	r3, r0, #1
    7e68:	4198      	sbcs	r0, r3
    7e6a:	b2c0      	uxtb	r0, r0
}
    7e6c:	bd10      	pop	{r4, pc}
    7e6e:	46c0      	nop			; (mov r8, r8)
    7e70:	00007de5 	.word	0x00007de5

00007e74 <udi_cdc_multi_write_buf>:
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
    7e74:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e76:	46ce      	mov	lr, r9
    7e78:	4647      	mov	r7, r8
    7e7a:	b580      	push	{r7, lr}
    7e7c:	b083      	sub	sp, #12
    7e7e:	0017      	movs	r7, r2

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
    7e80:	4b23      	ldr	r3, [pc, #140]	; (7f10 <udi_cdc_multi_write_buf+0x9c>)
    7e82:	799b      	ldrb	r3, [r3, #6]
    7e84:	2b09      	cmp	r3, #9
    7e86:	d001      	beq.n	7e8c <udi_cdc_multi_write_buf+0x18>
{
    7e88:	4688      	mov	r8, r1
    7e8a:	e031      	b.n	7ef0 <udi_cdc_multi_write_buf+0x7c>
		size *=2;
    7e8c:	0057      	lsls	r7, r2, #1
    7e8e:	e7fb      	b.n	7e88 <udi_cdc_multi_write_buf+0x14>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7e90:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    7e94:	425a      	negs	r2, r3
    7e96:	4153      	adcs	r3, r2
    7e98:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    7e9a:	b672      	cpsid	i
    7e9c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    7ea0:	2200      	movs	r2, #0
    7ea2:	4b1c      	ldr	r3, [pc, #112]	; (7f14 <udi_cdc_multi_write_buf+0xa0>)
    7ea4:	701a      	strb	r2, [r3, #0]
	return flags;
    7ea6:	9b01      	ldr	r3, [sp, #4]
    7ea8:	4699      	mov	r9, r3
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    7eaa:	4b1b      	ldr	r3, [pc, #108]	; (7f18 <udi_cdc_multi_write_buf+0xa4>)
    7eac:	781d      	ldrb	r5, [r3, #0]
    7eae:	b2ed      	uxtb	r5, r5
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    7eb0:	006a      	lsls	r2, r5, #1
    7eb2:	4b1a      	ldr	r3, [pc, #104]	; (7f1c <udi_cdc_multi_write_buf+0xa8>)
    7eb4:	5ad6      	ldrh	r6, [r2, r3]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
    7eb6:	2440      	movs	r4, #64	; 0x40
    7eb8:	1ba4      	subs	r4, r4, r6
	if (copy_nb > size) {
    7eba:	42a7      	cmp	r7, r4
    7ebc:	d200      	bcs.n	7ec0 <udi_cdc_multi_write_buf+0x4c>
		copy_nb = size;
    7ebe:	003c      	movs	r4, r7
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
    7ec0:	01ab      	lsls	r3, r5, #6
    7ec2:	199b      	adds	r3, r3, r6
    7ec4:	4816      	ldr	r0, [pc, #88]	; (7f20 <udi_cdc_multi_write_buf+0xac>)
    7ec6:	18c0      	adds	r0, r0, r3
    7ec8:	0022      	movs	r2, r4
    7eca:	4641      	mov	r1, r8
    7ecc:	4b15      	ldr	r3, [pc, #84]	; (7f24 <udi_cdc_multi_write_buf+0xb0>)
    7ece:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
    7ed0:	1936      	adds	r6, r6, r4
    7ed2:	006d      	lsls	r5, r5, #1
    7ed4:	4b11      	ldr	r3, [pc, #68]	; (7f1c <udi_cdc_multi_write_buf+0xa8>)
    7ed6:	535e      	strh	r6, [r3, r5]
	if (cpu_irq_is_enabled_flags(flags))
    7ed8:	464b      	mov	r3, r9
    7eda:	2b00      	cmp	r3, #0
    7edc:	d005      	beq.n	7eea <udi_cdc_multi_write_buf+0x76>
		cpu_irq_enable();
    7ede:	2201      	movs	r2, #1
    7ee0:	4b0c      	ldr	r3, [pc, #48]	; (7f14 <udi_cdc_multi_write_buf+0xa0>)
    7ee2:	701a      	strb	r2, [r3, #0]
    7ee4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    7ee8:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
    7eea:	44a0      	add	r8, r4
	size -= copy_nb;
    7eec:	1b3f      	subs	r7, r7, r4

	if (size) {
    7eee:	d008      	beq.n	7f02 <udi_cdc_multi_write_buf+0x8e>
	if (!udi_cdc_multi_is_tx_ready(port)) {
    7ef0:	2000      	movs	r0, #0
    7ef2:	4b0d      	ldr	r3, [pc, #52]	; (7f28 <udi_cdc_multi_write_buf+0xb4>)
    7ef4:	4798      	blx	r3
    7ef6:	2800      	cmp	r0, #0
    7ef8:	d1ca      	bne.n	7e90 <udi_cdc_multi_write_buf+0x1c>
		if (!udi_cdc_data_running) {
    7efa:	4b0c      	ldr	r3, [pc, #48]	; (7f2c <udi_cdc_multi_write_buf+0xb8>)
    7efc:	781b      	ldrb	r3, [r3, #0]
    7efe:	2b00      	cmp	r3, #0
    7f00:	d1f6      	bne.n	7ef0 <udi_cdc_multi_write_buf+0x7c>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
}
    7f02:	0038      	movs	r0, r7
    7f04:	b003      	add	sp, #12
    7f06:	bc0c      	pop	{r2, r3}
    7f08:	4690      	mov	r8, r2
    7f0a:	4699      	mov	r9, r3
    7f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f0e:	46c0      	nop			; (mov r8, r8)
    7f10:	20000f44 	.word	0x20000f44
    7f14:	20000108 	.word	0x20000108
    7f18:	2000106c 	.word	0x2000106c
    7f1c:	20001068 	.word	0x20001068
    7f20:	20000fe8 	.word	0x20000fe8
    7f24:	0000c38d 	.word	0x0000c38d
    7f28:	00007e61 	.word	0x00007e61
    7f2c:	20000f42 	.word	0x20000f42

00007f30 <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
    7f30:	b510      	push	{r4, lr}
    7f32:	000a      	movs	r2, r1
	return udi_cdc_multi_write_buf(0, buf, size);
    7f34:	0001      	movs	r1, r0
    7f36:	2000      	movs	r0, #0
    7f38:	4b01      	ldr	r3, [pc, #4]	; (7f40 <udi_cdc_write_buf+0x10>)
    7f3a:	4798      	blx	r3
}
    7f3c:	bd10      	pop	{r4, pc}
    7f3e:	46c0      	nop			; (mov r8, r8)
    7f40:	00007e75 	.word	0x00007e75

00007f44 <udc_get_eof_conf>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
    7f44:	4b04      	ldr	r3, [pc, #16]	; (7f58 <udc_get_eof_conf+0x14>)
    7f46:	681b      	ldr	r3, [r3, #0]
    7f48:	6818      	ldr	r0, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    7f4a:	7882      	ldrb	r2, [r0, #2]
    7f4c:	78c3      	ldrb	r3, [r0, #3]
    7f4e:	021b      	lsls	r3, r3, #8
    7f50:	4313      	orrs	r3, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    7f52:	18c0      	adds	r0, r0, r3
}
    7f54:	4770      	bx	lr
    7f56:	46c0      	nop			; (mov r8, r8)
    7f58:	20001090 	.word	0x20001090

00007f5c <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    7f5c:	b570      	push	{r4, r5, r6, lr}
    7f5e:	0004      	movs	r4, r0
    7f60:	000d      	movs	r5, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
    7f62:	4b09      	ldr	r3, [pc, #36]	; (7f88 <udc_next_desc_in_iface+0x2c>)
    7f64:	4798      	blx	r3
    7f66:	0002      	movs	r2, r0
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    7f68:	7820      	ldrb	r0, [r4, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    7f6a:	1820      	adds	r0, r4, r0
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    7f6c:	4290      	cmp	r0, r2
    7f6e:	d207      	bcs.n	7f80 <udc_next_desc_in_iface+0x24>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    7f70:	7843      	ldrb	r3, [r0, #1]
    7f72:	2b04      	cmp	r3, #4
    7f74:	d006      	beq.n	7f84 <udc_next_desc_in_iface+0x28>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    7f76:	42ab      	cmp	r3, r5
    7f78:	d003      	beq.n	7f82 <udc_next_desc_in_iface+0x26>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    7f7a:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    7f7c:	18c0      	adds	r0, r0, r3
    7f7e:	e7f5      	b.n	7f6c <udc_next_desc_in_iface+0x10>
	}
	return NULL; // No specific descriptor found
    7f80:	2000      	movs	r0, #0
}
    7f82:	bd70      	pop	{r4, r5, r6, pc}
	return NULL; // No specific descriptor found
    7f84:	2000      	movs	r0, #0
    7f86:	e7fc      	b.n	7f82 <udc_next_desc_in_iface+0x26>
    7f88:	00007f45 	.word	0x00007f45

00007f8c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
    7f8c:	b570      	push	{r4, r5, r6, lr}
    7f8e:	0005      	movs	r5, r0
    7f90:	000c      	movs	r4, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    7f92:	4b14      	ldr	r3, [pc, #80]	; (7fe4 <udc_update_iface_desc+0x58>)
    7f94:	781b      	ldrb	r3, [r3, #0]
    7f96:	2b00      	cmp	r3, #0
    7f98:	d01f      	beq.n	7fda <udc_update_iface_desc+0x4e>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    7f9a:	4b13      	ldr	r3, [pc, #76]	; (7fe8 <udc_update_iface_desc+0x5c>)
    7f9c:	681b      	ldr	r3, [r3, #0]
    7f9e:	681b      	ldr	r3, [r3, #0]
    7fa0:	791a      	ldrb	r2, [r3, #4]
    7fa2:	4282      	cmp	r2, r0
    7fa4:	d91b      	bls.n	7fde <udc_update_iface_desc+0x52>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    7fa6:	4a11      	ldr	r2, [pc, #68]	; (7fec <udc_update_iface_desc+0x60>)
    7fa8:	6013      	str	r3, [r2, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
    7faa:	4b11      	ldr	r3, [pc, #68]	; (7ff0 <udc_update_iface_desc+0x64>)
    7fac:	4798      	blx	r3
	while (ptr_end_desc >
    7fae:	e003      	b.n	7fb8 <udc_update_iface_desc+0x2c>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
    7fb0:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    7fb2:	189b      	adds	r3, r3, r2
    7fb4:	4a0d      	ldr	r2, [pc, #52]	; (7fec <udc_update_iface_desc+0x60>)
    7fb6:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
    7fb8:	4b0c      	ldr	r3, [pc, #48]	; (7fec <udc_update_iface_desc+0x60>)
    7fba:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
    7fbc:	4298      	cmp	r0, r3
    7fbe:	d90a      	bls.n	7fd6 <udc_update_iface_desc+0x4a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    7fc0:	785a      	ldrb	r2, [r3, #1]
    7fc2:	2a04      	cmp	r2, #4
    7fc4:	d1f4      	bne.n	7fb0 <udc_update_iface_desc+0x24>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    7fc6:	789a      	ldrb	r2, [r3, #2]
    7fc8:	4295      	cmp	r5, r2
    7fca:	d1f1      	bne.n	7fb0 <udc_update_iface_desc+0x24>
					udc_ptr_iface->bAlternateSetting)) {
    7fcc:	78da      	ldrb	r2, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    7fce:	42a2      	cmp	r2, r4
    7fd0:	d1ee      	bne.n	7fb0 <udc_update_iface_desc+0x24>
				return true; // Interface found
    7fd2:	2001      	movs	r0, #1
    7fd4:	e002      	b.n	7fdc <udc_update_iface_desc+0x50>
	}
	return false; // Interface not found
    7fd6:	2000      	movs	r0, #0
    7fd8:	e000      	b.n	7fdc <udc_update_iface_desc+0x50>
		return false;
    7fda:	2000      	movs	r0, #0
}
    7fdc:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    7fde:	2000      	movs	r0, #0
    7fe0:	e7fc      	b.n	7fdc <udc_update_iface_desc+0x50>
    7fe2:	46c0      	nop			; (mov r8, r8)
    7fe4:	2000108c 	.word	0x2000108c
    7fe8:	20001090 	.word	0x20001090
    7fec:	20001094 	.word	0x20001094
    7ff0:	00007f45 	.word	0x00007f45

00007ff4 <udc_req_std_dev_clear_feature>:
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    7ff4:	4b09      	ldr	r3, [pc, #36]	; (801c <udc_req_std_dev_clear_feature+0x28>)
    7ff6:	88db      	ldrh	r3, [r3, #6]
    7ff8:	2b00      	cmp	r3, #0
    7ffa:	d10c      	bne.n	8016 <udc_req_std_dev_clear_feature+0x22>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    7ffc:	4b07      	ldr	r3, [pc, #28]	; (801c <udc_req_std_dev_clear_feature+0x28>)
    7ffe:	885b      	ldrh	r3, [r3, #2]
    8000:	2b01      	cmp	r3, #1
    8002:	d001      	beq.n	8008 <udc_req_std_dev_clear_feature+0x14>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
    8004:	2000      	movs	r0, #0
    8006:	e007      	b.n	8018 <udc_req_std_dev_clear_feature+0x24>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    8008:	4a05      	ldr	r2, [pc, #20]	; (8020 <udc_req_std_dev_clear_feature+0x2c>)
    800a:	8813      	ldrh	r3, [r2, #0]
    800c:	2102      	movs	r1, #2
    800e:	438b      	bics	r3, r1
    8010:	8013      	strh	r3, [r2, #0]
		return true;
    8012:	2001      	movs	r0, #1
    8014:	e000      	b.n	8018 <udc_req_std_dev_clear_feature+0x24>
		return false;
    8016:	2000      	movs	r0, #0
}
    8018:	4770      	bx	lr
    801a:	46c0      	nop			; (mov r8, r8)
    801c:	20002858 	.word	0x20002858
    8020:	20001082 	.word	0x20001082

00008024 <udc_req_std_dev_set_feature>:
#endif
	default:
		break;
	}
	return false;
}
    8024:	2000      	movs	r0, #0
    8026:	4770      	bx	lr

00008028 <udc_req_std_dev_set_address>:
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    8028:	4b05      	ldr	r3, [pc, #20]	; (8040 <udc_req_std_dev_set_address+0x18>)
    802a:	88db      	ldrh	r3, [r3, #6]
    802c:	2b00      	cmp	r3, #0
    802e:	d104      	bne.n	803a <udc_req_std_dev_set_address+0x12>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    8030:	4a04      	ldr	r2, [pc, #16]	; (8044 <udc_req_std_dev_set_address+0x1c>)
    8032:	4b03      	ldr	r3, [pc, #12]	; (8040 <udc_req_std_dev_set_address+0x18>)
    8034:	611a      	str	r2, [r3, #16]
	return true;
    8036:	2001      	movs	r0, #1
}
    8038:	4770      	bx	lr
		return false;
    803a:	2000      	movs	r0, #0
    803c:	e7fc      	b.n	8038 <udc_req_std_dev_set_address+0x10>
    803e:	46c0      	nop			; (mov r8, r8)
    8040:	20002858 	.word	0x20002858
    8044:	0000836d 	.word	0x0000836d

00008048 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
    8048:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    804a:	4b13      	ldr	r3, [pc, #76]	; (8098 <udc_req_iface+0x50>)
    804c:	781b      	ldrb	r3, [r3, #0]
    804e:	2b00      	cmp	r3, #0
    8050:	d01f      	beq.n	8092 <udc_req_iface+0x4a>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    8052:	4b12      	ldr	r3, [pc, #72]	; (809c <udc_req_iface+0x54>)
    8054:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    8056:	4b12      	ldr	r3, [pc, #72]	; (80a0 <udc_req_iface+0x58>)
    8058:	681b      	ldr	r3, [r3, #0]
    805a:	681b      	ldr	r3, [r3, #0]
    805c:	791b      	ldrb	r3, [r3, #4]
    805e:	429c      	cmp	r4, r3
    8060:	d301      	bcc.n	8066 <udc_req_iface+0x1e>
		return false;
    8062:	2000      	movs	r0, #0
    8064:	e016      	b.n	8094 <udc_req_iface+0x4c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    8066:	2100      	movs	r1, #0
    8068:	0020      	movs	r0, r4
    806a:	4b0e      	ldr	r3, [pc, #56]	; (80a4 <udc_req_iface+0x5c>)
    806c:	4798      	blx	r3
    806e:	2800      	cmp	r0, #0
    8070:	d010      	beq.n	8094 <udc_req_iface+0x4c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    8072:	4b0b      	ldr	r3, [pc, #44]	; (80a0 <udc_req_iface+0x58>)
    8074:	681b      	ldr	r3, [r3, #0]
    8076:	685a      	ldr	r2, [r3, #4]
    8078:	00a3      	lsls	r3, r4, #2
    807a:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    807c:	68eb      	ldr	r3, [r5, #12]
    807e:	4798      	blx	r3
    8080:	0001      	movs	r1, r0
    8082:	0020      	movs	r0, r4
    8084:	4b07      	ldr	r3, [pc, #28]	; (80a4 <udc_req_iface+0x5c>)
    8086:	4798      	blx	r3
    8088:	2800      	cmp	r0, #0
    808a:	d003      	beq.n	8094 <udc_req_iface+0x4c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    808c:	68ab      	ldr	r3, [r5, #8]
    808e:	4798      	blx	r3
    8090:	e000      	b.n	8094 <udc_req_iface+0x4c>
		return false; // The device is not is configured state yet
    8092:	2000      	movs	r0, #0
}
    8094:	bd70      	pop	{r4, r5, r6, pc}
    8096:	46c0      	nop			; (mov r8, r8)
    8098:	2000108c 	.word	0x2000108c
    809c:	20002858 	.word	0x20002858
    80a0:	20001090 	.word	0x20001090
    80a4:	00007f8d 	.word	0x00007f8d

000080a8 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
    80a8:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    80aa:	4b10      	ldr	r3, [pc, #64]	; (80ec <udc_req_ep+0x44>)
    80ac:	781b      	ldrb	r3, [r3, #0]
    80ae:	2b00      	cmp	r3, #0
    80b0:	d01a      	beq.n	80e8 <udc_req_ep+0x40>
    80b2:	2400      	movs	r4, #0
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    80b4:	4b0e      	ldr	r3, [pc, #56]	; (80f0 <udc_req_ep+0x48>)
    80b6:	681b      	ldr	r3, [r3, #0]
    80b8:	681a      	ldr	r2, [r3, #0]
    80ba:	7912      	ldrb	r2, [r2, #4]
    80bc:	4294      	cmp	r4, r2
    80be:	d211      	bcs.n	80e4 <udc_req_ep+0x3c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    80c0:	685a      	ldr	r2, [r3, #4]
    80c2:	00a3      	lsls	r3, r4, #2
    80c4:	58d5      	ldr	r5, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    80c6:	68eb      	ldr	r3, [r5, #12]
    80c8:	4798      	blx	r3
    80ca:	0001      	movs	r1, r0
    80cc:	0020      	movs	r0, r4
    80ce:	4b09      	ldr	r3, [pc, #36]	; (80f4 <udc_req_ep+0x4c>)
    80d0:	4798      	blx	r3
    80d2:	2800      	cmp	r0, #0
    80d4:	d009      	beq.n	80ea <udc_req_ep+0x42>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    80d6:	68ab      	ldr	r3, [r5, #8]
    80d8:	4798      	blx	r3
    80da:	2800      	cmp	r0, #0
    80dc:	d105      	bne.n	80ea <udc_req_ep+0x42>
			iface_num++) {
    80de:	3401      	adds	r4, #1
    80e0:	b2e4      	uxtb	r4, r4
    80e2:	e7e7      	b.n	80b4 <udc_req_ep+0xc>
			return true;
		}
	}
	return false;
    80e4:	2000      	movs	r0, #0
    80e6:	e000      	b.n	80ea <udc_req_ep+0x42>
		return false; // The device is not is configured state yet
    80e8:	2000      	movs	r0, #0
}
    80ea:	bd70      	pop	{r4, r5, r6, pc}
    80ec:	2000108c 	.word	0x2000108c
    80f0:	20001090 	.word	0x20001090
    80f4:	00007f8d 	.word	0x00007f8d

000080f8 <udc_iface_disable>:
{
    80f8:	b570      	push	{r4, r5, r6, lr}
    80fa:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    80fc:	2100      	movs	r1, #0
    80fe:	4b11      	ldr	r3, [pc, #68]	; (8144 <udc_iface_disable+0x4c>)
    8100:	4798      	blx	r3
    8102:	1e05      	subs	r5, r0, #0
    8104:	d101      	bne.n	810a <udc_iface_disable+0x12>
}
    8106:	0028      	movs	r0, r5
    8108:	bd70      	pop	{r4, r5, r6, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    810a:	4b0f      	ldr	r3, [pc, #60]	; (8148 <udc_iface_disable+0x50>)
    810c:	681b      	ldr	r3, [r3, #0]
    810e:	685a      	ldr	r2, [r3, #4]
    8110:	00a3      	lsls	r3, r4, #2
    8112:	58d6      	ldr	r6, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    8114:	68f3      	ldr	r3, [r6, #12]
    8116:	4798      	blx	r3
    8118:	0001      	movs	r1, r0
    811a:	0020      	movs	r0, r4
    811c:	4b09      	ldr	r3, [pc, #36]	; (8144 <udc_iface_disable+0x4c>)
    811e:	4798      	blx	r3
    8120:	1e05      	subs	r5, r0, #0
    8122:	d0f0      	beq.n	8106 <udc_iface_disable+0xe>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    8124:	4b09      	ldr	r3, [pc, #36]	; (814c <udc_iface_disable+0x54>)
    8126:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    8128:	2105      	movs	r1, #5
    812a:	0020      	movs	r0, r4
    812c:	4b08      	ldr	r3, [pc, #32]	; (8150 <udc_iface_disable+0x58>)
    812e:	4798      	blx	r3
    8130:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    8132:	d003      	beq.n	813c <udc_iface_disable+0x44>
			udd_ep_free(ep_desc->bEndpointAddress);
    8134:	7880      	ldrb	r0, [r0, #2]
    8136:	4b07      	ldr	r3, [pc, #28]	; (8154 <udc_iface_disable+0x5c>)
    8138:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    813a:	e7f5      	b.n	8128 <udc_iface_disable+0x30>
	udi_api->disable();
    813c:	6873      	ldr	r3, [r6, #4]
    813e:	4798      	blx	r3
	return true;
    8140:	e7e1      	b.n	8106 <udc_iface_disable+0xe>
    8142:	46c0      	nop			; (mov r8, r8)
    8144:	00007f8d 	.word	0x00007f8d
    8148:	20001090 	.word	0x20001090
    814c:	20001094 	.word	0x20001094
    8150:	00007f5d 	.word	0x00007f5d
    8154:	000055c9 	.word	0x000055c9

00008158 <udc_req_std_dev_get_status>:
{
    8158:	b510      	push	{r4, lr}
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    815a:	4b06      	ldr	r3, [pc, #24]	; (8174 <udc_req_std_dev_get_status+0x1c>)
    815c:	88db      	ldrh	r3, [r3, #6]
    815e:	2b02      	cmp	r3, #2
    8160:	d001      	beq.n	8166 <udc_req_std_dev_get_status+0xe>
		return false;
    8162:	2000      	movs	r0, #0
}
    8164:	bd10      	pop	{r4, pc}
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    8166:	2102      	movs	r1, #2
    8168:	4803      	ldr	r0, [pc, #12]	; (8178 <udc_req_std_dev_get_status+0x20>)
    816a:	4b04      	ldr	r3, [pc, #16]	; (817c <udc_req_std_dev_get_status+0x24>)
    816c:	4798      	blx	r3
	return true;
    816e:	2001      	movs	r0, #1
    8170:	e7f8      	b.n	8164 <udc_req_std_dev_get_status+0xc>
    8172:	46c0      	nop			; (mov r8, r8)
    8174:	20002858 	.word	0x20002858
    8178:	20001082 	.word	0x20001082
    817c:	00005ad1 	.word	0x00005ad1

00008180 <udc_req_std_dev_get_str_desc>:
{
    8180:	b570      	push	{r4, r5, r6, lr}
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    8182:	4b18      	ldr	r3, [pc, #96]	; (81e4 <udc_req_std_dev_get_str_desc+0x64>)
    8184:	885a      	ldrh	r2, [r3, #2]
    8186:	23ff      	movs	r3, #255	; 0xff
    8188:	4013      	ands	r3, r2
    818a:	2b01      	cmp	r3, #1
    818c:	d005      	beq.n	819a <udc_req_std_dev_get_str_desc+0x1a>
    818e:	2b00      	cmp	r3, #0
    8190:	d009      	beq.n	81a6 <udc_req_std_dev_get_str_desc+0x26>
    8192:	2b02      	cmp	r3, #2
    8194:	d00d      	beq.n	81b2 <udc_req_std_dev_get_str_desc+0x32>
		return false;
    8196:	2000      	movs	r0, #0
    8198:	e022      	b.n	81e0 <udc_req_std_dev_get_str_desc+0x60>
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    819a:	210b      	movs	r1, #11
		str = udc_string_manufacturer_name;
    819c:	4d12      	ldr	r5, [pc, #72]	; (81e8 <udc_req_std_dev_get_str_desc+0x68>)
	if (str_length) {
    819e:	2900      	cmp	r1, #0
    81a0:	d00a      	beq.n	81b8 <udc_req_std_dev_get_str_desc+0x38>
    81a2:	2300      	movs	r3, #0
    81a4:	e011      	b.n	81ca <udc_req_std_dev_get_str_desc+0x4a>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    81a6:	2104      	movs	r1, #4
    81a8:	4810      	ldr	r0, [pc, #64]	; (81ec <udc_req_std_dev_get_str_desc+0x6c>)
    81aa:	4b11      	ldr	r3, [pc, #68]	; (81f0 <udc_req_std_dev_get_str_desc+0x70>)
    81ac:	4798      	blx	r3
	uint8_t str_length = 0;
    81ae:	2100      	movs	r1, #0
		break;
    81b0:	e7f5      	b.n	819e <udc_req_std_dev_get_str_desc+0x1e>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    81b2:	2107      	movs	r1, #7
		str = udc_string_product_name;
    81b4:	4d0f      	ldr	r5, [pc, #60]	; (81f4 <udc_req_std_dev_get_str_desc+0x74>)
    81b6:	e7f2      	b.n	819e <udc_req_std_dev_get_str_desc+0x1e>
	return true;
    81b8:	2001      	movs	r0, #1
    81ba:	e011      	b.n	81e0 <udc_req_std_dev_get_str_desc+0x60>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    81bc:	5ce8      	ldrb	r0, [r5, r3]
    81be:	005c      	lsls	r4, r3, #1
    81c0:	4a0d      	ldr	r2, [pc, #52]	; (81f8 <udc_req_std_dev_get_str_desc+0x78>)
    81c2:	1912      	adds	r2, r2, r4
    81c4:	8050      	strh	r0, [r2, #2]
		for(i = 0; i < str_length; i++) {
    81c6:	3301      	adds	r3, #1
    81c8:	b2db      	uxtb	r3, r3
    81ca:	428b      	cmp	r3, r1
    81cc:	d3f6      	bcc.n	81bc <udc_req_std_dev_get_str_desc+0x3c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    81ce:	3101      	adds	r1, #1
    81d0:	0049      	lsls	r1, r1, #1
    81d2:	b2c9      	uxtb	r1, r1
    81d4:	4808      	ldr	r0, [pc, #32]	; (81f8 <udc_req_std_dev_get_str_desc+0x78>)
    81d6:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    81d8:	b289      	uxth	r1, r1
    81da:	4b05      	ldr	r3, [pc, #20]	; (81f0 <udc_req_std_dev_get_str_desc+0x70>)
    81dc:	4798      	blx	r3
	return true;
    81de:	2001      	movs	r0, #1
}
    81e0:	bd70      	pop	{r4, r5, r6, pc}
    81e2:	46c0      	nop			; (mov r8, r8)
    81e4:	20002858 	.word	0x20002858
    81e8:	20000074 	.word	0x20000074
    81ec:	20000070 	.word	0x20000070
    81f0:	00005ad1 	.word	0x00005ad1
    81f4:	20000080 	.word	0x20000080
    81f8:	20000058 	.word	0x20000058

000081fc <udc_req_std_dev_get_descriptor>:
{
    81fc:	b510      	push	{r4, lr}
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    81fe:	4b23      	ldr	r3, [pc, #140]	; (828c <udc_req_std_dev_get_descriptor+0x90>)
    8200:	885b      	ldrh	r3, [r3, #2]
    8202:	b2da      	uxtb	r2, r3
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    8204:	0a1b      	lsrs	r3, r3, #8
    8206:	2b02      	cmp	r3, #2
    8208:	d01f      	beq.n	824a <udc_req_std_dev_get_descriptor+0x4e>
    820a:	d90e      	bls.n	822a <udc_req_std_dev_get_descriptor+0x2e>
    820c:	2b03      	cmp	r3, #3
    820e:	d032      	beq.n	8276 <udc_req_std_dev_get_descriptor+0x7a>
    8210:	2b0f      	cmp	r3, #15
    8212:	d135      	bne.n	8280 <udc_req_std_dev_get_descriptor+0x84>
		if (udc_config.conf_bos == NULL) {
    8214:	4b1e      	ldr	r3, [pc, #120]	; (8290 <udc_req_std_dev_get_descriptor+0x94>)
    8216:	6898      	ldr	r0, [r3, #8]
    8218:	2800      	cmp	r0, #0
    821a:	d033      	beq.n	8284 <udc_req_std_dev_get_descriptor+0x88>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    821c:	7883      	ldrb	r3, [r0, #2]
    821e:	78c1      	ldrb	r1, [r0, #3]
    8220:	0209      	lsls	r1, r1, #8
    8222:	4319      	orrs	r1, r3
    8224:	4b1b      	ldr	r3, [pc, #108]	; (8294 <udc_req_std_dev_get_descriptor+0x98>)
    8226:	4798      	blx	r3
		break;
    8228:	e006      	b.n	8238 <udc_req_std_dev_get_descriptor+0x3c>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    822a:	2b01      	cmp	r3, #1
    822c:	d128      	bne.n	8280 <udc_req_std_dev_get_descriptor+0x84>
				(uint8_t *) udc_config.confdev_lsfs,
    822e:	4b18      	ldr	r3, [pc, #96]	; (8290 <udc_req_std_dev_get_descriptor+0x94>)
    8230:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    8232:	7801      	ldrb	r1, [r0, #0]
    8234:	4b17      	ldr	r3, [pc, #92]	; (8294 <udc_req_std_dev_get_descriptor+0x98>)
    8236:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    8238:	4b14      	ldr	r3, [pc, #80]	; (828c <udc_req_std_dev_get_descriptor+0x90>)
    823a:	88da      	ldrh	r2, [r3, #6]
    823c:	899b      	ldrh	r3, [r3, #12]
    823e:	429a      	cmp	r2, r3
    8240:	d222      	bcs.n	8288 <udc_req_std_dev_get_descriptor+0x8c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    8242:	4b12      	ldr	r3, [pc, #72]	; (828c <udc_req_std_dev_get_descriptor+0x90>)
    8244:	819a      	strh	r2, [r3, #12]
	return true;
    8246:	2001      	movs	r0, #1
}
    8248:	bd10      	pop	{r4, pc}
			if (conf_num >= udc_config.confdev_lsfs->
    824a:	4b11      	ldr	r3, [pc, #68]	; (8290 <udc_req_std_dev_get_descriptor+0x94>)
    824c:	681b      	ldr	r3, [r3, #0]
    824e:	7c5b      	ldrb	r3, [r3, #17]
    8250:	429a      	cmp	r2, r3
    8252:	d301      	bcc.n	8258 <udc_req_std_dev_get_descriptor+0x5c>
				return false;
    8254:	2000      	movs	r0, #0
    8256:	e7f7      	b.n	8248 <udc_req_std_dev_get_descriptor+0x4c>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    8258:	4b0d      	ldr	r3, [pc, #52]	; (8290 <udc_req_std_dev_get_descriptor+0x94>)
    825a:	685b      	ldr	r3, [r3, #4]
    825c:	00d2      	lsls	r2, r2, #3
    825e:	5898      	ldr	r0, [r3, r2]
			udd_set_setup_payload(
    8260:	7883      	ldrb	r3, [r0, #2]
    8262:	78c1      	ldrb	r1, [r0, #3]
    8264:	0209      	lsls	r1, r1, #8
    8266:	4319      	orrs	r1, r3
    8268:	4b0a      	ldr	r3, [pc, #40]	; (8294 <udc_req_std_dev_get_descriptor+0x98>)
    826a:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    826c:	4b07      	ldr	r3, [pc, #28]	; (828c <udc_req_std_dev_get_descriptor+0x90>)
    826e:	689b      	ldr	r3, [r3, #8]
    8270:	2202      	movs	r2, #2
    8272:	705a      	strb	r2, [r3, #1]
		break;
    8274:	e7e0      	b.n	8238 <udc_req_std_dev_get_descriptor+0x3c>
		if (!udc_req_std_dev_get_str_desc()) {
    8276:	4b08      	ldr	r3, [pc, #32]	; (8298 <udc_req_std_dev_get_descriptor+0x9c>)
    8278:	4798      	blx	r3
    827a:	2800      	cmp	r0, #0
    827c:	d1dc      	bne.n	8238 <udc_req_std_dev_get_descriptor+0x3c>
    827e:	e7e3      	b.n	8248 <udc_req_std_dev_get_descriptor+0x4c>
		return false;
    8280:	2000      	movs	r0, #0
    8282:	e7e1      	b.n	8248 <udc_req_std_dev_get_descriptor+0x4c>
			return false;
    8284:	2000      	movs	r0, #0
    8286:	e7df      	b.n	8248 <udc_req_std_dev_get_descriptor+0x4c>
	return true;
    8288:	2001      	movs	r0, #1
    828a:	e7dd      	b.n	8248 <udc_req_std_dev_get_descriptor+0x4c>
    828c:	20002858 	.word	0x20002858
    8290:	20000088 	.word	0x20000088
    8294:	00005ad1 	.word	0x00005ad1
    8298:	00008181 	.word	0x00008181

0000829c <udc_req_std_dev_get_configuration>:
{
    829c:	b510      	push	{r4, lr}
	if (udd_g_ctrlreq.req.wLength != 1) {
    829e:	4b06      	ldr	r3, [pc, #24]	; (82b8 <udc_req_std_dev_get_configuration+0x1c>)
    82a0:	88db      	ldrh	r3, [r3, #6]
    82a2:	2b01      	cmp	r3, #1
    82a4:	d001      	beq.n	82aa <udc_req_std_dev_get_configuration+0xe>
		return false;
    82a6:	2000      	movs	r0, #0
}
    82a8:	bd10      	pop	{r4, pc}
	udd_set_setup_payload(&udc_num_configuration,1);
    82aa:	2101      	movs	r1, #1
    82ac:	4803      	ldr	r0, [pc, #12]	; (82bc <udc_req_std_dev_get_configuration+0x20>)
    82ae:	4b04      	ldr	r3, [pc, #16]	; (82c0 <udc_req_std_dev_get_configuration+0x24>)
    82b0:	4798      	blx	r3
	return true;
    82b2:	2001      	movs	r0, #1
    82b4:	e7f8      	b.n	82a8 <udc_req_std_dev_get_configuration+0xc>
    82b6:	46c0      	nop			; (mov r8, r8)
    82b8:	20002858 	.word	0x20002858
    82bc:	2000108c 	.word	0x2000108c
    82c0:	00005ad1 	.word	0x00005ad1

000082c4 <udc_req_std_iface_get_setting>:
{
    82c4:	b570      	push	{r4, r5, r6, lr}
	if (udd_g_ctrlreq.req.wLength != 1) {
    82c6:	4b15      	ldr	r3, [pc, #84]	; (831c <udc_req_std_iface_get_setting+0x58>)
    82c8:	88db      	ldrh	r3, [r3, #6]
    82ca:	2b01      	cmp	r3, #1
    82cc:	d002      	beq.n	82d4 <udc_req_std_iface_get_setting+0x10>
		return false; // Error in request
    82ce:	2400      	movs	r4, #0
}
    82d0:	0020      	movs	r0, r4
    82d2:	bd70      	pop	{r4, r5, r6, pc}
	if (!udc_num_configuration) {
    82d4:	4b12      	ldr	r3, [pc, #72]	; (8320 <udc_req_std_iface_get_setting+0x5c>)
    82d6:	781b      	ldrb	r3, [r3, #0]
    82d8:	2b00      	cmp	r3, #0
    82da:	d01d      	beq.n	8318 <udc_req_std_iface_get_setting+0x54>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    82dc:	4b0f      	ldr	r3, [pc, #60]	; (831c <udc_req_std_iface_get_setting+0x58>)
    82de:	791d      	ldrb	r5, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    82e0:	4b10      	ldr	r3, [pc, #64]	; (8324 <udc_req_std_iface_get_setting+0x60>)
    82e2:	681b      	ldr	r3, [r3, #0]
    82e4:	681b      	ldr	r3, [r3, #0]
    82e6:	791b      	ldrb	r3, [r3, #4]
    82e8:	429d      	cmp	r5, r3
    82ea:	d301      	bcc.n	82f0 <udc_req_std_iface_get_setting+0x2c>
		return false;
    82ec:	2400      	movs	r4, #0
    82ee:	e7ef      	b.n	82d0 <udc_req_std_iface_get_setting+0xc>
	if (!udc_update_iface_desc(iface_num, 0)) {
    82f0:	2100      	movs	r1, #0
    82f2:	0028      	movs	r0, r5
    82f4:	4b0c      	ldr	r3, [pc, #48]	; (8328 <udc_req_std_iface_get_setting+0x64>)
    82f6:	4798      	blx	r3
    82f8:	1e04      	subs	r4, r0, #0
    82fa:	d0e9      	beq.n	82d0 <udc_req_std_iface_get_setting+0xc>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    82fc:	4b09      	ldr	r3, [pc, #36]	; (8324 <udc_req_std_iface_get_setting+0x60>)
    82fe:	681b      	ldr	r3, [r3, #0]
    8300:	685b      	ldr	r3, [r3, #4]
    8302:	00ad      	lsls	r5, r5, #2
    8304:	595b      	ldr	r3, [r3, r5]
	udc_iface_setting = udi_api->getsetting();
    8306:	68db      	ldr	r3, [r3, #12]
    8308:	4798      	blx	r3
    830a:	4b08      	ldr	r3, [pc, #32]	; (832c <udc_req_std_iface_get_setting+0x68>)
    830c:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    830e:	2101      	movs	r1, #1
    8310:	0018      	movs	r0, r3
    8312:	4b07      	ldr	r3, [pc, #28]	; (8330 <udc_req_std_iface_get_setting+0x6c>)
    8314:	4798      	blx	r3
	return true;
    8316:	e7db      	b.n	82d0 <udc_req_std_iface_get_setting+0xc>
		return false; // The device is not is configured state yet
    8318:	2400      	movs	r4, #0
    831a:	e7d9      	b.n	82d0 <udc_req_std_iface_get_setting+0xc>
    831c:	20002858 	.word	0x20002858
    8320:	2000108c 	.word	0x2000108c
    8324:	20001090 	.word	0x20001090
    8328:	00007f8d 	.word	0x00007f8d
    832c:	20001088 	.word	0x20001088
    8330:	00005ad1 	.word	0x00005ad1

00008334 <udc_req_std_ep_get_status>:
{
    8334:	b510      	push	{r4, lr}
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    8336:	4b09      	ldr	r3, [pc, #36]	; (835c <udc_req_std_ep_get_status+0x28>)
    8338:	88db      	ldrh	r3, [r3, #6]
    833a:	2b02      	cmp	r3, #2
    833c:	d001      	beq.n	8342 <udc_req_std_ep_get_status+0xe>
		return false;
    833e:	2000      	movs	r0, #0
}
    8340:	bd10      	pop	{r4, pc}
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    8342:	4b06      	ldr	r3, [pc, #24]	; (835c <udc_req_std_ep_get_status+0x28>)
    8344:	7918      	ldrb	r0, [r3, #4]
    8346:	4b06      	ldr	r3, [pc, #24]	; (8360 <udc_req_std_ep_get_status+0x2c>)
    8348:	4798      	blx	r3
    834a:	4b06      	ldr	r3, [pc, #24]	; (8364 <udc_req_std_ep_get_status+0x30>)
    834c:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    834e:	2102      	movs	r1, #2
    8350:	0018      	movs	r0, r3
    8352:	4b05      	ldr	r3, [pc, #20]	; (8368 <udc_req_std_ep_get_status+0x34>)
    8354:	4798      	blx	r3
	return true;
    8356:	2001      	movs	r0, #1
    8358:	e7f2      	b.n	8340 <udc_req_std_ep_get_status+0xc>
    835a:	46c0      	nop			; (mov r8, r8)
    835c:	20002858 	.word	0x20002858
    8360:	0000572d 	.word	0x0000572d
    8364:	20001084 	.word	0x20001084
    8368:	00005ad1 	.word	0x00005ad1

0000836c <udc_valid_address>:
{
    836c:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    836e:	4b03      	ldr	r3, [pc, #12]	; (837c <udc_valid_address+0x10>)
    8370:	885b      	ldrh	r3, [r3, #2]
    8372:	207f      	movs	r0, #127	; 0x7f
    8374:	4018      	ands	r0, r3
    8376:	4b02      	ldr	r3, [pc, #8]	; (8380 <udc_valid_address+0x14>)
    8378:	4798      	blx	r3
}
    837a:	bd10      	pop	{r4, pc}
    837c:	20002858 	.word	0x20002858
    8380:	00005aad 	.word	0x00005aad

00008384 <udc_iface_enable>:
{
    8384:	b570      	push	{r4, r5, r6, lr}
    8386:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    8388:	4b0f      	ldr	r3, [pc, #60]	; (83c8 <udc_iface_enable+0x44>)
    838a:	4798      	blx	r3
    838c:	2800      	cmp	r0, #0
    838e:	d019      	beq.n	83c4 <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    8390:	4b0e      	ldr	r3, [pc, #56]	; (83cc <udc_iface_enable+0x48>)
    8392:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    8394:	2105      	movs	r1, #5
    8396:	0020      	movs	r0, r4
    8398:	4b0d      	ldr	r3, [pc, #52]	; (83d0 <udc_iface_enable+0x4c>)
    839a:	4798      	blx	r3
    839c:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    839e:	d00a      	beq.n	83b6 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    83a0:	7903      	ldrb	r3, [r0, #4]
    83a2:	7942      	ldrb	r2, [r0, #5]
    83a4:	0212      	lsls	r2, r2, #8
    83a6:	431a      	orrs	r2, r3
    83a8:	78c1      	ldrb	r1, [r0, #3]
    83aa:	7880      	ldrb	r0, [r0, #2]
    83ac:	4b09      	ldr	r3, [pc, #36]	; (83d4 <udc_iface_enable+0x50>)
    83ae:	4798      	blx	r3
    83b0:	2800      	cmp	r0, #0
    83b2:	d1ef      	bne.n	8394 <udc_iface_enable+0x10>
    83b4:	e006      	b.n	83c4 <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    83b6:	4b08      	ldr	r3, [pc, #32]	; (83d8 <udc_iface_enable+0x54>)
    83b8:	681b      	ldr	r3, [r3, #0]
    83ba:	685b      	ldr	r3, [r3, #4]
    83bc:	00ad      	lsls	r5, r5, #2
    83be:	58eb      	ldr	r3, [r5, r3]
    83c0:	681b      	ldr	r3, [r3, #0]
    83c2:	4798      	blx	r3
}
    83c4:	bd70      	pop	{r4, r5, r6, pc}
    83c6:	46c0      	nop			; (mov r8, r8)
    83c8:	00007f8d 	.word	0x00007f8d
    83cc:	20001094 	.word	0x20001094
    83d0:	00007f5d 	.word	0x00007f5d
    83d4:	00005621 	.word	0x00005621
    83d8:	20001090 	.word	0x20001090

000083dc <udc_req_std_iface_set_setting>:
{
    83dc:	b570      	push	{r4, r5, r6, lr}
	if (udd_g_ctrlreq.req.wLength) {
    83de:	4b0c      	ldr	r3, [pc, #48]	; (8410 <udc_req_std_iface_set_setting+0x34>)
    83e0:	88db      	ldrh	r3, [r3, #6]
    83e2:	2b00      	cmp	r3, #0
    83e4:	d112      	bne.n	840c <udc_req_std_iface_set_setting+0x30>
	if (!udc_num_configuration) {
    83e6:	4b0b      	ldr	r3, [pc, #44]	; (8414 <udc_req_std_iface_set_setting+0x38>)
    83e8:	781b      	ldrb	r3, [r3, #0]
    83ea:	2b00      	cmp	r3, #0
    83ec:	d101      	bne.n	83f2 <udc_req_std_iface_set_setting+0x16>
		return false; // The device is not is configured state yet
    83ee:	2000      	movs	r0, #0
    83f0:	e00d      	b.n	840e <udc_req_std_iface_set_setting+0x32>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    83f2:	4b07      	ldr	r3, [pc, #28]	; (8410 <udc_req_std_iface_set_setting+0x34>)
    83f4:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    83f6:	789d      	ldrb	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    83f8:	0020      	movs	r0, r4
    83fa:	4b07      	ldr	r3, [pc, #28]	; (8418 <udc_req_std_iface_set_setting+0x3c>)
    83fc:	4798      	blx	r3
    83fe:	2800      	cmp	r0, #0
    8400:	d005      	beq.n	840e <udc_req_std_iface_set_setting+0x32>
	return udc_iface_enable(iface_num, setting_num);
    8402:	0029      	movs	r1, r5
    8404:	0020      	movs	r0, r4
    8406:	4b05      	ldr	r3, [pc, #20]	; (841c <udc_req_std_iface_set_setting+0x40>)
    8408:	4798      	blx	r3
    840a:	e000      	b.n	840e <udc_req_std_iface_set_setting+0x32>
		return false; // Error in request
    840c:	2000      	movs	r0, #0
}
    840e:	bd70      	pop	{r4, r5, r6, pc}
    8410:	20002858 	.word	0x20002858
    8414:	2000108c 	.word	0x2000108c
    8418:	000080f9 	.word	0x000080f9
    841c:	00008385 	.word	0x00008385

00008420 <udc_req_std_ep_clear_feature>:
{
    8420:	b510      	push	{r4, lr}
	if (udd_g_ctrlreq.req.wLength) {
    8422:	4b08      	ldr	r3, [pc, #32]	; (8444 <udc_req_std_ep_clear_feature+0x24>)
    8424:	88db      	ldrh	r3, [r3, #6]
    8426:	2b00      	cmp	r3, #0
    8428:	d10a      	bne.n	8440 <udc_req_std_ep_clear_feature+0x20>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    842a:	4b06      	ldr	r3, [pc, #24]	; (8444 <udc_req_std_ep_clear_feature+0x24>)
    842c:	885b      	ldrh	r3, [r3, #2]
    842e:	2b00      	cmp	r3, #0
    8430:	d001      	beq.n	8436 <udc_req_std_ep_clear_feature+0x16>
	return false;
    8432:	2000      	movs	r0, #0
    8434:	e005      	b.n	8442 <udc_req_std_ep_clear_feature+0x22>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    8436:	4b03      	ldr	r3, [pc, #12]	; (8444 <udc_req_std_ep_clear_feature+0x24>)
    8438:	7918      	ldrb	r0, [r3, #4]
    843a:	4b03      	ldr	r3, [pc, #12]	; (8448 <udc_req_std_ep_clear_feature+0x28>)
    843c:	4798      	blx	r3
    843e:	e000      	b.n	8442 <udc_req_std_ep_clear_feature+0x22>
		return false;
    8440:	2000      	movs	r0, #0
}
    8442:	bd10      	pop	{r4, pc}
    8444:	20002858 	.word	0x20002858
    8448:	00005889 	.word	0x00005889

0000844c <udc_req_std_ep_set_feature>:
{
    844c:	b510      	push	{r4, lr}
	if (udd_g_ctrlreq.req.wLength) {
    844e:	4b0a      	ldr	r3, [pc, #40]	; (8478 <udc_req_std_ep_set_feature+0x2c>)
    8450:	88db      	ldrh	r3, [r3, #6]
    8452:	2b00      	cmp	r3, #0
    8454:	d10d      	bne.n	8472 <udc_req_std_ep_set_feature+0x26>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    8456:	4b08      	ldr	r3, [pc, #32]	; (8478 <udc_req_std_ep_set_feature+0x2c>)
    8458:	885b      	ldrh	r3, [r3, #2]
    845a:	2b00      	cmp	r3, #0
    845c:	d001      	beq.n	8462 <udc_req_std_ep_set_feature+0x16>
	return false;
    845e:	2000      	movs	r0, #0
    8460:	e008      	b.n	8474 <udc_req_std_ep_set_feature+0x28>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    8462:	4c05      	ldr	r4, [pc, #20]	; (8478 <udc_req_std_ep_set_feature+0x2c>)
    8464:	7920      	ldrb	r0, [r4, #4]
    8466:	4b05      	ldr	r3, [pc, #20]	; (847c <udc_req_std_ep_set_feature+0x30>)
    8468:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    846a:	7920      	ldrb	r0, [r4, #4]
    846c:	4b04      	ldr	r3, [pc, #16]	; (8480 <udc_req_std_ep_set_feature+0x34>)
    846e:	4798      	blx	r3
    8470:	e000      	b.n	8474 <udc_req_std_ep_set_feature+0x28>
		return false;
    8472:	2000      	movs	r0, #0
}
    8474:	bd10      	pop	{r4, pc}
    8476:	46c0      	nop			; (mov r8, r8)
    8478:	20002858 	.word	0x20002858
    847c:	00005569 	.word	0x00005569
    8480:	00005741 	.word	0x00005741

00008484 <udc_start>:
{
    8484:	b510      	push	{r4, lr}
	udd_enable();
    8486:	4b01      	ldr	r3, [pc, #4]	; (848c <udc_start+0x8>)
    8488:	4798      	blx	r3
}
    848a:	bd10      	pop	{r4, pc}
    848c:	00005b61 	.word	0x00005b61

00008490 <udc_reset>:
{
    8490:	b510      	push	{r4, lr}
	if (udc_num_configuration) {
    8492:	4b0b      	ldr	r3, [pc, #44]	; (84c0 <udc_reset+0x30>)
    8494:	781b      	ldrb	r3, [r3, #0]
    8496:	2b00      	cmp	r3, #0
    8498:	d00c      	beq.n	84b4 <udc_reset+0x24>
    849a:	2400      	movs	r4, #0
    849c:	e004      	b.n	84a8 <udc_reset+0x18>
			udc_iface_disable(iface_num);
    849e:	0020      	movs	r0, r4
    84a0:	4b08      	ldr	r3, [pc, #32]	; (84c4 <udc_reset+0x34>)
    84a2:	4798      	blx	r3
				iface_num++) {
    84a4:	3401      	adds	r4, #1
    84a6:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    84a8:	4b07      	ldr	r3, [pc, #28]	; (84c8 <udc_reset+0x38>)
    84aa:	681b      	ldr	r3, [r3, #0]
    84ac:	681b      	ldr	r3, [r3, #0]
    84ae:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
    84b0:	429c      	cmp	r4, r3
    84b2:	d3f4      	bcc.n	849e <udc_reset+0xe>
	udc_num_configuration = 0;
    84b4:	2300      	movs	r3, #0
    84b6:	4a02      	ldr	r2, [pc, #8]	; (84c0 <udc_reset+0x30>)
    84b8:	7013      	strb	r3, [r2, #0]
	udc_device_status =
    84ba:	4a04      	ldr	r2, [pc, #16]	; (84cc <udc_reset+0x3c>)
    84bc:	8013      	strh	r3, [r2, #0]
}
    84be:	bd10      	pop	{r4, pc}
    84c0:	2000108c 	.word	0x2000108c
    84c4:	000080f9 	.word	0x000080f9
    84c8:	20001090 	.word	0x20001090
    84cc:	20001082 	.word	0x20001082

000084d0 <udc_req_std_dev_set_configuration>:
{
    84d0:	b510      	push	{r4, lr}
	if (udd_g_ctrlreq.req.wLength) {
    84d2:	4b1e      	ldr	r3, [pc, #120]	; (854c <udc_req_std_dev_set_configuration+0x7c>)
    84d4:	88db      	ldrh	r3, [r3, #6]
    84d6:	2b00      	cmp	r3, #0
    84d8:	d001      	beq.n	84de <udc_req_std_dev_set_configuration+0xe>
		return false;
    84da:	2000      	movs	r0, #0
}
    84dc:	bd10      	pop	{r4, pc}
	if (!udd_getaddress()) {
    84de:	4b1c      	ldr	r3, [pc, #112]	; (8550 <udc_req_std_dev_set_configuration+0x80>)
    84e0:	4798      	blx	r3
    84e2:	2800      	cmp	r0, #0
    84e4:	d02d      	beq.n	8542 <udc_req_std_dev_set_configuration+0x72>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    84e6:	4b19      	ldr	r3, [pc, #100]	; (854c <udc_req_std_dev_set_configuration+0x7c>)
    84e8:	885a      	ldrh	r2, [r3, #2]
    84ea:	23ff      	movs	r3, #255	; 0xff
    84ec:	4013      	ands	r3, r2
				udc_config.confdev_lsfs->bNumConfigurations) {
    84ee:	4a19      	ldr	r2, [pc, #100]	; (8554 <udc_req_std_dev_set_configuration+0x84>)
    84f0:	6812      	ldr	r2, [r2, #0]
    84f2:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    84f4:	4293      	cmp	r3, r2
    84f6:	dd01      	ble.n	84fc <udc_req_std_dev_set_configuration+0x2c>
			return false;
    84f8:	2000      	movs	r0, #0
    84fa:	e7ef      	b.n	84dc <udc_req_std_dev_set_configuration+0xc>
	udc_reset();
    84fc:	4b16      	ldr	r3, [pc, #88]	; (8558 <udc_req_std_dev_set_configuration+0x88>)
    84fe:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    8500:	4b12      	ldr	r3, [pc, #72]	; (854c <udc_req_std_dev_set_configuration+0x7c>)
    8502:	789b      	ldrb	r3, [r3, #2]
    8504:	4a15      	ldr	r2, [pc, #84]	; (855c <udc_req_std_dev_set_configuration+0x8c>)
    8506:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    8508:	2b00      	cmp	r3, #0
    850a:	d01c      	beq.n	8546 <udc_req_std_dev_set_configuration+0x76>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    850c:	4a11      	ldr	r2, [pc, #68]	; (8554 <udc_req_std_dev_set_configuration+0x84>)
    850e:	6852      	ldr	r2, [r2, #4]
    8510:	4913      	ldr	r1, [pc, #76]	; (8560 <udc_req_std_dev_set_configuration+0x90>)
    8512:	468c      	mov	ip, r1
    8514:	4463      	add	r3, ip
    8516:	00db      	lsls	r3, r3, #3
    8518:	18d3      	adds	r3, r2, r3
    851a:	4a12      	ldr	r2, [pc, #72]	; (8564 <udc_req_std_dev_set_configuration+0x94>)
    851c:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    851e:	2400      	movs	r4, #0
    8520:	4b10      	ldr	r3, [pc, #64]	; (8564 <udc_req_std_dev_set_configuration+0x94>)
    8522:	681b      	ldr	r3, [r3, #0]
    8524:	681b      	ldr	r3, [r3, #0]
    8526:	791b      	ldrb	r3, [r3, #4]
    8528:	429c      	cmp	r4, r3
    852a:	d208      	bcs.n	853e <udc_req_std_dev_set_configuration+0x6e>
		if (!udc_iface_enable(iface_num, 0)) {
    852c:	2100      	movs	r1, #0
    852e:	0020      	movs	r0, r4
    8530:	4b0d      	ldr	r3, [pc, #52]	; (8568 <udc_req_std_dev_set_configuration+0x98>)
    8532:	4798      	blx	r3
    8534:	2800      	cmp	r0, #0
    8536:	d0d1      	beq.n	84dc <udc_req_std_dev_set_configuration+0xc>
			iface_num++) {
    8538:	3401      	adds	r4, #1
    853a:	b2e4      	uxtb	r4, r4
    853c:	e7f0      	b.n	8520 <udc_req_std_dev_set_configuration+0x50>
	return true;
    853e:	2001      	movs	r0, #1
    8540:	e7cc      	b.n	84dc <udc_req_std_dev_set_configuration+0xc>
		return false;
    8542:	2000      	movs	r0, #0
    8544:	e7ca      	b.n	84dc <udc_req_std_dev_set_configuration+0xc>
		return true; // Default empty configuration requested
    8546:	2001      	movs	r0, #1
    8548:	e7c8      	b.n	84dc <udc_req_std_dev_set_configuration+0xc>
    854a:	46c0      	nop			; (mov r8, r8)
    854c:	20002858 	.word	0x20002858
    8550:	00005ac1 	.word	0x00005ac1
    8554:	20000088 	.word	0x20000088
    8558:	00008491 	.word	0x00008491
    855c:	2000108c 	.word	0x2000108c
    8560:	1fffffff 	.word	0x1fffffff
    8564:	20001090 	.word	0x20001090
    8568:	00008385 	.word	0x00008385

0000856c <udc_reqstd>:
{
    856c:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
    856e:	4b35      	ldr	r3, [pc, #212]	; (8644 <udc_reqstd+0xd8>)
    8570:	781a      	ldrb	r2, [r3, #0]
    8572:	b253      	sxtb	r3, r2
    8574:	2b00      	cmp	r3, #0
    8576:	db0e      	blt.n	8596 <udc_reqstd+0x2a>
    8578:	231f      	movs	r3, #31
    857a:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    857c:	d144      	bne.n	8608 <udc_reqstd+0x9c>
			switch (udd_g_ctrlreq.req.bRequest) {
    857e:	4a31      	ldr	r2, [pc, #196]	; (8644 <udc_reqstd+0xd8>)
    8580:	7852      	ldrb	r2, [r2, #1]
    8582:	2a03      	cmp	r2, #3
    8584:	d03d      	beq.n	8602 <udc_reqstd+0x96>
    8586:	d934      	bls.n	85f2 <udc_reqstd+0x86>
    8588:	2a05      	cmp	r2, #5
    858a:	d037      	beq.n	85fc <udc_reqstd+0x90>
    858c:	2a09      	cmp	r2, #9
    858e:	d13b      	bne.n	8608 <udc_reqstd+0x9c>
				return udc_req_std_dev_set_configuration();
    8590:	4b2d      	ldr	r3, [pc, #180]	; (8648 <udc_reqstd+0xdc>)
    8592:	4798      	blx	r3
    8594:	e03d      	b.n	8612 <udc_reqstd+0xa6>
		if (udd_g_ctrlreq.req.wLength == 0) {
    8596:	4b2b      	ldr	r3, [pc, #172]	; (8644 <udc_reqstd+0xd8>)
    8598:	88db      	ldrh	r3, [r3, #6]
    859a:	2b00      	cmp	r3, #0
    859c:	d04f      	beq.n	863e <udc_reqstd+0xd2>
    859e:	231f      	movs	r3, #31
    85a0:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    85a2:	d107      	bne.n	85b4 <udc_reqstd+0x48>
			switch (udd_g_ctrlreq.req.bRequest) {
    85a4:	4a27      	ldr	r2, [pc, #156]	; (8644 <udc_reqstd+0xd8>)
    85a6:	7852      	ldrb	r2, [r2, #1]
    85a8:	2a06      	cmp	r2, #6
    85aa:	d00c      	beq.n	85c6 <udc_reqstd+0x5a>
    85ac:	2a08      	cmp	r2, #8
    85ae:	d00d      	beq.n	85cc <udc_reqstd+0x60>
    85b0:	2a00      	cmp	r2, #0
    85b2:	d005      	beq.n	85c0 <udc_reqstd+0x54>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    85b4:	2b01      	cmp	r3, #1
    85b6:	d00c      	beq.n	85d2 <udc_reqstd+0x66>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    85b8:	2b02      	cmp	r3, #2
    85ba:	d011      	beq.n	85e0 <udc_reqstd+0x74>
	return false;
    85bc:	2000      	movs	r0, #0
    85be:	e028      	b.n	8612 <udc_reqstd+0xa6>
				return udc_req_std_dev_get_status();
    85c0:	4b22      	ldr	r3, [pc, #136]	; (864c <udc_reqstd+0xe0>)
    85c2:	4798      	blx	r3
    85c4:	e025      	b.n	8612 <udc_reqstd+0xa6>
				return udc_req_std_dev_get_descriptor();
    85c6:	4b22      	ldr	r3, [pc, #136]	; (8650 <udc_reqstd+0xe4>)
    85c8:	4798      	blx	r3
    85ca:	e022      	b.n	8612 <udc_reqstd+0xa6>
				return udc_req_std_dev_get_configuration();
    85cc:	4b21      	ldr	r3, [pc, #132]	; (8654 <udc_reqstd+0xe8>)
    85ce:	4798      	blx	r3
    85d0:	e01f      	b.n	8612 <udc_reqstd+0xa6>
			switch (udd_g_ctrlreq.req.bRequest) {
    85d2:	4a1c      	ldr	r2, [pc, #112]	; (8644 <udc_reqstd+0xd8>)
    85d4:	7852      	ldrb	r2, [r2, #1]
    85d6:	2a0a      	cmp	r2, #10
    85d8:	d1ee      	bne.n	85b8 <udc_reqstd+0x4c>
				return udc_req_std_iface_get_setting();
    85da:	4b1f      	ldr	r3, [pc, #124]	; (8658 <udc_reqstd+0xec>)
    85dc:	4798      	blx	r3
    85de:	e018      	b.n	8612 <udc_reqstd+0xa6>
			switch (udd_g_ctrlreq.req.bRequest) {
    85e0:	4b18      	ldr	r3, [pc, #96]	; (8644 <udc_reqstd+0xd8>)
    85e2:	785b      	ldrb	r3, [r3, #1]
    85e4:	2b00      	cmp	r3, #0
    85e6:	d001      	beq.n	85ec <udc_reqstd+0x80>
	return false;
    85e8:	2000      	movs	r0, #0
    85ea:	e012      	b.n	8612 <udc_reqstd+0xa6>
				return udc_req_std_ep_get_status();
    85ec:	4b1b      	ldr	r3, [pc, #108]	; (865c <udc_reqstd+0xf0>)
    85ee:	4798      	blx	r3
    85f0:	e00f      	b.n	8612 <udc_reqstd+0xa6>
			switch (udd_g_ctrlreq.req.bRequest) {
    85f2:	2a01      	cmp	r2, #1
    85f4:	d108      	bne.n	8608 <udc_reqstd+0x9c>
				return udc_req_std_dev_clear_feature();
    85f6:	4b1a      	ldr	r3, [pc, #104]	; (8660 <udc_reqstd+0xf4>)
    85f8:	4798      	blx	r3
    85fa:	e00a      	b.n	8612 <udc_reqstd+0xa6>
				return udc_req_std_dev_set_address();
    85fc:	4b19      	ldr	r3, [pc, #100]	; (8664 <udc_reqstd+0xf8>)
    85fe:	4798      	blx	r3
    8600:	e007      	b.n	8612 <udc_reqstd+0xa6>
				return udc_req_std_dev_set_feature();
    8602:	4b19      	ldr	r3, [pc, #100]	; (8668 <udc_reqstd+0xfc>)
    8604:	4798      	blx	r3
    8606:	e004      	b.n	8612 <udc_reqstd+0xa6>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    8608:	2b01      	cmp	r3, #1
    860a:	d003      	beq.n	8614 <udc_reqstd+0xa8>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    860c:	2b02      	cmp	r3, #2
    860e:	d008      	beq.n	8622 <udc_reqstd+0xb6>
	return false;
    8610:	2000      	movs	r0, #0
}
    8612:	bd10      	pop	{r4, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
    8614:	4a0b      	ldr	r2, [pc, #44]	; (8644 <udc_reqstd+0xd8>)
    8616:	7852      	ldrb	r2, [r2, #1]
    8618:	2a0b      	cmp	r2, #11
    861a:	d1f7      	bne.n	860c <udc_reqstd+0xa0>
				return udc_req_std_iface_set_setting();
    861c:	4b13      	ldr	r3, [pc, #76]	; (866c <udc_reqstd+0x100>)
    861e:	4798      	blx	r3
    8620:	e7f7      	b.n	8612 <udc_reqstd+0xa6>
			switch (udd_g_ctrlreq.req.bRequest) {
    8622:	4b08      	ldr	r3, [pc, #32]	; (8644 <udc_reqstd+0xd8>)
    8624:	785b      	ldrb	r3, [r3, #1]
    8626:	2b01      	cmp	r3, #1
    8628:	d003      	beq.n	8632 <udc_reqstd+0xc6>
    862a:	2b03      	cmp	r3, #3
    862c:	d004      	beq.n	8638 <udc_reqstd+0xcc>
	return false;
    862e:	2000      	movs	r0, #0
    8630:	e7ef      	b.n	8612 <udc_reqstd+0xa6>
				return udc_req_std_ep_clear_feature();
    8632:	4b0f      	ldr	r3, [pc, #60]	; (8670 <udc_reqstd+0x104>)
    8634:	4798      	blx	r3
    8636:	e7ec      	b.n	8612 <udc_reqstd+0xa6>
				return udc_req_std_ep_set_feature();
    8638:	4b0e      	ldr	r3, [pc, #56]	; (8674 <udc_reqstd+0x108>)
    863a:	4798      	blx	r3
    863c:	e7e9      	b.n	8612 <udc_reqstd+0xa6>
			return false; // Error for USB host
    863e:	2000      	movs	r0, #0
    8640:	e7e7      	b.n	8612 <udc_reqstd+0xa6>
    8642:	46c0      	nop			; (mov r8, r8)
    8644:	20002858 	.word	0x20002858
    8648:	000084d1 	.word	0x000084d1
    864c:	00008159 	.word	0x00008159
    8650:	000081fd 	.word	0x000081fd
    8654:	0000829d 	.word	0x0000829d
    8658:	000082c5 	.word	0x000082c5
    865c:	00008335 	.word	0x00008335
    8660:	00007ff5 	.word	0x00007ff5
    8664:	00008029 	.word	0x00008029
    8668:	00008025 	.word	0x00008025
    866c:	000083dd 	.word	0x000083dd
    8670:	00008421 	.word	0x00008421
    8674:	0000844d 	.word	0x0000844d

00008678 <udc_sof_notify>:
{
    8678:	b510      	push	{r4, lr}
	if (udc_num_configuration) {
    867a:	4b0b      	ldr	r3, [pc, #44]	; (86a8 <udc_sof_notify+0x30>)
    867c:	781b      	ldrb	r3, [r3, #0]
    867e:	2b00      	cmp	r3, #0
    8680:	d011      	beq.n	86a6 <udc_sof_notify+0x2e>
    8682:	2400      	movs	r4, #0
    8684:	e001      	b.n	868a <udc_sof_notify+0x12>
				iface_num++) {
    8686:	3401      	adds	r4, #1
    8688:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    868a:	4b08      	ldr	r3, [pc, #32]	; (86ac <udc_sof_notify+0x34>)
    868c:	681b      	ldr	r3, [r3, #0]
    868e:	681a      	ldr	r2, [r3, #0]
    8690:	7912      	ldrb	r2, [r2, #4]
		for (iface_num = 0;
    8692:	4294      	cmp	r4, r2
    8694:	d207      	bcs.n	86a6 <udc_sof_notify+0x2e>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    8696:	685b      	ldr	r3, [r3, #4]
    8698:	00a2      	lsls	r2, r4, #2
    869a:	58d3      	ldr	r3, [r2, r3]
    869c:	691b      	ldr	r3, [r3, #16]
    869e:	2b00      	cmp	r3, #0
    86a0:	d0f1      	beq.n	8686 <udc_sof_notify+0xe>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    86a2:	4798      	blx	r3
    86a4:	e7ef      	b.n	8686 <udc_sof_notify+0xe>
}
    86a6:	bd10      	pop	{r4, pc}
    86a8:	2000108c 	.word	0x2000108c
    86ac:	20001090 	.word	0x20001090

000086b0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    86b0:	b510      	push	{r4, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    86b2:	4b16      	ldr	r3, [pc, #88]	; (870c <udc_process_setup+0x5c>)
    86b4:	2200      	movs	r2, #0
    86b6:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    86b8:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    86ba:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    86bc:	781b      	ldrb	r3, [r3, #0]
    86be:	b25a      	sxtb	r2, r3
    86c0:	2a00      	cmp	r2, #0
    86c2:	db10      	blt.n	86e6 <udc_process_setup+0x36>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    86c4:	2260      	movs	r2, #96	; 0x60
    86c6:	421a      	tst	r2, r3
    86c8:	d013      	beq.n	86f2 <udc_process_setup+0x42>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    86ca:	4b10      	ldr	r3, [pc, #64]	; (870c <udc_process_setup+0x5c>)
    86cc:	781a      	ldrb	r2, [r3, #0]
    86ce:	231f      	movs	r3, #31
    86d0:	4013      	ands	r3, r2
    86d2:	2b01      	cmp	r3, #1
    86d4:	d012      	beq.n	86fc <udc_process_setup+0x4c>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    86d6:	4b0d      	ldr	r3, [pc, #52]	; (870c <udc_process_setup+0x5c>)
    86d8:	781a      	ldrb	r2, [r3, #0]
    86da:	231f      	movs	r3, #31
    86dc:	4013      	ands	r3, r2
    86de:	2b02      	cmp	r3, #2
    86e0:	d011      	beq.n	8706 <udc_process_setup+0x56>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    86e2:	2000      	movs	r0, #0
#endif
}
    86e4:	bd10      	pop	{r4, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    86e6:	4a09      	ldr	r2, [pc, #36]	; (870c <udc_process_setup+0x5c>)
    86e8:	88d2      	ldrh	r2, [r2, #6]
    86ea:	2a00      	cmp	r2, #0
    86ec:	d1ea      	bne.n	86c4 <udc_process_setup+0x14>
			return false; // Error from USB host
    86ee:	2000      	movs	r0, #0
    86f0:	e7f8      	b.n	86e4 <udc_process_setup+0x34>
		if (udc_reqstd()) {
    86f2:	4b07      	ldr	r3, [pc, #28]	; (8710 <udc_process_setup+0x60>)
    86f4:	4798      	blx	r3
    86f6:	2800      	cmp	r0, #0
    86f8:	d0e7      	beq.n	86ca <udc_process_setup+0x1a>
    86fa:	e7f3      	b.n	86e4 <udc_process_setup+0x34>
		if (udc_req_iface()) {
    86fc:	4b05      	ldr	r3, [pc, #20]	; (8714 <udc_process_setup+0x64>)
    86fe:	4798      	blx	r3
    8700:	2800      	cmp	r0, #0
    8702:	d0e8      	beq.n	86d6 <udc_process_setup+0x26>
    8704:	e7ee      	b.n	86e4 <udc_process_setup+0x34>
		if (udc_req_ep()) {
    8706:	4b04      	ldr	r3, [pc, #16]	; (8718 <udc_process_setup+0x68>)
    8708:	4798      	blx	r3
    870a:	e7eb      	b.n	86e4 <udc_process_setup+0x34>
    870c:	20002858 	.word	0x20002858
    8710:	0000856d 	.word	0x0000856d
    8714:	00008049 	.word	0x00008049
    8718:	000080a9 	.word	0x000080a9

0000871c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    871c:	b5f0      	push	{r4, r5, r6, r7, lr}
    871e:	46c6      	mov	lr, r8
    8720:	b500      	push	{lr}
    8722:	b082      	sub	sp, #8
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8724:	ac01      	add	r4, sp, #4
    8726:	2380      	movs	r3, #128	; 0x80
    8728:	4698      	mov	r8, r3
    872a:	7023      	strb	r3, [r4, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    872c:	2600      	movs	r6, #0
    872e:	7066      	strb	r6, [r4, #1]
	config->powersave    = false;
    8730:	70e6      	strb	r6, [r4, #3]
	 	    // PIN configuration
	 	    
	 	    system_pinmux_get_config_defaults(&config_pinmux);
	 	    config_pinmux.mux_position = SYSTEM_PINMUX_GPIO;
	 	    config_pinmux.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	 	    config_pinmux.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    8732:	70a6      	strb	r6, [r4, #2]
	 	    
	 	    system_pinmux_pin_set_config(USB_DET, &config_pinmux);
    8734:	0021      	movs	r1, r4
    8736:	2009      	movs	r0, #9
    8738:	4d2a      	ldr	r5, [pc, #168]	; (87e4 <system_board_init+0xc8>)
    873a:	47a8      	blx	r5
	 	    system_pinmux_pin_set_config(USB_ID, &config_pinmux);
    873c:	0021      	movs	r1, r4
    873e:	201c      	movs	r0, #28
    8740:	47a8      	blx	r5

			config_pinmux.input_pull = SYSTEM_PINMUX_PIN_PULL_UP;
    8742:	2701      	movs	r7, #1
    8744:	70a7      	strb	r7, [r4, #2]
			system_pinmux_pin_set_config(UART0_RXTX, &config_pinmux);
    8746:	0021      	movs	r1, r4
    8748:	202a      	movs	r0, #42	; 0x2a
    874a:	47a8      	blx	r5
	 	    
	 	    config_pinmux.mux_position = 0x01;		//  function B for analog input
    874c:	7027      	strb	r7, [r4, #0]
	 	    config_pinmux.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    874e:	70a6      	strb	r6, [r4, #2]
	 	    system_pinmux_pin_set_config(AMP_IN1, &config_pinmux);
    8750:	0021      	movs	r1, r4
    8752:	2002      	movs	r0, #2
    8754:	47a8      	blx	r5
	 	    system_pinmux_pin_set_config(AMP_REF, &config_pinmux);
    8756:	0021      	movs	r1, r4
    8758:	2003      	movs	r0, #3
    875a:	47a8      	blx	r5

	 	    system_pinmux_pin_set_config(MIC_1, &config_pinmux);
    875c:	0021      	movs	r1, r4
    875e:	2028      	movs	r0, #40	; 0x28
    8760:	47a8      	blx	r5
	 	    system_pinmux_pin_set_config(MIC_2, &config_pinmux);
    8762:	0021      	movs	r1, r4
    8764:	2029      	movs	r0, #41	; 0x29
    8766:	47a8      	blx	r5
	 	    system_pinmux_pin_set_config(MIC_3, &config_pinmux);
    8768:	0021      	movs	r1, r4
    876a:	2003      	movs	r0, #3
    876c:	47a8      	blx	r5
	 	    system_pinmux_pin_set_config(I_SERVO, &config_pinmux);
    876e:	0021      	movs	r1, r4
    8770:	2005      	movs	r0, #5
    8772:	47a8      	blx	r5
	 	    
	 	    config_pinmux.mux_position = SYSTEM_PINMUX_GPIO;
    8774:	4643      	mov	r3, r8
    8776:	7023      	strb	r3, [r4, #0]
	 	    config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    8778:	7067      	strb	r7, [r4, #1]

	 	    system_pinmux_pin_set_config(SPK_EN, &config_pinmux);
    877a:	0021      	movs	r1, r4
    877c:	201b      	movs	r0, #27
    877e:	47a8      	blx	r5

	 	    system_pinmux_pin_set_config(SERVO_EN, &config_pinmux);
    8780:	0021      	movs	r1, r4
    8782:	2006      	movs	r0, #6
    8784:	47a8      	blx	r5

	 	    system_pinmux_pin_set_config(G_COLUMN_0, &config_pinmux);
    8786:	0021      	movs	r1, r4
    8788:	200c      	movs	r0, #12
    878a:	47a8      	blx	r5
	 	    system_pinmux_pin_set_config(G_COLUMN_1, &config_pinmux);
    878c:	0021      	movs	r1, r4
    878e:	200d      	movs	r0, #13
    8790:	47a8      	blx	r5
	 	    system_pinmux_pin_set_config(G_COLUMN_2, &config_pinmux);
    8792:	0021      	movs	r1, r4
    8794:	200e      	movs	r0, #14
    8796:	47a8      	blx	r5
	 	    system_pinmux_pin_set_config(G_COLUMN_3, &config_pinmux);
    8798:	0021      	movs	r1, r4
    879a:	200f      	movs	r0, #15
    879c:	47a8      	blx	r5
	 	    system_pinmux_pin_set_config(G_COLUMN_4, &config_pinmux);
    879e:	0021      	movs	r1, r4
    87a0:	2010      	movs	r0, #16
    87a2:	47a8      	blx	r5
	 	    
	 	    system_pinmux_pin_set_config(G_ROW_0, &config_pinmux);
    87a4:	0021      	movs	r1, r4
    87a6:	2011      	movs	r0, #17
    87a8:	47a8      	blx	r5
	 	    system_pinmux_pin_set_config(G_ROW_1, &config_pinmux);
    87aa:	0021      	movs	r1, r4
    87ac:	2012      	movs	r0, #18
    87ae:	47a8      	blx	r5
	 	    system_pinmux_pin_set_config(G_ROW_2, &config_pinmux);
    87b0:	0021      	movs	r1, r4
    87b2:	2013      	movs	r0, #19
    87b4:	47a8      	blx	r5
	 	    system_pinmux_pin_set_config(G_ROW_3, &config_pinmux);
    87b6:	0021      	movs	r1, r4
    87b8:	2014      	movs	r0, #20
    87ba:	47a8      	blx	r5

			system_pinmux_pin_set_config(G_NOSE_B, &config_pinmux);
    87bc:	0021      	movs	r1, r4
    87be:	2022      	movs	r0, #34	; 0x22
    87c0:	47a8      	blx	r5
			system_pinmux_pin_set_config(G_NOSE_G, &config_pinmux);
    87c2:	0021      	movs	r1, r4
    87c4:	2015      	movs	r0, #21
    87c6:	47a8      	blx	r5
			system_pinmux_pin_set_config(G_NOSE_R, &config_pinmux);
    87c8:	0021      	movs	r1, r4
    87ca:	202b      	movs	r0, #43	; 0x2b
    87cc:	47a8      	blx	r5


	 	    system_pinmux_pin_set_config(LED_RX, &config_pinmux);
    87ce:	0021      	movs	r1, r4
    87d0:	2023      	movs	r0, #35	; 0x23
    87d2:	47a8      	blx	r5
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    87d4:	2208      	movs	r2, #8
    87d6:	4b04      	ldr	r3, [pc, #16]	; (87e8 <system_board_init+0xcc>)
    87d8:	619a      	str	r2, [r3, #24]
	 	    //system_pinmux_pin_set_config(LED_TX, &config_pinmux);
 	    
	 	    ioport_set_pin_level(LED_RX, true);
	 	    // ioport_set_pin_level(LED_TX, true);
    87da:	b002      	add	sp, #8
    87dc:	bc04      	pop	{r2}
    87de:	4690      	mov	r8, r2
    87e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    87e2:	46c0      	nop			; (mov r8, r8)
    87e4:	00009085 	.word	0x00009085
    87e8:	41004480 	.word	0x41004480

000087ec <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    87ec:	4b0c      	ldr	r3, [pc, #48]	; (8820 <cpu_irq_enter_critical+0x34>)
    87ee:	681b      	ldr	r3, [r3, #0]
    87f0:	2b00      	cmp	r3, #0
    87f2:	d106      	bne.n	8802 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    87f4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    87f8:	2b00      	cmp	r3, #0
    87fa:	d007      	beq.n	880c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    87fc:	2200      	movs	r2, #0
    87fe:	4b09      	ldr	r3, [pc, #36]	; (8824 <cpu_irq_enter_critical+0x38>)
    8800:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    8802:	4a07      	ldr	r2, [pc, #28]	; (8820 <cpu_irq_enter_critical+0x34>)
    8804:	6813      	ldr	r3, [r2, #0]
    8806:	3301      	adds	r3, #1
    8808:	6013      	str	r3, [r2, #0]
}
    880a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    880c:	b672      	cpsid	i
    880e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    8812:	2200      	movs	r2, #0
    8814:	4b04      	ldr	r3, [pc, #16]	; (8828 <cpu_irq_enter_critical+0x3c>)
    8816:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    8818:	3201      	adds	r2, #1
    881a:	4b02      	ldr	r3, [pc, #8]	; (8824 <cpu_irq_enter_critical+0x38>)
    881c:	701a      	strb	r2, [r3, #0]
    881e:	e7f0      	b.n	8802 <cpu_irq_enter_critical+0x16>
    8820:	20001098 	.word	0x20001098
    8824:	2000109c 	.word	0x2000109c
    8828:	20000108 	.word	0x20000108

0000882c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    882c:	4b08      	ldr	r3, [pc, #32]	; (8850 <cpu_irq_leave_critical+0x24>)
    882e:	681a      	ldr	r2, [r3, #0]
    8830:	3a01      	subs	r2, #1
    8832:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    8834:	681b      	ldr	r3, [r3, #0]
    8836:	2b00      	cmp	r3, #0
    8838:	d109      	bne.n	884e <cpu_irq_leave_critical+0x22>
    883a:	4b06      	ldr	r3, [pc, #24]	; (8854 <cpu_irq_leave_critical+0x28>)
    883c:	781b      	ldrb	r3, [r3, #0]
    883e:	2b00      	cmp	r3, #0
    8840:	d005      	beq.n	884e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    8842:	2201      	movs	r2, #1
    8844:	4b04      	ldr	r3, [pc, #16]	; (8858 <cpu_irq_leave_critical+0x2c>)
    8846:	701a      	strb	r2, [r3, #0]
    8848:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    884c:	b662      	cpsie	i
	}
}
    884e:	4770      	bx	lr
    8850:	20001098 	.word	0x20001098
    8854:	2000109c 	.word	0x2000109c
    8858:	20000108 	.word	0x20000108

0000885c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    885c:	b510      	push	{r4, lr}
    885e:	b082      	sub	sp, #8
#elif CONF_CLOCK_GCLK_4_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_4;
#elif CONF_CLOCK_GCLK_5_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#elif CONF_CLOCK_GCLK_6_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_6;
    8860:	2206      	movs	r2, #6
    8862:	ab01      	add	r3, sp, #4
    8864:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    8866:	2400      	movs	r4, #0
    8868:	e004      	b.n	8874 <_switch_peripheral_gclk+0x18>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    886a:	b2e0      	uxtb	r0, r4
    886c:	a901      	add	r1, sp, #4
    886e:	4b03      	ldr	r3, [pc, #12]	; (887c <_switch_peripheral_gclk+0x20>)
    8870:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    8872:	3401      	adds	r4, #1
    8874:	2c24      	cmp	r4, #36	; 0x24
    8876:	d9f8      	bls.n	886a <_switch_peripheral_gclk+0xe>
	}
}
    8878:	b002      	add	sp, #8
    887a:	bd10      	pop	{r4, pc}
    887c:	00008fa1 	.word	0x00008fa1

00008880 <system_clock_source_get_hz>:
{
    8880:	b510      	push	{r4, lr}
	switch (clock_source) {
    8882:	2808      	cmp	r0, #8
    8884:	d832      	bhi.n	88ec <system_clock_source_get_hz+0x6c>
    8886:	0080      	lsls	r0, r0, #2
    8888:	4b1b      	ldr	r3, [pc, #108]	; (88f8 <system_clock_source_get_hz+0x78>)
    888a:	581b      	ldr	r3, [r3, r0]
    888c:	469f      	mov	pc, r3
		return 32768UL;
    888e:	2080      	movs	r0, #128	; 0x80
    8890:	0200      	lsls	r0, r0, #8
}
    8892:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc.frequency;
    8894:	4b19      	ldr	r3, [pc, #100]	; (88fc <system_clock_source_get_hz+0x7c>)
    8896:	6918      	ldr	r0, [r3, #16]
    8898:	e7fb      	b.n	8892 <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    889a:	4b19      	ldr	r3, [pc, #100]	; (8900 <system_clock_source_get_hz+0x80>)
    889c:	6a1b      	ldr	r3, [r3, #32]
    889e:	059b      	lsls	r3, r3, #22
    88a0:	0f9b      	lsrs	r3, r3, #30
    88a2:	4818      	ldr	r0, [pc, #96]	; (8904 <system_clock_source_get_hz+0x84>)
    88a4:	40d8      	lsrs	r0, r3
    88a6:	e7f4      	b.n	8892 <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc32k.frequency;
    88a8:	4b14      	ldr	r3, [pc, #80]	; (88fc <system_clock_source_get_hz+0x7c>)
    88aa:	6958      	ldr	r0, [r3, #20]
    88ac:	e7f1      	b.n	8892 <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    88ae:	4b13      	ldr	r3, [pc, #76]	; (88fc <system_clock_source_get_hz+0x7c>)
    88b0:	681b      	ldr	r3, [r3, #0]
    88b2:	079b      	lsls	r3, r3, #30
    88b4:	d51c      	bpl.n	88f0 <system_clock_source_get_hz+0x70>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    88b6:	4b12      	ldr	r3, [pc, #72]	; (8900 <system_clock_source_get_hz+0x80>)
    88b8:	68db      	ldr	r3, [r3, #12]
    88ba:	06db      	lsls	r3, r3, #27
    88bc:	d5fb      	bpl.n	88b6 <system_clock_source_get_hz+0x36>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    88be:	4b0f      	ldr	r3, [pc, #60]	; (88fc <system_clock_source_get_hz+0x7c>)
    88c0:	681b      	ldr	r3, [r3, #0]
    88c2:	075b      	lsls	r3, r3, #29
    88c4:	d401      	bmi.n	88ca <system_clock_source_get_hz+0x4a>
		return 48000000UL;
    88c6:	4810      	ldr	r0, [pc, #64]	; (8908 <system_clock_source_get_hz+0x88>)
    88c8:	e7e3      	b.n	8892 <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    88ca:	2000      	movs	r0, #0
    88cc:	4b0f      	ldr	r3, [pc, #60]	; (890c <system_clock_source_get_hz+0x8c>)
    88ce:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    88d0:	4b0a      	ldr	r3, [pc, #40]	; (88fc <system_clock_source_get_hz+0x7c>)
    88d2:	689b      	ldr	r3, [r3, #8]
    88d4:	041b      	lsls	r3, r3, #16
    88d6:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    88d8:	4358      	muls	r0, r3
    88da:	e7da      	b.n	8892 <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    88dc:	2350      	movs	r3, #80	; 0x50
    88de:	4a08      	ldr	r2, [pc, #32]	; (8900 <system_clock_source_get_hz+0x80>)
    88e0:	5cd3      	ldrb	r3, [r2, r3]
    88e2:	075b      	lsls	r3, r3, #29
    88e4:	d506      	bpl.n	88f4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    88e6:	4b05      	ldr	r3, [pc, #20]	; (88fc <system_clock_source_get_hz+0x7c>)
    88e8:	68d8      	ldr	r0, [r3, #12]
    88ea:	e7d2      	b.n	8892 <system_clock_source_get_hz+0x12>
		return 0;
    88ec:	2000      	movs	r0, #0
    88ee:	e7d0      	b.n	8892 <system_clock_source_get_hz+0x12>
			return 0;
    88f0:	2000      	movs	r0, #0
    88f2:	e7ce      	b.n	8892 <system_clock_source_get_hz+0x12>
			return 0;
    88f4:	2000      	movs	r0, #0
    88f6:	e7cc      	b.n	8892 <system_clock_source_get_hz+0x12>
    88f8:	0000caa8 	.word	0x0000caa8
    88fc:	200010a0 	.word	0x200010a0
    8900:	40000800 	.word	0x40000800
    8904:	007a1200 	.word	0x007a1200
    8908:	02dc6c00 	.word	0x02dc6c00
    890c:	00008fbd 	.word	0x00008fbd

00008910 <system_clock_source_osc8m_set_config>:
{
    8910:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    8912:	4d0c      	ldr	r5, [pc, #48]	; (8944 <system_clock_source_osc8m_set_config+0x34>)
    8914:	6a2e      	ldr	r6, [r5, #32]
	temp.bit.PRESC    = config->prescaler;
    8916:	7802      	ldrb	r2, [r0, #0]
    8918:	2103      	movs	r1, #3
    891a:	400a      	ands	r2, r1
    891c:	0212      	lsls	r2, r2, #8
    891e:	490a      	ldr	r1, [pc, #40]	; (8948 <system_clock_source_osc8m_set_config+0x38>)
    8920:	4031      	ands	r1, r6
    8922:	4311      	orrs	r1, r2
	temp.bit.ONDEMAND = config->on_demand;
    8924:	7882      	ldrb	r2, [r0, #2]
    8926:	2401      	movs	r4, #1
    8928:	4022      	ands	r2, r4
    892a:	01d2      	lsls	r2, r2, #7
    892c:	2380      	movs	r3, #128	; 0x80
    892e:	4399      	bics	r1, r3
    8930:	430a      	orrs	r2, r1
	temp.bit.RUNSTDBY = config->run_in_standby;
    8932:	7843      	ldrb	r3, [r0, #1]
    8934:	4023      	ands	r3, r4
    8936:	019b      	lsls	r3, r3, #6
    8938:	2140      	movs	r1, #64	; 0x40
    893a:	438a      	bics	r2, r1
    893c:	4313      	orrs	r3, r2
	SYSCTRL->OSC8M = temp;
    893e:	622b      	str	r3, [r5, #32]
}
    8940:	bd70      	pop	{r4, r5, r6, pc}
    8942:	46c0      	nop			; (mov r8, r8)
    8944:	40000800 	.word	0x40000800
    8948:	fffffcff 	.word	0xfffffcff

0000894c <system_clock_source_xosc32k_set_config>:
{
    894c:	b5f0      	push	{r4, r5, r6, r7, lr}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    894e:	4b1f      	ldr	r3, [pc, #124]	; (89cc <system_clock_source_xosc32k_set_config+0x80>)
    8950:	8a9a      	ldrh	r2, [r3, #20]
	temp.bit.STARTUP = config->startup_time;
    8952:	7841      	ldrb	r1, [r0, #1]
    8954:	2307      	movs	r3, #7
    8956:	400b      	ands	r3, r1
    8958:	021b      	lsls	r3, r3, #8
    895a:	491d      	ldr	r1, [pc, #116]	; (89d0 <system_clock_source_xosc32k_set_config+0x84>)
    895c:	400a      	ands	r2, r1
    895e:	4313      	orrs	r3, r2
	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    8960:	7802      	ldrb	r2, [r0, #0]
    8962:	2a00      	cmp	r2, #0
    8964:	d02e      	beq.n	89c4 <system_clock_source_xosc32k_set_config+0x78>
		temp.bit.XTALEN = 0;
    8966:	2204      	movs	r2, #4
    8968:	4393      	bics	r3, r2
    896a:	001e      	movs	r6, r3
	temp.bit.AAMPEN = config->auto_gain_control;
    896c:	7882      	ldrb	r2, [r0, #2]
    896e:	2701      	movs	r7, #1
    8970:	403a      	ands	r2, r7
    8972:	0155      	lsls	r5, r2, #5
    8974:	2320      	movs	r3, #32
    8976:	0032      	movs	r2, r6
    8978:	439a      	bics	r2, r3
    897a:	432a      	orrs	r2, r5
	temp.bit.EN1K = config->enable_1khz_output;
    897c:	78c5      	ldrb	r5, [r0, #3]
    897e:	403d      	ands	r5, r7
    8980:	012d      	lsls	r5, r5, #4
    8982:	3b10      	subs	r3, #16
    8984:	439a      	bics	r2, r3
    8986:	4315      	orrs	r5, r2
	temp.bit.EN32K = config->enable_32khz_output;
    8988:	7904      	ldrb	r4, [r0, #4]
    898a:	403c      	ands	r4, r7
    898c:	00e4      	lsls	r4, r4, #3
    898e:	3b08      	subs	r3, #8
    8990:	439d      	bics	r5, r3
    8992:	432c      	orrs	r4, r5
	temp.bit.ONDEMAND = config->on_demand;
    8994:	7b41      	ldrb	r1, [r0, #13]
    8996:	4039      	ands	r1, r7
    8998:	01c9      	lsls	r1, r1, #7
    899a:	3378      	adds	r3, #120	; 0x78
    899c:	439c      	bics	r4, r3
    899e:	4321      	orrs	r1, r4
	temp.bit.RUNSTDBY = config->run_in_standby;
    89a0:	7b02      	ldrb	r2, [r0, #12]
    89a2:	403a      	ands	r2, r7
    89a4:	0192      	lsls	r2, r2, #6
    89a6:	3b40      	subs	r3, #64	; 0x40
    89a8:	4399      	bics	r1, r3
    89aa:	430a      	orrs	r2, r1
	temp.bit.WRTLOCK  = config->write_once;
    89ac:	7b83      	ldrb	r3, [r0, #14]
    89ae:	403b      	ands	r3, r7
    89b0:	031b      	lsls	r3, r3, #12
    89b2:	4908      	ldr	r1, [pc, #32]	; (89d4 <system_clock_source_xosc32k_set_config+0x88>)
    89b4:	400a      	ands	r2, r1
    89b6:	4313      	orrs	r3, r2
	_system_clock_inst.xosc32k.frequency = config->frequency;
    89b8:	6881      	ldr	r1, [r0, #8]
    89ba:	4a07      	ldr	r2, [pc, #28]	; (89d8 <system_clock_source_xosc32k_set_config+0x8c>)
    89bc:	6151      	str	r1, [r2, #20]
	SYSCTRL->XOSC32K = temp;
    89be:	4a03      	ldr	r2, [pc, #12]	; (89cc <system_clock_source_xosc32k_set_config+0x80>)
    89c0:	8293      	strh	r3, [r2, #20]
}
    89c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp.bit.XTALEN = 1;
    89c4:	2604      	movs	r6, #4
    89c6:	431e      	orrs	r6, r3
    89c8:	e7d0      	b.n	896c <system_clock_source_xosc32k_set_config+0x20>
    89ca:	46c0      	nop			; (mov r8, r8)
    89cc:	40000800 	.word	0x40000800
    89d0:	fffff8ff 	.word	0xfffff8ff
    89d4:	ffffefff 	.word	0xffffefff
    89d8:	200010a0 	.word	0x200010a0

000089dc <system_clock_source_dfll_set_config>:
{
    89dc:	b510      	push	{r4, lr}
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    89de:	7a03      	ldrb	r3, [r0, #8]
    89e0:	069b      	lsls	r3, r3, #26
    89e2:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    89e4:	8942      	ldrh	r2, [r0, #10]
    89e6:	0592      	lsls	r2, r2, #22
    89e8:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    89ea:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    89ec:	491c      	ldr	r1, [pc, #112]	; (8a60 <system_clock_source_dfll_set_config+0x84>)
    89ee:	604b      	str	r3, [r1, #4]
			(uint32_t)config->wakeup_lock     |
    89f0:	7983      	ldrb	r3, [r0, #6]
			(uint32_t)config->stable_tracking |
    89f2:	79c2      	ldrb	r2, [r0, #7]
			(uint32_t)config->wakeup_lock     |
    89f4:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
    89f6:	8842      	ldrh	r2, [r0, #2]
			(uint32_t)config->stable_tracking |
    89f8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    89fa:	8882      	ldrh	r2, [r0, #4]
			(uint32_t)config->quick_lock      |
    89fc:	4313      	orrs	r3, r2
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    89fe:	7842      	ldrb	r2, [r0, #1]
    8a00:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    8a02:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    8a04:	600b      	str	r3, [r1, #0]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    8a06:	7803      	ldrb	r3, [r0, #0]
    8a08:	2b04      	cmp	r3, #4
    8a0a:	d003      	beq.n	8a14 <system_clock_source_dfll_set_config+0x38>
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    8a0c:	7803      	ldrb	r3, [r0, #0]
    8a0e:	2b20      	cmp	r3, #32
    8a10:	d010      	beq.n	8a34 <system_clock_source_dfll_set_config+0x58>
}
    8a12:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    8a14:	7b03      	ldrb	r3, [r0, #12]
    8a16:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    8a18:	89c2      	ldrh	r2, [r0, #14]
    8a1a:	0412      	lsls	r2, r2, #16
    8a1c:	4911      	ldr	r1, [pc, #68]	; (8a64 <system_clock_source_dfll_set_config+0x88>)
    8a1e:	400a      	ands	r2, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    8a20:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    8a22:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    8a24:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    8a26:	4a0e      	ldr	r2, [pc, #56]	; (8a60 <system_clock_source_dfll_set_config+0x84>)
    8a28:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    8a2a:	6813      	ldr	r3, [r2, #0]
    8a2c:	7801      	ldrb	r1, [r0, #0]
    8a2e:	430b      	orrs	r3, r1
    8a30:	6013      	str	r3, [r2, #0]
    8a32:	e7eb      	b.n	8a0c <system_clock_source_dfll_set_config+0x30>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    8a34:	7b03      	ldrb	r3, [r0, #12]
    8a36:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    8a38:	89c2      	ldrh	r2, [r0, #14]
    8a3a:	0412      	lsls	r2, r2, #16
    8a3c:	4909      	ldr	r1, [pc, #36]	; (8a64 <system_clock_source_dfll_set_config+0x88>)
    8a3e:	400a      	ands	r2, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    8a40:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    8a42:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    8a44:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    8a46:	4906      	ldr	r1, [pc, #24]	; (8a60 <system_clock_source_dfll_set_config+0x84>)
    8a48:	608b      	str	r3, [r1, #8]
		_system_clock_inst.dfll.control |= config->loop_mode |
    8a4a:	680c      	ldr	r4, [r1, #0]
    8a4c:	7802      	ldrb	r2, [r0, #0]
    8a4e:	2304      	movs	r3, #4
    8a50:	431a      	orrs	r2, r3
    8a52:	b2d2      	uxtb	r2, r2
    8a54:	4314      	orrs	r4, r2
    8a56:	2380      	movs	r3, #128	; 0x80
    8a58:	00db      	lsls	r3, r3, #3
    8a5a:	4323      	orrs	r3, r4
    8a5c:	600b      	str	r3, [r1, #0]
}
    8a5e:	e7d8      	b.n	8a12 <system_clock_source_dfll_set_config+0x36>
    8a60:	200010a0 	.word	0x200010a0
    8a64:	03ff0000 	.word	0x03ff0000

00008a68 <system_clock_source_enable>:
	switch (clock_source) {
    8a68:	2808      	cmp	r0, #8
    8a6a:	d84a      	bhi.n	8b02 <system_clock_source_enable+0x9a>
    8a6c:	0080      	lsls	r0, r0, #2
    8a6e:	4b26      	ldr	r3, [pc, #152]	; (8b08 <system_clock_source_enable+0xa0>)
    8a70:	581b      	ldr	r3, [r3, r0]
    8a72:	469f      	mov	pc, r3
		return STATUS_OK;
    8a74:	2000      	movs	r0, #0
}
    8a76:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    8a78:	4a24      	ldr	r2, [pc, #144]	; (8b0c <system_clock_source_enable+0xa4>)
    8a7a:	6a13      	ldr	r3, [r2, #32]
    8a7c:	2102      	movs	r1, #2
    8a7e:	430b      	orrs	r3, r1
    8a80:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    8a82:	2000      	movs	r0, #0
    8a84:	e7f7      	b.n	8a76 <system_clock_source_enable+0xe>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    8a86:	4a21      	ldr	r2, [pc, #132]	; (8b0c <system_clock_source_enable+0xa4>)
    8a88:	6993      	ldr	r3, [r2, #24]
    8a8a:	2102      	movs	r1, #2
    8a8c:	430b      	orrs	r3, r1
    8a8e:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    8a90:	2000      	movs	r0, #0
		break;
    8a92:	e7f0      	b.n	8a76 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    8a94:	4a1d      	ldr	r2, [pc, #116]	; (8b0c <system_clock_source_enable+0xa4>)
    8a96:	8a13      	ldrh	r3, [r2, #16]
    8a98:	2102      	movs	r1, #2
    8a9a:	430b      	orrs	r3, r1
    8a9c:	b29b      	uxth	r3, r3
    8a9e:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    8aa0:	2000      	movs	r0, #0
		break;
    8aa2:	e7e8      	b.n	8a76 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    8aa4:	4a19      	ldr	r2, [pc, #100]	; (8b0c <system_clock_source_enable+0xa4>)
    8aa6:	8a93      	ldrh	r3, [r2, #20]
    8aa8:	2102      	movs	r1, #2
    8aaa:	430b      	orrs	r3, r1
    8aac:	b29b      	uxth	r3, r3
    8aae:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    8ab0:	2000      	movs	r0, #0
		break;
    8ab2:	e7e0      	b.n	8a76 <system_clock_source_enable+0xe>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    8ab4:	4916      	ldr	r1, [pc, #88]	; (8b10 <system_clock_source_enable+0xa8>)
    8ab6:	680b      	ldr	r3, [r1, #0]
    8ab8:	2202      	movs	r2, #2
    8aba:	4313      	orrs	r3, r2
    8abc:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    8abe:	4b13      	ldr	r3, [pc, #76]	; (8b0c <system_clock_source_enable+0xa4>)
    8ac0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    8ac2:	4b12      	ldr	r3, [pc, #72]	; (8b0c <system_clock_source_enable+0xa4>)
    8ac4:	68db      	ldr	r3, [r3, #12]
    8ac6:	06db      	lsls	r3, r3, #27
    8ac8:	d5fb      	bpl.n	8ac2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    8aca:	4a11      	ldr	r2, [pc, #68]	; (8b10 <system_clock_source_enable+0xa8>)
    8acc:	6891      	ldr	r1, [r2, #8]
    8ace:	4b0f      	ldr	r3, [pc, #60]	; (8b0c <system_clock_source_enable+0xa4>)
    8ad0:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    8ad2:	6852      	ldr	r2, [r2, #4]
    8ad4:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    8ad6:	2200      	movs	r2, #0
    8ad8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    8ada:	4b0c      	ldr	r3, [pc, #48]	; (8b0c <system_clock_source_enable+0xa4>)
    8adc:	68db      	ldr	r3, [r3, #12]
    8ade:	06db      	lsls	r3, r3, #27
    8ae0:	d5fb      	bpl.n	8ada <system_clock_source_enable+0x72>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    8ae2:	4b0b      	ldr	r3, [pc, #44]	; (8b10 <system_clock_source_enable+0xa8>)
    8ae4:	681b      	ldr	r3, [r3, #0]
    8ae6:	b29b      	uxth	r3, r3
    8ae8:	4a08      	ldr	r2, [pc, #32]	; (8b0c <system_clock_source_enable+0xa4>)
    8aea:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    8aec:	2000      	movs	r0, #0
    8aee:	e7c2      	b.n	8a76 <system_clock_source_enable+0xe>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    8af0:	4906      	ldr	r1, [pc, #24]	; (8b0c <system_clock_source_enable+0xa4>)
    8af2:	2244      	movs	r2, #68	; 0x44
    8af4:	5c8b      	ldrb	r3, [r1, r2]
    8af6:	2002      	movs	r0, #2
    8af8:	4303      	orrs	r3, r0
    8afa:	b2db      	uxtb	r3, r3
    8afc:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    8afe:	2000      	movs	r0, #0
		break;
    8b00:	e7b9      	b.n	8a76 <system_clock_source_enable+0xe>
		return STATUS_ERR_INVALID_ARG;
    8b02:	2017      	movs	r0, #23
    8b04:	e7b7      	b.n	8a76 <system_clock_source_enable+0xe>
    8b06:	46c0      	nop			; (mov r8, r8)
    8b08:	0000cacc 	.word	0x0000cacc
    8b0c:	40000800 	.word	0x40000800
    8b10:	200010a0 	.word	0x200010a0

00008b14 <system_clock_source_is_ready>:
	switch (clock_source) {
    8b14:	2808      	cmp	r0, #8
    8b16:	d81f      	bhi.n	8b58 <system_clock_source_is_ready+0x44>
    8b18:	0080      	lsls	r0, r0, #2
    8b1a:	4b10      	ldr	r3, [pc, #64]	; (8b5c <system_clock_source_is_ready+0x48>)
    8b1c:	581b      	ldr	r3, [r3, r0]
    8b1e:	469f      	mov	pc, r3
		return true;
    8b20:	2001      	movs	r0, #1
    8b22:	e018      	b.n	8b56 <system_clock_source_is_ready+0x42>
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    8b24:	2001      	movs	r0, #1
		break;
    8b26:	e010      	b.n	8b4a <system_clock_source_is_ready+0x36>
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    8b28:	2002      	movs	r0, #2
		break;
    8b2a:	e00e      	b.n	8b4a <system_clock_source_is_ready+0x36>
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    8b2c:	2010      	movs	r0, #16
		break;
    8b2e:	e00c      	b.n	8b4a <system_clock_source_is_ready+0x36>
		return ((SYSCTRL->DPLLSTATUS.reg &
    8b30:	2350      	movs	r3, #80	; 0x50
    8b32:	4a0b      	ldr	r2, [pc, #44]	; (8b60 <system_clock_source_is_ready+0x4c>)
    8b34:	5cd0      	ldrb	r0, [r2, r3]
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    8b36:	3b4d      	subs	r3, #77	; 0x4d
    8b38:	4018      	ands	r0, r3
    8b3a:	3803      	subs	r0, #3
    8b3c:	4243      	negs	r3, r0
    8b3e:	4158      	adcs	r0, r3
    8b40:	b2c0      	uxtb	r0, r0
    8b42:	e008      	b.n	8b56 <system_clock_source_is_ready+0x42>
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    8b44:	2008      	movs	r0, #8
    8b46:	e000      	b.n	8b4a <system_clock_source_is_ready+0x36>
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    8b48:	2004      	movs	r0, #4
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    8b4a:	4b05      	ldr	r3, [pc, #20]	; (8b60 <system_clock_source_is_ready+0x4c>)
    8b4c:	68db      	ldr	r3, [r3, #12]
    8b4e:	4398      	bics	r0, r3
    8b50:	4243      	negs	r3, r0
    8b52:	4158      	adcs	r0, r3
    8b54:	b2c0      	uxtb	r0, r0
}
    8b56:	4770      	bx	lr
		return false;
    8b58:	2000      	movs	r0, #0
    8b5a:	e7fc      	b.n	8b56 <system_clock_source_is_ready+0x42>
    8b5c:	0000caf0 	.word	0x0000caf0
    8b60:	40000800 	.word	0x40000800

00008b64 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    8b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b66:	46de      	mov	lr, fp
    8b68:	4657      	mov	r7, sl
    8b6a:	464e      	mov	r6, r9
    8b6c:	4645      	mov	r5, r8
    8b6e:	b5e0      	push	{r5, r6, r7, lr}
    8b70:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    8b72:	22c2      	movs	r2, #194	; 0xc2
    8b74:	00d2      	lsls	r2, r2, #3
    8b76:	4b5b      	ldr	r3, [pc, #364]	; (8ce4 <system_clock_init+0x180>)
    8b78:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    8b7a:	495b      	ldr	r1, [pc, #364]	; (8ce8 <system_clock_init+0x184>)
    8b7c:	684a      	ldr	r2, [r1, #4]
    8b7e:	231e      	movs	r3, #30
    8b80:	439a      	bics	r2, r3
    8b82:	3b1a      	subs	r3, #26
    8b84:	4313      	orrs	r3, r2
    8b86:	604b      	str	r3, [r1, #4]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    8b88:	4b58      	ldr	r3, [pc, #352]	; (8cec <system_clock_init+0x188>)
    8b8a:	4798      	blx	r3
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    8b8c:	a80a      	add	r0, sp, #40	; 0x28
    8b8e:	2300      	movs	r3, #0
    8b90:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    8b92:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    8b94:	2280      	movs	r2, #128	; 0x80
    8b96:	0212      	lsls	r2, r2, #8
    8b98:	6082      	str	r2, [r0, #8]
	config->enable_32khz_output = true;
    8b9a:	2201      	movs	r2, #1
    8b9c:	7102      	strb	r2, [r0, #4]
	config->write_once          = false;
    8b9e:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    8ba0:	2106      	movs	r1, #6
    8ba2:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    8ba4:	70c2      	strb	r2, [r0, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    8ba6:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    8ba8:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    8baa:	4b51      	ldr	r3, [pc, #324]	; (8cf0 <system_clock_init+0x18c>)
    8bac:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    8bae:	2005      	movs	r0, #5
    8bb0:	4b50      	ldr	r3, [pc, #320]	; (8cf4 <system_clock_init+0x190>)
    8bb2:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    8bb4:	2005      	movs	r0, #5
    8bb6:	4b50      	ldr	r3, [pc, #320]	; (8cf8 <system_clock_init+0x194>)
    8bb8:	4798      	blx	r3
    8bba:	2800      	cmp	r0, #0
    8bbc:	d0fa      	beq.n	8bb4 <system_clock_init+0x50>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    8bbe:	ab05      	add	r3, sp, #20
    8bc0:	2200      	movs	r2, #0
    8bc2:	2100      	movs	r1, #0
    8bc4:	8059      	strh	r1, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    8bc6:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    8bc8:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    8bca:	3120      	adds	r1, #32
    8bcc:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    8bce:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    8bd0:	4b4a      	ldr	r3, [pc, #296]	; (8cfc <system_clock_init+0x198>)
    8bd2:	681b      	ldr	r3, [r3, #0]
    8bd4:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    8bd6:	2b3f      	cmp	r3, #63	; 0x3f
    8bd8:	d100      	bne.n	8bdc <system_clock_init+0x78>
    8bda:	e080      	b.n	8cde <system_clock_init+0x17a>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    8bdc:	a805      	add	r0, sp, #20
    8bde:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    8be0:	2307      	movs	r3, #7
    8be2:	4699      	mov	r9, r3
    8be4:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    8be6:	230a      	movs	r3, #10
    8be8:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    8bea:	4b45      	ldr	r3, [pc, #276]	; (8d00 <system_clock_init+0x19c>)
    8bec:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    8bee:	3bff      	subs	r3, #255	; 0xff
    8bf0:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    8bf2:	4b44      	ldr	r3, [pc, #272]	; (8d04 <system_clock_init+0x1a0>)
    8bf4:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    8bf6:	4b44      	ldr	r3, [pc, #272]	; (8d08 <system_clock_init+0x1a4>)
    8bf8:	4798      	blx	r3
	config->run_in_standby  = false;
    8bfa:	a804      	add	r0, sp, #16
    8bfc:	2500      	movs	r5, #0
    8bfe:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    8c00:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    8c02:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    8c04:	4b41      	ldr	r3, [pc, #260]	; (8d0c <system_clock_init+0x1a8>)
    8c06:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    8c08:	2006      	movs	r0, #6
    8c0a:	4b3a      	ldr	r3, [pc, #232]	; (8cf4 <system_clock_init+0x190>)
    8c0c:	469a      	mov	sl, r3
    8c0e:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    8c10:	4b3f      	ldr	r3, [pc, #252]	; (8d10 <system_clock_init+0x1ac>)
    8c12:	4798      	blx	r3
	config->division_factor    = 1;
    8c14:	ac01      	add	r4, sp, #4
    8c16:	2601      	movs	r6, #1
    8c18:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    8c1a:	7065      	strb	r5, [r4, #1]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    8c1c:	2305      	movs	r3, #5
    8c1e:	469b      	mov	fp, r3
    8c20:	7023      	strb	r3, [r4, #0]
    8c22:	7226      	strb	r6, [r4, #8]
    8c24:	7266      	strb	r6, [r4, #9]
    8c26:	0021      	movs	r1, r4
    8c28:	2001      	movs	r0, #1
    8c2a:	4b3a      	ldr	r3, [pc, #232]	; (8d14 <system_clock_init+0x1b0>)
    8c2c:	4698      	mov	r8, r3
    8c2e:	4798      	blx	r3
    8c30:	2001      	movs	r0, #1
    8c32:	4f39      	ldr	r7, [pc, #228]	; (8d18 <system_clock_init+0x1b4>)
    8c34:	47b8      	blx	r7
	config->division_factor    = 1;
    8c36:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    8c38:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    8c3a:	7265      	strb	r5, [r4, #9]
    8c3c:	465b      	mov	r3, fp
    8c3e:	7023      	strb	r3, [r4, #0]
    8c40:	7226      	strb	r6, [r4, #8]
    8c42:	0021      	movs	r1, r4
    8c44:	2002      	movs	r0, #2
    8c46:	47c0      	blx	r8
    8c48:	2002      	movs	r0, #2
    8c4a:	47b8      	blx	r7
	config->division_factor    = 1;
    8c4c:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    8c4e:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    8c50:	2306      	movs	r3, #6
    8c52:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    8c54:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    8c56:	7265      	strb	r5, [r4, #9]
    8c58:	0021      	movs	r1, r4
    8c5a:	2003      	movs	r0, #3
    8c5c:	47c0      	blx	r8
    8c5e:	2003      	movs	r0, #3
    8c60:	47b8      	blx	r7
	config->high_when_disabled = false;
    8c62:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    8c64:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    8c66:	7265      	strb	r5, [r4, #9]
    8c68:	464b      	mov	r3, r9
    8c6a:	7023      	strb	r3, [r4, #0]
    8c6c:	2344      	movs	r3, #68	; 0x44
    8c6e:	6063      	str	r3, [r4, #4]
    8c70:	0021      	movs	r1, r4
    8c72:	2004      	movs	r0, #4
    8c74:	47c0      	blx	r8
    8c76:	2004      	movs	r0, #4
    8c78:	47b8      	blx	r7
	config->division_factor    = 1;
    8c7a:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    8c7c:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    8c7e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    8c80:	7265      	strb	r5, [r4, #9]
    8c82:	464b      	mov	r3, r9
    8c84:	7023      	strb	r3, [r4, #0]
    8c86:	0021      	movs	r1, r4
    8c88:	2005      	movs	r0, #5
    8c8a:	47c0      	blx	r8
    8c8c:	2005      	movs	r0, #5
    8c8e:	47b8      	blx	r7
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    8c90:	2007      	movs	r0, #7
    8c92:	47d0      	blx	sl
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    8c94:	2007      	movs	r0, #7
    8c96:	4b18      	ldr	r3, [pc, #96]	; (8cf8 <system_clock_init+0x194>)
    8c98:	4798      	blx	r3
    8c9a:	2800      	cmp	r0, #0
    8c9c:	d0fa      	beq.n	8c94 <system_clock_init+0x130>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    8c9e:	4a11      	ldr	r2, [pc, #68]	; (8ce4 <system_clock_init+0x180>)
    8ca0:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    8ca2:	2180      	movs	r1, #128	; 0x80
    8ca4:	430b      	orrs	r3, r1
    8ca6:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    8ca8:	4a1c      	ldr	r2, [pc, #112]	; (8d1c <system_clock_init+0x1b8>)
    8caa:	2300      	movs	r3, #0
    8cac:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    8cae:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    8cb0:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    8cb2:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    8cb4:	a901      	add	r1, sp, #4
    8cb6:	2201      	movs	r2, #1
    8cb8:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    8cba:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    8cbc:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    8cbe:	3307      	adds	r3, #7
    8cc0:	700b      	strb	r3, [r1, #0]
    8cc2:	720a      	strb	r2, [r1, #8]
    8cc4:	2000      	movs	r0, #0
    8cc6:	4b13      	ldr	r3, [pc, #76]	; (8d14 <system_clock_init+0x1b0>)
    8cc8:	4798      	blx	r3
    8cca:	2000      	movs	r0, #0
    8ccc:	4b12      	ldr	r3, [pc, #72]	; (8d18 <system_clock_init+0x1b4>)
    8cce:	4798      	blx	r3
#endif
}
    8cd0:	b00f      	add	sp, #60	; 0x3c
    8cd2:	bc3c      	pop	{r2, r3, r4, r5}
    8cd4:	4690      	mov	r8, r2
    8cd6:	4699      	mov	r9, r3
    8cd8:	46a2      	mov	sl, r4
    8cda:	46ab      	mov	fp, r5
    8cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    8cde:	3b20      	subs	r3, #32
    8ce0:	e77c      	b.n	8bdc <system_clock_init+0x78>
    8ce2:	46c0      	nop			; (mov r8, r8)
    8ce4:	40000800 	.word	0x40000800
    8ce8:	41004000 	.word	0x41004000
    8cec:	0000885d 	.word	0x0000885d
    8cf0:	0000894d 	.word	0x0000894d
    8cf4:	00008a69 	.word	0x00008a69
    8cf8:	00008b15 	.word	0x00008b15
    8cfc:	00806024 	.word	0x00806024
    8d00:	000001ff 	.word	0x000001ff
    8d04:	ffffbb80 	.word	0xffffbb80
    8d08:	000089dd 	.word	0x000089dd
    8d0c:	00008911 	.word	0x00008911
    8d10:	00008d21 	.word	0x00008d21
    8d14:	00008d45 	.word	0x00008d45
    8d18:	00008e15 	.word	0x00008e15
    8d1c:	40000400 	.word	0x40000400

00008d20 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    8d20:	4a06      	ldr	r2, [pc, #24]	; (8d3c <system_gclk_init+0x1c>)
    8d22:	6993      	ldr	r3, [r2, #24]
    8d24:	2108      	movs	r1, #8
    8d26:	430b      	orrs	r3, r1
    8d28:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    8d2a:	2201      	movs	r2, #1
    8d2c:	4b04      	ldr	r3, [pc, #16]	; (8d40 <system_gclk_init+0x20>)
    8d2e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    8d30:	4b03      	ldr	r3, [pc, #12]	; (8d40 <system_gclk_init+0x20>)
    8d32:	781b      	ldrb	r3, [r3, #0]
    8d34:	07db      	lsls	r3, r3, #31
    8d36:	d4fb      	bmi.n	8d30 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    8d38:	4770      	bx	lr
    8d3a:	46c0      	nop			; (mov r8, r8)
    8d3c:	40000400 	.word	0x40000400
    8d40:	40000c00 	.word	0x40000c00

00008d44 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    8d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d46:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    8d48:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    8d4a:	780c      	ldrb	r4, [r1, #0]
    8d4c:	0224      	lsls	r4, r4, #8
    8d4e:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    8d50:	784b      	ldrb	r3, [r1, #1]
    8d52:	2b00      	cmp	r3, #0
    8d54:	d002      	beq.n	8d5c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    8d56:	2380      	movs	r3, #128	; 0x80
    8d58:	02db      	lsls	r3, r3, #11
    8d5a:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    8d5c:	7a4b      	ldrb	r3, [r1, #9]
    8d5e:	2b00      	cmp	r3, #0
    8d60:	d002      	beq.n	8d68 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    8d62:	2380      	movs	r3, #128	; 0x80
    8d64:	031b      	lsls	r3, r3, #12
    8d66:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    8d68:	6848      	ldr	r0, [r1, #4]
    8d6a:	2801      	cmp	r0, #1
    8d6c:	d912      	bls.n	8d94 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    8d6e:	1e43      	subs	r3, r0, #1
    8d70:	4203      	tst	r3, r0
    8d72:	d03d      	beq.n	8df0 <system_gclk_gen_set_config+0xac>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    8d74:	0205      	lsls	r5, r0, #8
			new_gendiv_config  |=
    8d76:	4335      	orrs	r5, r6

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    8d78:	2380      	movs	r3, #128	; 0x80
    8d7a:	029b      	lsls	r3, r3, #10
    8d7c:	431c      	orrs	r4, r3
    8d7e:	e009      	b.n	8d94 <system_gclk_gen_set_config+0x50>
				div2_count++;
    8d80:	3201      	adds	r2, #1
						mask <<= 1) {
    8d82:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    8d84:	4283      	cmp	r3, r0
    8d86:	d3fb      	bcc.n	8d80 <system_gclk_gen_set_config+0x3c>
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    8d88:	0212      	lsls	r2, r2, #8
    8d8a:	4332      	orrs	r2, r6
    8d8c:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    8d8e:	2380      	movs	r3, #128	; 0x80
    8d90:	035b      	lsls	r3, r3, #13
    8d92:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    8d94:	7a0b      	ldrb	r3, [r1, #8]
    8d96:	2b00      	cmp	r3, #0
    8d98:	d002      	beq.n	8da0 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    8d9a:	2380      	movs	r3, #128	; 0x80
    8d9c:	039b      	lsls	r3, r3, #14
    8d9e:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8da0:	4b18      	ldr	r3, [pc, #96]	; (8e04 <system_gclk_gen_set_config+0xc0>)
    8da2:	785b      	ldrb	r3, [r3, #1]
    8da4:	b25b      	sxtb	r3, r3
    8da6:	2b00      	cmp	r3, #0
    8da8:	db25      	blt.n	8df6 <system_gclk_gen_set_config+0xb2>
	return false;
    8daa:	2700      	movs	r7, #0
	}

	while (system_gclk_is_syncing()) {
    8dac:	2f00      	cmp	r7, #0
    8dae:	d1f7      	bne.n	8da0 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    8db0:	4b15      	ldr	r3, [pc, #84]	; (8e08 <system_gclk_gen_set_config+0xc4>)
    8db2:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    8db4:	4b15      	ldr	r3, [pc, #84]	; (8e0c <system_gclk_gen_set_config+0xc8>)
    8db6:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8db8:	4b12      	ldr	r3, [pc, #72]	; (8e04 <system_gclk_gen_set_config+0xc0>)
    8dba:	785b      	ldrb	r3, [r3, #1]
    8dbc:	b25b      	sxtb	r3, r3
    8dbe:	2b00      	cmp	r3, #0
    8dc0:	db1b      	blt.n	8dfa <system_gclk_gen_set_config+0xb6>
	return false;
    8dc2:	003a      	movs	r2, r7

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    8dc4:	2a00      	cmp	r2, #0
    8dc6:	d1f7      	bne.n	8db8 <system_gclk_gen_set_config+0x74>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    8dc8:	4b0e      	ldr	r3, [pc, #56]	; (8e04 <system_gclk_gen_set_config+0xc0>)
    8dca:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8dcc:	4b0d      	ldr	r3, [pc, #52]	; (8e04 <system_gclk_gen_set_config+0xc0>)
    8dce:	785b      	ldrb	r3, [r3, #1]
    8dd0:	b25b      	sxtb	r3, r3
    8dd2:	2b00      	cmp	r3, #0
    8dd4:	db13      	blt.n	8dfe <system_gclk_gen_set_config+0xba>
	return false;
    8dd6:	0013      	movs	r3, r2

	while (system_gclk_is_syncing()) {
    8dd8:	2b00      	cmp	r3, #0
    8dda:	d1f7      	bne.n	8dcc <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    8ddc:	4a09      	ldr	r2, [pc, #36]	; (8e04 <system_gclk_gen_set_config+0xc0>)
    8dde:	6853      	ldr	r3, [r2, #4]
    8de0:	2180      	movs	r1, #128	; 0x80
    8de2:	0249      	lsls	r1, r1, #9
    8de4:	400b      	ands	r3, r1
    8de6:	431c      	orrs	r4, r3
    8de8:	6054      	str	r4, [r2, #4]
	cpu_irq_leave_critical();
    8dea:	4b09      	ldr	r3, [pc, #36]	; (8e10 <system_gclk_gen_set_config+0xcc>)
    8dec:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8df0:	2302      	movs	r3, #2
    8df2:	2200      	movs	r2, #0
    8df4:	e7c6      	b.n	8d84 <system_gclk_gen_set_config+0x40>
		return true;
    8df6:	2701      	movs	r7, #1
    8df8:	e7d8      	b.n	8dac <system_gclk_gen_set_config+0x68>
    8dfa:	2201      	movs	r2, #1
    8dfc:	e7e2      	b.n	8dc4 <system_gclk_gen_set_config+0x80>
    8dfe:	2301      	movs	r3, #1
    8e00:	e7ea      	b.n	8dd8 <system_gclk_gen_set_config+0x94>
    8e02:	46c0      	nop			; (mov r8, r8)
    8e04:	40000c00 	.word	0x40000c00
    8e08:	000087ed 	.word	0x000087ed
    8e0c:	40000c08 	.word	0x40000c08
    8e10:	0000882d 	.word	0x0000882d

00008e14 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    8e14:	b570      	push	{r4, r5, r6, lr}
    8e16:	0005      	movs	r5, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8e18:	4b10      	ldr	r3, [pc, #64]	; (8e5c <system_gclk_gen_enable+0x48>)
    8e1a:	785b      	ldrb	r3, [r3, #1]
    8e1c:	b25b      	sxtb	r3, r3
    8e1e:	2b00      	cmp	r3, #0
    8e20:	db17      	blt.n	8e52 <system_gclk_gen_enable+0x3e>
	return false;
    8e22:	2400      	movs	r4, #0
	while (system_gclk_is_syncing()) {
    8e24:	2c00      	cmp	r4, #0
    8e26:	d1f7      	bne.n	8e18 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    8e28:	4b0d      	ldr	r3, [pc, #52]	; (8e60 <system_gclk_gen_enable+0x4c>)
    8e2a:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8e2c:	4b0d      	ldr	r3, [pc, #52]	; (8e64 <system_gclk_gen_enable+0x50>)
    8e2e:	701d      	strb	r5, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8e30:	4b0a      	ldr	r3, [pc, #40]	; (8e5c <system_gclk_gen_enable+0x48>)
    8e32:	785b      	ldrb	r3, [r3, #1]
    8e34:	b25b      	sxtb	r3, r3
    8e36:	2b00      	cmp	r3, #0
    8e38:	db0d      	blt.n	8e56 <system_gclk_gen_enable+0x42>
	return false;
    8e3a:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    8e3c:	2b00      	cmp	r3, #0
    8e3e:	d1f7      	bne.n	8e30 <system_gclk_gen_enable+0x1c>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    8e40:	4a06      	ldr	r2, [pc, #24]	; (8e5c <system_gclk_gen_enable+0x48>)
    8e42:	6851      	ldr	r1, [r2, #4]
    8e44:	2380      	movs	r3, #128	; 0x80
    8e46:	025b      	lsls	r3, r3, #9
    8e48:	430b      	orrs	r3, r1
    8e4a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    8e4c:	4b06      	ldr	r3, [pc, #24]	; (8e68 <system_gclk_gen_enable+0x54>)
    8e4e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8e50:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    8e52:	2401      	movs	r4, #1
    8e54:	e7e6      	b.n	8e24 <system_gclk_gen_enable+0x10>
    8e56:	2301      	movs	r3, #1
    8e58:	e7f0      	b.n	8e3c <system_gclk_gen_enable+0x28>
    8e5a:	46c0      	nop			; (mov r8, r8)
    8e5c:	40000c00 	.word	0x40000c00
    8e60:	000087ed 	.word	0x000087ed
    8e64:	40000c04 	.word	0x40000c04
    8e68:	0000882d 	.word	0x0000882d

00008e6c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    8e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e6e:	0007      	movs	r7, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8e70:	4b22      	ldr	r3, [pc, #136]	; (8efc <system_gclk_gen_get_hz+0x90>)
    8e72:	785b      	ldrb	r3, [r3, #1]
    8e74:	b25b      	sxtb	r3, r3
    8e76:	2b00      	cmp	r3, #0
    8e78:	db34      	blt.n	8ee4 <system_gclk_gen_get_hz+0x78>
	return false;
    8e7a:	2500      	movs	r5, #0
	while (system_gclk_is_syncing()) {
    8e7c:	2d00      	cmp	r5, #0
    8e7e:	d1f7      	bne.n	8e70 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    8e80:	4b1f      	ldr	r3, [pc, #124]	; (8f00 <system_gclk_gen_get_hz+0x94>)
    8e82:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8e84:	4b1f      	ldr	r3, [pc, #124]	; (8f04 <system_gclk_gen_get_hz+0x98>)
    8e86:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8e88:	4b1c      	ldr	r3, [pc, #112]	; (8efc <system_gclk_gen_get_hz+0x90>)
    8e8a:	785b      	ldrb	r3, [r3, #1]
    8e8c:	b25b      	sxtb	r3, r3
    8e8e:	2b00      	cmp	r3, #0
    8e90:	db2a      	blt.n	8ee8 <system_gclk_gen_get_hz+0x7c>
	return false;
    8e92:	002c      	movs	r4, r5
	while (system_gclk_is_syncing()) {
    8e94:	2c00      	cmp	r4, #0
    8e96:	d1f7      	bne.n	8e88 <system_gclk_gen_get_hz+0x1c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    8e98:	4e18      	ldr	r6, [pc, #96]	; (8efc <system_gclk_gen_get_hz+0x90>)
    8e9a:	6870      	ldr	r0, [r6, #4]
    8e9c:	04c0      	lsls	r0, r0, #19
    8e9e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    8ea0:	4b19      	ldr	r3, [pc, #100]	; (8f08 <system_gclk_gen_get_hz+0x9c>)
    8ea2:	4798      	blx	r3
    8ea4:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8ea6:	4b17      	ldr	r3, [pc, #92]	; (8f04 <system_gclk_gen_get_hz+0x98>)
    8ea8:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    8eaa:	6876      	ldr	r6, [r6, #4]
    8eac:	02f6      	lsls	r6, r6, #11
    8eae:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    8eb0:	4b16      	ldr	r3, [pc, #88]	; (8f0c <system_gclk_gen_get_hz+0xa0>)
    8eb2:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8eb4:	4b11      	ldr	r3, [pc, #68]	; (8efc <system_gclk_gen_get_hz+0x90>)
    8eb6:	785b      	ldrb	r3, [r3, #1]
    8eb8:	b25b      	sxtb	r3, r3
    8eba:	2b00      	cmp	r3, #0
    8ebc:	db16      	blt.n	8eec <system_gclk_gen_get_hz+0x80>
	return false;
    8ebe:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    8ec0:	2b00      	cmp	r3, #0
    8ec2:	d1f7      	bne.n	8eb4 <system_gclk_gen_get_hz+0x48>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    8ec4:	4b0d      	ldr	r3, [pc, #52]	; (8efc <system_gclk_gen_get_hz+0x90>)
    8ec6:	689c      	ldr	r4, [r3, #8]
    8ec8:	0224      	lsls	r4, r4, #8
    8eca:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    8ecc:	4b10      	ldr	r3, [pc, #64]	; (8f10 <system_gclk_gen_get_hz+0xa4>)
    8ece:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    8ed0:	2e00      	cmp	r6, #0
    8ed2:	d10d      	bne.n	8ef0 <system_gclk_gen_get_hz+0x84>
    8ed4:	2c01      	cmp	r4, #1
    8ed6:	d90b      	bls.n	8ef0 <system_gclk_gen_get_hz+0x84>
		gen_input_hz /= divider;
    8ed8:	0021      	movs	r1, r4
    8eda:	0028      	movs	r0, r5
    8edc:	4b0d      	ldr	r3, [pc, #52]	; (8f14 <system_gclk_gen_get_hz+0xa8>)
    8ede:	4798      	blx	r3
    8ee0:	0005      	movs	r5, r0
    8ee2:	e009      	b.n	8ef8 <system_gclk_gen_get_hz+0x8c>
		return true;
    8ee4:	2501      	movs	r5, #1
    8ee6:	e7c9      	b.n	8e7c <system_gclk_gen_get_hz+0x10>
    8ee8:	2401      	movs	r4, #1
    8eea:	e7d3      	b.n	8e94 <system_gclk_gen_get_hz+0x28>
    8eec:	2301      	movs	r3, #1
    8eee:	e7e7      	b.n	8ec0 <system_gclk_gen_get_hz+0x54>
	} else if (divsel) {
    8ef0:	2e00      	cmp	r6, #0
    8ef2:	d001      	beq.n	8ef8 <system_gclk_gen_get_hz+0x8c>
		gen_input_hz >>= (divider+1);
    8ef4:	3401      	adds	r4, #1
    8ef6:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    8ef8:	0028      	movs	r0, r5
    8efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8efc:	40000c00 	.word	0x40000c00
    8f00:	000087ed 	.word	0x000087ed
    8f04:	40000c04 	.word	0x40000c04
    8f08:	00008881 	.word	0x00008881
    8f0c:	40000c08 	.word	0x40000c08
    8f10:	0000882d 	.word	0x0000882d
    8f14:	000094fd 	.word	0x000094fd

00008f18 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    8f18:	b510      	push	{r4, lr}
    8f1a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8f1c:	4b06      	ldr	r3, [pc, #24]	; (8f38 <system_gclk_chan_enable+0x20>)
    8f1e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8f20:	4b06      	ldr	r3, [pc, #24]	; (8f3c <system_gclk_chan_enable+0x24>)
    8f22:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    8f24:	4a06      	ldr	r2, [pc, #24]	; (8f40 <system_gclk_chan_enable+0x28>)
    8f26:	8853      	ldrh	r3, [r2, #2]
    8f28:	2180      	movs	r1, #128	; 0x80
    8f2a:	01c9      	lsls	r1, r1, #7
    8f2c:	430b      	orrs	r3, r1
    8f2e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    8f30:	4b04      	ldr	r3, [pc, #16]	; (8f44 <system_gclk_chan_enable+0x2c>)
    8f32:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8f34:	bd10      	pop	{r4, pc}
    8f36:	46c0      	nop			; (mov r8, r8)
    8f38:	000087ed 	.word	0x000087ed
    8f3c:	40000c02 	.word	0x40000c02
    8f40:	40000c00 	.word	0x40000c00
    8f44:	0000882d 	.word	0x0000882d

00008f48 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    8f48:	b510      	push	{r4, lr}
    8f4a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8f4c:	4b0e      	ldr	r3, [pc, #56]	; (8f88 <system_gclk_chan_disable+0x40>)
    8f4e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8f50:	4b0e      	ldr	r3, [pc, #56]	; (8f8c <system_gclk_chan_disable+0x44>)
    8f52:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    8f54:	490e      	ldr	r1, [pc, #56]	; (8f90 <system_gclk_chan_disable+0x48>)
    8f56:	884b      	ldrh	r3, [r1, #2]
    8f58:	051b      	lsls	r3, r3, #20
    8f5a:	0f1a      	lsrs	r2, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    8f5c:	884b      	ldrh	r3, [r1, #2]
    8f5e:	480d      	ldr	r0, [pc, #52]	; (8f94 <system_gclk_chan_disable+0x4c>)
    8f60:	4003      	ands	r3, r0
    8f62:	804b      	strh	r3, [r1, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    8f64:	884b      	ldrh	r3, [r1, #2]
    8f66:	480c      	ldr	r0, [pc, #48]	; (8f98 <system_gclk_chan_disable+0x50>)
    8f68:	4003      	ands	r3, r0
    8f6a:	804b      	strh	r3, [r1, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    8f6c:	4b08      	ldr	r3, [pc, #32]	; (8f90 <system_gclk_chan_disable+0x48>)
    8f6e:	885b      	ldrh	r3, [r3, #2]
    8f70:	045b      	lsls	r3, r3, #17
    8f72:	d4fb      	bmi.n	8f6c <system_gclk_chan_disable+0x24>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    8f74:	4806      	ldr	r0, [pc, #24]	; (8f90 <system_gclk_chan_disable+0x48>)
    8f76:	8841      	ldrh	r1, [r0, #2]
    8f78:	0213      	lsls	r3, r2, #8
    8f7a:	4a06      	ldr	r2, [pc, #24]	; (8f94 <system_gclk_chan_disable+0x4c>)
    8f7c:	400a      	ands	r2, r1
    8f7e:	4313      	orrs	r3, r2
    8f80:	8043      	strh	r3, [r0, #2]
	cpu_irq_leave_critical();
    8f82:	4b06      	ldr	r3, [pc, #24]	; (8f9c <system_gclk_chan_disable+0x54>)
    8f84:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8f86:	bd10      	pop	{r4, pc}
    8f88:	000087ed 	.word	0x000087ed
    8f8c:	40000c02 	.word	0x40000c02
    8f90:	40000c00 	.word	0x40000c00
    8f94:	fffff0ff 	.word	0xfffff0ff
    8f98:	ffffbfff 	.word	0xffffbfff
    8f9c:	0000882d 	.word	0x0000882d

00008fa0 <system_gclk_chan_set_config>:
{
    8fa0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    8fa2:	780c      	ldrb	r4, [r1, #0]
    8fa4:	0224      	lsls	r4, r4, #8
    8fa6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    8fa8:	4b02      	ldr	r3, [pc, #8]	; (8fb4 <system_gclk_chan_set_config+0x14>)
    8faa:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    8fac:	b2a4      	uxth	r4, r4
    8fae:	4b02      	ldr	r3, [pc, #8]	; (8fb8 <system_gclk_chan_set_config+0x18>)
    8fb0:	805c      	strh	r4, [r3, #2]
}
    8fb2:	bd10      	pop	{r4, pc}
    8fb4:	00008f49 	.word	0x00008f49
    8fb8:	40000c00 	.word	0x40000c00

00008fbc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    8fbc:	b510      	push	{r4, lr}
    8fbe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8fc0:	4b06      	ldr	r3, [pc, #24]	; (8fdc <system_gclk_chan_get_hz+0x20>)
    8fc2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8fc4:	4b06      	ldr	r3, [pc, #24]	; (8fe0 <system_gclk_chan_get_hz+0x24>)
    8fc6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    8fc8:	4b06      	ldr	r3, [pc, #24]	; (8fe4 <system_gclk_chan_get_hz+0x28>)
    8fca:	885c      	ldrh	r4, [r3, #2]
    8fcc:	0524      	lsls	r4, r4, #20
    8fce:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    8fd0:	4b05      	ldr	r3, [pc, #20]	; (8fe8 <system_gclk_chan_get_hz+0x2c>)
    8fd2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    8fd4:	0020      	movs	r0, r4
    8fd6:	4b05      	ldr	r3, [pc, #20]	; (8fec <system_gclk_chan_get_hz+0x30>)
    8fd8:	4798      	blx	r3
}
    8fda:	bd10      	pop	{r4, pc}
    8fdc:	000087ed 	.word	0x000087ed
    8fe0:	40000c02 	.word	0x40000c02
    8fe4:	40000c00 	.word	0x40000c00
    8fe8:	0000882d 	.word	0x0000882d
    8fec:	00008e6d 	.word	0x00008e6d

00008ff0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    8ff0:	b570      	push	{r4, r5, r6, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    8ff2:	78d3      	ldrb	r3, [r2, #3]
    8ff4:	2b00      	cmp	r3, #0
    8ff6:	d120      	bne.n	903a <_system_pinmux_config+0x4a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    8ff8:	7815      	ldrb	r5, [r2, #0]
    8ffa:	2d80      	cmp	r5, #128	; 0x80
    8ffc:	d01b      	beq.n	9036 <_system_pinmux_config+0x46>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    8ffe:	062d      	lsls	r5, r5, #24
    9000:	2380      	movs	r3, #128	; 0x80
    9002:	025b      	lsls	r3, r3, #9
    9004:	431d      	orrs	r5, r3
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    9006:	7853      	ldrb	r3, [r2, #1]
    9008:	2b00      	cmp	r3, #0
    900a:	d001      	beq.n	9010 <_system_pinmux_config+0x20>
    900c:	2b02      	cmp	r3, #2
    900e:	d10a      	bne.n	9026 <_system_pinmux_config+0x36>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    9010:	2380      	movs	r3, #128	; 0x80
    9012:	029b      	lsls	r3, r3, #10
    9014:	432b      	orrs	r3, r5

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    9016:	7894      	ldrb	r4, [r2, #2]
    9018:	2c00      	cmp	r4, #0
    901a:	d002      	beq.n	9022 <_system_pinmux_config+0x32>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    901c:	23c0      	movs	r3, #192	; 0xc0
    901e:	02db      	lsls	r3, r3, #11
    9020:	432b      	orrs	r3, r5
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    9022:	6041      	str	r1, [r0, #4]
    9024:	001d      	movs	r5, r3
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9026:	7853      	ldrb	r3, [r2, #1]
    9028:	3b01      	subs	r3, #1
    902a:	b2db      	uxtb	r3, r3
    902c:	2b01      	cmp	r3, #1
    902e:	d806      	bhi.n	903e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    9030:	4b13      	ldr	r3, [pc, #76]	; (9080 <_system_pinmux_config+0x90>)
    9032:	401d      	ands	r5, r3
    9034:	e003      	b.n	903e <_system_pinmux_config+0x4e>
	uint32_t pin_cfg = 0;
    9036:	2500      	movs	r5, #0
    9038:	e7e5      	b.n	9006 <_system_pinmux_config+0x16>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    903a:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    903c:	2500      	movs	r5, #0
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    903e:	040c      	lsls	r4, r1, #16
    9040:	0c24      	lsrs	r4, r4, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);
    9042:	0c0b      	lsrs	r3, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    9044:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    9046:	26a0      	movs	r6, #160	; 0xa0
    9048:	05f6      	lsls	r6, r6, #23
    904a:	4334      	orrs	r4, r6
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    904c:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    904e:	432b      	orrs	r3, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    9050:	24d0      	movs	r4, #208	; 0xd0
    9052:	0624      	lsls	r4, r4, #24
    9054:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    9056:	6283      	str	r3, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    9058:	78d3      	ldrb	r3, [r2, #3]
    905a:	2b00      	cmp	r3, #0
    905c:	d10a      	bne.n	9074 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    905e:	036b      	lsls	r3, r5, #13
    9060:	d503      	bpl.n	906a <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    9062:	7893      	ldrb	r3, [r2, #2]
    9064:	2b01      	cmp	r3, #1
    9066:	d006      	beq.n	9076 <_system_pinmux_config+0x86>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    9068:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    906a:	7853      	ldrb	r3, [r2, #1]
    906c:	3b01      	subs	r3, #1
    906e:	b2db      	uxtb	r3, r3
    9070:	2b01      	cmp	r3, #1
    9072:	d902      	bls.n	907a <_system_pinmux_config+0x8a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    9074:	bd70      	pop	{r4, r5, r6, pc}
				port->OUTSET.reg = pin_mask;
    9076:	6181      	str	r1, [r0, #24]
    9078:	e7f7      	b.n	906a <_system_pinmux_config+0x7a>
			port->DIRSET.reg = pin_mask;
    907a:	6081      	str	r1, [r0, #8]
}
    907c:	e7fa      	b.n	9074 <_system_pinmux_config+0x84>
    907e:	46c0      	nop			; (mov r8, r8)
    9080:	fffbffff 	.word	0xfffbffff

00009084 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    9084:	b510      	push	{r4, lr}
    9086:	000a      	movs	r2, r1
	uint8_t port_index  = (gpio_pin / 128);
    9088:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
    908a:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
    908c:	2900      	cmp	r1, #0
    908e:	d10b      	bne.n	90a8 <system_pinmux_pin_set_config+0x24>
		return &(ports[port_index]->Group[group_index]);
    9090:	01db      	lsls	r3, r3, #7
    9092:	4906      	ldr	r1, [pc, #24]	; (90ac <system_pinmux_pin_set_config+0x28>)
    9094:	468c      	mov	ip, r1
    9096:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    9098:	241f      	movs	r4, #31
    909a:	4020      	ands	r0, r4
    909c:	2101      	movs	r1, #1
    909e:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    90a0:	0018      	movs	r0, r3
    90a2:	4b03      	ldr	r3, [pc, #12]	; (90b0 <system_pinmux_pin_set_config+0x2c>)
    90a4:	4798      	blx	r3
}
    90a6:	bd10      	pop	{r4, pc}
		return NULL;
    90a8:	2300      	movs	r3, #0
    90aa:	e7f5      	b.n	9098 <system_pinmux_pin_set_config+0x14>
    90ac:	41004400 	.word	0x41004400
    90b0:	00008ff1 	.word	0x00008ff1

000090b4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    90b4:	4770      	bx	lr
	...

000090b8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    90b8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    90ba:	4b05      	ldr	r3, [pc, #20]	; (90d0 <system_init+0x18>)
    90bc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    90be:	4b05      	ldr	r3, [pc, #20]	; (90d4 <system_init+0x1c>)
    90c0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    90c2:	4b05      	ldr	r3, [pc, #20]	; (90d8 <system_init+0x20>)
    90c4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    90c6:	4b05      	ldr	r3, [pc, #20]	; (90dc <system_init+0x24>)
    90c8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    90ca:	4b05      	ldr	r3, [pc, #20]	; (90e0 <system_init+0x28>)
    90cc:	4798      	blx	r3
}
    90ce:	bd10      	pop	{r4, pc}
    90d0:	00008b65 	.word	0x00008b65
    90d4:	0000871d 	.word	0x0000871d
    90d8:	000039b5 	.word	0x000039b5
    90dc:	00003ab9 	.word	0x00003ab9
    90e0:	000090b5 	.word	0x000090b5

000090e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    90e4:	e7fe      	b.n	90e4 <Dummy_Handler>
	...

000090e8 <Reset_Handler>:
{
    90e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    90ea:	4a23      	ldr	r2, [pc, #140]	; (9178 <Reset_Handler+0x90>)
    90ec:	4b23      	ldr	r3, [pc, #140]	; (917c <Reset_Handler+0x94>)
    90ee:	429a      	cmp	r2, r3
    90f0:	d009      	beq.n	9106 <Reset_Handler+0x1e>
    90f2:	4b22      	ldr	r3, [pc, #136]	; (917c <Reset_Handler+0x94>)
    90f4:	4a20      	ldr	r2, [pc, #128]	; (9178 <Reset_Handler+0x90>)
    90f6:	e003      	b.n	9100 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    90f8:	6811      	ldr	r1, [r2, #0]
    90fa:	6019      	str	r1, [r3, #0]
    90fc:	3304      	adds	r3, #4
    90fe:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    9100:	491f      	ldr	r1, [pc, #124]	; (9180 <Reset_Handler+0x98>)
    9102:	428b      	cmp	r3, r1
    9104:	d3f8      	bcc.n	90f8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    9106:	4b1f      	ldr	r3, [pc, #124]	; (9184 <Reset_Handler+0x9c>)
    9108:	e002      	b.n	9110 <Reset_Handler+0x28>
                *pDest++ = 0;
    910a:	2200      	movs	r2, #0
    910c:	601a      	str	r2, [r3, #0]
    910e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    9110:	4a1d      	ldr	r2, [pc, #116]	; (9188 <Reset_Handler+0xa0>)
    9112:	4293      	cmp	r3, r2
    9114:	d3f9      	bcc.n	910a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    9116:	4a1d      	ldr	r2, [pc, #116]	; (918c <Reset_Handler+0xa4>)
    9118:	21ff      	movs	r1, #255	; 0xff
    911a:	4b1d      	ldr	r3, [pc, #116]	; (9190 <Reset_Handler+0xa8>)
    911c:	438b      	bics	r3, r1
    911e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    9120:	39fd      	subs	r1, #253	; 0xfd
    9122:	2390      	movs	r3, #144	; 0x90
    9124:	005b      	lsls	r3, r3, #1
    9126:	4a1b      	ldr	r2, [pc, #108]	; (9194 <Reset_Handler+0xac>)
    9128:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    912a:	4a1b      	ldr	r2, [pc, #108]	; (9198 <Reset_Handler+0xb0>)
    912c:	78d3      	ldrb	r3, [r2, #3]
    912e:	2503      	movs	r5, #3
    9130:	43ab      	bics	r3, r5
    9132:	2402      	movs	r4, #2
    9134:	4323      	orrs	r3, r4
    9136:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    9138:	78d3      	ldrb	r3, [r2, #3]
    913a:	270c      	movs	r7, #12
    913c:	43bb      	bics	r3, r7
    913e:	2608      	movs	r6, #8
    9140:	4333      	orrs	r3, r6
    9142:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    9144:	4b15      	ldr	r3, [pc, #84]	; (919c <Reset_Handler+0xb4>)
    9146:	7b98      	ldrb	r0, [r3, #14]
    9148:	2230      	movs	r2, #48	; 0x30
    914a:	4390      	bics	r0, r2
    914c:	2220      	movs	r2, #32
    914e:	4310      	orrs	r0, r2
    9150:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    9152:	7b99      	ldrb	r1, [r3, #14]
    9154:	43b9      	bics	r1, r7
    9156:	4331      	orrs	r1, r6
    9158:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    915a:	7b9a      	ldrb	r2, [r3, #14]
    915c:	43aa      	bics	r2, r5
    915e:	4322      	orrs	r2, r4
    9160:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    9162:	4a0f      	ldr	r2, [pc, #60]	; (91a0 <Reset_Handler+0xb8>)
    9164:	6851      	ldr	r1, [r2, #4]
    9166:	2380      	movs	r3, #128	; 0x80
    9168:	430b      	orrs	r3, r1
    916a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    916c:	4b0d      	ldr	r3, [pc, #52]	; (91a4 <Reset_Handler+0xbc>)
    916e:	4798      	blx	r3
        main();
    9170:	4b0d      	ldr	r3, [pc, #52]	; (91a8 <Reset_Handler+0xc0>)
    9172:	4798      	blx	r3
    9174:	e7fe      	b.n	9174 <Reset_Handler+0x8c>
    9176:	46c0      	nop			; (mov r8, r8)
    9178:	0000cc84 	.word	0x0000cc84
    917c:	20000000 	.word	0x20000000
    9180:	20000170 	.word	0x20000170
    9184:	20000170 	.word	0x20000170
    9188:	200029e0 	.word	0x200029e0
    918c:	e000ed00 	.word	0xe000ed00
    9190:	00000000 	.word	0x00000000
    9194:	41007000 	.word	0x41007000
    9198:	41005000 	.word	0x41005000
    919c:	41004800 	.word	0x41004800
    91a0:	41004000 	.word	0x41004000
    91a4:	0000c345 	.word	0x0000c345
    91a8:	000091ad 	.word	0x000091ad

000091ac <main>:
#include "SoundTX.h"
#include "SoundRX.h"
#include "LedFlash.h"

int main (void)
{
    91ac:	b510      	push	{r4, lr}
    91ae:	b082      	sub	sp, #8
	volatile uint32_t init_delay_tm = 0;
    91b0:	2300      	movs	r3, #0
    91b2:	9301      	str	r3, [sp, #4]

	system_init();
    91b4:	4b53      	ldr	r3, [pc, #332]	; (9304 <main+0x158>)
    91b6:	4798      	blx	r3
	
	cpu_irq_enable();
    91b8:	2201      	movs	r2, #1
    91ba:	4b53      	ldr	r3, [pc, #332]	; (9308 <main+0x15c>)
    91bc:	701a      	strb	r2, [r3, #0]
    91be:	f3bf 8f5f 	dmb	sy
    91c2:	b662      	cpsie	i
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    91c4:	2300      	movs	r3, #0
    91c6:	2b03      	cmp	r3, #3
    91c8:	d944      	bls.n	9254 <main+0xa8>
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    91ca:	2201      	movs	r2, #1
    91cc:	4b4f      	ldr	r3, [pc, #316]	; (930c <main+0x160>)
    91ce:	711a      	strb	r2, [r3, #4]
	
	sleepmgr_init();
	udc_start();
    91d0:	4b4f      	ldr	r3, [pc, #316]	; (9310 <main+0x164>)
    91d2:	4798      	blx	r3

	SystemRTC_Init();
    91d4:	4b4f      	ldr	r3, [pc, #316]	; (9314 <main+0x168>)
    91d6:	4798      	blx	r3

	configure_usart_Servo();
    91d8:	4b4f      	ldr	r3, [pc, #316]	; (9318 <main+0x16c>)
    91da:	4798      	blx	r3
	configure_usart_Serial();
    91dc:	4b4f      	ldr	r3, [pc, #316]	; (931c <main+0x170>)
    91de:	4798      	blx	r3
	configure_i2c_master();
    91e0:	4b4f      	ldr	r3, [pc, #316]	; (9320 <main+0x174>)
    91e2:	4798      	blx	r3
	
	configure_adc_trigger_event();
    91e4:	4b4f      	ldr	r3, [pc, #316]	; (9324 <main+0x178>)
    91e6:	4798      	blx	r3

	configure_adc(GetI2S_TX_Buffer(0));
    91e8:	2000      	movs	r0, #0
    91ea:	4b4f      	ldr	r3, [pc, #316]	; (9328 <main+0x17c>)
    91ec:	4798      	blx	r3
    91ee:	4b4f      	ldr	r3, [pc, #316]	; (932c <main+0x180>)
    91f0:	4798      	blx	r3

	configure_dac();
    91f2:	4b4f      	ldr	r3, [pc, #316]	; (9330 <main+0x184>)
    91f4:	4798      	blx	r3
	configure_dac_channel();
    91f6:	4b4f      	ldr	r3, [pc, #316]	; (9334 <main+0x188>)
    91f8:	4798      	blx	r3

	config_dma_for_DAC();
    91fa:	4b4f      	ldr	r3, [pc, #316]	; (9338 <main+0x18c>)
    91fc:	4798      	blx	r3
	configure_DAC_trigger_dma();
    91fe:	4b4f      	ldr	r3, [pc, #316]	; (933c <main+0x190>)
    9200:	4798      	blx	r3

	configure_ADC_dma();
    9202:	4b4f      	ldr	r3, [pc, #316]	; (9340 <main+0x194>)
    9204:	4798      	blx	r3
	configure_ADC_trigger();
    9206:	4b4f      	ldr	r3, [pc, #316]	; (9344 <main+0x198>)
    9208:	4798      	blx	r3

	config_dma_for_RX();
    920a:	4b4f      	ldr	r3, [pc, #316]	; (9348 <main+0x19c>)
    920c:	4798      	blx	r3
	config_dma_for_TX();
    920e:	4b4f      	ldr	r3, [pc, #316]	; (934c <main+0x1a0>)
    9210:	4798      	blx	r3

	configure_i2s();
    9212:	4b4f      	ldr	r3, [pc, #316]	; (9350 <main+0x1a4>)
    9214:	4798      	blx	r3
	CAP1203_Initialize();
    9216:	4b4f      	ldr	r3, [pc, #316]	; (9354 <main+0x1a8>)
    9218:	4798      	blx	r3
	fInit_Mouth();
    921a:	4b4f      	ldr	r3, [pc, #316]	; (9358 <main+0x1ac>)
    921c:	4798      	blx	r3
    921e:	4c4f      	ldr	r4, [pc, #316]	; (935c <main+0x1b0>)
    9220:	2340      	movs	r3, #64	; 0x40
    9222:	61a3      	str	r3, [r4, #24]

	ioport_set_pin_level(SERVO_EN, 1);

	configure_ac();
    9224:	4b4e      	ldr	r3, [pc, #312]	; (9360 <main+0x1b4>)
    9226:	4798      	blx	r3
    9228:	2380      	movs	r3, #128	; 0x80
    922a:	051b      	lsls	r3, r3, #20
    922c:	61a3      	str	r3, [r4, #24]
	
	ioport_set_pin_level(SPK_EN, true);
	
	init_delay_tm = GetTickCount();
    922e:	4b4d      	ldr	r3, [pc, #308]	; (9364 <main+0x1b8>)
    9230:	4798      	blx	r3
    9232:	9001      	str	r0, [sp, #4]

	while(TimeDiff(init_delay_tm, GetTickCount()) < 99);
    9234:	9c01      	ldr	r4, [sp, #4]
    9236:	4b4b      	ldr	r3, [pc, #300]	; (9364 <main+0x1b8>)
    9238:	4798      	blx	r3
    923a:	0001      	movs	r1, r0
    923c:	0020      	movs	r0, r4
    923e:	4b4a      	ldr	r3, [pc, #296]	; (9368 <main+0x1bc>)
    9240:	4798      	blx	r3
    9242:	2862      	cmp	r0, #98	; 0x62
    9244:	d9f6      	bls.n	9234 <main+0x88>
		
	XL320_Init(GetServoInstance());
    9246:	4b49      	ldr	r3, [pc, #292]	; (936c <main+0x1c0>)
    9248:	4798      	blx	r3
    924a:	4b49      	ldr	r3, [pc, #292]	; (9370 <main+0x1c4>)
    924c:	4798      	blx	r3

	InitLedFlash();
    924e:	4b49      	ldr	r3, [pc, #292]	; (9374 <main+0x1c8>)
    9250:	4798      	blx	r3
    9252:	e013      	b.n	927c <main+0xd0>
		sleepmgr_locks[i] = 0;
    9254:	2100      	movs	r1, #0
    9256:	4a2d      	ldr	r2, [pc, #180]	; (930c <main+0x160>)
    9258:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    925a:	3301      	adds	r3, #1
    925c:	b2db      	uxtb	r3, r3
    925e:	e7b2      	b.n	91c6 <main+0x1a>
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
		lock_ptr++;
    9260:	3201      	adds	r2, #1
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    9262:	3301      	adds	r3, #1
    9264:	b2db      	uxtb	r3, r3
	while (!(*lock_ptr)) {
    9266:	7811      	ldrb	r1, [r2, #0]
    9268:	2900      	cmp	r1, #0
    926a:	d0f9      	beq.n	9260 <main+0xb4>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    926c:	2b00      	cmp	r3, #0
    926e:	d118      	bne.n	92a2 <main+0xf6>
		cpu_irq_enable();
    9270:	2201      	movs	r2, #1
    9272:	4b25      	ldr	r3, [pc, #148]	; (9308 <main+0x15c>)
    9274:	701a      	strb	r2, [r3, #0]
    9276:	f3bf 8f5f 	dmb	sy
    927a:	b662      	cpsie	i

	while(1)
	{
		AnalogRuntime();
    927c:	4b3e      	ldr	r3, [pc, #248]	; (9378 <main+0x1cc>)
    927e:	4798      	blx	r3
		fSerial_processSerial();	// Command processor periodic task
    9280:	4b3e      	ldr	r3, [pc, #248]	; (937c <main+0x1d0>)
    9282:	4798      	blx	r3
		LedRunTime();
    9284:	4b3e      	ldr	r3, [pc, #248]	; (9380 <main+0x1d4>)
    9286:	4798      	blx	r3
		GetTouch_runtime();
    9288:	4b3e      	ldr	r3, [pc, #248]	; (9384 <main+0x1d8>)
    928a:	4798      	blx	r3
		USBFordwarding_runtime();
    928c:	4b3e      	ldr	r3, [pc, #248]	; (9388 <main+0x1dc>)
    928e:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    9290:	b672      	cpsid	i
    9292:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    9296:	2200      	movs	r2, #0
    9298:	4b1b      	ldr	r3, [pc, #108]	; (9308 <main+0x15c>)
    929a:	701a      	strb	r2, [r3, #0]
	uint8_t *lock_ptr = sleepmgr_locks;
    929c:	4a1b      	ldr	r2, [pc, #108]	; (930c <main+0x160>)
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
    929e:	2300      	movs	r3, #0
    92a0:	e7e1      	b.n	9266 <main+0xba>
    92a2:	b672      	cpsid	i
    92a4:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    92a8:	2100      	movs	r1, #0
    92aa:	4a17      	ldr	r2, [pc, #92]	; (9308 <main+0x15c>)
    92ac:	7011      	strb	r1, [r2, #0]

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
    92ae:	3b01      	subs	r3, #1
    92b0:	b2db      	uxtb	r3, r3
{

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    92b2:	4a36      	ldr	r2, [pc, #216]	; (938c <main+0x1e0>)
    92b4:	6991      	ldr	r1, [r2, #24]
    92b6:	0a09      	lsrs	r1, r1, #8

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
    92b8:	220f      	movs	r2, #15
    92ba:	400a      	ands	r2, r1
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    92bc:	2a02      	cmp	r2, #2
    92be:	d805      	bhi.n	92cc <main+0x120>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    92c0:	4933      	ldr	r1, [pc, #204]	; (9390 <main+0x1e4>)
    92c2:	6848      	ldr	r0, [r1, #4]
    92c4:	22c0      	movs	r2, #192	; 0xc0
    92c6:	0092      	lsls	r2, r2, #2
    92c8:	4302      	orrs	r2, r0
    92ca:	604a      	str	r2, [r1, #4]
	}
#endif

#endif

	switch (sleep_mode) {
    92cc:	2b02      	cmp	r3, #2
    92ce:	d90b      	bls.n	92e8 <main+0x13c>
    92d0:	2b03      	cmp	r3, #3
    92d2:	d011      	beq.n	92f8 <main+0x14c>
	cpu_irq_enable();
    92d4:	2201      	movs	r2, #1
    92d6:	4b0c      	ldr	r3, [pc, #48]	; (9308 <main+0x15c>)
    92d8:	701a      	strb	r2, [r3, #0]
    92da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    92de:	b662      	cpsie	i
  __ASM volatile ("dsb");
    92e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    92e4:	bf30      	wfi
    92e6:	e7c9      	b.n	927c <main+0xd0>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    92e8:	492a      	ldr	r1, [pc, #168]	; (9394 <main+0x1e8>)
    92ea:	690a      	ldr	r2, [r1, #16]
    92ec:	2004      	movs	r0, #4
    92ee:	4382      	bics	r2, r0
    92f0:	610a      	str	r2, [r1, #16]
			PM->SLEEP.reg = sleep_mode;
    92f2:	4a29      	ldr	r2, [pc, #164]	; (9398 <main+0x1ec>)
    92f4:	7053      	strb	r3, [r2, #1]
    92f6:	e7ed      	b.n	92d4 <main+0x128>
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    92f8:	4a26      	ldr	r2, [pc, #152]	; (9394 <main+0x1e8>)
    92fa:	6913      	ldr	r3, [r2, #16]
    92fc:	2104      	movs	r1, #4
    92fe:	430b      	orrs	r3, r1
    9300:	6113      	str	r3, [r2, #16]
    9302:	e7e7      	b.n	92d4 <main+0x128>
    9304:	000090b9 	.word	0x000090b9
    9308:	20000108 	.word	0x20000108
    930c:	200029d8 	.word	0x200029d8
    9310:	00008485 	.word	0x00008485
    9314:	00002e35 	.word	0x00002e35
    9318:	0000313d 	.word	0x0000313d
    931c:	00003069 	.word	0x00003069
    9320:	00002ee5 	.word	0x00002ee5
    9324:	0000073d 	.word	0x0000073d
    9328:	00002d09 	.word	0x00002d09
    932c:	0000063d 	.word	0x0000063d
    9330:	0000077d 	.word	0x0000077d
    9334:	000007c5 	.word	0x000007c5
    9338:	00002bf9 	.word	0x00002bf9
    933c:	00002b91 	.word	0x00002b91
    9340:	000005d5 	.word	0x000005d5
    9344:	00000459 	.word	0x00000459
    9348:	00002ad5 	.word	0x00002ad5
    934c:	00002d29 	.word	0x00002d29
    9350:	0000321d 	.word	0x0000321d
    9354:	00001941 	.word	0x00001941
    9358:	00001ee1 	.word	0x00001ee1
    935c:	41004400 	.word	0x41004400
    9360:	000007f5 	.word	0x000007f5
    9364:	00002ead 	.word	0x00002ead
    9368:	00002eb9 	.word	0x00002eb9
    936c:	00003135 	.word	0x00003135
    9370:	00003925 	.word	0x00003925
    9374:	00001cd9 	.word	0x00001cd9
    9378:	00000935 	.word	0x00000935
    937c:	00002811 	.word	0x00002811
    9380:	00001cb5 	.word	0x00001cb5
    9384:	000019e5 	.word	0x000019e5
    9388:	00003375 	.word	0x00003375
    938c:	41002000 	.word	0x41002000
    9390:	41004000 	.word	0x41004000
    9394:	e000ed00 	.word	0xe000ed00
    9398:	40000400 	.word	0x40000400

0000939c <sqrtf>:
    939c:	b5f0      	push	{r4, r5, r6, r7, lr}
    939e:	2500      	movs	r5, #0
    93a0:	b08d      	sub	sp, #52	; 0x34
    93a2:	1c04      	adds	r4, r0, #0
    93a4:	f000 f84c 	bl	9440 <__ieee754_sqrtf>
    93a8:	4b23      	ldr	r3, [pc, #140]	; (9438 <sqrtf+0x9c>)
    93aa:	1c06      	adds	r6, r0, #0
    93ac:	575d      	ldrsb	r5, [r3, r5]
    93ae:	1c6b      	adds	r3, r5, #1
    93b0:	d00b      	beq.n	93ca <sqrtf+0x2e>
    93b2:	1c21      	adds	r1, r4, #0
    93b4:	1c20      	adds	r0, r4, #0
    93b6:	f001 fa13 	bl	a7e0 <__aeabi_fcmpun>
    93ba:	1e07      	subs	r7, r0, #0
    93bc:	d105      	bne.n	93ca <sqrtf+0x2e>
    93be:	2100      	movs	r1, #0
    93c0:	1c20      	adds	r0, r4, #0
    93c2:	f000 fa23 	bl	980c <__aeabi_fcmplt>
    93c6:	2800      	cmp	r0, #0
    93c8:	d102      	bne.n	93d0 <sqrtf+0x34>
    93ca:	1c30      	adds	r0, r6, #0
    93cc:	b00d      	add	sp, #52	; 0x34
    93ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    93d0:	2301      	movs	r3, #1
    93d2:	9302      	str	r3, [sp, #8]
    93d4:	4b19      	ldr	r3, [pc, #100]	; (943c <sqrtf+0xa0>)
    93d6:	1c20      	adds	r0, r4, #0
    93d8:	9303      	str	r3, [sp, #12]
    93da:	970a      	str	r7, [sp, #40]	; 0x28
    93dc:	f002 fec4 	bl	c168 <__aeabi_f2d>
    93e0:	2200      	movs	r2, #0
    93e2:	9006      	str	r0, [sp, #24]
    93e4:	9107      	str	r1, [sp, #28]
    93e6:	9004      	str	r0, [sp, #16]
    93e8:	9105      	str	r1, [sp, #20]
    93ea:	2300      	movs	r3, #0
    93ec:	2d00      	cmp	r5, #0
    93ee:	d015      	beq.n	941c <sqrtf+0x80>
    93f0:	0010      	movs	r0, r2
    93f2:	0019      	movs	r1, r3
    93f4:	f001 fd82 	bl	aefc <__aeabi_ddiv>
    93f8:	9008      	str	r0, [sp, #32]
    93fa:	9109      	str	r1, [sp, #36]	; 0x24
    93fc:	2d02      	cmp	r5, #2
    93fe:	d10f      	bne.n	9420 <sqrtf+0x84>
    9400:	f002 ff9a 	bl	c338 <__errno>
    9404:	2321      	movs	r3, #33	; 0x21
    9406:	6003      	str	r3, [r0, #0]
    9408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    940a:	9301      	str	r3, [sp, #4]
    940c:	2b00      	cmp	r3, #0
    940e:	d10d      	bne.n	942c <sqrtf+0x90>
    9410:	9808      	ldr	r0, [sp, #32]
    9412:	9909      	ldr	r1, [sp, #36]	; 0x24
    9414:	f002 fefa 	bl	c20c <__aeabi_d2f>
    9418:	1c06      	adds	r6, r0, #0
    941a:	e7d6      	b.n	93ca <sqrtf+0x2e>
    941c:	9208      	str	r2, [sp, #32]
    941e:	9309      	str	r3, [sp, #36]	; 0x24
    9420:	a802      	add	r0, sp, #8
    9422:	f000 f869 	bl	94f8 <matherr>
    9426:	2800      	cmp	r0, #0
    9428:	d1ee      	bne.n	9408 <sqrtf+0x6c>
    942a:	e7e9      	b.n	9400 <sqrtf+0x64>
    942c:	f002 ff84 	bl	c338 <__errno>
    9430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9432:	9301      	str	r3, [sp, #4]
    9434:	6003      	str	r3, [r0, #0]
    9436:	e7eb      	b.n	9410 <sqrtf+0x74>
    9438:	20000109 	.word	0x20000109
    943c:	0000cb14 	.word	0x0000cb14

00009440 <__ieee754_sqrtf>:
    9440:	492b      	ldr	r1, [pc, #172]	; (94f0 <__ieee754_sqrtf+0xb0>)
    9442:	0042      	lsls	r2, r0, #1
    9444:	b570      	push	{r4, r5, r6, lr}
    9446:	0003      	movs	r3, r0
    9448:	1c04      	adds	r4, r0, #0
    944a:	0852      	lsrs	r2, r2, #1
    944c:	428a      	cmp	r2, r1
    944e:	d83a      	bhi.n	94c6 <__ieee754_sqrtf+0x86>
    9450:	2a00      	cmp	r2, #0
    9452:	d037      	beq.n	94c4 <__ieee754_sqrtf+0x84>
    9454:	2800      	cmp	r0, #0
    9456:	db3f      	blt.n	94d8 <__ieee754_sqrtf+0x98>
    9458:	4926      	ldr	r1, [pc, #152]	; (94f4 <__ieee754_sqrtf+0xb4>)
    945a:	15c6      	asrs	r6, r0, #23
    945c:	428a      	cmp	r2, r1
    945e:	d80b      	bhi.n	9478 <__ieee754_sqrtf+0x38>
    9460:	2080      	movs	r0, #128	; 0x80
    9462:	0400      	lsls	r0, r0, #16
    9464:	4220      	tst	r0, r4
    9466:	d13e      	bne.n	94e6 <__ieee754_sqrtf+0xa6>
    9468:	2200      	movs	r2, #0
    946a:	e000      	b.n	946e <__ieee754_sqrtf+0x2e>
    946c:	000a      	movs	r2, r1
    946e:	005b      	lsls	r3, r3, #1
    9470:	1c51      	adds	r1, r2, #1
    9472:	4203      	tst	r3, r0
    9474:	d0fa      	beq.n	946c <__ieee754_sqrtf+0x2c>
    9476:	1ab6      	subs	r6, r6, r2
    9478:	025b      	lsls	r3, r3, #9
    947a:	0a5a      	lsrs	r2, r3, #9
    947c:	2380      	movs	r3, #128	; 0x80
    947e:	3e7f      	subs	r6, #127	; 0x7f
    9480:	041b      	lsls	r3, r3, #16
    9482:	4313      	orrs	r3, r2
    9484:	07f2      	lsls	r2, r6, #31
    9486:	d425      	bmi.n	94d4 <__ieee754_sqrtf+0x94>
    9488:	2280      	movs	r2, #128	; 0x80
    948a:	1070      	asrs	r0, r6, #1
    948c:	2119      	movs	r1, #25
    948e:	2600      	movs	r6, #0
    9490:	2500      	movs	r5, #0
    9492:	005b      	lsls	r3, r3, #1
    9494:	0452      	lsls	r2, r2, #17
    9496:	18ac      	adds	r4, r5, r2
    9498:	429c      	cmp	r4, r3
    949a:	dc02      	bgt.n	94a2 <__ieee754_sqrtf+0x62>
    949c:	18a5      	adds	r5, r4, r2
    949e:	1b1b      	subs	r3, r3, r4
    94a0:	18b6      	adds	r6, r6, r2
    94a2:	3901      	subs	r1, #1
    94a4:	005b      	lsls	r3, r3, #1
    94a6:	0852      	lsrs	r2, r2, #1
    94a8:	2900      	cmp	r1, #0
    94aa:	d1f4      	bne.n	9496 <__ieee754_sqrtf+0x56>
    94ac:	2b00      	cmp	r3, #0
    94ae:	d002      	beq.n	94b6 <__ieee754_sqrtf+0x76>
    94b0:	2301      	movs	r3, #1
    94b2:	3601      	adds	r6, #1
    94b4:	439e      	bics	r6, r3
    94b6:	23fc      	movs	r3, #252	; 0xfc
    94b8:	059b      	lsls	r3, r3, #22
    94ba:	469c      	mov	ip, r3
    94bc:	1076      	asrs	r6, r6, #1
    94be:	4466      	add	r6, ip
    94c0:	05c0      	lsls	r0, r0, #23
    94c2:	1980      	adds	r0, r0, r6
    94c4:	bd70      	pop	{r4, r5, r6, pc}
    94c6:	1c01      	adds	r1, r0, #0
    94c8:	f000 fece 	bl	a268 <__aeabi_fmul>
    94cc:	1c21      	adds	r1, r4, #0
    94ce:	f000 fb49 	bl	9b64 <__aeabi_fadd>
    94d2:	e7f7      	b.n	94c4 <__ieee754_sqrtf+0x84>
    94d4:	005b      	lsls	r3, r3, #1
    94d6:	e7d7      	b.n	9488 <__ieee754_sqrtf+0x48>
    94d8:	1c01      	adds	r1, r0, #0
    94da:	f000 ffe5 	bl	a4a8 <__aeabi_fsub>
    94de:	1c01      	adds	r1, r0, #0
    94e0:	f000 fcd2 	bl	9e88 <__aeabi_fdiv>
    94e4:	e7ee      	b.n	94c4 <__ieee754_sqrtf+0x84>
    94e6:	2201      	movs	r2, #1
    94e8:	4252      	negs	r2, r2
    94ea:	1ab6      	subs	r6, r6, r2
    94ec:	e7c4      	b.n	9478 <__ieee754_sqrtf+0x38>
    94ee:	46c0      	nop			; (mov r8, r8)
    94f0:	7f7fffff 	.word	0x7f7fffff
    94f4:	007fffff 	.word	0x007fffff

000094f8 <matherr>:
    94f8:	2000      	movs	r0, #0
    94fa:	4770      	bx	lr

000094fc <__udivsi3>:
    94fc:	2200      	movs	r2, #0
    94fe:	0843      	lsrs	r3, r0, #1
    9500:	428b      	cmp	r3, r1
    9502:	d374      	bcc.n	95ee <__udivsi3+0xf2>
    9504:	0903      	lsrs	r3, r0, #4
    9506:	428b      	cmp	r3, r1
    9508:	d35f      	bcc.n	95ca <__udivsi3+0xce>
    950a:	0a03      	lsrs	r3, r0, #8
    950c:	428b      	cmp	r3, r1
    950e:	d344      	bcc.n	959a <__udivsi3+0x9e>
    9510:	0b03      	lsrs	r3, r0, #12
    9512:	428b      	cmp	r3, r1
    9514:	d328      	bcc.n	9568 <__udivsi3+0x6c>
    9516:	0c03      	lsrs	r3, r0, #16
    9518:	428b      	cmp	r3, r1
    951a:	d30d      	bcc.n	9538 <__udivsi3+0x3c>
    951c:	22ff      	movs	r2, #255	; 0xff
    951e:	0209      	lsls	r1, r1, #8
    9520:	ba12      	rev	r2, r2
    9522:	0c03      	lsrs	r3, r0, #16
    9524:	428b      	cmp	r3, r1
    9526:	d302      	bcc.n	952e <__udivsi3+0x32>
    9528:	1212      	asrs	r2, r2, #8
    952a:	0209      	lsls	r1, r1, #8
    952c:	d065      	beq.n	95fa <__udivsi3+0xfe>
    952e:	0b03      	lsrs	r3, r0, #12
    9530:	428b      	cmp	r3, r1
    9532:	d319      	bcc.n	9568 <__udivsi3+0x6c>
    9534:	e000      	b.n	9538 <__udivsi3+0x3c>
    9536:	0a09      	lsrs	r1, r1, #8
    9538:	0bc3      	lsrs	r3, r0, #15
    953a:	428b      	cmp	r3, r1
    953c:	d301      	bcc.n	9542 <__udivsi3+0x46>
    953e:	03cb      	lsls	r3, r1, #15
    9540:	1ac0      	subs	r0, r0, r3
    9542:	4152      	adcs	r2, r2
    9544:	0b83      	lsrs	r3, r0, #14
    9546:	428b      	cmp	r3, r1
    9548:	d301      	bcc.n	954e <__udivsi3+0x52>
    954a:	038b      	lsls	r3, r1, #14
    954c:	1ac0      	subs	r0, r0, r3
    954e:	4152      	adcs	r2, r2
    9550:	0b43      	lsrs	r3, r0, #13
    9552:	428b      	cmp	r3, r1
    9554:	d301      	bcc.n	955a <__udivsi3+0x5e>
    9556:	034b      	lsls	r3, r1, #13
    9558:	1ac0      	subs	r0, r0, r3
    955a:	4152      	adcs	r2, r2
    955c:	0b03      	lsrs	r3, r0, #12
    955e:	428b      	cmp	r3, r1
    9560:	d301      	bcc.n	9566 <__udivsi3+0x6a>
    9562:	030b      	lsls	r3, r1, #12
    9564:	1ac0      	subs	r0, r0, r3
    9566:	4152      	adcs	r2, r2
    9568:	0ac3      	lsrs	r3, r0, #11
    956a:	428b      	cmp	r3, r1
    956c:	d301      	bcc.n	9572 <__udivsi3+0x76>
    956e:	02cb      	lsls	r3, r1, #11
    9570:	1ac0      	subs	r0, r0, r3
    9572:	4152      	adcs	r2, r2
    9574:	0a83      	lsrs	r3, r0, #10
    9576:	428b      	cmp	r3, r1
    9578:	d301      	bcc.n	957e <__udivsi3+0x82>
    957a:	028b      	lsls	r3, r1, #10
    957c:	1ac0      	subs	r0, r0, r3
    957e:	4152      	adcs	r2, r2
    9580:	0a43      	lsrs	r3, r0, #9
    9582:	428b      	cmp	r3, r1
    9584:	d301      	bcc.n	958a <__udivsi3+0x8e>
    9586:	024b      	lsls	r3, r1, #9
    9588:	1ac0      	subs	r0, r0, r3
    958a:	4152      	adcs	r2, r2
    958c:	0a03      	lsrs	r3, r0, #8
    958e:	428b      	cmp	r3, r1
    9590:	d301      	bcc.n	9596 <__udivsi3+0x9a>
    9592:	020b      	lsls	r3, r1, #8
    9594:	1ac0      	subs	r0, r0, r3
    9596:	4152      	adcs	r2, r2
    9598:	d2cd      	bcs.n	9536 <__udivsi3+0x3a>
    959a:	09c3      	lsrs	r3, r0, #7
    959c:	428b      	cmp	r3, r1
    959e:	d301      	bcc.n	95a4 <__udivsi3+0xa8>
    95a0:	01cb      	lsls	r3, r1, #7
    95a2:	1ac0      	subs	r0, r0, r3
    95a4:	4152      	adcs	r2, r2
    95a6:	0983      	lsrs	r3, r0, #6
    95a8:	428b      	cmp	r3, r1
    95aa:	d301      	bcc.n	95b0 <__udivsi3+0xb4>
    95ac:	018b      	lsls	r3, r1, #6
    95ae:	1ac0      	subs	r0, r0, r3
    95b0:	4152      	adcs	r2, r2
    95b2:	0943      	lsrs	r3, r0, #5
    95b4:	428b      	cmp	r3, r1
    95b6:	d301      	bcc.n	95bc <__udivsi3+0xc0>
    95b8:	014b      	lsls	r3, r1, #5
    95ba:	1ac0      	subs	r0, r0, r3
    95bc:	4152      	adcs	r2, r2
    95be:	0903      	lsrs	r3, r0, #4
    95c0:	428b      	cmp	r3, r1
    95c2:	d301      	bcc.n	95c8 <__udivsi3+0xcc>
    95c4:	010b      	lsls	r3, r1, #4
    95c6:	1ac0      	subs	r0, r0, r3
    95c8:	4152      	adcs	r2, r2
    95ca:	08c3      	lsrs	r3, r0, #3
    95cc:	428b      	cmp	r3, r1
    95ce:	d301      	bcc.n	95d4 <__udivsi3+0xd8>
    95d0:	00cb      	lsls	r3, r1, #3
    95d2:	1ac0      	subs	r0, r0, r3
    95d4:	4152      	adcs	r2, r2
    95d6:	0883      	lsrs	r3, r0, #2
    95d8:	428b      	cmp	r3, r1
    95da:	d301      	bcc.n	95e0 <__udivsi3+0xe4>
    95dc:	008b      	lsls	r3, r1, #2
    95de:	1ac0      	subs	r0, r0, r3
    95e0:	4152      	adcs	r2, r2
    95e2:	0843      	lsrs	r3, r0, #1
    95e4:	428b      	cmp	r3, r1
    95e6:	d301      	bcc.n	95ec <__udivsi3+0xf0>
    95e8:	004b      	lsls	r3, r1, #1
    95ea:	1ac0      	subs	r0, r0, r3
    95ec:	4152      	adcs	r2, r2
    95ee:	1a41      	subs	r1, r0, r1
    95f0:	d200      	bcs.n	95f4 <__udivsi3+0xf8>
    95f2:	4601      	mov	r1, r0
    95f4:	4152      	adcs	r2, r2
    95f6:	4610      	mov	r0, r2
    95f8:	4770      	bx	lr
    95fa:	e7ff      	b.n	95fc <__udivsi3+0x100>
    95fc:	b501      	push	{r0, lr}
    95fe:	2000      	movs	r0, #0
    9600:	f000 f8f0 	bl	97e4 <__aeabi_idiv0>
    9604:	bd02      	pop	{r1, pc}
    9606:	46c0      	nop			; (mov r8, r8)

00009608 <__aeabi_uidivmod>:
    9608:	2900      	cmp	r1, #0
    960a:	d0f7      	beq.n	95fc <__udivsi3+0x100>
    960c:	e776      	b.n	94fc <__udivsi3>
    960e:	4770      	bx	lr

00009610 <__divsi3>:
    9610:	4603      	mov	r3, r0
    9612:	430b      	orrs	r3, r1
    9614:	d47f      	bmi.n	9716 <__divsi3+0x106>
    9616:	2200      	movs	r2, #0
    9618:	0843      	lsrs	r3, r0, #1
    961a:	428b      	cmp	r3, r1
    961c:	d374      	bcc.n	9708 <__divsi3+0xf8>
    961e:	0903      	lsrs	r3, r0, #4
    9620:	428b      	cmp	r3, r1
    9622:	d35f      	bcc.n	96e4 <__divsi3+0xd4>
    9624:	0a03      	lsrs	r3, r0, #8
    9626:	428b      	cmp	r3, r1
    9628:	d344      	bcc.n	96b4 <__divsi3+0xa4>
    962a:	0b03      	lsrs	r3, r0, #12
    962c:	428b      	cmp	r3, r1
    962e:	d328      	bcc.n	9682 <__divsi3+0x72>
    9630:	0c03      	lsrs	r3, r0, #16
    9632:	428b      	cmp	r3, r1
    9634:	d30d      	bcc.n	9652 <__divsi3+0x42>
    9636:	22ff      	movs	r2, #255	; 0xff
    9638:	0209      	lsls	r1, r1, #8
    963a:	ba12      	rev	r2, r2
    963c:	0c03      	lsrs	r3, r0, #16
    963e:	428b      	cmp	r3, r1
    9640:	d302      	bcc.n	9648 <__divsi3+0x38>
    9642:	1212      	asrs	r2, r2, #8
    9644:	0209      	lsls	r1, r1, #8
    9646:	d065      	beq.n	9714 <__divsi3+0x104>
    9648:	0b03      	lsrs	r3, r0, #12
    964a:	428b      	cmp	r3, r1
    964c:	d319      	bcc.n	9682 <__divsi3+0x72>
    964e:	e000      	b.n	9652 <__divsi3+0x42>
    9650:	0a09      	lsrs	r1, r1, #8
    9652:	0bc3      	lsrs	r3, r0, #15
    9654:	428b      	cmp	r3, r1
    9656:	d301      	bcc.n	965c <__divsi3+0x4c>
    9658:	03cb      	lsls	r3, r1, #15
    965a:	1ac0      	subs	r0, r0, r3
    965c:	4152      	adcs	r2, r2
    965e:	0b83      	lsrs	r3, r0, #14
    9660:	428b      	cmp	r3, r1
    9662:	d301      	bcc.n	9668 <__divsi3+0x58>
    9664:	038b      	lsls	r3, r1, #14
    9666:	1ac0      	subs	r0, r0, r3
    9668:	4152      	adcs	r2, r2
    966a:	0b43      	lsrs	r3, r0, #13
    966c:	428b      	cmp	r3, r1
    966e:	d301      	bcc.n	9674 <__divsi3+0x64>
    9670:	034b      	lsls	r3, r1, #13
    9672:	1ac0      	subs	r0, r0, r3
    9674:	4152      	adcs	r2, r2
    9676:	0b03      	lsrs	r3, r0, #12
    9678:	428b      	cmp	r3, r1
    967a:	d301      	bcc.n	9680 <__divsi3+0x70>
    967c:	030b      	lsls	r3, r1, #12
    967e:	1ac0      	subs	r0, r0, r3
    9680:	4152      	adcs	r2, r2
    9682:	0ac3      	lsrs	r3, r0, #11
    9684:	428b      	cmp	r3, r1
    9686:	d301      	bcc.n	968c <__divsi3+0x7c>
    9688:	02cb      	lsls	r3, r1, #11
    968a:	1ac0      	subs	r0, r0, r3
    968c:	4152      	adcs	r2, r2
    968e:	0a83      	lsrs	r3, r0, #10
    9690:	428b      	cmp	r3, r1
    9692:	d301      	bcc.n	9698 <__divsi3+0x88>
    9694:	028b      	lsls	r3, r1, #10
    9696:	1ac0      	subs	r0, r0, r3
    9698:	4152      	adcs	r2, r2
    969a:	0a43      	lsrs	r3, r0, #9
    969c:	428b      	cmp	r3, r1
    969e:	d301      	bcc.n	96a4 <__divsi3+0x94>
    96a0:	024b      	lsls	r3, r1, #9
    96a2:	1ac0      	subs	r0, r0, r3
    96a4:	4152      	adcs	r2, r2
    96a6:	0a03      	lsrs	r3, r0, #8
    96a8:	428b      	cmp	r3, r1
    96aa:	d301      	bcc.n	96b0 <__divsi3+0xa0>
    96ac:	020b      	lsls	r3, r1, #8
    96ae:	1ac0      	subs	r0, r0, r3
    96b0:	4152      	adcs	r2, r2
    96b2:	d2cd      	bcs.n	9650 <__divsi3+0x40>
    96b4:	09c3      	lsrs	r3, r0, #7
    96b6:	428b      	cmp	r3, r1
    96b8:	d301      	bcc.n	96be <__divsi3+0xae>
    96ba:	01cb      	lsls	r3, r1, #7
    96bc:	1ac0      	subs	r0, r0, r3
    96be:	4152      	adcs	r2, r2
    96c0:	0983      	lsrs	r3, r0, #6
    96c2:	428b      	cmp	r3, r1
    96c4:	d301      	bcc.n	96ca <__divsi3+0xba>
    96c6:	018b      	lsls	r3, r1, #6
    96c8:	1ac0      	subs	r0, r0, r3
    96ca:	4152      	adcs	r2, r2
    96cc:	0943      	lsrs	r3, r0, #5
    96ce:	428b      	cmp	r3, r1
    96d0:	d301      	bcc.n	96d6 <__divsi3+0xc6>
    96d2:	014b      	lsls	r3, r1, #5
    96d4:	1ac0      	subs	r0, r0, r3
    96d6:	4152      	adcs	r2, r2
    96d8:	0903      	lsrs	r3, r0, #4
    96da:	428b      	cmp	r3, r1
    96dc:	d301      	bcc.n	96e2 <__divsi3+0xd2>
    96de:	010b      	lsls	r3, r1, #4
    96e0:	1ac0      	subs	r0, r0, r3
    96e2:	4152      	adcs	r2, r2
    96e4:	08c3      	lsrs	r3, r0, #3
    96e6:	428b      	cmp	r3, r1
    96e8:	d301      	bcc.n	96ee <__divsi3+0xde>
    96ea:	00cb      	lsls	r3, r1, #3
    96ec:	1ac0      	subs	r0, r0, r3
    96ee:	4152      	adcs	r2, r2
    96f0:	0883      	lsrs	r3, r0, #2
    96f2:	428b      	cmp	r3, r1
    96f4:	d301      	bcc.n	96fa <__divsi3+0xea>
    96f6:	008b      	lsls	r3, r1, #2
    96f8:	1ac0      	subs	r0, r0, r3
    96fa:	4152      	adcs	r2, r2
    96fc:	0843      	lsrs	r3, r0, #1
    96fe:	428b      	cmp	r3, r1
    9700:	d301      	bcc.n	9706 <__divsi3+0xf6>
    9702:	004b      	lsls	r3, r1, #1
    9704:	1ac0      	subs	r0, r0, r3
    9706:	4152      	adcs	r2, r2
    9708:	1a41      	subs	r1, r0, r1
    970a:	d200      	bcs.n	970e <__divsi3+0xfe>
    970c:	4601      	mov	r1, r0
    970e:	4152      	adcs	r2, r2
    9710:	4610      	mov	r0, r2
    9712:	4770      	bx	lr
    9714:	e05d      	b.n	97d2 <__divsi3+0x1c2>
    9716:	0fca      	lsrs	r2, r1, #31
    9718:	d000      	beq.n	971c <__divsi3+0x10c>
    971a:	4249      	negs	r1, r1
    971c:	1003      	asrs	r3, r0, #32
    971e:	d300      	bcc.n	9722 <__divsi3+0x112>
    9720:	4240      	negs	r0, r0
    9722:	4053      	eors	r3, r2
    9724:	2200      	movs	r2, #0
    9726:	469c      	mov	ip, r3
    9728:	0903      	lsrs	r3, r0, #4
    972a:	428b      	cmp	r3, r1
    972c:	d32d      	bcc.n	978a <__divsi3+0x17a>
    972e:	0a03      	lsrs	r3, r0, #8
    9730:	428b      	cmp	r3, r1
    9732:	d312      	bcc.n	975a <__divsi3+0x14a>
    9734:	22fc      	movs	r2, #252	; 0xfc
    9736:	0189      	lsls	r1, r1, #6
    9738:	ba12      	rev	r2, r2
    973a:	0a03      	lsrs	r3, r0, #8
    973c:	428b      	cmp	r3, r1
    973e:	d30c      	bcc.n	975a <__divsi3+0x14a>
    9740:	0189      	lsls	r1, r1, #6
    9742:	1192      	asrs	r2, r2, #6
    9744:	428b      	cmp	r3, r1
    9746:	d308      	bcc.n	975a <__divsi3+0x14a>
    9748:	0189      	lsls	r1, r1, #6
    974a:	1192      	asrs	r2, r2, #6
    974c:	428b      	cmp	r3, r1
    974e:	d304      	bcc.n	975a <__divsi3+0x14a>
    9750:	0189      	lsls	r1, r1, #6
    9752:	d03a      	beq.n	97ca <__divsi3+0x1ba>
    9754:	1192      	asrs	r2, r2, #6
    9756:	e000      	b.n	975a <__divsi3+0x14a>
    9758:	0989      	lsrs	r1, r1, #6
    975a:	09c3      	lsrs	r3, r0, #7
    975c:	428b      	cmp	r3, r1
    975e:	d301      	bcc.n	9764 <__divsi3+0x154>
    9760:	01cb      	lsls	r3, r1, #7
    9762:	1ac0      	subs	r0, r0, r3
    9764:	4152      	adcs	r2, r2
    9766:	0983      	lsrs	r3, r0, #6
    9768:	428b      	cmp	r3, r1
    976a:	d301      	bcc.n	9770 <__divsi3+0x160>
    976c:	018b      	lsls	r3, r1, #6
    976e:	1ac0      	subs	r0, r0, r3
    9770:	4152      	adcs	r2, r2
    9772:	0943      	lsrs	r3, r0, #5
    9774:	428b      	cmp	r3, r1
    9776:	d301      	bcc.n	977c <__divsi3+0x16c>
    9778:	014b      	lsls	r3, r1, #5
    977a:	1ac0      	subs	r0, r0, r3
    977c:	4152      	adcs	r2, r2
    977e:	0903      	lsrs	r3, r0, #4
    9780:	428b      	cmp	r3, r1
    9782:	d301      	bcc.n	9788 <__divsi3+0x178>
    9784:	010b      	lsls	r3, r1, #4
    9786:	1ac0      	subs	r0, r0, r3
    9788:	4152      	adcs	r2, r2
    978a:	08c3      	lsrs	r3, r0, #3
    978c:	428b      	cmp	r3, r1
    978e:	d301      	bcc.n	9794 <__divsi3+0x184>
    9790:	00cb      	lsls	r3, r1, #3
    9792:	1ac0      	subs	r0, r0, r3
    9794:	4152      	adcs	r2, r2
    9796:	0883      	lsrs	r3, r0, #2
    9798:	428b      	cmp	r3, r1
    979a:	d301      	bcc.n	97a0 <__divsi3+0x190>
    979c:	008b      	lsls	r3, r1, #2
    979e:	1ac0      	subs	r0, r0, r3
    97a0:	4152      	adcs	r2, r2
    97a2:	d2d9      	bcs.n	9758 <__divsi3+0x148>
    97a4:	0843      	lsrs	r3, r0, #1
    97a6:	428b      	cmp	r3, r1
    97a8:	d301      	bcc.n	97ae <__divsi3+0x19e>
    97aa:	004b      	lsls	r3, r1, #1
    97ac:	1ac0      	subs	r0, r0, r3
    97ae:	4152      	adcs	r2, r2
    97b0:	1a41      	subs	r1, r0, r1
    97b2:	d200      	bcs.n	97b6 <__divsi3+0x1a6>
    97b4:	4601      	mov	r1, r0
    97b6:	4663      	mov	r3, ip
    97b8:	4152      	adcs	r2, r2
    97ba:	105b      	asrs	r3, r3, #1
    97bc:	4610      	mov	r0, r2
    97be:	d301      	bcc.n	97c4 <__divsi3+0x1b4>
    97c0:	4240      	negs	r0, r0
    97c2:	2b00      	cmp	r3, #0
    97c4:	d500      	bpl.n	97c8 <__divsi3+0x1b8>
    97c6:	4249      	negs	r1, r1
    97c8:	4770      	bx	lr
    97ca:	4663      	mov	r3, ip
    97cc:	105b      	asrs	r3, r3, #1
    97ce:	d300      	bcc.n	97d2 <__divsi3+0x1c2>
    97d0:	4240      	negs	r0, r0
    97d2:	b501      	push	{r0, lr}
    97d4:	2000      	movs	r0, #0
    97d6:	f000 f805 	bl	97e4 <__aeabi_idiv0>
    97da:	bd02      	pop	{r1, pc}

000097dc <__aeabi_idivmod>:
    97dc:	2900      	cmp	r1, #0
    97de:	d0f8      	beq.n	97d2 <__divsi3+0x1c2>
    97e0:	e716      	b.n	9610 <__divsi3>
    97e2:	4770      	bx	lr

000097e4 <__aeabi_idiv0>:
    97e4:	4770      	bx	lr
    97e6:	46c0      	nop			; (mov r8, r8)

000097e8 <__aeabi_cfrcmple>:
    97e8:	4684      	mov	ip, r0
    97ea:	1c08      	adds	r0, r1, #0
    97ec:	4661      	mov	r1, ip
    97ee:	e7ff      	b.n	97f0 <__aeabi_cfcmpeq>

000097f0 <__aeabi_cfcmpeq>:
    97f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    97f2:	f000 fcf7 	bl	a1e4 <__lesf2>
    97f6:	2800      	cmp	r0, #0
    97f8:	d401      	bmi.n	97fe <__aeabi_cfcmpeq+0xe>
    97fa:	2100      	movs	r1, #0
    97fc:	42c8      	cmn	r0, r1
    97fe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00009800 <__aeabi_fcmpeq>:
    9800:	b510      	push	{r4, lr}
    9802:	f000 fc89 	bl	a118 <__eqsf2>
    9806:	4240      	negs	r0, r0
    9808:	3001      	adds	r0, #1
    980a:	bd10      	pop	{r4, pc}

0000980c <__aeabi_fcmplt>:
    980c:	b510      	push	{r4, lr}
    980e:	f000 fce9 	bl	a1e4 <__lesf2>
    9812:	2800      	cmp	r0, #0
    9814:	db01      	blt.n	981a <__aeabi_fcmplt+0xe>
    9816:	2000      	movs	r0, #0
    9818:	bd10      	pop	{r4, pc}
    981a:	2001      	movs	r0, #1
    981c:	bd10      	pop	{r4, pc}
    981e:	46c0      	nop			; (mov r8, r8)

00009820 <__aeabi_fcmple>:
    9820:	b510      	push	{r4, lr}
    9822:	f000 fcdf 	bl	a1e4 <__lesf2>
    9826:	2800      	cmp	r0, #0
    9828:	dd01      	ble.n	982e <__aeabi_fcmple+0xe>
    982a:	2000      	movs	r0, #0
    982c:	bd10      	pop	{r4, pc}
    982e:	2001      	movs	r0, #1
    9830:	bd10      	pop	{r4, pc}
    9832:	46c0      	nop			; (mov r8, r8)

00009834 <__aeabi_fcmpgt>:
    9834:	b510      	push	{r4, lr}
    9836:	f000 fc95 	bl	a164 <__gesf2>
    983a:	2800      	cmp	r0, #0
    983c:	dc01      	bgt.n	9842 <__aeabi_fcmpgt+0xe>
    983e:	2000      	movs	r0, #0
    9840:	bd10      	pop	{r4, pc}
    9842:	2001      	movs	r0, #1
    9844:	bd10      	pop	{r4, pc}
    9846:	46c0      	nop			; (mov r8, r8)

00009848 <__aeabi_fcmpge>:
    9848:	b510      	push	{r4, lr}
    984a:	f000 fc8b 	bl	a164 <__gesf2>
    984e:	2800      	cmp	r0, #0
    9850:	da01      	bge.n	9856 <__aeabi_fcmpge+0xe>
    9852:	2000      	movs	r0, #0
    9854:	bd10      	pop	{r4, pc}
    9856:	2001      	movs	r0, #1
    9858:	bd10      	pop	{r4, pc}
    985a:	46c0      	nop			; (mov r8, r8)

0000985c <__clzsi2>:
    985c:	211c      	movs	r1, #28
    985e:	2301      	movs	r3, #1
    9860:	041b      	lsls	r3, r3, #16
    9862:	4298      	cmp	r0, r3
    9864:	d301      	bcc.n	986a <__clzsi2+0xe>
    9866:	0c00      	lsrs	r0, r0, #16
    9868:	3910      	subs	r1, #16
    986a:	0a1b      	lsrs	r3, r3, #8
    986c:	4298      	cmp	r0, r3
    986e:	d301      	bcc.n	9874 <__clzsi2+0x18>
    9870:	0a00      	lsrs	r0, r0, #8
    9872:	3908      	subs	r1, #8
    9874:	091b      	lsrs	r3, r3, #4
    9876:	4298      	cmp	r0, r3
    9878:	d301      	bcc.n	987e <__clzsi2+0x22>
    987a:	0900      	lsrs	r0, r0, #4
    987c:	3904      	subs	r1, #4
    987e:	a202      	add	r2, pc, #8	; (adr r2, 9888 <__clzsi2+0x2c>)
    9880:	5c10      	ldrb	r0, [r2, r0]
    9882:	1840      	adds	r0, r0, r1
    9884:	4770      	bx	lr
    9886:	46c0      	nop			; (mov r8, r8)
    9888:	02020304 	.word	0x02020304
    988c:	01010101 	.word	0x01010101
	...

00009898 <__ctzsi2>:
    9898:	4241      	negs	r1, r0
    989a:	4008      	ands	r0, r1
    989c:	211c      	movs	r1, #28
    989e:	2301      	movs	r3, #1
    98a0:	041b      	lsls	r3, r3, #16
    98a2:	4298      	cmp	r0, r3
    98a4:	d301      	bcc.n	98aa <__ctzsi2+0x12>
    98a6:	0c00      	lsrs	r0, r0, #16
    98a8:	3910      	subs	r1, #16
    98aa:	0a1b      	lsrs	r3, r3, #8
    98ac:	4298      	cmp	r0, r3
    98ae:	d301      	bcc.n	98b4 <__ctzsi2+0x1c>
    98b0:	0a00      	lsrs	r0, r0, #8
    98b2:	3908      	subs	r1, #8
    98b4:	091b      	lsrs	r3, r3, #4
    98b6:	4298      	cmp	r0, r3
    98b8:	d301      	bcc.n	98be <__ctzsi2+0x26>
    98ba:	0900      	lsrs	r0, r0, #4
    98bc:	3904      	subs	r1, #4
    98be:	a202      	add	r2, pc, #8	; (adr r2, 98c8 <__ctzsi2+0x30>)
    98c0:	5c10      	ldrb	r0, [r2, r0]
    98c2:	1a40      	subs	r0, r0, r1
    98c4:	4770      	bx	lr
    98c6:	46c0      	nop			; (mov r8, r8)
    98c8:	1d1d1c1b 	.word	0x1d1d1c1b
    98cc:	1e1e1e1e 	.word	0x1e1e1e1e
    98d0:	1f1f1f1f 	.word	0x1f1f1f1f
    98d4:	1f1f1f1f 	.word	0x1f1f1f1f

000098d8 <__aeabi_uldivmod>:
    98d8:	2b00      	cmp	r3, #0
    98da:	d111      	bne.n	9900 <__aeabi_uldivmod+0x28>
    98dc:	2a00      	cmp	r2, #0
    98de:	d10f      	bne.n	9900 <__aeabi_uldivmod+0x28>
    98e0:	2900      	cmp	r1, #0
    98e2:	d100      	bne.n	98e6 <__aeabi_uldivmod+0xe>
    98e4:	2800      	cmp	r0, #0
    98e6:	d002      	beq.n	98ee <__aeabi_uldivmod+0x16>
    98e8:	2100      	movs	r1, #0
    98ea:	43c9      	mvns	r1, r1
    98ec:	1c08      	adds	r0, r1, #0
    98ee:	b407      	push	{r0, r1, r2}
    98f0:	4802      	ldr	r0, [pc, #8]	; (98fc <__aeabi_uldivmod+0x24>)
    98f2:	a102      	add	r1, pc, #8	; (adr r1, 98fc <__aeabi_uldivmod+0x24>)
    98f4:	1840      	adds	r0, r0, r1
    98f6:	9002      	str	r0, [sp, #8]
    98f8:	bd03      	pop	{r0, r1, pc}
    98fa:	46c0      	nop			; (mov r8, r8)
    98fc:	fffffee9 	.word	0xfffffee9
    9900:	b403      	push	{r0, r1}
    9902:	4668      	mov	r0, sp
    9904:	b501      	push	{r0, lr}
    9906:	9802      	ldr	r0, [sp, #8]
    9908:	f000 f86c 	bl	99e4 <__udivmoddi4>
    990c:	9b01      	ldr	r3, [sp, #4]
    990e:	469e      	mov	lr, r3
    9910:	b002      	add	sp, #8
    9912:	bc0c      	pop	{r2, r3}
    9914:	4770      	bx	lr
    9916:	46c0      	nop			; (mov r8, r8)

00009918 <__aeabi_lmul>:
    9918:	b5f0      	push	{r4, r5, r6, r7, lr}
    991a:	46ce      	mov	lr, r9
    991c:	4647      	mov	r7, r8
    991e:	0415      	lsls	r5, r2, #16
    9920:	0c2d      	lsrs	r5, r5, #16
    9922:	002e      	movs	r6, r5
    9924:	b580      	push	{r7, lr}
    9926:	0407      	lsls	r7, r0, #16
    9928:	0c14      	lsrs	r4, r2, #16
    992a:	0c3f      	lsrs	r7, r7, #16
    992c:	4699      	mov	r9, r3
    992e:	0c03      	lsrs	r3, r0, #16
    9930:	437e      	muls	r6, r7
    9932:	435d      	muls	r5, r3
    9934:	4367      	muls	r7, r4
    9936:	4363      	muls	r3, r4
    9938:	197f      	adds	r7, r7, r5
    993a:	0c34      	lsrs	r4, r6, #16
    993c:	19e4      	adds	r4, r4, r7
    993e:	469c      	mov	ip, r3
    9940:	42a5      	cmp	r5, r4
    9942:	d903      	bls.n	994c <__aeabi_lmul+0x34>
    9944:	2380      	movs	r3, #128	; 0x80
    9946:	025b      	lsls	r3, r3, #9
    9948:	4698      	mov	r8, r3
    994a:	44c4      	add	ip, r8
    994c:	464b      	mov	r3, r9
    994e:	4351      	muls	r1, r2
    9950:	4343      	muls	r3, r0
    9952:	0436      	lsls	r6, r6, #16
    9954:	0c36      	lsrs	r6, r6, #16
    9956:	0c25      	lsrs	r5, r4, #16
    9958:	0424      	lsls	r4, r4, #16
    995a:	4465      	add	r5, ip
    995c:	19a4      	adds	r4, r4, r6
    995e:	1859      	adds	r1, r3, r1
    9960:	1949      	adds	r1, r1, r5
    9962:	0020      	movs	r0, r4
    9964:	bc0c      	pop	{r2, r3}
    9966:	4690      	mov	r8, r2
    9968:	4699      	mov	r9, r3
    996a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000996c <__aeabi_f2uiz>:
    996c:	219e      	movs	r1, #158	; 0x9e
    996e:	b510      	push	{r4, lr}
    9970:	05c9      	lsls	r1, r1, #23
    9972:	1c04      	adds	r4, r0, #0
    9974:	f7ff ff68 	bl	9848 <__aeabi_fcmpge>
    9978:	2800      	cmp	r0, #0
    997a:	d103      	bne.n	9984 <__aeabi_f2uiz+0x18>
    997c:	1c20      	adds	r0, r4, #0
    997e:	f000 ff47 	bl	a810 <__aeabi_f2iz>
    9982:	bd10      	pop	{r4, pc}
    9984:	219e      	movs	r1, #158	; 0x9e
    9986:	1c20      	adds	r0, r4, #0
    9988:	05c9      	lsls	r1, r1, #23
    998a:	f000 fd8d 	bl	a4a8 <__aeabi_fsub>
    998e:	f000 ff3f 	bl	a810 <__aeabi_f2iz>
    9992:	2380      	movs	r3, #128	; 0x80
    9994:	061b      	lsls	r3, r3, #24
    9996:	469c      	mov	ip, r3
    9998:	4460      	add	r0, ip
    999a:	e7f2      	b.n	9982 <__aeabi_f2uiz+0x16>

0000999c <__aeabi_ul2f>:
    999c:	4b0f      	ldr	r3, [pc, #60]	; (99dc <__aeabi_ul2f+0x40>)
    999e:	b5d0      	push	{r4, r6, r7, lr}
    99a0:	0004      	movs	r4, r0
    99a2:	4299      	cmp	r1, r3
    99a4:	d906      	bls.n	99b4 <__aeabi_ul2f+0x18>
    99a6:	0543      	lsls	r3, r0, #21
    99a8:	d004      	beq.n	99b4 <__aeabi_ul2f+0x18>
    99aa:	2380      	movs	r3, #128	; 0x80
    99ac:	0ac4      	lsrs	r4, r0, #11
    99ae:	02e4      	lsls	r4, r4, #11
    99b0:	011b      	lsls	r3, r3, #4
    99b2:	431c      	orrs	r4, r3
    99b4:	0008      	movs	r0, r1
    99b6:	f002 fb9f 	bl	c0f8 <__aeabi_ui2d>
    99ba:	2200      	movs	r2, #0
    99bc:	4b08      	ldr	r3, [pc, #32]	; (99e0 <__aeabi_ul2f+0x44>)
    99be:	f001 fdd1 	bl	b564 <__aeabi_dmul>
    99c2:	0006      	movs	r6, r0
    99c4:	000f      	movs	r7, r1
    99c6:	0020      	movs	r0, r4
    99c8:	f002 fb96 	bl	c0f8 <__aeabi_ui2d>
    99cc:	0032      	movs	r2, r6
    99ce:	003b      	movs	r3, r7
    99d0:	f000 ff84 	bl	a8dc <__aeabi_dadd>
    99d4:	f002 fc1a 	bl	c20c <__aeabi_d2f>
    99d8:	bdd0      	pop	{r4, r6, r7, pc}
    99da:	46c0      	nop			; (mov r8, r8)
    99dc:	001fffff 	.word	0x001fffff
    99e0:	41f00000 	.word	0x41f00000

000099e4 <__udivmoddi4>:
    99e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    99e6:	4657      	mov	r7, sl
    99e8:	464e      	mov	r6, r9
    99ea:	4645      	mov	r5, r8
    99ec:	46de      	mov	lr, fp
    99ee:	b5e0      	push	{r5, r6, r7, lr}
    99f0:	0004      	movs	r4, r0
    99f2:	b083      	sub	sp, #12
    99f4:	000d      	movs	r5, r1
    99f6:	4692      	mov	sl, r2
    99f8:	4699      	mov	r9, r3
    99fa:	428b      	cmp	r3, r1
    99fc:	d82f      	bhi.n	9a5e <__udivmoddi4+0x7a>
    99fe:	d02c      	beq.n	9a5a <__udivmoddi4+0x76>
    9a00:	4649      	mov	r1, r9
    9a02:	4650      	mov	r0, sl
    9a04:	f002 fc8c 	bl	c320 <__clzdi2>
    9a08:	0029      	movs	r1, r5
    9a0a:	0006      	movs	r6, r0
    9a0c:	0020      	movs	r0, r4
    9a0e:	f002 fc87 	bl	c320 <__clzdi2>
    9a12:	1a33      	subs	r3, r6, r0
    9a14:	4698      	mov	r8, r3
    9a16:	3b20      	subs	r3, #32
    9a18:	469b      	mov	fp, r3
    9a1a:	d500      	bpl.n	9a1e <__udivmoddi4+0x3a>
    9a1c:	e074      	b.n	9b08 <__udivmoddi4+0x124>
    9a1e:	4653      	mov	r3, sl
    9a20:	465a      	mov	r2, fp
    9a22:	4093      	lsls	r3, r2
    9a24:	001f      	movs	r7, r3
    9a26:	4653      	mov	r3, sl
    9a28:	4642      	mov	r2, r8
    9a2a:	4093      	lsls	r3, r2
    9a2c:	001e      	movs	r6, r3
    9a2e:	42af      	cmp	r7, r5
    9a30:	d829      	bhi.n	9a86 <__udivmoddi4+0xa2>
    9a32:	d026      	beq.n	9a82 <__udivmoddi4+0x9e>
    9a34:	465b      	mov	r3, fp
    9a36:	1ba4      	subs	r4, r4, r6
    9a38:	41bd      	sbcs	r5, r7
    9a3a:	2b00      	cmp	r3, #0
    9a3c:	da00      	bge.n	9a40 <__udivmoddi4+0x5c>
    9a3e:	e079      	b.n	9b34 <__udivmoddi4+0x150>
    9a40:	2200      	movs	r2, #0
    9a42:	2300      	movs	r3, #0
    9a44:	9200      	str	r2, [sp, #0]
    9a46:	9301      	str	r3, [sp, #4]
    9a48:	2301      	movs	r3, #1
    9a4a:	465a      	mov	r2, fp
    9a4c:	4093      	lsls	r3, r2
    9a4e:	9301      	str	r3, [sp, #4]
    9a50:	2301      	movs	r3, #1
    9a52:	4642      	mov	r2, r8
    9a54:	4093      	lsls	r3, r2
    9a56:	9300      	str	r3, [sp, #0]
    9a58:	e019      	b.n	9a8e <__udivmoddi4+0xaa>
    9a5a:	4282      	cmp	r2, r0
    9a5c:	d9d0      	bls.n	9a00 <__udivmoddi4+0x1c>
    9a5e:	2200      	movs	r2, #0
    9a60:	2300      	movs	r3, #0
    9a62:	9200      	str	r2, [sp, #0]
    9a64:	9301      	str	r3, [sp, #4]
    9a66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9a68:	2b00      	cmp	r3, #0
    9a6a:	d001      	beq.n	9a70 <__udivmoddi4+0x8c>
    9a6c:	601c      	str	r4, [r3, #0]
    9a6e:	605d      	str	r5, [r3, #4]
    9a70:	9800      	ldr	r0, [sp, #0]
    9a72:	9901      	ldr	r1, [sp, #4]
    9a74:	b003      	add	sp, #12
    9a76:	bc3c      	pop	{r2, r3, r4, r5}
    9a78:	4690      	mov	r8, r2
    9a7a:	4699      	mov	r9, r3
    9a7c:	46a2      	mov	sl, r4
    9a7e:	46ab      	mov	fp, r5
    9a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9a82:	42a3      	cmp	r3, r4
    9a84:	d9d6      	bls.n	9a34 <__udivmoddi4+0x50>
    9a86:	2200      	movs	r2, #0
    9a88:	2300      	movs	r3, #0
    9a8a:	9200      	str	r2, [sp, #0]
    9a8c:	9301      	str	r3, [sp, #4]
    9a8e:	4643      	mov	r3, r8
    9a90:	2b00      	cmp	r3, #0
    9a92:	d0e8      	beq.n	9a66 <__udivmoddi4+0x82>
    9a94:	07fb      	lsls	r3, r7, #31
    9a96:	0872      	lsrs	r2, r6, #1
    9a98:	431a      	orrs	r2, r3
    9a9a:	4646      	mov	r6, r8
    9a9c:	087b      	lsrs	r3, r7, #1
    9a9e:	e00e      	b.n	9abe <__udivmoddi4+0xda>
    9aa0:	42ab      	cmp	r3, r5
    9aa2:	d101      	bne.n	9aa8 <__udivmoddi4+0xc4>
    9aa4:	42a2      	cmp	r2, r4
    9aa6:	d80c      	bhi.n	9ac2 <__udivmoddi4+0xde>
    9aa8:	1aa4      	subs	r4, r4, r2
    9aaa:	419d      	sbcs	r5, r3
    9aac:	2001      	movs	r0, #1
    9aae:	1924      	adds	r4, r4, r4
    9ab0:	416d      	adcs	r5, r5
    9ab2:	2100      	movs	r1, #0
    9ab4:	3e01      	subs	r6, #1
    9ab6:	1824      	adds	r4, r4, r0
    9ab8:	414d      	adcs	r5, r1
    9aba:	2e00      	cmp	r6, #0
    9abc:	d006      	beq.n	9acc <__udivmoddi4+0xe8>
    9abe:	42ab      	cmp	r3, r5
    9ac0:	d9ee      	bls.n	9aa0 <__udivmoddi4+0xbc>
    9ac2:	3e01      	subs	r6, #1
    9ac4:	1924      	adds	r4, r4, r4
    9ac6:	416d      	adcs	r5, r5
    9ac8:	2e00      	cmp	r6, #0
    9aca:	d1f8      	bne.n	9abe <__udivmoddi4+0xda>
    9acc:	465b      	mov	r3, fp
    9ace:	9800      	ldr	r0, [sp, #0]
    9ad0:	9901      	ldr	r1, [sp, #4]
    9ad2:	1900      	adds	r0, r0, r4
    9ad4:	4169      	adcs	r1, r5
    9ad6:	2b00      	cmp	r3, #0
    9ad8:	db22      	blt.n	9b20 <__udivmoddi4+0x13c>
    9ada:	002b      	movs	r3, r5
    9adc:	465a      	mov	r2, fp
    9ade:	40d3      	lsrs	r3, r2
    9ae0:	002a      	movs	r2, r5
    9ae2:	4644      	mov	r4, r8
    9ae4:	40e2      	lsrs	r2, r4
    9ae6:	001c      	movs	r4, r3
    9ae8:	465b      	mov	r3, fp
    9aea:	0015      	movs	r5, r2
    9aec:	2b00      	cmp	r3, #0
    9aee:	db2c      	blt.n	9b4a <__udivmoddi4+0x166>
    9af0:	0026      	movs	r6, r4
    9af2:	409e      	lsls	r6, r3
    9af4:	0033      	movs	r3, r6
    9af6:	0026      	movs	r6, r4
    9af8:	4647      	mov	r7, r8
    9afa:	40be      	lsls	r6, r7
    9afc:	0032      	movs	r2, r6
    9afe:	1a80      	subs	r0, r0, r2
    9b00:	4199      	sbcs	r1, r3
    9b02:	9000      	str	r0, [sp, #0]
    9b04:	9101      	str	r1, [sp, #4]
    9b06:	e7ae      	b.n	9a66 <__udivmoddi4+0x82>
    9b08:	4642      	mov	r2, r8
    9b0a:	2320      	movs	r3, #32
    9b0c:	1a9b      	subs	r3, r3, r2
    9b0e:	4652      	mov	r2, sl
    9b10:	40da      	lsrs	r2, r3
    9b12:	4641      	mov	r1, r8
    9b14:	0013      	movs	r3, r2
    9b16:	464a      	mov	r2, r9
    9b18:	408a      	lsls	r2, r1
    9b1a:	0017      	movs	r7, r2
    9b1c:	431f      	orrs	r7, r3
    9b1e:	e782      	b.n	9a26 <__udivmoddi4+0x42>
    9b20:	4642      	mov	r2, r8
    9b22:	2320      	movs	r3, #32
    9b24:	1a9b      	subs	r3, r3, r2
    9b26:	002a      	movs	r2, r5
    9b28:	4646      	mov	r6, r8
    9b2a:	409a      	lsls	r2, r3
    9b2c:	0023      	movs	r3, r4
    9b2e:	40f3      	lsrs	r3, r6
    9b30:	4313      	orrs	r3, r2
    9b32:	e7d5      	b.n	9ae0 <__udivmoddi4+0xfc>
    9b34:	4642      	mov	r2, r8
    9b36:	2320      	movs	r3, #32
    9b38:	2100      	movs	r1, #0
    9b3a:	1a9b      	subs	r3, r3, r2
    9b3c:	2200      	movs	r2, #0
    9b3e:	9100      	str	r1, [sp, #0]
    9b40:	9201      	str	r2, [sp, #4]
    9b42:	2201      	movs	r2, #1
    9b44:	40da      	lsrs	r2, r3
    9b46:	9201      	str	r2, [sp, #4]
    9b48:	e782      	b.n	9a50 <__udivmoddi4+0x6c>
    9b4a:	4642      	mov	r2, r8
    9b4c:	2320      	movs	r3, #32
    9b4e:	0026      	movs	r6, r4
    9b50:	1a9b      	subs	r3, r3, r2
    9b52:	40de      	lsrs	r6, r3
    9b54:	002f      	movs	r7, r5
    9b56:	46b4      	mov	ip, r6
    9b58:	4097      	lsls	r7, r2
    9b5a:	4666      	mov	r6, ip
    9b5c:	003b      	movs	r3, r7
    9b5e:	4333      	orrs	r3, r6
    9b60:	e7c9      	b.n	9af6 <__udivmoddi4+0x112>
    9b62:	46c0      	nop			; (mov r8, r8)

00009b64 <__aeabi_fadd>:
    9b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b66:	46c6      	mov	lr, r8
    9b68:	024e      	lsls	r6, r1, #9
    9b6a:	0247      	lsls	r7, r0, #9
    9b6c:	0a76      	lsrs	r6, r6, #9
    9b6e:	0a7b      	lsrs	r3, r7, #9
    9b70:	0044      	lsls	r4, r0, #1
    9b72:	0fc5      	lsrs	r5, r0, #31
    9b74:	00f7      	lsls	r7, r6, #3
    9b76:	0048      	lsls	r0, r1, #1
    9b78:	4698      	mov	r8, r3
    9b7a:	b500      	push	{lr}
    9b7c:	0e24      	lsrs	r4, r4, #24
    9b7e:	002a      	movs	r2, r5
    9b80:	00db      	lsls	r3, r3, #3
    9b82:	0e00      	lsrs	r0, r0, #24
    9b84:	0fc9      	lsrs	r1, r1, #31
    9b86:	46bc      	mov	ip, r7
    9b88:	428d      	cmp	r5, r1
    9b8a:	d067      	beq.n	9c5c <__aeabi_fadd+0xf8>
    9b8c:	1a22      	subs	r2, r4, r0
    9b8e:	2a00      	cmp	r2, #0
    9b90:	dc00      	bgt.n	9b94 <__aeabi_fadd+0x30>
    9b92:	e0a5      	b.n	9ce0 <__aeabi_fadd+0x17c>
    9b94:	2800      	cmp	r0, #0
    9b96:	d13a      	bne.n	9c0e <__aeabi_fadd+0xaa>
    9b98:	2f00      	cmp	r7, #0
    9b9a:	d100      	bne.n	9b9e <__aeabi_fadd+0x3a>
    9b9c:	e093      	b.n	9cc6 <__aeabi_fadd+0x162>
    9b9e:	1e51      	subs	r1, r2, #1
    9ba0:	2900      	cmp	r1, #0
    9ba2:	d000      	beq.n	9ba6 <__aeabi_fadd+0x42>
    9ba4:	e0bc      	b.n	9d20 <__aeabi_fadd+0x1bc>
    9ba6:	2401      	movs	r4, #1
    9ba8:	1bdb      	subs	r3, r3, r7
    9baa:	015a      	lsls	r2, r3, #5
    9bac:	d546      	bpl.n	9c3c <__aeabi_fadd+0xd8>
    9bae:	019b      	lsls	r3, r3, #6
    9bb0:	099e      	lsrs	r6, r3, #6
    9bb2:	0030      	movs	r0, r6
    9bb4:	f7ff fe52 	bl	985c <__clzsi2>
    9bb8:	3805      	subs	r0, #5
    9bba:	4086      	lsls	r6, r0
    9bbc:	4284      	cmp	r4, r0
    9bbe:	dd00      	ble.n	9bc2 <__aeabi_fadd+0x5e>
    9bc0:	e09d      	b.n	9cfe <__aeabi_fadd+0x19a>
    9bc2:	1b04      	subs	r4, r0, r4
    9bc4:	0032      	movs	r2, r6
    9bc6:	2020      	movs	r0, #32
    9bc8:	3401      	adds	r4, #1
    9bca:	40e2      	lsrs	r2, r4
    9bcc:	1b04      	subs	r4, r0, r4
    9bce:	40a6      	lsls	r6, r4
    9bd0:	0033      	movs	r3, r6
    9bd2:	1e5e      	subs	r6, r3, #1
    9bd4:	41b3      	sbcs	r3, r6
    9bd6:	2400      	movs	r4, #0
    9bd8:	4313      	orrs	r3, r2
    9bda:	075a      	lsls	r2, r3, #29
    9bdc:	d004      	beq.n	9be8 <__aeabi_fadd+0x84>
    9bde:	220f      	movs	r2, #15
    9be0:	401a      	ands	r2, r3
    9be2:	2a04      	cmp	r2, #4
    9be4:	d000      	beq.n	9be8 <__aeabi_fadd+0x84>
    9be6:	3304      	adds	r3, #4
    9be8:	015a      	lsls	r2, r3, #5
    9bea:	d529      	bpl.n	9c40 <__aeabi_fadd+0xdc>
    9bec:	3401      	adds	r4, #1
    9bee:	2cff      	cmp	r4, #255	; 0xff
    9bf0:	d100      	bne.n	9bf4 <__aeabi_fadd+0x90>
    9bf2:	e081      	b.n	9cf8 <__aeabi_fadd+0x194>
    9bf4:	002a      	movs	r2, r5
    9bf6:	019b      	lsls	r3, r3, #6
    9bf8:	0a5b      	lsrs	r3, r3, #9
    9bfa:	b2e4      	uxtb	r4, r4
    9bfc:	025b      	lsls	r3, r3, #9
    9bfe:	05e4      	lsls	r4, r4, #23
    9c00:	0a58      	lsrs	r0, r3, #9
    9c02:	07d2      	lsls	r2, r2, #31
    9c04:	4320      	orrs	r0, r4
    9c06:	4310      	orrs	r0, r2
    9c08:	bc04      	pop	{r2}
    9c0a:	4690      	mov	r8, r2
    9c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9c0e:	2cff      	cmp	r4, #255	; 0xff
    9c10:	d0e3      	beq.n	9bda <__aeabi_fadd+0x76>
    9c12:	2180      	movs	r1, #128	; 0x80
    9c14:	0038      	movs	r0, r7
    9c16:	04c9      	lsls	r1, r1, #19
    9c18:	4308      	orrs	r0, r1
    9c1a:	4684      	mov	ip, r0
    9c1c:	2a1b      	cmp	r2, #27
    9c1e:	dd00      	ble.n	9c22 <__aeabi_fadd+0xbe>
    9c20:	e082      	b.n	9d28 <__aeabi_fadd+0x1c4>
    9c22:	2020      	movs	r0, #32
    9c24:	4661      	mov	r1, ip
    9c26:	40d1      	lsrs	r1, r2
    9c28:	1a82      	subs	r2, r0, r2
    9c2a:	4660      	mov	r0, ip
    9c2c:	4090      	lsls	r0, r2
    9c2e:	0002      	movs	r2, r0
    9c30:	1e50      	subs	r0, r2, #1
    9c32:	4182      	sbcs	r2, r0
    9c34:	430a      	orrs	r2, r1
    9c36:	1a9b      	subs	r3, r3, r2
    9c38:	015a      	lsls	r2, r3, #5
    9c3a:	d4b8      	bmi.n	9bae <__aeabi_fadd+0x4a>
    9c3c:	075a      	lsls	r2, r3, #29
    9c3e:	d1ce      	bne.n	9bde <__aeabi_fadd+0x7a>
    9c40:	08de      	lsrs	r6, r3, #3
    9c42:	002a      	movs	r2, r5
    9c44:	2cff      	cmp	r4, #255	; 0xff
    9c46:	d13a      	bne.n	9cbe <__aeabi_fadd+0x15a>
    9c48:	2e00      	cmp	r6, #0
    9c4a:	d100      	bne.n	9c4e <__aeabi_fadd+0xea>
    9c4c:	e0ae      	b.n	9dac <__aeabi_fadd+0x248>
    9c4e:	2380      	movs	r3, #128	; 0x80
    9c50:	03db      	lsls	r3, r3, #15
    9c52:	4333      	orrs	r3, r6
    9c54:	025b      	lsls	r3, r3, #9
    9c56:	0a5b      	lsrs	r3, r3, #9
    9c58:	24ff      	movs	r4, #255	; 0xff
    9c5a:	e7cf      	b.n	9bfc <__aeabi_fadd+0x98>
    9c5c:	1a21      	subs	r1, r4, r0
    9c5e:	2900      	cmp	r1, #0
    9c60:	dd52      	ble.n	9d08 <__aeabi_fadd+0x1a4>
    9c62:	2800      	cmp	r0, #0
    9c64:	d031      	beq.n	9cca <__aeabi_fadd+0x166>
    9c66:	2cff      	cmp	r4, #255	; 0xff
    9c68:	d0b7      	beq.n	9bda <__aeabi_fadd+0x76>
    9c6a:	2080      	movs	r0, #128	; 0x80
    9c6c:	003e      	movs	r6, r7
    9c6e:	04c0      	lsls	r0, r0, #19
    9c70:	4306      	orrs	r6, r0
    9c72:	46b4      	mov	ip, r6
    9c74:	291b      	cmp	r1, #27
    9c76:	dd00      	ble.n	9c7a <__aeabi_fadd+0x116>
    9c78:	e0aa      	b.n	9dd0 <__aeabi_fadd+0x26c>
    9c7a:	2620      	movs	r6, #32
    9c7c:	4660      	mov	r0, ip
    9c7e:	40c8      	lsrs	r0, r1
    9c80:	1a71      	subs	r1, r6, r1
    9c82:	4666      	mov	r6, ip
    9c84:	408e      	lsls	r6, r1
    9c86:	0031      	movs	r1, r6
    9c88:	1e4e      	subs	r6, r1, #1
    9c8a:	41b1      	sbcs	r1, r6
    9c8c:	4301      	orrs	r1, r0
    9c8e:	185b      	adds	r3, r3, r1
    9c90:	0159      	lsls	r1, r3, #5
    9c92:	d5d3      	bpl.n	9c3c <__aeabi_fadd+0xd8>
    9c94:	3401      	adds	r4, #1
    9c96:	2cff      	cmp	r4, #255	; 0xff
    9c98:	d100      	bne.n	9c9c <__aeabi_fadd+0x138>
    9c9a:	e087      	b.n	9dac <__aeabi_fadd+0x248>
    9c9c:	2201      	movs	r2, #1
    9c9e:	4978      	ldr	r1, [pc, #480]	; (9e80 <__aeabi_fadd+0x31c>)
    9ca0:	401a      	ands	r2, r3
    9ca2:	085b      	lsrs	r3, r3, #1
    9ca4:	400b      	ands	r3, r1
    9ca6:	4313      	orrs	r3, r2
    9ca8:	e797      	b.n	9bda <__aeabi_fadd+0x76>
    9caa:	2c00      	cmp	r4, #0
    9cac:	d000      	beq.n	9cb0 <__aeabi_fadd+0x14c>
    9cae:	e0a7      	b.n	9e00 <__aeabi_fadd+0x29c>
    9cb0:	2b00      	cmp	r3, #0
    9cb2:	d000      	beq.n	9cb6 <__aeabi_fadd+0x152>
    9cb4:	e0b6      	b.n	9e24 <__aeabi_fadd+0x2c0>
    9cb6:	1e3b      	subs	r3, r7, #0
    9cb8:	d162      	bne.n	9d80 <__aeabi_fadd+0x21c>
    9cba:	2600      	movs	r6, #0
    9cbc:	2200      	movs	r2, #0
    9cbe:	0273      	lsls	r3, r6, #9
    9cc0:	0a5b      	lsrs	r3, r3, #9
    9cc2:	b2e4      	uxtb	r4, r4
    9cc4:	e79a      	b.n	9bfc <__aeabi_fadd+0x98>
    9cc6:	0014      	movs	r4, r2
    9cc8:	e787      	b.n	9bda <__aeabi_fadd+0x76>
    9cca:	2f00      	cmp	r7, #0
    9ccc:	d04d      	beq.n	9d6a <__aeabi_fadd+0x206>
    9cce:	1e48      	subs	r0, r1, #1
    9cd0:	2800      	cmp	r0, #0
    9cd2:	d157      	bne.n	9d84 <__aeabi_fadd+0x220>
    9cd4:	4463      	add	r3, ip
    9cd6:	2401      	movs	r4, #1
    9cd8:	015a      	lsls	r2, r3, #5
    9cda:	d5af      	bpl.n	9c3c <__aeabi_fadd+0xd8>
    9cdc:	2402      	movs	r4, #2
    9cde:	e7dd      	b.n	9c9c <__aeabi_fadd+0x138>
    9ce0:	2a00      	cmp	r2, #0
    9ce2:	d124      	bne.n	9d2e <__aeabi_fadd+0x1ca>
    9ce4:	1c62      	adds	r2, r4, #1
    9ce6:	b2d2      	uxtb	r2, r2
    9ce8:	2a01      	cmp	r2, #1
    9cea:	ddde      	ble.n	9caa <__aeabi_fadd+0x146>
    9cec:	1bde      	subs	r6, r3, r7
    9cee:	0172      	lsls	r2, r6, #5
    9cf0:	d535      	bpl.n	9d5e <__aeabi_fadd+0x1fa>
    9cf2:	1afe      	subs	r6, r7, r3
    9cf4:	000d      	movs	r5, r1
    9cf6:	e75c      	b.n	9bb2 <__aeabi_fadd+0x4e>
    9cf8:	002a      	movs	r2, r5
    9cfa:	2300      	movs	r3, #0
    9cfc:	e77e      	b.n	9bfc <__aeabi_fadd+0x98>
    9cfe:	0033      	movs	r3, r6
    9d00:	4a60      	ldr	r2, [pc, #384]	; (9e84 <__aeabi_fadd+0x320>)
    9d02:	1a24      	subs	r4, r4, r0
    9d04:	4013      	ands	r3, r2
    9d06:	e768      	b.n	9bda <__aeabi_fadd+0x76>
    9d08:	2900      	cmp	r1, #0
    9d0a:	d163      	bne.n	9dd4 <__aeabi_fadd+0x270>
    9d0c:	1c61      	adds	r1, r4, #1
    9d0e:	b2c8      	uxtb	r0, r1
    9d10:	2801      	cmp	r0, #1
    9d12:	dd4e      	ble.n	9db2 <__aeabi_fadd+0x24e>
    9d14:	29ff      	cmp	r1, #255	; 0xff
    9d16:	d049      	beq.n	9dac <__aeabi_fadd+0x248>
    9d18:	4463      	add	r3, ip
    9d1a:	085b      	lsrs	r3, r3, #1
    9d1c:	000c      	movs	r4, r1
    9d1e:	e75c      	b.n	9bda <__aeabi_fadd+0x76>
    9d20:	2aff      	cmp	r2, #255	; 0xff
    9d22:	d041      	beq.n	9da8 <__aeabi_fadd+0x244>
    9d24:	000a      	movs	r2, r1
    9d26:	e779      	b.n	9c1c <__aeabi_fadd+0xb8>
    9d28:	2201      	movs	r2, #1
    9d2a:	1a9b      	subs	r3, r3, r2
    9d2c:	e784      	b.n	9c38 <__aeabi_fadd+0xd4>
    9d2e:	2c00      	cmp	r4, #0
    9d30:	d01d      	beq.n	9d6e <__aeabi_fadd+0x20a>
    9d32:	28ff      	cmp	r0, #255	; 0xff
    9d34:	d022      	beq.n	9d7c <__aeabi_fadd+0x218>
    9d36:	2480      	movs	r4, #128	; 0x80
    9d38:	04e4      	lsls	r4, r4, #19
    9d3a:	4252      	negs	r2, r2
    9d3c:	4323      	orrs	r3, r4
    9d3e:	2a1b      	cmp	r2, #27
    9d40:	dd00      	ble.n	9d44 <__aeabi_fadd+0x1e0>
    9d42:	e08a      	b.n	9e5a <__aeabi_fadd+0x2f6>
    9d44:	001c      	movs	r4, r3
    9d46:	2520      	movs	r5, #32
    9d48:	40d4      	lsrs	r4, r2
    9d4a:	1aaa      	subs	r2, r5, r2
    9d4c:	4093      	lsls	r3, r2
    9d4e:	1e5a      	subs	r2, r3, #1
    9d50:	4193      	sbcs	r3, r2
    9d52:	4323      	orrs	r3, r4
    9d54:	4662      	mov	r2, ip
    9d56:	0004      	movs	r4, r0
    9d58:	1ad3      	subs	r3, r2, r3
    9d5a:	000d      	movs	r5, r1
    9d5c:	e725      	b.n	9baa <__aeabi_fadd+0x46>
    9d5e:	2e00      	cmp	r6, #0
    9d60:	d000      	beq.n	9d64 <__aeabi_fadd+0x200>
    9d62:	e726      	b.n	9bb2 <__aeabi_fadd+0x4e>
    9d64:	2200      	movs	r2, #0
    9d66:	2400      	movs	r4, #0
    9d68:	e7a9      	b.n	9cbe <__aeabi_fadd+0x15a>
    9d6a:	000c      	movs	r4, r1
    9d6c:	e735      	b.n	9bda <__aeabi_fadd+0x76>
    9d6e:	2b00      	cmp	r3, #0
    9d70:	d04d      	beq.n	9e0e <__aeabi_fadd+0x2aa>
    9d72:	43d2      	mvns	r2, r2
    9d74:	2a00      	cmp	r2, #0
    9d76:	d0ed      	beq.n	9d54 <__aeabi_fadd+0x1f0>
    9d78:	28ff      	cmp	r0, #255	; 0xff
    9d7a:	d1e0      	bne.n	9d3e <__aeabi_fadd+0x1da>
    9d7c:	4663      	mov	r3, ip
    9d7e:	24ff      	movs	r4, #255	; 0xff
    9d80:	000d      	movs	r5, r1
    9d82:	e72a      	b.n	9bda <__aeabi_fadd+0x76>
    9d84:	29ff      	cmp	r1, #255	; 0xff
    9d86:	d00f      	beq.n	9da8 <__aeabi_fadd+0x244>
    9d88:	0001      	movs	r1, r0
    9d8a:	e773      	b.n	9c74 <__aeabi_fadd+0x110>
    9d8c:	2b00      	cmp	r3, #0
    9d8e:	d061      	beq.n	9e54 <__aeabi_fadd+0x2f0>
    9d90:	24ff      	movs	r4, #255	; 0xff
    9d92:	2f00      	cmp	r7, #0
    9d94:	d100      	bne.n	9d98 <__aeabi_fadd+0x234>
    9d96:	e720      	b.n	9bda <__aeabi_fadd+0x76>
    9d98:	2280      	movs	r2, #128	; 0x80
    9d9a:	4641      	mov	r1, r8
    9d9c:	03d2      	lsls	r2, r2, #15
    9d9e:	4211      	tst	r1, r2
    9da0:	d002      	beq.n	9da8 <__aeabi_fadd+0x244>
    9da2:	4216      	tst	r6, r2
    9da4:	d100      	bne.n	9da8 <__aeabi_fadd+0x244>
    9da6:	003b      	movs	r3, r7
    9da8:	24ff      	movs	r4, #255	; 0xff
    9daa:	e716      	b.n	9bda <__aeabi_fadd+0x76>
    9dac:	24ff      	movs	r4, #255	; 0xff
    9dae:	2300      	movs	r3, #0
    9db0:	e724      	b.n	9bfc <__aeabi_fadd+0x98>
    9db2:	2c00      	cmp	r4, #0
    9db4:	d1ea      	bne.n	9d8c <__aeabi_fadd+0x228>
    9db6:	2b00      	cmp	r3, #0
    9db8:	d058      	beq.n	9e6c <__aeabi_fadd+0x308>
    9dba:	2f00      	cmp	r7, #0
    9dbc:	d100      	bne.n	9dc0 <__aeabi_fadd+0x25c>
    9dbe:	e70c      	b.n	9bda <__aeabi_fadd+0x76>
    9dc0:	4463      	add	r3, ip
    9dc2:	015a      	lsls	r2, r3, #5
    9dc4:	d400      	bmi.n	9dc8 <__aeabi_fadd+0x264>
    9dc6:	e739      	b.n	9c3c <__aeabi_fadd+0xd8>
    9dc8:	4a2e      	ldr	r2, [pc, #184]	; (9e84 <__aeabi_fadd+0x320>)
    9dca:	000c      	movs	r4, r1
    9dcc:	4013      	ands	r3, r2
    9dce:	e704      	b.n	9bda <__aeabi_fadd+0x76>
    9dd0:	2101      	movs	r1, #1
    9dd2:	e75c      	b.n	9c8e <__aeabi_fadd+0x12a>
    9dd4:	2c00      	cmp	r4, #0
    9dd6:	d11e      	bne.n	9e16 <__aeabi_fadd+0x2b2>
    9dd8:	2b00      	cmp	r3, #0
    9dda:	d040      	beq.n	9e5e <__aeabi_fadd+0x2fa>
    9ddc:	43c9      	mvns	r1, r1
    9dde:	2900      	cmp	r1, #0
    9de0:	d00b      	beq.n	9dfa <__aeabi_fadd+0x296>
    9de2:	28ff      	cmp	r0, #255	; 0xff
    9de4:	d036      	beq.n	9e54 <__aeabi_fadd+0x2f0>
    9de6:	291b      	cmp	r1, #27
    9de8:	dc47      	bgt.n	9e7a <__aeabi_fadd+0x316>
    9dea:	001c      	movs	r4, r3
    9dec:	2620      	movs	r6, #32
    9dee:	40cc      	lsrs	r4, r1
    9df0:	1a71      	subs	r1, r6, r1
    9df2:	408b      	lsls	r3, r1
    9df4:	1e59      	subs	r1, r3, #1
    9df6:	418b      	sbcs	r3, r1
    9df8:	4323      	orrs	r3, r4
    9dfa:	4463      	add	r3, ip
    9dfc:	0004      	movs	r4, r0
    9dfe:	e747      	b.n	9c90 <__aeabi_fadd+0x12c>
    9e00:	2b00      	cmp	r3, #0
    9e02:	d118      	bne.n	9e36 <__aeabi_fadd+0x2d2>
    9e04:	1e3b      	subs	r3, r7, #0
    9e06:	d02d      	beq.n	9e64 <__aeabi_fadd+0x300>
    9e08:	000d      	movs	r5, r1
    9e0a:	24ff      	movs	r4, #255	; 0xff
    9e0c:	e6e5      	b.n	9bda <__aeabi_fadd+0x76>
    9e0e:	003b      	movs	r3, r7
    9e10:	0004      	movs	r4, r0
    9e12:	000d      	movs	r5, r1
    9e14:	e6e1      	b.n	9bda <__aeabi_fadd+0x76>
    9e16:	28ff      	cmp	r0, #255	; 0xff
    9e18:	d01c      	beq.n	9e54 <__aeabi_fadd+0x2f0>
    9e1a:	2480      	movs	r4, #128	; 0x80
    9e1c:	04e4      	lsls	r4, r4, #19
    9e1e:	4249      	negs	r1, r1
    9e20:	4323      	orrs	r3, r4
    9e22:	e7e0      	b.n	9de6 <__aeabi_fadd+0x282>
    9e24:	2f00      	cmp	r7, #0
    9e26:	d100      	bne.n	9e2a <__aeabi_fadd+0x2c6>
    9e28:	e6d7      	b.n	9bda <__aeabi_fadd+0x76>
    9e2a:	1bde      	subs	r6, r3, r7
    9e2c:	0172      	lsls	r2, r6, #5
    9e2e:	d51f      	bpl.n	9e70 <__aeabi_fadd+0x30c>
    9e30:	1afb      	subs	r3, r7, r3
    9e32:	000d      	movs	r5, r1
    9e34:	e6d1      	b.n	9bda <__aeabi_fadd+0x76>
    9e36:	24ff      	movs	r4, #255	; 0xff
    9e38:	2f00      	cmp	r7, #0
    9e3a:	d100      	bne.n	9e3e <__aeabi_fadd+0x2da>
    9e3c:	e6cd      	b.n	9bda <__aeabi_fadd+0x76>
    9e3e:	2280      	movs	r2, #128	; 0x80
    9e40:	4640      	mov	r0, r8
    9e42:	03d2      	lsls	r2, r2, #15
    9e44:	4210      	tst	r0, r2
    9e46:	d0af      	beq.n	9da8 <__aeabi_fadd+0x244>
    9e48:	4216      	tst	r6, r2
    9e4a:	d1ad      	bne.n	9da8 <__aeabi_fadd+0x244>
    9e4c:	003b      	movs	r3, r7
    9e4e:	000d      	movs	r5, r1
    9e50:	24ff      	movs	r4, #255	; 0xff
    9e52:	e6c2      	b.n	9bda <__aeabi_fadd+0x76>
    9e54:	4663      	mov	r3, ip
    9e56:	24ff      	movs	r4, #255	; 0xff
    9e58:	e6bf      	b.n	9bda <__aeabi_fadd+0x76>
    9e5a:	2301      	movs	r3, #1
    9e5c:	e77a      	b.n	9d54 <__aeabi_fadd+0x1f0>
    9e5e:	003b      	movs	r3, r7
    9e60:	0004      	movs	r4, r0
    9e62:	e6ba      	b.n	9bda <__aeabi_fadd+0x76>
    9e64:	2680      	movs	r6, #128	; 0x80
    9e66:	2200      	movs	r2, #0
    9e68:	03f6      	lsls	r6, r6, #15
    9e6a:	e6f0      	b.n	9c4e <__aeabi_fadd+0xea>
    9e6c:	003b      	movs	r3, r7
    9e6e:	e6b4      	b.n	9bda <__aeabi_fadd+0x76>
    9e70:	1e33      	subs	r3, r6, #0
    9e72:	d000      	beq.n	9e76 <__aeabi_fadd+0x312>
    9e74:	e6e2      	b.n	9c3c <__aeabi_fadd+0xd8>
    9e76:	2200      	movs	r2, #0
    9e78:	e721      	b.n	9cbe <__aeabi_fadd+0x15a>
    9e7a:	2301      	movs	r3, #1
    9e7c:	e7bd      	b.n	9dfa <__aeabi_fadd+0x296>
    9e7e:	46c0      	nop			; (mov r8, r8)
    9e80:	7dffffff 	.word	0x7dffffff
    9e84:	fbffffff 	.word	0xfbffffff

00009e88 <__aeabi_fdiv>:
    9e88:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e8a:	4657      	mov	r7, sl
    9e8c:	464e      	mov	r6, r9
    9e8e:	46de      	mov	lr, fp
    9e90:	4645      	mov	r5, r8
    9e92:	b5e0      	push	{r5, r6, r7, lr}
    9e94:	0244      	lsls	r4, r0, #9
    9e96:	0043      	lsls	r3, r0, #1
    9e98:	0fc6      	lsrs	r6, r0, #31
    9e9a:	b083      	sub	sp, #12
    9e9c:	1c0f      	adds	r7, r1, #0
    9e9e:	0a64      	lsrs	r4, r4, #9
    9ea0:	0e1b      	lsrs	r3, r3, #24
    9ea2:	46b2      	mov	sl, r6
    9ea4:	d053      	beq.n	9f4e <__aeabi_fdiv+0xc6>
    9ea6:	2bff      	cmp	r3, #255	; 0xff
    9ea8:	d027      	beq.n	9efa <__aeabi_fdiv+0x72>
    9eaa:	2280      	movs	r2, #128	; 0x80
    9eac:	00e4      	lsls	r4, r4, #3
    9eae:	04d2      	lsls	r2, r2, #19
    9eb0:	4314      	orrs	r4, r2
    9eb2:	227f      	movs	r2, #127	; 0x7f
    9eb4:	4252      	negs	r2, r2
    9eb6:	4690      	mov	r8, r2
    9eb8:	4498      	add	r8, r3
    9eba:	2300      	movs	r3, #0
    9ebc:	4699      	mov	r9, r3
    9ebe:	469b      	mov	fp, r3
    9ec0:	027d      	lsls	r5, r7, #9
    9ec2:	0078      	lsls	r0, r7, #1
    9ec4:	0ffb      	lsrs	r3, r7, #31
    9ec6:	0a6d      	lsrs	r5, r5, #9
    9ec8:	0e00      	lsrs	r0, r0, #24
    9eca:	9300      	str	r3, [sp, #0]
    9ecc:	d024      	beq.n	9f18 <__aeabi_fdiv+0x90>
    9ece:	28ff      	cmp	r0, #255	; 0xff
    9ed0:	d046      	beq.n	9f60 <__aeabi_fdiv+0xd8>
    9ed2:	2380      	movs	r3, #128	; 0x80
    9ed4:	2100      	movs	r1, #0
    9ed6:	00ed      	lsls	r5, r5, #3
    9ed8:	04db      	lsls	r3, r3, #19
    9eda:	431d      	orrs	r5, r3
    9edc:	387f      	subs	r0, #127	; 0x7f
    9ede:	4647      	mov	r7, r8
    9ee0:	1a38      	subs	r0, r7, r0
    9ee2:	464f      	mov	r7, r9
    9ee4:	430f      	orrs	r7, r1
    9ee6:	00bf      	lsls	r7, r7, #2
    9ee8:	46b9      	mov	r9, r7
    9eea:	0033      	movs	r3, r6
    9eec:	9a00      	ldr	r2, [sp, #0]
    9eee:	4f87      	ldr	r7, [pc, #540]	; (a10c <__aeabi_fdiv+0x284>)
    9ef0:	4053      	eors	r3, r2
    9ef2:	464a      	mov	r2, r9
    9ef4:	58ba      	ldr	r2, [r7, r2]
    9ef6:	9301      	str	r3, [sp, #4]
    9ef8:	4697      	mov	pc, r2
    9efa:	2c00      	cmp	r4, #0
    9efc:	d14e      	bne.n	9f9c <__aeabi_fdiv+0x114>
    9efe:	2308      	movs	r3, #8
    9f00:	4699      	mov	r9, r3
    9f02:	33f7      	adds	r3, #247	; 0xf7
    9f04:	4698      	mov	r8, r3
    9f06:	3bfd      	subs	r3, #253	; 0xfd
    9f08:	469b      	mov	fp, r3
    9f0a:	027d      	lsls	r5, r7, #9
    9f0c:	0078      	lsls	r0, r7, #1
    9f0e:	0ffb      	lsrs	r3, r7, #31
    9f10:	0a6d      	lsrs	r5, r5, #9
    9f12:	0e00      	lsrs	r0, r0, #24
    9f14:	9300      	str	r3, [sp, #0]
    9f16:	d1da      	bne.n	9ece <__aeabi_fdiv+0x46>
    9f18:	2d00      	cmp	r5, #0
    9f1a:	d126      	bne.n	9f6a <__aeabi_fdiv+0xe2>
    9f1c:	2000      	movs	r0, #0
    9f1e:	2101      	movs	r1, #1
    9f20:	0033      	movs	r3, r6
    9f22:	9a00      	ldr	r2, [sp, #0]
    9f24:	4f7a      	ldr	r7, [pc, #488]	; (a110 <__aeabi_fdiv+0x288>)
    9f26:	4053      	eors	r3, r2
    9f28:	4642      	mov	r2, r8
    9f2a:	1a10      	subs	r0, r2, r0
    9f2c:	464a      	mov	r2, r9
    9f2e:	430a      	orrs	r2, r1
    9f30:	0092      	lsls	r2, r2, #2
    9f32:	58ba      	ldr	r2, [r7, r2]
    9f34:	001d      	movs	r5, r3
    9f36:	4697      	mov	pc, r2
    9f38:	9b00      	ldr	r3, [sp, #0]
    9f3a:	002c      	movs	r4, r5
    9f3c:	469a      	mov	sl, r3
    9f3e:	468b      	mov	fp, r1
    9f40:	465b      	mov	r3, fp
    9f42:	2b02      	cmp	r3, #2
    9f44:	d131      	bne.n	9faa <__aeabi_fdiv+0x122>
    9f46:	4653      	mov	r3, sl
    9f48:	21ff      	movs	r1, #255	; 0xff
    9f4a:	2400      	movs	r4, #0
    9f4c:	e038      	b.n	9fc0 <__aeabi_fdiv+0x138>
    9f4e:	2c00      	cmp	r4, #0
    9f50:	d117      	bne.n	9f82 <__aeabi_fdiv+0xfa>
    9f52:	2304      	movs	r3, #4
    9f54:	4699      	mov	r9, r3
    9f56:	2300      	movs	r3, #0
    9f58:	4698      	mov	r8, r3
    9f5a:	3301      	adds	r3, #1
    9f5c:	469b      	mov	fp, r3
    9f5e:	e7af      	b.n	9ec0 <__aeabi_fdiv+0x38>
    9f60:	20ff      	movs	r0, #255	; 0xff
    9f62:	2d00      	cmp	r5, #0
    9f64:	d10b      	bne.n	9f7e <__aeabi_fdiv+0xf6>
    9f66:	2102      	movs	r1, #2
    9f68:	e7da      	b.n	9f20 <__aeabi_fdiv+0x98>
    9f6a:	0028      	movs	r0, r5
    9f6c:	f7ff fc76 	bl	985c <__clzsi2>
    9f70:	1f43      	subs	r3, r0, #5
    9f72:	409d      	lsls	r5, r3
    9f74:	2376      	movs	r3, #118	; 0x76
    9f76:	425b      	negs	r3, r3
    9f78:	1a18      	subs	r0, r3, r0
    9f7a:	2100      	movs	r1, #0
    9f7c:	e7af      	b.n	9ede <__aeabi_fdiv+0x56>
    9f7e:	2103      	movs	r1, #3
    9f80:	e7ad      	b.n	9ede <__aeabi_fdiv+0x56>
    9f82:	0020      	movs	r0, r4
    9f84:	f7ff fc6a 	bl	985c <__clzsi2>
    9f88:	1f43      	subs	r3, r0, #5
    9f8a:	409c      	lsls	r4, r3
    9f8c:	2376      	movs	r3, #118	; 0x76
    9f8e:	425b      	negs	r3, r3
    9f90:	1a1b      	subs	r3, r3, r0
    9f92:	4698      	mov	r8, r3
    9f94:	2300      	movs	r3, #0
    9f96:	4699      	mov	r9, r3
    9f98:	469b      	mov	fp, r3
    9f9a:	e791      	b.n	9ec0 <__aeabi_fdiv+0x38>
    9f9c:	230c      	movs	r3, #12
    9f9e:	4699      	mov	r9, r3
    9fa0:	33f3      	adds	r3, #243	; 0xf3
    9fa2:	4698      	mov	r8, r3
    9fa4:	3bfc      	subs	r3, #252	; 0xfc
    9fa6:	469b      	mov	fp, r3
    9fa8:	e78a      	b.n	9ec0 <__aeabi_fdiv+0x38>
    9faa:	2b03      	cmp	r3, #3
    9fac:	d100      	bne.n	9fb0 <__aeabi_fdiv+0x128>
    9fae:	e0a5      	b.n	a0fc <__aeabi_fdiv+0x274>
    9fb0:	4655      	mov	r5, sl
    9fb2:	2b01      	cmp	r3, #1
    9fb4:	d000      	beq.n	9fb8 <__aeabi_fdiv+0x130>
    9fb6:	e081      	b.n	a0bc <__aeabi_fdiv+0x234>
    9fb8:	2301      	movs	r3, #1
    9fba:	2100      	movs	r1, #0
    9fbc:	2400      	movs	r4, #0
    9fbe:	402b      	ands	r3, r5
    9fc0:	0264      	lsls	r4, r4, #9
    9fc2:	05c9      	lsls	r1, r1, #23
    9fc4:	0a60      	lsrs	r0, r4, #9
    9fc6:	07db      	lsls	r3, r3, #31
    9fc8:	4308      	orrs	r0, r1
    9fca:	4318      	orrs	r0, r3
    9fcc:	b003      	add	sp, #12
    9fce:	bc3c      	pop	{r2, r3, r4, r5}
    9fd0:	4690      	mov	r8, r2
    9fd2:	4699      	mov	r9, r3
    9fd4:	46a2      	mov	sl, r4
    9fd6:	46ab      	mov	fp, r5
    9fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9fda:	2480      	movs	r4, #128	; 0x80
    9fdc:	2300      	movs	r3, #0
    9fde:	03e4      	lsls	r4, r4, #15
    9fe0:	21ff      	movs	r1, #255	; 0xff
    9fe2:	e7ed      	b.n	9fc0 <__aeabi_fdiv+0x138>
    9fe4:	21ff      	movs	r1, #255	; 0xff
    9fe6:	2400      	movs	r4, #0
    9fe8:	e7ea      	b.n	9fc0 <__aeabi_fdiv+0x138>
    9fea:	2301      	movs	r3, #1
    9fec:	1a59      	subs	r1, r3, r1
    9fee:	291b      	cmp	r1, #27
    9ff0:	dd66      	ble.n	a0c0 <__aeabi_fdiv+0x238>
    9ff2:	9a01      	ldr	r2, [sp, #4]
    9ff4:	4013      	ands	r3, r2
    9ff6:	2100      	movs	r1, #0
    9ff8:	2400      	movs	r4, #0
    9ffa:	e7e1      	b.n	9fc0 <__aeabi_fdiv+0x138>
    9ffc:	2380      	movs	r3, #128	; 0x80
    9ffe:	03db      	lsls	r3, r3, #15
    a000:	421c      	tst	r4, r3
    a002:	d038      	beq.n	a076 <__aeabi_fdiv+0x1ee>
    a004:	421d      	tst	r5, r3
    a006:	d051      	beq.n	a0ac <__aeabi_fdiv+0x224>
    a008:	431c      	orrs	r4, r3
    a00a:	0264      	lsls	r4, r4, #9
    a00c:	0a64      	lsrs	r4, r4, #9
    a00e:	0033      	movs	r3, r6
    a010:	21ff      	movs	r1, #255	; 0xff
    a012:	e7d5      	b.n	9fc0 <__aeabi_fdiv+0x138>
    a014:	0163      	lsls	r3, r4, #5
    a016:	016c      	lsls	r4, r5, #5
    a018:	42a3      	cmp	r3, r4
    a01a:	d23b      	bcs.n	a094 <__aeabi_fdiv+0x20c>
    a01c:	261b      	movs	r6, #27
    a01e:	2100      	movs	r1, #0
    a020:	3801      	subs	r0, #1
    a022:	2501      	movs	r5, #1
    a024:	001f      	movs	r7, r3
    a026:	0049      	lsls	r1, r1, #1
    a028:	005b      	lsls	r3, r3, #1
    a02a:	2f00      	cmp	r7, #0
    a02c:	db01      	blt.n	a032 <__aeabi_fdiv+0x1aa>
    a02e:	429c      	cmp	r4, r3
    a030:	d801      	bhi.n	a036 <__aeabi_fdiv+0x1ae>
    a032:	1b1b      	subs	r3, r3, r4
    a034:	4329      	orrs	r1, r5
    a036:	3e01      	subs	r6, #1
    a038:	2e00      	cmp	r6, #0
    a03a:	d1f3      	bne.n	a024 <__aeabi_fdiv+0x19c>
    a03c:	001c      	movs	r4, r3
    a03e:	1e63      	subs	r3, r4, #1
    a040:	419c      	sbcs	r4, r3
    a042:	430c      	orrs	r4, r1
    a044:	0001      	movs	r1, r0
    a046:	317f      	adds	r1, #127	; 0x7f
    a048:	2900      	cmp	r1, #0
    a04a:	ddce      	ble.n	9fea <__aeabi_fdiv+0x162>
    a04c:	0763      	lsls	r3, r4, #29
    a04e:	d004      	beq.n	a05a <__aeabi_fdiv+0x1d2>
    a050:	230f      	movs	r3, #15
    a052:	4023      	ands	r3, r4
    a054:	2b04      	cmp	r3, #4
    a056:	d000      	beq.n	a05a <__aeabi_fdiv+0x1d2>
    a058:	3404      	adds	r4, #4
    a05a:	0123      	lsls	r3, r4, #4
    a05c:	d503      	bpl.n	a066 <__aeabi_fdiv+0x1de>
    a05e:	0001      	movs	r1, r0
    a060:	4b2c      	ldr	r3, [pc, #176]	; (a114 <__aeabi_fdiv+0x28c>)
    a062:	3180      	adds	r1, #128	; 0x80
    a064:	401c      	ands	r4, r3
    a066:	29fe      	cmp	r1, #254	; 0xfe
    a068:	dd0d      	ble.n	a086 <__aeabi_fdiv+0x1fe>
    a06a:	2301      	movs	r3, #1
    a06c:	9a01      	ldr	r2, [sp, #4]
    a06e:	21ff      	movs	r1, #255	; 0xff
    a070:	4013      	ands	r3, r2
    a072:	2400      	movs	r4, #0
    a074:	e7a4      	b.n	9fc0 <__aeabi_fdiv+0x138>
    a076:	2380      	movs	r3, #128	; 0x80
    a078:	03db      	lsls	r3, r3, #15
    a07a:	431c      	orrs	r4, r3
    a07c:	0264      	lsls	r4, r4, #9
    a07e:	0a64      	lsrs	r4, r4, #9
    a080:	0033      	movs	r3, r6
    a082:	21ff      	movs	r1, #255	; 0xff
    a084:	e79c      	b.n	9fc0 <__aeabi_fdiv+0x138>
    a086:	2301      	movs	r3, #1
    a088:	9a01      	ldr	r2, [sp, #4]
    a08a:	01a4      	lsls	r4, r4, #6
    a08c:	0a64      	lsrs	r4, r4, #9
    a08e:	b2c9      	uxtb	r1, r1
    a090:	4013      	ands	r3, r2
    a092:	e795      	b.n	9fc0 <__aeabi_fdiv+0x138>
    a094:	1b1b      	subs	r3, r3, r4
    a096:	261a      	movs	r6, #26
    a098:	2101      	movs	r1, #1
    a09a:	e7c2      	b.n	a022 <__aeabi_fdiv+0x19a>
    a09c:	9b00      	ldr	r3, [sp, #0]
    a09e:	468b      	mov	fp, r1
    a0a0:	469a      	mov	sl, r3
    a0a2:	2400      	movs	r4, #0
    a0a4:	e74c      	b.n	9f40 <__aeabi_fdiv+0xb8>
    a0a6:	0263      	lsls	r3, r4, #9
    a0a8:	d5e5      	bpl.n	a076 <__aeabi_fdiv+0x1ee>
    a0aa:	2500      	movs	r5, #0
    a0ac:	2480      	movs	r4, #128	; 0x80
    a0ae:	03e4      	lsls	r4, r4, #15
    a0b0:	432c      	orrs	r4, r5
    a0b2:	0264      	lsls	r4, r4, #9
    a0b4:	0a64      	lsrs	r4, r4, #9
    a0b6:	9b00      	ldr	r3, [sp, #0]
    a0b8:	21ff      	movs	r1, #255	; 0xff
    a0ba:	e781      	b.n	9fc0 <__aeabi_fdiv+0x138>
    a0bc:	9501      	str	r5, [sp, #4]
    a0be:	e7c1      	b.n	a044 <__aeabi_fdiv+0x1bc>
    a0c0:	0023      	movs	r3, r4
    a0c2:	2020      	movs	r0, #32
    a0c4:	40cb      	lsrs	r3, r1
    a0c6:	1a41      	subs	r1, r0, r1
    a0c8:	408c      	lsls	r4, r1
    a0ca:	1e61      	subs	r1, r4, #1
    a0cc:	418c      	sbcs	r4, r1
    a0ce:	431c      	orrs	r4, r3
    a0d0:	0763      	lsls	r3, r4, #29
    a0d2:	d004      	beq.n	a0de <__aeabi_fdiv+0x256>
    a0d4:	230f      	movs	r3, #15
    a0d6:	4023      	ands	r3, r4
    a0d8:	2b04      	cmp	r3, #4
    a0da:	d000      	beq.n	a0de <__aeabi_fdiv+0x256>
    a0dc:	3404      	adds	r4, #4
    a0de:	0163      	lsls	r3, r4, #5
    a0e0:	d505      	bpl.n	a0ee <__aeabi_fdiv+0x266>
    a0e2:	2301      	movs	r3, #1
    a0e4:	9a01      	ldr	r2, [sp, #4]
    a0e6:	2101      	movs	r1, #1
    a0e8:	4013      	ands	r3, r2
    a0ea:	2400      	movs	r4, #0
    a0ec:	e768      	b.n	9fc0 <__aeabi_fdiv+0x138>
    a0ee:	2301      	movs	r3, #1
    a0f0:	9a01      	ldr	r2, [sp, #4]
    a0f2:	01a4      	lsls	r4, r4, #6
    a0f4:	0a64      	lsrs	r4, r4, #9
    a0f6:	4013      	ands	r3, r2
    a0f8:	2100      	movs	r1, #0
    a0fa:	e761      	b.n	9fc0 <__aeabi_fdiv+0x138>
    a0fc:	2380      	movs	r3, #128	; 0x80
    a0fe:	03db      	lsls	r3, r3, #15
    a100:	431c      	orrs	r4, r3
    a102:	0264      	lsls	r4, r4, #9
    a104:	0a64      	lsrs	r4, r4, #9
    a106:	4653      	mov	r3, sl
    a108:	21ff      	movs	r1, #255	; 0xff
    a10a:	e759      	b.n	9fc0 <__aeabi_fdiv+0x138>
    a10c:	0000cb1c 	.word	0x0000cb1c
    a110:	0000cb5c 	.word	0x0000cb5c
    a114:	f7ffffff 	.word	0xf7ffffff

0000a118 <__eqsf2>:
    a118:	b570      	push	{r4, r5, r6, lr}
    a11a:	0042      	lsls	r2, r0, #1
    a11c:	0245      	lsls	r5, r0, #9
    a11e:	024e      	lsls	r6, r1, #9
    a120:	004c      	lsls	r4, r1, #1
    a122:	0fc3      	lsrs	r3, r0, #31
    a124:	0a6d      	lsrs	r5, r5, #9
    a126:	0e12      	lsrs	r2, r2, #24
    a128:	0a76      	lsrs	r6, r6, #9
    a12a:	0e24      	lsrs	r4, r4, #24
    a12c:	0fc9      	lsrs	r1, r1, #31
    a12e:	2001      	movs	r0, #1
    a130:	2aff      	cmp	r2, #255	; 0xff
    a132:	d006      	beq.n	a142 <__eqsf2+0x2a>
    a134:	2cff      	cmp	r4, #255	; 0xff
    a136:	d003      	beq.n	a140 <__eqsf2+0x28>
    a138:	42a2      	cmp	r2, r4
    a13a:	d101      	bne.n	a140 <__eqsf2+0x28>
    a13c:	42b5      	cmp	r5, r6
    a13e:	d006      	beq.n	a14e <__eqsf2+0x36>
    a140:	bd70      	pop	{r4, r5, r6, pc}
    a142:	2d00      	cmp	r5, #0
    a144:	d1fc      	bne.n	a140 <__eqsf2+0x28>
    a146:	2cff      	cmp	r4, #255	; 0xff
    a148:	d1fa      	bne.n	a140 <__eqsf2+0x28>
    a14a:	2e00      	cmp	r6, #0
    a14c:	d1f8      	bne.n	a140 <__eqsf2+0x28>
    a14e:	428b      	cmp	r3, r1
    a150:	d006      	beq.n	a160 <__eqsf2+0x48>
    a152:	2001      	movs	r0, #1
    a154:	2a00      	cmp	r2, #0
    a156:	d1f3      	bne.n	a140 <__eqsf2+0x28>
    a158:	0028      	movs	r0, r5
    a15a:	1e45      	subs	r5, r0, #1
    a15c:	41a8      	sbcs	r0, r5
    a15e:	e7ef      	b.n	a140 <__eqsf2+0x28>
    a160:	2000      	movs	r0, #0
    a162:	e7ed      	b.n	a140 <__eqsf2+0x28>

0000a164 <__gesf2>:
    a164:	b5f0      	push	{r4, r5, r6, r7, lr}
    a166:	0042      	lsls	r2, r0, #1
    a168:	0245      	lsls	r5, r0, #9
    a16a:	024c      	lsls	r4, r1, #9
    a16c:	0fc3      	lsrs	r3, r0, #31
    a16e:	0048      	lsls	r0, r1, #1
    a170:	0a6d      	lsrs	r5, r5, #9
    a172:	0e12      	lsrs	r2, r2, #24
    a174:	0a64      	lsrs	r4, r4, #9
    a176:	0e00      	lsrs	r0, r0, #24
    a178:	0fc9      	lsrs	r1, r1, #31
    a17a:	2aff      	cmp	r2, #255	; 0xff
    a17c:	d01e      	beq.n	a1bc <__gesf2+0x58>
    a17e:	28ff      	cmp	r0, #255	; 0xff
    a180:	d021      	beq.n	a1c6 <__gesf2+0x62>
    a182:	2a00      	cmp	r2, #0
    a184:	d10a      	bne.n	a19c <__gesf2+0x38>
    a186:	426e      	negs	r6, r5
    a188:	416e      	adcs	r6, r5
    a18a:	b2f6      	uxtb	r6, r6
    a18c:	2800      	cmp	r0, #0
    a18e:	d10f      	bne.n	a1b0 <__gesf2+0x4c>
    a190:	2c00      	cmp	r4, #0
    a192:	d10d      	bne.n	a1b0 <__gesf2+0x4c>
    a194:	2000      	movs	r0, #0
    a196:	2d00      	cmp	r5, #0
    a198:	d009      	beq.n	a1ae <__gesf2+0x4a>
    a19a:	e005      	b.n	a1a8 <__gesf2+0x44>
    a19c:	2800      	cmp	r0, #0
    a19e:	d101      	bne.n	a1a4 <__gesf2+0x40>
    a1a0:	2c00      	cmp	r4, #0
    a1a2:	d001      	beq.n	a1a8 <__gesf2+0x44>
    a1a4:	428b      	cmp	r3, r1
    a1a6:	d011      	beq.n	a1cc <__gesf2+0x68>
    a1a8:	2101      	movs	r1, #1
    a1aa:	4258      	negs	r0, r3
    a1ac:	4308      	orrs	r0, r1
    a1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a1b0:	2e00      	cmp	r6, #0
    a1b2:	d0f7      	beq.n	a1a4 <__gesf2+0x40>
    a1b4:	2001      	movs	r0, #1
    a1b6:	3901      	subs	r1, #1
    a1b8:	4308      	orrs	r0, r1
    a1ba:	e7f8      	b.n	a1ae <__gesf2+0x4a>
    a1bc:	2d00      	cmp	r5, #0
    a1be:	d0de      	beq.n	a17e <__gesf2+0x1a>
    a1c0:	2002      	movs	r0, #2
    a1c2:	4240      	negs	r0, r0
    a1c4:	e7f3      	b.n	a1ae <__gesf2+0x4a>
    a1c6:	2c00      	cmp	r4, #0
    a1c8:	d0db      	beq.n	a182 <__gesf2+0x1e>
    a1ca:	e7f9      	b.n	a1c0 <__gesf2+0x5c>
    a1cc:	4282      	cmp	r2, r0
    a1ce:	dceb      	bgt.n	a1a8 <__gesf2+0x44>
    a1d0:	db04      	blt.n	a1dc <__gesf2+0x78>
    a1d2:	42a5      	cmp	r5, r4
    a1d4:	d8e8      	bhi.n	a1a8 <__gesf2+0x44>
    a1d6:	2000      	movs	r0, #0
    a1d8:	42a5      	cmp	r5, r4
    a1da:	d2e8      	bcs.n	a1ae <__gesf2+0x4a>
    a1dc:	2101      	movs	r1, #1
    a1de:	1e58      	subs	r0, r3, #1
    a1e0:	4308      	orrs	r0, r1
    a1e2:	e7e4      	b.n	a1ae <__gesf2+0x4a>

0000a1e4 <__lesf2>:
    a1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1e6:	0042      	lsls	r2, r0, #1
    a1e8:	024d      	lsls	r5, r1, #9
    a1ea:	004c      	lsls	r4, r1, #1
    a1ec:	0246      	lsls	r6, r0, #9
    a1ee:	0a76      	lsrs	r6, r6, #9
    a1f0:	0e12      	lsrs	r2, r2, #24
    a1f2:	0fc3      	lsrs	r3, r0, #31
    a1f4:	0a6d      	lsrs	r5, r5, #9
    a1f6:	0e24      	lsrs	r4, r4, #24
    a1f8:	0fc9      	lsrs	r1, r1, #31
    a1fa:	2aff      	cmp	r2, #255	; 0xff
    a1fc:	d016      	beq.n	a22c <__lesf2+0x48>
    a1fe:	2cff      	cmp	r4, #255	; 0xff
    a200:	d018      	beq.n	a234 <__lesf2+0x50>
    a202:	2a00      	cmp	r2, #0
    a204:	d10a      	bne.n	a21c <__lesf2+0x38>
    a206:	4270      	negs	r0, r6
    a208:	4170      	adcs	r0, r6
    a20a:	b2c0      	uxtb	r0, r0
    a20c:	2c00      	cmp	r4, #0
    a20e:	d015      	beq.n	a23c <__lesf2+0x58>
    a210:	2800      	cmp	r0, #0
    a212:	d005      	beq.n	a220 <__lesf2+0x3c>
    a214:	2001      	movs	r0, #1
    a216:	3901      	subs	r1, #1
    a218:	4308      	orrs	r0, r1
    a21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a21c:	2c00      	cmp	r4, #0
    a21e:	d013      	beq.n	a248 <__lesf2+0x64>
    a220:	4299      	cmp	r1, r3
    a222:	d014      	beq.n	a24e <__lesf2+0x6a>
    a224:	2001      	movs	r0, #1
    a226:	425b      	negs	r3, r3
    a228:	4318      	orrs	r0, r3
    a22a:	e7f6      	b.n	a21a <__lesf2+0x36>
    a22c:	2002      	movs	r0, #2
    a22e:	2e00      	cmp	r6, #0
    a230:	d1f3      	bne.n	a21a <__lesf2+0x36>
    a232:	e7e4      	b.n	a1fe <__lesf2+0x1a>
    a234:	2002      	movs	r0, #2
    a236:	2d00      	cmp	r5, #0
    a238:	d1ef      	bne.n	a21a <__lesf2+0x36>
    a23a:	e7e2      	b.n	a202 <__lesf2+0x1e>
    a23c:	2d00      	cmp	r5, #0
    a23e:	d1e7      	bne.n	a210 <__lesf2+0x2c>
    a240:	2000      	movs	r0, #0
    a242:	2e00      	cmp	r6, #0
    a244:	d0e9      	beq.n	a21a <__lesf2+0x36>
    a246:	e7ed      	b.n	a224 <__lesf2+0x40>
    a248:	2d00      	cmp	r5, #0
    a24a:	d1e9      	bne.n	a220 <__lesf2+0x3c>
    a24c:	e7ea      	b.n	a224 <__lesf2+0x40>
    a24e:	42a2      	cmp	r2, r4
    a250:	dc06      	bgt.n	a260 <__lesf2+0x7c>
    a252:	dbdf      	blt.n	a214 <__lesf2+0x30>
    a254:	42ae      	cmp	r6, r5
    a256:	d803      	bhi.n	a260 <__lesf2+0x7c>
    a258:	2000      	movs	r0, #0
    a25a:	42ae      	cmp	r6, r5
    a25c:	d3da      	bcc.n	a214 <__lesf2+0x30>
    a25e:	e7dc      	b.n	a21a <__lesf2+0x36>
    a260:	2001      	movs	r0, #1
    a262:	4249      	negs	r1, r1
    a264:	4308      	orrs	r0, r1
    a266:	e7d8      	b.n	a21a <__lesf2+0x36>

0000a268 <__aeabi_fmul>:
    a268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a26a:	4657      	mov	r7, sl
    a26c:	464e      	mov	r6, r9
    a26e:	4645      	mov	r5, r8
    a270:	46de      	mov	lr, fp
    a272:	b5e0      	push	{r5, r6, r7, lr}
    a274:	0247      	lsls	r7, r0, #9
    a276:	0046      	lsls	r6, r0, #1
    a278:	4688      	mov	r8, r1
    a27a:	0a7f      	lsrs	r7, r7, #9
    a27c:	0e36      	lsrs	r6, r6, #24
    a27e:	0fc4      	lsrs	r4, r0, #31
    a280:	2e00      	cmp	r6, #0
    a282:	d047      	beq.n	a314 <__aeabi_fmul+0xac>
    a284:	2eff      	cmp	r6, #255	; 0xff
    a286:	d024      	beq.n	a2d2 <__aeabi_fmul+0x6a>
    a288:	00fb      	lsls	r3, r7, #3
    a28a:	2780      	movs	r7, #128	; 0x80
    a28c:	04ff      	lsls	r7, r7, #19
    a28e:	431f      	orrs	r7, r3
    a290:	2300      	movs	r3, #0
    a292:	4699      	mov	r9, r3
    a294:	469a      	mov	sl, r3
    a296:	3e7f      	subs	r6, #127	; 0x7f
    a298:	4643      	mov	r3, r8
    a29a:	025d      	lsls	r5, r3, #9
    a29c:	0058      	lsls	r0, r3, #1
    a29e:	0fdb      	lsrs	r3, r3, #31
    a2a0:	0a6d      	lsrs	r5, r5, #9
    a2a2:	0e00      	lsrs	r0, r0, #24
    a2a4:	4698      	mov	r8, r3
    a2a6:	d043      	beq.n	a330 <__aeabi_fmul+0xc8>
    a2a8:	28ff      	cmp	r0, #255	; 0xff
    a2aa:	d03b      	beq.n	a324 <__aeabi_fmul+0xbc>
    a2ac:	00eb      	lsls	r3, r5, #3
    a2ae:	2580      	movs	r5, #128	; 0x80
    a2b0:	2200      	movs	r2, #0
    a2b2:	04ed      	lsls	r5, r5, #19
    a2b4:	431d      	orrs	r5, r3
    a2b6:	387f      	subs	r0, #127	; 0x7f
    a2b8:	1836      	adds	r6, r6, r0
    a2ba:	1c73      	adds	r3, r6, #1
    a2bc:	4641      	mov	r1, r8
    a2be:	469b      	mov	fp, r3
    a2c0:	464b      	mov	r3, r9
    a2c2:	4061      	eors	r1, r4
    a2c4:	4313      	orrs	r3, r2
    a2c6:	2b0f      	cmp	r3, #15
    a2c8:	d864      	bhi.n	a394 <__aeabi_fmul+0x12c>
    a2ca:	4875      	ldr	r0, [pc, #468]	; (a4a0 <__aeabi_fmul+0x238>)
    a2cc:	009b      	lsls	r3, r3, #2
    a2ce:	58c3      	ldr	r3, [r0, r3]
    a2d0:	469f      	mov	pc, r3
    a2d2:	2f00      	cmp	r7, #0
    a2d4:	d142      	bne.n	a35c <__aeabi_fmul+0xf4>
    a2d6:	2308      	movs	r3, #8
    a2d8:	4699      	mov	r9, r3
    a2da:	3b06      	subs	r3, #6
    a2dc:	26ff      	movs	r6, #255	; 0xff
    a2de:	469a      	mov	sl, r3
    a2e0:	e7da      	b.n	a298 <__aeabi_fmul+0x30>
    a2e2:	4641      	mov	r1, r8
    a2e4:	2a02      	cmp	r2, #2
    a2e6:	d028      	beq.n	a33a <__aeabi_fmul+0xd2>
    a2e8:	2a03      	cmp	r2, #3
    a2ea:	d100      	bne.n	a2ee <__aeabi_fmul+0x86>
    a2ec:	e0ce      	b.n	a48c <__aeabi_fmul+0x224>
    a2ee:	2a01      	cmp	r2, #1
    a2f0:	d000      	beq.n	a2f4 <__aeabi_fmul+0x8c>
    a2f2:	e0ac      	b.n	a44e <__aeabi_fmul+0x1e6>
    a2f4:	4011      	ands	r1, r2
    a2f6:	2000      	movs	r0, #0
    a2f8:	2200      	movs	r2, #0
    a2fa:	b2cc      	uxtb	r4, r1
    a2fc:	0240      	lsls	r0, r0, #9
    a2fe:	05d2      	lsls	r2, r2, #23
    a300:	0a40      	lsrs	r0, r0, #9
    a302:	07e4      	lsls	r4, r4, #31
    a304:	4310      	orrs	r0, r2
    a306:	4320      	orrs	r0, r4
    a308:	bc3c      	pop	{r2, r3, r4, r5}
    a30a:	4690      	mov	r8, r2
    a30c:	4699      	mov	r9, r3
    a30e:	46a2      	mov	sl, r4
    a310:	46ab      	mov	fp, r5
    a312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a314:	2f00      	cmp	r7, #0
    a316:	d115      	bne.n	a344 <__aeabi_fmul+0xdc>
    a318:	2304      	movs	r3, #4
    a31a:	4699      	mov	r9, r3
    a31c:	3b03      	subs	r3, #3
    a31e:	2600      	movs	r6, #0
    a320:	469a      	mov	sl, r3
    a322:	e7b9      	b.n	a298 <__aeabi_fmul+0x30>
    a324:	20ff      	movs	r0, #255	; 0xff
    a326:	2202      	movs	r2, #2
    a328:	2d00      	cmp	r5, #0
    a32a:	d0c5      	beq.n	a2b8 <__aeabi_fmul+0x50>
    a32c:	2203      	movs	r2, #3
    a32e:	e7c3      	b.n	a2b8 <__aeabi_fmul+0x50>
    a330:	2d00      	cmp	r5, #0
    a332:	d119      	bne.n	a368 <__aeabi_fmul+0x100>
    a334:	2000      	movs	r0, #0
    a336:	2201      	movs	r2, #1
    a338:	e7be      	b.n	a2b8 <__aeabi_fmul+0x50>
    a33a:	2401      	movs	r4, #1
    a33c:	22ff      	movs	r2, #255	; 0xff
    a33e:	400c      	ands	r4, r1
    a340:	2000      	movs	r0, #0
    a342:	e7db      	b.n	a2fc <__aeabi_fmul+0x94>
    a344:	0038      	movs	r0, r7
    a346:	f7ff fa89 	bl	985c <__clzsi2>
    a34a:	2676      	movs	r6, #118	; 0x76
    a34c:	1f43      	subs	r3, r0, #5
    a34e:	409f      	lsls	r7, r3
    a350:	2300      	movs	r3, #0
    a352:	4276      	negs	r6, r6
    a354:	1a36      	subs	r6, r6, r0
    a356:	4699      	mov	r9, r3
    a358:	469a      	mov	sl, r3
    a35a:	e79d      	b.n	a298 <__aeabi_fmul+0x30>
    a35c:	230c      	movs	r3, #12
    a35e:	4699      	mov	r9, r3
    a360:	3b09      	subs	r3, #9
    a362:	26ff      	movs	r6, #255	; 0xff
    a364:	469a      	mov	sl, r3
    a366:	e797      	b.n	a298 <__aeabi_fmul+0x30>
    a368:	0028      	movs	r0, r5
    a36a:	f7ff fa77 	bl	985c <__clzsi2>
    a36e:	1f43      	subs	r3, r0, #5
    a370:	409d      	lsls	r5, r3
    a372:	2376      	movs	r3, #118	; 0x76
    a374:	425b      	negs	r3, r3
    a376:	1a18      	subs	r0, r3, r0
    a378:	2200      	movs	r2, #0
    a37a:	e79d      	b.n	a2b8 <__aeabi_fmul+0x50>
    a37c:	2080      	movs	r0, #128	; 0x80
    a37e:	2400      	movs	r4, #0
    a380:	03c0      	lsls	r0, r0, #15
    a382:	22ff      	movs	r2, #255	; 0xff
    a384:	e7ba      	b.n	a2fc <__aeabi_fmul+0x94>
    a386:	003d      	movs	r5, r7
    a388:	4652      	mov	r2, sl
    a38a:	e7ab      	b.n	a2e4 <__aeabi_fmul+0x7c>
    a38c:	003d      	movs	r5, r7
    a38e:	0021      	movs	r1, r4
    a390:	4652      	mov	r2, sl
    a392:	e7a7      	b.n	a2e4 <__aeabi_fmul+0x7c>
    a394:	0c3b      	lsrs	r3, r7, #16
    a396:	469c      	mov	ip, r3
    a398:	042a      	lsls	r2, r5, #16
    a39a:	0c12      	lsrs	r2, r2, #16
    a39c:	0c2b      	lsrs	r3, r5, #16
    a39e:	0014      	movs	r4, r2
    a3a0:	4660      	mov	r0, ip
    a3a2:	4665      	mov	r5, ip
    a3a4:	043f      	lsls	r7, r7, #16
    a3a6:	0c3f      	lsrs	r7, r7, #16
    a3a8:	437c      	muls	r4, r7
    a3aa:	4342      	muls	r2, r0
    a3ac:	435d      	muls	r5, r3
    a3ae:	437b      	muls	r3, r7
    a3b0:	0c27      	lsrs	r7, r4, #16
    a3b2:	189b      	adds	r3, r3, r2
    a3b4:	18ff      	adds	r7, r7, r3
    a3b6:	42ba      	cmp	r2, r7
    a3b8:	d903      	bls.n	a3c2 <__aeabi_fmul+0x15a>
    a3ba:	2380      	movs	r3, #128	; 0x80
    a3bc:	025b      	lsls	r3, r3, #9
    a3be:	469c      	mov	ip, r3
    a3c0:	4465      	add	r5, ip
    a3c2:	0424      	lsls	r4, r4, #16
    a3c4:	043a      	lsls	r2, r7, #16
    a3c6:	0c24      	lsrs	r4, r4, #16
    a3c8:	1912      	adds	r2, r2, r4
    a3ca:	0193      	lsls	r3, r2, #6
    a3cc:	1e5c      	subs	r4, r3, #1
    a3ce:	41a3      	sbcs	r3, r4
    a3d0:	0c3f      	lsrs	r7, r7, #16
    a3d2:	0e92      	lsrs	r2, r2, #26
    a3d4:	197d      	adds	r5, r7, r5
    a3d6:	431a      	orrs	r2, r3
    a3d8:	01ad      	lsls	r5, r5, #6
    a3da:	4315      	orrs	r5, r2
    a3dc:	012b      	lsls	r3, r5, #4
    a3de:	d504      	bpl.n	a3ea <__aeabi_fmul+0x182>
    a3e0:	2301      	movs	r3, #1
    a3e2:	465e      	mov	r6, fp
    a3e4:	086a      	lsrs	r2, r5, #1
    a3e6:	401d      	ands	r5, r3
    a3e8:	4315      	orrs	r5, r2
    a3ea:	0032      	movs	r2, r6
    a3ec:	327f      	adds	r2, #127	; 0x7f
    a3ee:	2a00      	cmp	r2, #0
    a3f0:	dd25      	ble.n	a43e <__aeabi_fmul+0x1d6>
    a3f2:	076b      	lsls	r3, r5, #29
    a3f4:	d004      	beq.n	a400 <__aeabi_fmul+0x198>
    a3f6:	230f      	movs	r3, #15
    a3f8:	402b      	ands	r3, r5
    a3fa:	2b04      	cmp	r3, #4
    a3fc:	d000      	beq.n	a400 <__aeabi_fmul+0x198>
    a3fe:	3504      	adds	r5, #4
    a400:	012b      	lsls	r3, r5, #4
    a402:	d503      	bpl.n	a40c <__aeabi_fmul+0x1a4>
    a404:	0032      	movs	r2, r6
    a406:	4b27      	ldr	r3, [pc, #156]	; (a4a4 <__aeabi_fmul+0x23c>)
    a408:	3280      	adds	r2, #128	; 0x80
    a40a:	401d      	ands	r5, r3
    a40c:	2afe      	cmp	r2, #254	; 0xfe
    a40e:	dc94      	bgt.n	a33a <__aeabi_fmul+0xd2>
    a410:	2401      	movs	r4, #1
    a412:	01a8      	lsls	r0, r5, #6
    a414:	0a40      	lsrs	r0, r0, #9
    a416:	b2d2      	uxtb	r2, r2
    a418:	400c      	ands	r4, r1
    a41a:	e76f      	b.n	a2fc <__aeabi_fmul+0x94>
    a41c:	2080      	movs	r0, #128	; 0x80
    a41e:	03c0      	lsls	r0, r0, #15
    a420:	4207      	tst	r7, r0
    a422:	d007      	beq.n	a434 <__aeabi_fmul+0x1cc>
    a424:	4205      	tst	r5, r0
    a426:	d105      	bne.n	a434 <__aeabi_fmul+0x1cc>
    a428:	4328      	orrs	r0, r5
    a42a:	0240      	lsls	r0, r0, #9
    a42c:	0a40      	lsrs	r0, r0, #9
    a42e:	4644      	mov	r4, r8
    a430:	22ff      	movs	r2, #255	; 0xff
    a432:	e763      	b.n	a2fc <__aeabi_fmul+0x94>
    a434:	4338      	orrs	r0, r7
    a436:	0240      	lsls	r0, r0, #9
    a438:	0a40      	lsrs	r0, r0, #9
    a43a:	22ff      	movs	r2, #255	; 0xff
    a43c:	e75e      	b.n	a2fc <__aeabi_fmul+0x94>
    a43e:	2401      	movs	r4, #1
    a440:	1aa3      	subs	r3, r4, r2
    a442:	2b1b      	cmp	r3, #27
    a444:	dd05      	ble.n	a452 <__aeabi_fmul+0x1ea>
    a446:	400c      	ands	r4, r1
    a448:	2200      	movs	r2, #0
    a44a:	2000      	movs	r0, #0
    a44c:	e756      	b.n	a2fc <__aeabi_fmul+0x94>
    a44e:	465e      	mov	r6, fp
    a450:	e7cb      	b.n	a3ea <__aeabi_fmul+0x182>
    a452:	002a      	movs	r2, r5
    a454:	2020      	movs	r0, #32
    a456:	40da      	lsrs	r2, r3
    a458:	1ac3      	subs	r3, r0, r3
    a45a:	409d      	lsls	r5, r3
    a45c:	002b      	movs	r3, r5
    a45e:	1e5d      	subs	r5, r3, #1
    a460:	41ab      	sbcs	r3, r5
    a462:	4313      	orrs	r3, r2
    a464:	075a      	lsls	r2, r3, #29
    a466:	d004      	beq.n	a472 <__aeabi_fmul+0x20a>
    a468:	220f      	movs	r2, #15
    a46a:	401a      	ands	r2, r3
    a46c:	2a04      	cmp	r2, #4
    a46e:	d000      	beq.n	a472 <__aeabi_fmul+0x20a>
    a470:	3304      	adds	r3, #4
    a472:	015a      	lsls	r2, r3, #5
    a474:	d504      	bpl.n	a480 <__aeabi_fmul+0x218>
    a476:	2401      	movs	r4, #1
    a478:	2201      	movs	r2, #1
    a47a:	400c      	ands	r4, r1
    a47c:	2000      	movs	r0, #0
    a47e:	e73d      	b.n	a2fc <__aeabi_fmul+0x94>
    a480:	2401      	movs	r4, #1
    a482:	019b      	lsls	r3, r3, #6
    a484:	0a58      	lsrs	r0, r3, #9
    a486:	400c      	ands	r4, r1
    a488:	2200      	movs	r2, #0
    a48a:	e737      	b.n	a2fc <__aeabi_fmul+0x94>
    a48c:	2080      	movs	r0, #128	; 0x80
    a48e:	2401      	movs	r4, #1
    a490:	03c0      	lsls	r0, r0, #15
    a492:	4328      	orrs	r0, r5
    a494:	0240      	lsls	r0, r0, #9
    a496:	0a40      	lsrs	r0, r0, #9
    a498:	400c      	ands	r4, r1
    a49a:	22ff      	movs	r2, #255	; 0xff
    a49c:	e72e      	b.n	a2fc <__aeabi_fmul+0x94>
    a49e:	46c0      	nop			; (mov r8, r8)
    a4a0:	0000cb9c 	.word	0x0000cb9c
    a4a4:	f7ffffff 	.word	0xf7ffffff

0000a4a8 <__aeabi_fsub>:
    a4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4aa:	464f      	mov	r7, r9
    a4ac:	46d6      	mov	lr, sl
    a4ae:	4646      	mov	r6, r8
    a4b0:	0044      	lsls	r4, r0, #1
    a4b2:	b5c0      	push	{r6, r7, lr}
    a4b4:	0fc2      	lsrs	r2, r0, #31
    a4b6:	0247      	lsls	r7, r0, #9
    a4b8:	0248      	lsls	r0, r1, #9
    a4ba:	0a40      	lsrs	r0, r0, #9
    a4bc:	4684      	mov	ip, r0
    a4be:	4666      	mov	r6, ip
    a4c0:	0a7b      	lsrs	r3, r7, #9
    a4c2:	0048      	lsls	r0, r1, #1
    a4c4:	0fc9      	lsrs	r1, r1, #31
    a4c6:	469a      	mov	sl, r3
    a4c8:	0e24      	lsrs	r4, r4, #24
    a4ca:	0015      	movs	r5, r2
    a4cc:	00db      	lsls	r3, r3, #3
    a4ce:	0e00      	lsrs	r0, r0, #24
    a4d0:	4689      	mov	r9, r1
    a4d2:	00f6      	lsls	r6, r6, #3
    a4d4:	28ff      	cmp	r0, #255	; 0xff
    a4d6:	d100      	bne.n	a4da <__aeabi_fsub+0x32>
    a4d8:	e08f      	b.n	a5fa <__aeabi_fsub+0x152>
    a4da:	2101      	movs	r1, #1
    a4dc:	464f      	mov	r7, r9
    a4de:	404f      	eors	r7, r1
    a4e0:	0039      	movs	r1, r7
    a4e2:	4291      	cmp	r1, r2
    a4e4:	d066      	beq.n	a5b4 <__aeabi_fsub+0x10c>
    a4e6:	1a22      	subs	r2, r4, r0
    a4e8:	2a00      	cmp	r2, #0
    a4ea:	dc00      	bgt.n	a4ee <__aeabi_fsub+0x46>
    a4ec:	e09d      	b.n	a62a <__aeabi_fsub+0x182>
    a4ee:	2800      	cmp	r0, #0
    a4f0:	d13d      	bne.n	a56e <__aeabi_fsub+0xc6>
    a4f2:	2e00      	cmp	r6, #0
    a4f4:	d100      	bne.n	a4f8 <__aeabi_fsub+0x50>
    a4f6:	e08b      	b.n	a610 <__aeabi_fsub+0x168>
    a4f8:	1e51      	subs	r1, r2, #1
    a4fa:	2900      	cmp	r1, #0
    a4fc:	d000      	beq.n	a500 <__aeabi_fsub+0x58>
    a4fe:	e0b5      	b.n	a66c <__aeabi_fsub+0x1c4>
    a500:	2401      	movs	r4, #1
    a502:	1b9b      	subs	r3, r3, r6
    a504:	015a      	lsls	r2, r3, #5
    a506:	d544      	bpl.n	a592 <__aeabi_fsub+0xea>
    a508:	019b      	lsls	r3, r3, #6
    a50a:	099f      	lsrs	r7, r3, #6
    a50c:	0038      	movs	r0, r7
    a50e:	f7ff f9a5 	bl	985c <__clzsi2>
    a512:	3805      	subs	r0, #5
    a514:	4087      	lsls	r7, r0
    a516:	4284      	cmp	r4, r0
    a518:	dd00      	ble.n	a51c <__aeabi_fsub+0x74>
    a51a:	e096      	b.n	a64a <__aeabi_fsub+0x1a2>
    a51c:	1b04      	subs	r4, r0, r4
    a51e:	003a      	movs	r2, r7
    a520:	2020      	movs	r0, #32
    a522:	3401      	adds	r4, #1
    a524:	40e2      	lsrs	r2, r4
    a526:	1b04      	subs	r4, r0, r4
    a528:	40a7      	lsls	r7, r4
    a52a:	003b      	movs	r3, r7
    a52c:	1e5f      	subs	r7, r3, #1
    a52e:	41bb      	sbcs	r3, r7
    a530:	2400      	movs	r4, #0
    a532:	4313      	orrs	r3, r2
    a534:	075a      	lsls	r2, r3, #29
    a536:	d004      	beq.n	a542 <__aeabi_fsub+0x9a>
    a538:	220f      	movs	r2, #15
    a53a:	401a      	ands	r2, r3
    a53c:	2a04      	cmp	r2, #4
    a53e:	d000      	beq.n	a542 <__aeabi_fsub+0x9a>
    a540:	3304      	adds	r3, #4
    a542:	015a      	lsls	r2, r3, #5
    a544:	d527      	bpl.n	a596 <__aeabi_fsub+0xee>
    a546:	3401      	adds	r4, #1
    a548:	2cff      	cmp	r4, #255	; 0xff
    a54a:	d100      	bne.n	a54e <__aeabi_fsub+0xa6>
    a54c:	e079      	b.n	a642 <__aeabi_fsub+0x19a>
    a54e:	2201      	movs	r2, #1
    a550:	019b      	lsls	r3, r3, #6
    a552:	0a5b      	lsrs	r3, r3, #9
    a554:	b2e4      	uxtb	r4, r4
    a556:	402a      	ands	r2, r5
    a558:	025b      	lsls	r3, r3, #9
    a55a:	05e4      	lsls	r4, r4, #23
    a55c:	0a58      	lsrs	r0, r3, #9
    a55e:	07d2      	lsls	r2, r2, #31
    a560:	4320      	orrs	r0, r4
    a562:	4310      	orrs	r0, r2
    a564:	bc1c      	pop	{r2, r3, r4}
    a566:	4690      	mov	r8, r2
    a568:	4699      	mov	r9, r3
    a56a:	46a2      	mov	sl, r4
    a56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a56e:	2cff      	cmp	r4, #255	; 0xff
    a570:	d0e0      	beq.n	a534 <__aeabi_fsub+0x8c>
    a572:	2180      	movs	r1, #128	; 0x80
    a574:	04c9      	lsls	r1, r1, #19
    a576:	430e      	orrs	r6, r1
    a578:	2a1b      	cmp	r2, #27
    a57a:	dc7b      	bgt.n	a674 <__aeabi_fsub+0x1cc>
    a57c:	0031      	movs	r1, r6
    a57e:	2020      	movs	r0, #32
    a580:	40d1      	lsrs	r1, r2
    a582:	1a82      	subs	r2, r0, r2
    a584:	4096      	lsls	r6, r2
    a586:	1e72      	subs	r2, r6, #1
    a588:	4196      	sbcs	r6, r2
    a58a:	430e      	orrs	r6, r1
    a58c:	1b9b      	subs	r3, r3, r6
    a58e:	015a      	lsls	r2, r3, #5
    a590:	d4ba      	bmi.n	a508 <__aeabi_fsub+0x60>
    a592:	075a      	lsls	r2, r3, #29
    a594:	d1d0      	bne.n	a538 <__aeabi_fsub+0x90>
    a596:	2201      	movs	r2, #1
    a598:	08df      	lsrs	r7, r3, #3
    a59a:	402a      	ands	r2, r5
    a59c:	2cff      	cmp	r4, #255	; 0xff
    a59e:	d133      	bne.n	a608 <__aeabi_fsub+0x160>
    a5a0:	2f00      	cmp	r7, #0
    a5a2:	d100      	bne.n	a5a6 <__aeabi_fsub+0xfe>
    a5a4:	e0a8      	b.n	a6f8 <__aeabi_fsub+0x250>
    a5a6:	2380      	movs	r3, #128	; 0x80
    a5a8:	03db      	lsls	r3, r3, #15
    a5aa:	433b      	orrs	r3, r7
    a5ac:	025b      	lsls	r3, r3, #9
    a5ae:	0a5b      	lsrs	r3, r3, #9
    a5b0:	24ff      	movs	r4, #255	; 0xff
    a5b2:	e7d1      	b.n	a558 <__aeabi_fsub+0xb0>
    a5b4:	1a21      	subs	r1, r4, r0
    a5b6:	2900      	cmp	r1, #0
    a5b8:	dd4c      	ble.n	a654 <__aeabi_fsub+0x1ac>
    a5ba:	2800      	cmp	r0, #0
    a5bc:	d02a      	beq.n	a614 <__aeabi_fsub+0x16c>
    a5be:	2cff      	cmp	r4, #255	; 0xff
    a5c0:	d0b8      	beq.n	a534 <__aeabi_fsub+0x8c>
    a5c2:	2080      	movs	r0, #128	; 0x80
    a5c4:	04c0      	lsls	r0, r0, #19
    a5c6:	4306      	orrs	r6, r0
    a5c8:	291b      	cmp	r1, #27
    a5ca:	dd00      	ble.n	a5ce <__aeabi_fsub+0x126>
    a5cc:	e0af      	b.n	a72e <__aeabi_fsub+0x286>
    a5ce:	0030      	movs	r0, r6
    a5d0:	2720      	movs	r7, #32
    a5d2:	40c8      	lsrs	r0, r1
    a5d4:	1a79      	subs	r1, r7, r1
    a5d6:	408e      	lsls	r6, r1
    a5d8:	1e71      	subs	r1, r6, #1
    a5da:	418e      	sbcs	r6, r1
    a5dc:	4306      	orrs	r6, r0
    a5de:	199b      	adds	r3, r3, r6
    a5e0:	0159      	lsls	r1, r3, #5
    a5e2:	d5d6      	bpl.n	a592 <__aeabi_fsub+0xea>
    a5e4:	3401      	adds	r4, #1
    a5e6:	2cff      	cmp	r4, #255	; 0xff
    a5e8:	d100      	bne.n	a5ec <__aeabi_fsub+0x144>
    a5ea:	e085      	b.n	a6f8 <__aeabi_fsub+0x250>
    a5ec:	2201      	movs	r2, #1
    a5ee:	497a      	ldr	r1, [pc, #488]	; (a7d8 <__aeabi_fsub+0x330>)
    a5f0:	401a      	ands	r2, r3
    a5f2:	085b      	lsrs	r3, r3, #1
    a5f4:	400b      	ands	r3, r1
    a5f6:	4313      	orrs	r3, r2
    a5f8:	e79c      	b.n	a534 <__aeabi_fsub+0x8c>
    a5fa:	2e00      	cmp	r6, #0
    a5fc:	d000      	beq.n	a600 <__aeabi_fsub+0x158>
    a5fe:	e770      	b.n	a4e2 <__aeabi_fsub+0x3a>
    a600:	e76b      	b.n	a4da <__aeabi_fsub+0x32>
    a602:	1e3b      	subs	r3, r7, #0
    a604:	d1c5      	bne.n	a592 <__aeabi_fsub+0xea>
    a606:	2200      	movs	r2, #0
    a608:	027b      	lsls	r3, r7, #9
    a60a:	0a5b      	lsrs	r3, r3, #9
    a60c:	b2e4      	uxtb	r4, r4
    a60e:	e7a3      	b.n	a558 <__aeabi_fsub+0xb0>
    a610:	0014      	movs	r4, r2
    a612:	e78f      	b.n	a534 <__aeabi_fsub+0x8c>
    a614:	2e00      	cmp	r6, #0
    a616:	d04d      	beq.n	a6b4 <__aeabi_fsub+0x20c>
    a618:	1e48      	subs	r0, r1, #1
    a61a:	2800      	cmp	r0, #0
    a61c:	d157      	bne.n	a6ce <__aeabi_fsub+0x226>
    a61e:	199b      	adds	r3, r3, r6
    a620:	2401      	movs	r4, #1
    a622:	015a      	lsls	r2, r3, #5
    a624:	d5b5      	bpl.n	a592 <__aeabi_fsub+0xea>
    a626:	2402      	movs	r4, #2
    a628:	e7e0      	b.n	a5ec <__aeabi_fsub+0x144>
    a62a:	2a00      	cmp	r2, #0
    a62c:	d125      	bne.n	a67a <__aeabi_fsub+0x1d2>
    a62e:	1c62      	adds	r2, r4, #1
    a630:	b2d2      	uxtb	r2, r2
    a632:	2a01      	cmp	r2, #1
    a634:	dd72      	ble.n	a71c <__aeabi_fsub+0x274>
    a636:	1b9f      	subs	r7, r3, r6
    a638:	017a      	lsls	r2, r7, #5
    a63a:	d535      	bpl.n	a6a8 <__aeabi_fsub+0x200>
    a63c:	1af7      	subs	r7, r6, r3
    a63e:	000d      	movs	r5, r1
    a640:	e764      	b.n	a50c <__aeabi_fsub+0x64>
    a642:	2201      	movs	r2, #1
    a644:	2300      	movs	r3, #0
    a646:	402a      	ands	r2, r5
    a648:	e786      	b.n	a558 <__aeabi_fsub+0xb0>
    a64a:	003b      	movs	r3, r7
    a64c:	4a63      	ldr	r2, [pc, #396]	; (a7dc <__aeabi_fsub+0x334>)
    a64e:	1a24      	subs	r4, r4, r0
    a650:	4013      	ands	r3, r2
    a652:	e76f      	b.n	a534 <__aeabi_fsub+0x8c>
    a654:	2900      	cmp	r1, #0
    a656:	d16c      	bne.n	a732 <__aeabi_fsub+0x28a>
    a658:	1c61      	adds	r1, r4, #1
    a65a:	b2c8      	uxtb	r0, r1
    a65c:	2801      	cmp	r0, #1
    a65e:	dd4e      	ble.n	a6fe <__aeabi_fsub+0x256>
    a660:	29ff      	cmp	r1, #255	; 0xff
    a662:	d049      	beq.n	a6f8 <__aeabi_fsub+0x250>
    a664:	199b      	adds	r3, r3, r6
    a666:	085b      	lsrs	r3, r3, #1
    a668:	000c      	movs	r4, r1
    a66a:	e763      	b.n	a534 <__aeabi_fsub+0x8c>
    a66c:	2aff      	cmp	r2, #255	; 0xff
    a66e:	d041      	beq.n	a6f4 <__aeabi_fsub+0x24c>
    a670:	000a      	movs	r2, r1
    a672:	e781      	b.n	a578 <__aeabi_fsub+0xd0>
    a674:	2601      	movs	r6, #1
    a676:	1b9b      	subs	r3, r3, r6
    a678:	e789      	b.n	a58e <__aeabi_fsub+0xe6>
    a67a:	2c00      	cmp	r4, #0
    a67c:	d01c      	beq.n	a6b8 <__aeabi_fsub+0x210>
    a67e:	28ff      	cmp	r0, #255	; 0xff
    a680:	d021      	beq.n	a6c6 <__aeabi_fsub+0x21e>
    a682:	2480      	movs	r4, #128	; 0x80
    a684:	04e4      	lsls	r4, r4, #19
    a686:	4252      	negs	r2, r2
    a688:	4323      	orrs	r3, r4
    a68a:	2a1b      	cmp	r2, #27
    a68c:	dd00      	ble.n	a690 <__aeabi_fsub+0x1e8>
    a68e:	e096      	b.n	a7be <__aeabi_fsub+0x316>
    a690:	001c      	movs	r4, r3
    a692:	2520      	movs	r5, #32
    a694:	40d4      	lsrs	r4, r2
    a696:	1aaa      	subs	r2, r5, r2
    a698:	4093      	lsls	r3, r2
    a69a:	1e5a      	subs	r2, r3, #1
    a69c:	4193      	sbcs	r3, r2
    a69e:	4323      	orrs	r3, r4
    a6a0:	1af3      	subs	r3, r6, r3
    a6a2:	0004      	movs	r4, r0
    a6a4:	000d      	movs	r5, r1
    a6a6:	e72d      	b.n	a504 <__aeabi_fsub+0x5c>
    a6a8:	2f00      	cmp	r7, #0
    a6aa:	d000      	beq.n	a6ae <__aeabi_fsub+0x206>
    a6ac:	e72e      	b.n	a50c <__aeabi_fsub+0x64>
    a6ae:	2200      	movs	r2, #0
    a6b0:	2400      	movs	r4, #0
    a6b2:	e7a9      	b.n	a608 <__aeabi_fsub+0x160>
    a6b4:	000c      	movs	r4, r1
    a6b6:	e73d      	b.n	a534 <__aeabi_fsub+0x8c>
    a6b8:	2b00      	cmp	r3, #0
    a6ba:	d058      	beq.n	a76e <__aeabi_fsub+0x2c6>
    a6bc:	43d2      	mvns	r2, r2
    a6be:	2a00      	cmp	r2, #0
    a6c0:	d0ee      	beq.n	a6a0 <__aeabi_fsub+0x1f8>
    a6c2:	28ff      	cmp	r0, #255	; 0xff
    a6c4:	d1e1      	bne.n	a68a <__aeabi_fsub+0x1e2>
    a6c6:	0033      	movs	r3, r6
    a6c8:	24ff      	movs	r4, #255	; 0xff
    a6ca:	000d      	movs	r5, r1
    a6cc:	e732      	b.n	a534 <__aeabi_fsub+0x8c>
    a6ce:	29ff      	cmp	r1, #255	; 0xff
    a6d0:	d010      	beq.n	a6f4 <__aeabi_fsub+0x24c>
    a6d2:	0001      	movs	r1, r0
    a6d4:	e778      	b.n	a5c8 <__aeabi_fsub+0x120>
    a6d6:	2b00      	cmp	r3, #0
    a6d8:	d06e      	beq.n	a7b8 <__aeabi_fsub+0x310>
    a6da:	24ff      	movs	r4, #255	; 0xff
    a6dc:	2e00      	cmp	r6, #0
    a6de:	d100      	bne.n	a6e2 <__aeabi_fsub+0x23a>
    a6e0:	e728      	b.n	a534 <__aeabi_fsub+0x8c>
    a6e2:	2280      	movs	r2, #128	; 0x80
    a6e4:	4651      	mov	r1, sl
    a6e6:	03d2      	lsls	r2, r2, #15
    a6e8:	4211      	tst	r1, r2
    a6ea:	d003      	beq.n	a6f4 <__aeabi_fsub+0x24c>
    a6ec:	4661      	mov	r1, ip
    a6ee:	4211      	tst	r1, r2
    a6f0:	d100      	bne.n	a6f4 <__aeabi_fsub+0x24c>
    a6f2:	0033      	movs	r3, r6
    a6f4:	24ff      	movs	r4, #255	; 0xff
    a6f6:	e71d      	b.n	a534 <__aeabi_fsub+0x8c>
    a6f8:	24ff      	movs	r4, #255	; 0xff
    a6fa:	2300      	movs	r3, #0
    a6fc:	e72c      	b.n	a558 <__aeabi_fsub+0xb0>
    a6fe:	2c00      	cmp	r4, #0
    a700:	d1e9      	bne.n	a6d6 <__aeabi_fsub+0x22e>
    a702:	2b00      	cmp	r3, #0
    a704:	d063      	beq.n	a7ce <__aeabi_fsub+0x326>
    a706:	2e00      	cmp	r6, #0
    a708:	d100      	bne.n	a70c <__aeabi_fsub+0x264>
    a70a:	e713      	b.n	a534 <__aeabi_fsub+0x8c>
    a70c:	199b      	adds	r3, r3, r6
    a70e:	015a      	lsls	r2, r3, #5
    a710:	d400      	bmi.n	a714 <__aeabi_fsub+0x26c>
    a712:	e73e      	b.n	a592 <__aeabi_fsub+0xea>
    a714:	4a31      	ldr	r2, [pc, #196]	; (a7dc <__aeabi_fsub+0x334>)
    a716:	000c      	movs	r4, r1
    a718:	4013      	ands	r3, r2
    a71a:	e70b      	b.n	a534 <__aeabi_fsub+0x8c>
    a71c:	2c00      	cmp	r4, #0
    a71e:	d11e      	bne.n	a75e <__aeabi_fsub+0x2b6>
    a720:	2b00      	cmp	r3, #0
    a722:	d12f      	bne.n	a784 <__aeabi_fsub+0x2dc>
    a724:	2e00      	cmp	r6, #0
    a726:	d04f      	beq.n	a7c8 <__aeabi_fsub+0x320>
    a728:	0033      	movs	r3, r6
    a72a:	000d      	movs	r5, r1
    a72c:	e702      	b.n	a534 <__aeabi_fsub+0x8c>
    a72e:	2601      	movs	r6, #1
    a730:	e755      	b.n	a5de <__aeabi_fsub+0x136>
    a732:	2c00      	cmp	r4, #0
    a734:	d11f      	bne.n	a776 <__aeabi_fsub+0x2ce>
    a736:	2b00      	cmp	r3, #0
    a738:	d043      	beq.n	a7c2 <__aeabi_fsub+0x31a>
    a73a:	43c9      	mvns	r1, r1
    a73c:	2900      	cmp	r1, #0
    a73e:	d00b      	beq.n	a758 <__aeabi_fsub+0x2b0>
    a740:	28ff      	cmp	r0, #255	; 0xff
    a742:	d039      	beq.n	a7b8 <__aeabi_fsub+0x310>
    a744:	291b      	cmp	r1, #27
    a746:	dc44      	bgt.n	a7d2 <__aeabi_fsub+0x32a>
    a748:	001c      	movs	r4, r3
    a74a:	2720      	movs	r7, #32
    a74c:	40cc      	lsrs	r4, r1
    a74e:	1a79      	subs	r1, r7, r1
    a750:	408b      	lsls	r3, r1
    a752:	1e59      	subs	r1, r3, #1
    a754:	418b      	sbcs	r3, r1
    a756:	4323      	orrs	r3, r4
    a758:	199b      	adds	r3, r3, r6
    a75a:	0004      	movs	r4, r0
    a75c:	e740      	b.n	a5e0 <__aeabi_fsub+0x138>
    a75e:	2b00      	cmp	r3, #0
    a760:	d11a      	bne.n	a798 <__aeabi_fsub+0x2f0>
    a762:	2e00      	cmp	r6, #0
    a764:	d124      	bne.n	a7b0 <__aeabi_fsub+0x308>
    a766:	2780      	movs	r7, #128	; 0x80
    a768:	2200      	movs	r2, #0
    a76a:	03ff      	lsls	r7, r7, #15
    a76c:	e71b      	b.n	a5a6 <__aeabi_fsub+0xfe>
    a76e:	0033      	movs	r3, r6
    a770:	0004      	movs	r4, r0
    a772:	000d      	movs	r5, r1
    a774:	e6de      	b.n	a534 <__aeabi_fsub+0x8c>
    a776:	28ff      	cmp	r0, #255	; 0xff
    a778:	d01e      	beq.n	a7b8 <__aeabi_fsub+0x310>
    a77a:	2480      	movs	r4, #128	; 0x80
    a77c:	04e4      	lsls	r4, r4, #19
    a77e:	4249      	negs	r1, r1
    a780:	4323      	orrs	r3, r4
    a782:	e7df      	b.n	a744 <__aeabi_fsub+0x29c>
    a784:	2e00      	cmp	r6, #0
    a786:	d100      	bne.n	a78a <__aeabi_fsub+0x2e2>
    a788:	e6d4      	b.n	a534 <__aeabi_fsub+0x8c>
    a78a:	1b9f      	subs	r7, r3, r6
    a78c:	017a      	lsls	r2, r7, #5
    a78e:	d400      	bmi.n	a792 <__aeabi_fsub+0x2ea>
    a790:	e737      	b.n	a602 <__aeabi_fsub+0x15a>
    a792:	1af3      	subs	r3, r6, r3
    a794:	000d      	movs	r5, r1
    a796:	e6cd      	b.n	a534 <__aeabi_fsub+0x8c>
    a798:	24ff      	movs	r4, #255	; 0xff
    a79a:	2e00      	cmp	r6, #0
    a79c:	d100      	bne.n	a7a0 <__aeabi_fsub+0x2f8>
    a79e:	e6c9      	b.n	a534 <__aeabi_fsub+0x8c>
    a7a0:	2280      	movs	r2, #128	; 0x80
    a7a2:	4650      	mov	r0, sl
    a7a4:	03d2      	lsls	r2, r2, #15
    a7a6:	4210      	tst	r0, r2
    a7a8:	d0a4      	beq.n	a6f4 <__aeabi_fsub+0x24c>
    a7aa:	4660      	mov	r0, ip
    a7ac:	4210      	tst	r0, r2
    a7ae:	d1a1      	bne.n	a6f4 <__aeabi_fsub+0x24c>
    a7b0:	0033      	movs	r3, r6
    a7b2:	000d      	movs	r5, r1
    a7b4:	24ff      	movs	r4, #255	; 0xff
    a7b6:	e6bd      	b.n	a534 <__aeabi_fsub+0x8c>
    a7b8:	0033      	movs	r3, r6
    a7ba:	24ff      	movs	r4, #255	; 0xff
    a7bc:	e6ba      	b.n	a534 <__aeabi_fsub+0x8c>
    a7be:	2301      	movs	r3, #1
    a7c0:	e76e      	b.n	a6a0 <__aeabi_fsub+0x1f8>
    a7c2:	0033      	movs	r3, r6
    a7c4:	0004      	movs	r4, r0
    a7c6:	e6b5      	b.n	a534 <__aeabi_fsub+0x8c>
    a7c8:	2700      	movs	r7, #0
    a7ca:	2200      	movs	r2, #0
    a7cc:	e71c      	b.n	a608 <__aeabi_fsub+0x160>
    a7ce:	0033      	movs	r3, r6
    a7d0:	e6b0      	b.n	a534 <__aeabi_fsub+0x8c>
    a7d2:	2301      	movs	r3, #1
    a7d4:	e7c0      	b.n	a758 <__aeabi_fsub+0x2b0>
    a7d6:	46c0      	nop			; (mov r8, r8)
    a7d8:	7dffffff 	.word	0x7dffffff
    a7dc:	fbffffff 	.word	0xfbffffff

0000a7e0 <__aeabi_fcmpun>:
    a7e0:	0242      	lsls	r2, r0, #9
    a7e2:	024b      	lsls	r3, r1, #9
    a7e4:	0040      	lsls	r0, r0, #1
    a7e6:	0049      	lsls	r1, r1, #1
    a7e8:	0a52      	lsrs	r2, r2, #9
    a7ea:	0e00      	lsrs	r0, r0, #24
    a7ec:	0a5b      	lsrs	r3, r3, #9
    a7ee:	0e09      	lsrs	r1, r1, #24
    a7f0:	28ff      	cmp	r0, #255	; 0xff
    a7f2:	d003      	beq.n	a7fc <__aeabi_fcmpun+0x1c>
    a7f4:	2000      	movs	r0, #0
    a7f6:	29ff      	cmp	r1, #255	; 0xff
    a7f8:	d006      	beq.n	a808 <__aeabi_fcmpun+0x28>
    a7fa:	4770      	bx	lr
    a7fc:	38fe      	subs	r0, #254	; 0xfe
    a7fe:	2a00      	cmp	r2, #0
    a800:	d1fb      	bne.n	a7fa <__aeabi_fcmpun+0x1a>
    a802:	2000      	movs	r0, #0
    a804:	29ff      	cmp	r1, #255	; 0xff
    a806:	d1f8      	bne.n	a7fa <__aeabi_fcmpun+0x1a>
    a808:	0018      	movs	r0, r3
    a80a:	1e43      	subs	r3, r0, #1
    a80c:	4198      	sbcs	r0, r3
    a80e:	e7f4      	b.n	a7fa <__aeabi_fcmpun+0x1a>

0000a810 <__aeabi_f2iz>:
    a810:	0241      	lsls	r1, r0, #9
    a812:	0043      	lsls	r3, r0, #1
    a814:	0fc2      	lsrs	r2, r0, #31
    a816:	0a49      	lsrs	r1, r1, #9
    a818:	0e1b      	lsrs	r3, r3, #24
    a81a:	2000      	movs	r0, #0
    a81c:	2b7e      	cmp	r3, #126	; 0x7e
    a81e:	dd0d      	ble.n	a83c <__aeabi_f2iz+0x2c>
    a820:	2b9d      	cmp	r3, #157	; 0x9d
    a822:	dc0c      	bgt.n	a83e <__aeabi_f2iz+0x2e>
    a824:	2080      	movs	r0, #128	; 0x80
    a826:	0400      	lsls	r0, r0, #16
    a828:	4301      	orrs	r1, r0
    a82a:	2b95      	cmp	r3, #149	; 0x95
    a82c:	dc0a      	bgt.n	a844 <__aeabi_f2iz+0x34>
    a82e:	2096      	movs	r0, #150	; 0x96
    a830:	1ac3      	subs	r3, r0, r3
    a832:	40d9      	lsrs	r1, r3
    a834:	4248      	negs	r0, r1
    a836:	2a00      	cmp	r2, #0
    a838:	d100      	bne.n	a83c <__aeabi_f2iz+0x2c>
    a83a:	0008      	movs	r0, r1
    a83c:	4770      	bx	lr
    a83e:	4b03      	ldr	r3, [pc, #12]	; (a84c <__aeabi_f2iz+0x3c>)
    a840:	18d0      	adds	r0, r2, r3
    a842:	e7fb      	b.n	a83c <__aeabi_f2iz+0x2c>
    a844:	3b96      	subs	r3, #150	; 0x96
    a846:	4099      	lsls	r1, r3
    a848:	e7f4      	b.n	a834 <__aeabi_f2iz+0x24>
    a84a:	46c0      	nop			; (mov r8, r8)
    a84c:	7fffffff 	.word	0x7fffffff

0000a850 <__aeabi_ui2f>:
    a850:	b510      	push	{r4, lr}
    a852:	1e04      	subs	r4, r0, #0
    a854:	d027      	beq.n	a8a6 <__aeabi_ui2f+0x56>
    a856:	f7ff f801 	bl	985c <__clzsi2>
    a85a:	239e      	movs	r3, #158	; 0x9e
    a85c:	1a1b      	subs	r3, r3, r0
    a85e:	2b96      	cmp	r3, #150	; 0x96
    a860:	dc0a      	bgt.n	a878 <__aeabi_ui2f+0x28>
    a862:	2296      	movs	r2, #150	; 0x96
    a864:	1ad2      	subs	r2, r2, r3
    a866:	4094      	lsls	r4, r2
    a868:	0264      	lsls	r4, r4, #9
    a86a:	0a64      	lsrs	r4, r4, #9
    a86c:	b2db      	uxtb	r3, r3
    a86e:	0264      	lsls	r4, r4, #9
    a870:	05db      	lsls	r3, r3, #23
    a872:	0a60      	lsrs	r0, r4, #9
    a874:	4318      	orrs	r0, r3
    a876:	bd10      	pop	{r4, pc}
    a878:	2b99      	cmp	r3, #153	; 0x99
    a87a:	dc17      	bgt.n	a8ac <__aeabi_ui2f+0x5c>
    a87c:	2299      	movs	r2, #153	; 0x99
    a87e:	1ad2      	subs	r2, r2, r3
    a880:	2a00      	cmp	r2, #0
    a882:	dd27      	ble.n	a8d4 <__aeabi_ui2f+0x84>
    a884:	4094      	lsls	r4, r2
    a886:	0022      	movs	r2, r4
    a888:	4c13      	ldr	r4, [pc, #76]	; (a8d8 <__aeabi_ui2f+0x88>)
    a88a:	4014      	ands	r4, r2
    a88c:	0751      	lsls	r1, r2, #29
    a88e:	d004      	beq.n	a89a <__aeabi_ui2f+0x4a>
    a890:	210f      	movs	r1, #15
    a892:	400a      	ands	r2, r1
    a894:	2a04      	cmp	r2, #4
    a896:	d000      	beq.n	a89a <__aeabi_ui2f+0x4a>
    a898:	3404      	adds	r4, #4
    a89a:	0162      	lsls	r2, r4, #5
    a89c:	d412      	bmi.n	a8c4 <__aeabi_ui2f+0x74>
    a89e:	01a4      	lsls	r4, r4, #6
    a8a0:	0a64      	lsrs	r4, r4, #9
    a8a2:	b2db      	uxtb	r3, r3
    a8a4:	e7e3      	b.n	a86e <__aeabi_ui2f+0x1e>
    a8a6:	2300      	movs	r3, #0
    a8a8:	2400      	movs	r4, #0
    a8aa:	e7e0      	b.n	a86e <__aeabi_ui2f+0x1e>
    a8ac:	22b9      	movs	r2, #185	; 0xb9
    a8ae:	0021      	movs	r1, r4
    a8b0:	1ad2      	subs	r2, r2, r3
    a8b2:	4091      	lsls	r1, r2
    a8b4:	000a      	movs	r2, r1
    a8b6:	1e51      	subs	r1, r2, #1
    a8b8:	418a      	sbcs	r2, r1
    a8ba:	2105      	movs	r1, #5
    a8bc:	1a09      	subs	r1, r1, r0
    a8be:	40cc      	lsrs	r4, r1
    a8c0:	4314      	orrs	r4, r2
    a8c2:	e7db      	b.n	a87c <__aeabi_ui2f+0x2c>
    a8c4:	4b04      	ldr	r3, [pc, #16]	; (a8d8 <__aeabi_ui2f+0x88>)
    a8c6:	401c      	ands	r4, r3
    a8c8:	239f      	movs	r3, #159	; 0x9f
    a8ca:	01a4      	lsls	r4, r4, #6
    a8cc:	1a1b      	subs	r3, r3, r0
    a8ce:	0a64      	lsrs	r4, r4, #9
    a8d0:	b2db      	uxtb	r3, r3
    a8d2:	e7cc      	b.n	a86e <__aeabi_ui2f+0x1e>
    a8d4:	0022      	movs	r2, r4
    a8d6:	e7d7      	b.n	a888 <__aeabi_ui2f+0x38>
    a8d8:	fbffffff 	.word	0xfbffffff

0000a8dc <__aeabi_dadd>:
    a8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a8de:	4645      	mov	r5, r8
    a8e0:	46de      	mov	lr, fp
    a8e2:	4657      	mov	r7, sl
    a8e4:	464e      	mov	r6, r9
    a8e6:	030c      	lsls	r4, r1, #12
    a8e8:	b5e0      	push	{r5, r6, r7, lr}
    a8ea:	004e      	lsls	r6, r1, #1
    a8ec:	0fc9      	lsrs	r1, r1, #31
    a8ee:	4688      	mov	r8, r1
    a8f0:	000d      	movs	r5, r1
    a8f2:	0a61      	lsrs	r1, r4, #9
    a8f4:	0f44      	lsrs	r4, r0, #29
    a8f6:	430c      	orrs	r4, r1
    a8f8:	00c7      	lsls	r7, r0, #3
    a8fa:	0319      	lsls	r1, r3, #12
    a8fc:	0058      	lsls	r0, r3, #1
    a8fe:	0fdb      	lsrs	r3, r3, #31
    a900:	469b      	mov	fp, r3
    a902:	0a4b      	lsrs	r3, r1, #9
    a904:	0f51      	lsrs	r1, r2, #29
    a906:	430b      	orrs	r3, r1
    a908:	0d76      	lsrs	r6, r6, #21
    a90a:	0d40      	lsrs	r0, r0, #21
    a90c:	0019      	movs	r1, r3
    a90e:	00d2      	lsls	r2, r2, #3
    a910:	45d8      	cmp	r8, fp
    a912:	d100      	bne.n	a916 <__aeabi_dadd+0x3a>
    a914:	e0ae      	b.n	aa74 <__aeabi_dadd+0x198>
    a916:	1a35      	subs	r5, r6, r0
    a918:	2d00      	cmp	r5, #0
    a91a:	dc00      	bgt.n	a91e <__aeabi_dadd+0x42>
    a91c:	e0f6      	b.n	ab0c <__aeabi_dadd+0x230>
    a91e:	2800      	cmp	r0, #0
    a920:	d10f      	bne.n	a942 <__aeabi_dadd+0x66>
    a922:	4313      	orrs	r3, r2
    a924:	d100      	bne.n	a928 <__aeabi_dadd+0x4c>
    a926:	e0db      	b.n	aae0 <__aeabi_dadd+0x204>
    a928:	1e6b      	subs	r3, r5, #1
    a92a:	2b00      	cmp	r3, #0
    a92c:	d000      	beq.n	a930 <__aeabi_dadd+0x54>
    a92e:	e137      	b.n	aba0 <__aeabi_dadd+0x2c4>
    a930:	1aba      	subs	r2, r7, r2
    a932:	4297      	cmp	r7, r2
    a934:	41bf      	sbcs	r7, r7
    a936:	1a64      	subs	r4, r4, r1
    a938:	427f      	negs	r7, r7
    a93a:	1be4      	subs	r4, r4, r7
    a93c:	2601      	movs	r6, #1
    a93e:	0017      	movs	r7, r2
    a940:	e024      	b.n	a98c <__aeabi_dadd+0xb0>
    a942:	4bc6      	ldr	r3, [pc, #792]	; (ac5c <__aeabi_dadd+0x380>)
    a944:	429e      	cmp	r6, r3
    a946:	d04d      	beq.n	a9e4 <__aeabi_dadd+0x108>
    a948:	2380      	movs	r3, #128	; 0x80
    a94a:	041b      	lsls	r3, r3, #16
    a94c:	4319      	orrs	r1, r3
    a94e:	2d38      	cmp	r5, #56	; 0x38
    a950:	dd00      	ble.n	a954 <__aeabi_dadd+0x78>
    a952:	e107      	b.n	ab64 <__aeabi_dadd+0x288>
    a954:	2d1f      	cmp	r5, #31
    a956:	dd00      	ble.n	a95a <__aeabi_dadd+0x7e>
    a958:	e138      	b.n	abcc <__aeabi_dadd+0x2f0>
    a95a:	2020      	movs	r0, #32
    a95c:	1b43      	subs	r3, r0, r5
    a95e:	469a      	mov	sl, r3
    a960:	000b      	movs	r3, r1
    a962:	4650      	mov	r0, sl
    a964:	4083      	lsls	r3, r0
    a966:	4699      	mov	r9, r3
    a968:	0013      	movs	r3, r2
    a96a:	4648      	mov	r0, r9
    a96c:	40eb      	lsrs	r3, r5
    a96e:	4318      	orrs	r0, r3
    a970:	0003      	movs	r3, r0
    a972:	4650      	mov	r0, sl
    a974:	4082      	lsls	r2, r0
    a976:	1e50      	subs	r0, r2, #1
    a978:	4182      	sbcs	r2, r0
    a97a:	40e9      	lsrs	r1, r5
    a97c:	431a      	orrs	r2, r3
    a97e:	1aba      	subs	r2, r7, r2
    a980:	1a61      	subs	r1, r4, r1
    a982:	4297      	cmp	r7, r2
    a984:	41a4      	sbcs	r4, r4
    a986:	0017      	movs	r7, r2
    a988:	4264      	negs	r4, r4
    a98a:	1b0c      	subs	r4, r1, r4
    a98c:	0223      	lsls	r3, r4, #8
    a98e:	d562      	bpl.n	aa56 <__aeabi_dadd+0x17a>
    a990:	0264      	lsls	r4, r4, #9
    a992:	0a65      	lsrs	r5, r4, #9
    a994:	2d00      	cmp	r5, #0
    a996:	d100      	bne.n	a99a <__aeabi_dadd+0xbe>
    a998:	e0df      	b.n	ab5a <__aeabi_dadd+0x27e>
    a99a:	0028      	movs	r0, r5
    a99c:	f7fe ff5e 	bl	985c <__clzsi2>
    a9a0:	0003      	movs	r3, r0
    a9a2:	3b08      	subs	r3, #8
    a9a4:	2b1f      	cmp	r3, #31
    a9a6:	dd00      	ble.n	a9aa <__aeabi_dadd+0xce>
    a9a8:	e0d2      	b.n	ab50 <__aeabi_dadd+0x274>
    a9aa:	2220      	movs	r2, #32
    a9ac:	003c      	movs	r4, r7
    a9ae:	1ad2      	subs	r2, r2, r3
    a9b0:	409d      	lsls	r5, r3
    a9b2:	40d4      	lsrs	r4, r2
    a9b4:	409f      	lsls	r7, r3
    a9b6:	4325      	orrs	r5, r4
    a9b8:	429e      	cmp	r6, r3
    a9ba:	dd00      	ble.n	a9be <__aeabi_dadd+0xe2>
    a9bc:	e0c4      	b.n	ab48 <__aeabi_dadd+0x26c>
    a9be:	1b9e      	subs	r6, r3, r6
    a9c0:	1c73      	adds	r3, r6, #1
    a9c2:	2b1f      	cmp	r3, #31
    a9c4:	dd00      	ble.n	a9c8 <__aeabi_dadd+0xec>
    a9c6:	e0f1      	b.n	abac <__aeabi_dadd+0x2d0>
    a9c8:	2220      	movs	r2, #32
    a9ca:	0038      	movs	r0, r7
    a9cc:	0029      	movs	r1, r5
    a9ce:	1ad2      	subs	r2, r2, r3
    a9d0:	40d8      	lsrs	r0, r3
    a9d2:	4091      	lsls	r1, r2
    a9d4:	4097      	lsls	r7, r2
    a9d6:	002c      	movs	r4, r5
    a9d8:	4301      	orrs	r1, r0
    a9da:	1e78      	subs	r0, r7, #1
    a9dc:	4187      	sbcs	r7, r0
    a9de:	40dc      	lsrs	r4, r3
    a9e0:	2600      	movs	r6, #0
    a9e2:	430f      	orrs	r7, r1
    a9e4:	077b      	lsls	r3, r7, #29
    a9e6:	d009      	beq.n	a9fc <__aeabi_dadd+0x120>
    a9e8:	230f      	movs	r3, #15
    a9ea:	403b      	ands	r3, r7
    a9ec:	2b04      	cmp	r3, #4
    a9ee:	d005      	beq.n	a9fc <__aeabi_dadd+0x120>
    a9f0:	1d3b      	adds	r3, r7, #4
    a9f2:	42bb      	cmp	r3, r7
    a9f4:	41bf      	sbcs	r7, r7
    a9f6:	427f      	negs	r7, r7
    a9f8:	19e4      	adds	r4, r4, r7
    a9fa:	001f      	movs	r7, r3
    a9fc:	0223      	lsls	r3, r4, #8
    a9fe:	d52c      	bpl.n	aa5a <__aeabi_dadd+0x17e>
    aa00:	4b96      	ldr	r3, [pc, #600]	; (ac5c <__aeabi_dadd+0x380>)
    aa02:	3601      	adds	r6, #1
    aa04:	429e      	cmp	r6, r3
    aa06:	d100      	bne.n	aa0a <__aeabi_dadd+0x12e>
    aa08:	e09a      	b.n	ab40 <__aeabi_dadd+0x264>
    aa0a:	4645      	mov	r5, r8
    aa0c:	4b94      	ldr	r3, [pc, #592]	; (ac60 <__aeabi_dadd+0x384>)
    aa0e:	08ff      	lsrs	r7, r7, #3
    aa10:	401c      	ands	r4, r3
    aa12:	0760      	lsls	r0, r4, #29
    aa14:	0576      	lsls	r6, r6, #21
    aa16:	0264      	lsls	r4, r4, #9
    aa18:	4307      	orrs	r7, r0
    aa1a:	0b24      	lsrs	r4, r4, #12
    aa1c:	0d76      	lsrs	r6, r6, #21
    aa1e:	2100      	movs	r1, #0
    aa20:	0324      	lsls	r4, r4, #12
    aa22:	0b23      	lsrs	r3, r4, #12
    aa24:	0d0c      	lsrs	r4, r1, #20
    aa26:	4a8f      	ldr	r2, [pc, #572]	; (ac64 <__aeabi_dadd+0x388>)
    aa28:	0524      	lsls	r4, r4, #20
    aa2a:	431c      	orrs	r4, r3
    aa2c:	4014      	ands	r4, r2
    aa2e:	0533      	lsls	r3, r6, #20
    aa30:	4323      	orrs	r3, r4
    aa32:	005b      	lsls	r3, r3, #1
    aa34:	07ed      	lsls	r5, r5, #31
    aa36:	085b      	lsrs	r3, r3, #1
    aa38:	432b      	orrs	r3, r5
    aa3a:	0038      	movs	r0, r7
    aa3c:	0019      	movs	r1, r3
    aa3e:	bc3c      	pop	{r2, r3, r4, r5}
    aa40:	4690      	mov	r8, r2
    aa42:	4699      	mov	r9, r3
    aa44:	46a2      	mov	sl, r4
    aa46:	46ab      	mov	fp, r5
    aa48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa4a:	4664      	mov	r4, ip
    aa4c:	4304      	orrs	r4, r0
    aa4e:	d100      	bne.n	aa52 <__aeabi_dadd+0x176>
    aa50:	e211      	b.n	ae76 <__aeabi_dadd+0x59a>
    aa52:	0004      	movs	r4, r0
    aa54:	4667      	mov	r7, ip
    aa56:	077b      	lsls	r3, r7, #29
    aa58:	d1c6      	bne.n	a9e8 <__aeabi_dadd+0x10c>
    aa5a:	4645      	mov	r5, r8
    aa5c:	0760      	lsls	r0, r4, #29
    aa5e:	08ff      	lsrs	r7, r7, #3
    aa60:	4307      	orrs	r7, r0
    aa62:	08e4      	lsrs	r4, r4, #3
    aa64:	4b7d      	ldr	r3, [pc, #500]	; (ac5c <__aeabi_dadd+0x380>)
    aa66:	429e      	cmp	r6, r3
    aa68:	d030      	beq.n	aacc <__aeabi_dadd+0x1f0>
    aa6a:	0324      	lsls	r4, r4, #12
    aa6c:	0576      	lsls	r6, r6, #21
    aa6e:	0b24      	lsrs	r4, r4, #12
    aa70:	0d76      	lsrs	r6, r6, #21
    aa72:	e7d4      	b.n	aa1e <__aeabi_dadd+0x142>
    aa74:	1a33      	subs	r3, r6, r0
    aa76:	469a      	mov	sl, r3
    aa78:	2b00      	cmp	r3, #0
    aa7a:	dd78      	ble.n	ab6e <__aeabi_dadd+0x292>
    aa7c:	2800      	cmp	r0, #0
    aa7e:	d031      	beq.n	aae4 <__aeabi_dadd+0x208>
    aa80:	4876      	ldr	r0, [pc, #472]	; (ac5c <__aeabi_dadd+0x380>)
    aa82:	4286      	cmp	r6, r0
    aa84:	d0ae      	beq.n	a9e4 <__aeabi_dadd+0x108>
    aa86:	2080      	movs	r0, #128	; 0x80
    aa88:	0400      	lsls	r0, r0, #16
    aa8a:	4301      	orrs	r1, r0
    aa8c:	4653      	mov	r3, sl
    aa8e:	2b38      	cmp	r3, #56	; 0x38
    aa90:	dc00      	bgt.n	aa94 <__aeabi_dadd+0x1b8>
    aa92:	e0e9      	b.n	ac68 <__aeabi_dadd+0x38c>
    aa94:	430a      	orrs	r2, r1
    aa96:	1e51      	subs	r1, r2, #1
    aa98:	418a      	sbcs	r2, r1
    aa9a:	2100      	movs	r1, #0
    aa9c:	19d2      	adds	r2, r2, r7
    aa9e:	42ba      	cmp	r2, r7
    aaa0:	41bf      	sbcs	r7, r7
    aaa2:	1909      	adds	r1, r1, r4
    aaa4:	427c      	negs	r4, r7
    aaa6:	0017      	movs	r7, r2
    aaa8:	190c      	adds	r4, r1, r4
    aaaa:	0223      	lsls	r3, r4, #8
    aaac:	d5d3      	bpl.n	aa56 <__aeabi_dadd+0x17a>
    aaae:	4b6b      	ldr	r3, [pc, #428]	; (ac5c <__aeabi_dadd+0x380>)
    aab0:	3601      	adds	r6, #1
    aab2:	429e      	cmp	r6, r3
    aab4:	d100      	bne.n	aab8 <__aeabi_dadd+0x1dc>
    aab6:	e13a      	b.n	ad2e <__aeabi_dadd+0x452>
    aab8:	2001      	movs	r0, #1
    aaba:	4b69      	ldr	r3, [pc, #420]	; (ac60 <__aeabi_dadd+0x384>)
    aabc:	401c      	ands	r4, r3
    aabe:	087b      	lsrs	r3, r7, #1
    aac0:	4007      	ands	r7, r0
    aac2:	431f      	orrs	r7, r3
    aac4:	07e0      	lsls	r0, r4, #31
    aac6:	4307      	orrs	r7, r0
    aac8:	0864      	lsrs	r4, r4, #1
    aaca:	e78b      	b.n	a9e4 <__aeabi_dadd+0x108>
    aacc:	0023      	movs	r3, r4
    aace:	433b      	orrs	r3, r7
    aad0:	d100      	bne.n	aad4 <__aeabi_dadd+0x1f8>
    aad2:	e1cb      	b.n	ae6c <__aeabi_dadd+0x590>
    aad4:	2280      	movs	r2, #128	; 0x80
    aad6:	0312      	lsls	r2, r2, #12
    aad8:	4314      	orrs	r4, r2
    aada:	0324      	lsls	r4, r4, #12
    aadc:	0b24      	lsrs	r4, r4, #12
    aade:	e79e      	b.n	aa1e <__aeabi_dadd+0x142>
    aae0:	002e      	movs	r6, r5
    aae2:	e77f      	b.n	a9e4 <__aeabi_dadd+0x108>
    aae4:	0008      	movs	r0, r1
    aae6:	4310      	orrs	r0, r2
    aae8:	d100      	bne.n	aaec <__aeabi_dadd+0x210>
    aaea:	e0b4      	b.n	ac56 <__aeabi_dadd+0x37a>
    aaec:	1e58      	subs	r0, r3, #1
    aaee:	2800      	cmp	r0, #0
    aaf0:	d000      	beq.n	aaf4 <__aeabi_dadd+0x218>
    aaf2:	e0de      	b.n	acb2 <__aeabi_dadd+0x3d6>
    aaf4:	18ba      	adds	r2, r7, r2
    aaf6:	42ba      	cmp	r2, r7
    aaf8:	419b      	sbcs	r3, r3
    aafa:	1864      	adds	r4, r4, r1
    aafc:	425b      	negs	r3, r3
    aafe:	18e4      	adds	r4, r4, r3
    ab00:	0017      	movs	r7, r2
    ab02:	2601      	movs	r6, #1
    ab04:	0223      	lsls	r3, r4, #8
    ab06:	d5a6      	bpl.n	aa56 <__aeabi_dadd+0x17a>
    ab08:	2602      	movs	r6, #2
    ab0a:	e7d5      	b.n	aab8 <__aeabi_dadd+0x1dc>
    ab0c:	2d00      	cmp	r5, #0
    ab0e:	d16e      	bne.n	abee <__aeabi_dadd+0x312>
    ab10:	1c70      	adds	r0, r6, #1
    ab12:	0540      	lsls	r0, r0, #21
    ab14:	0d40      	lsrs	r0, r0, #21
    ab16:	2801      	cmp	r0, #1
    ab18:	dc00      	bgt.n	ab1c <__aeabi_dadd+0x240>
    ab1a:	e0f9      	b.n	ad10 <__aeabi_dadd+0x434>
    ab1c:	1ab8      	subs	r0, r7, r2
    ab1e:	4684      	mov	ip, r0
    ab20:	4287      	cmp	r7, r0
    ab22:	4180      	sbcs	r0, r0
    ab24:	1ae5      	subs	r5, r4, r3
    ab26:	4240      	negs	r0, r0
    ab28:	1a2d      	subs	r5, r5, r0
    ab2a:	0228      	lsls	r0, r5, #8
    ab2c:	d400      	bmi.n	ab30 <__aeabi_dadd+0x254>
    ab2e:	e089      	b.n	ac44 <__aeabi_dadd+0x368>
    ab30:	1bd7      	subs	r7, r2, r7
    ab32:	42ba      	cmp	r2, r7
    ab34:	4192      	sbcs	r2, r2
    ab36:	1b1c      	subs	r4, r3, r4
    ab38:	4252      	negs	r2, r2
    ab3a:	1aa5      	subs	r5, r4, r2
    ab3c:	46d8      	mov	r8, fp
    ab3e:	e729      	b.n	a994 <__aeabi_dadd+0xb8>
    ab40:	4645      	mov	r5, r8
    ab42:	2400      	movs	r4, #0
    ab44:	2700      	movs	r7, #0
    ab46:	e76a      	b.n	aa1e <__aeabi_dadd+0x142>
    ab48:	4c45      	ldr	r4, [pc, #276]	; (ac60 <__aeabi_dadd+0x384>)
    ab4a:	1af6      	subs	r6, r6, r3
    ab4c:	402c      	ands	r4, r5
    ab4e:	e749      	b.n	a9e4 <__aeabi_dadd+0x108>
    ab50:	003d      	movs	r5, r7
    ab52:	3828      	subs	r0, #40	; 0x28
    ab54:	4085      	lsls	r5, r0
    ab56:	2700      	movs	r7, #0
    ab58:	e72e      	b.n	a9b8 <__aeabi_dadd+0xdc>
    ab5a:	0038      	movs	r0, r7
    ab5c:	f7fe fe7e 	bl	985c <__clzsi2>
    ab60:	3020      	adds	r0, #32
    ab62:	e71d      	b.n	a9a0 <__aeabi_dadd+0xc4>
    ab64:	430a      	orrs	r2, r1
    ab66:	1e51      	subs	r1, r2, #1
    ab68:	418a      	sbcs	r2, r1
    ab6a:	2100      	movs	r1, #0
    ab6c:	e707      	b.n	a97e <__aeabi_dadd+0xa2>
    ab6e:	2b00      	cmp	r3, #0
    ab70:	d000      	beq.n	ab74 <__aeabi_dadd+0x298>
    ab72:	e0f3      	b.n	ad5c <__aeabi_dadd+0x480>
    ab74:	1c70      	adds	r0, r6, #1
    ab76:	0543      	lsls	r3, r0, #21
    ab78:	0d5b      	lsrs	r3, r3, #21
    ab7a:	2b01      	cmp	r3, #1
    ab7c:	dc00      	bgt.n	ab80 <__aeabi_dadd+0x2a4>
    ab7e:	e0ad      	b.n	acdc <__aeabi_dadd+0x400>
    ab80:	4b36      	ldr	r3, [pc, #216]	; (ac5c <__aeabi_dadd+0x380>)
    ab82:	4298      	cmp	r0, r3
    ab84:	d100      	bne.n	ab88 <__aeabi_dadd+0x2ac>
    ab86:	e0d1      	b.n	ad2c <__aeabi_dadd+0x450>
    ab88:	18ba      	adds	r2, r7, r2
    ab8a:	42ba      	cmp	r2, r7
    ab8c:	41bf      	sbcs	r7, r7
    ab8e:	1864      	adds	r4, r4, r1
    ab90:	427f      	negs	r7, r7
    ab92:	19e4      	adds	r4, r4, r7
    ab94:	07e7      	lsls	r7, r4, #31
    ab96:	0852      	lsrs	r2, r2, #1
    ab98:	4317      	orrs	r7, r2
    ab9a:	0864      	lsrs	r4, r4, #1
    ab9c:	0006      	movs	r6, r0
    ab9e:	e721      	b.n	a9e4 <__aeabi_dadd+0x108>
    aba0:	482e      	ldr	r0, [pc, #184]	; (ac5c <__aeabi_dadd+0x380>)
    aba2:	4285      	cmp	r5, r0
    aba4:	d100      	bne.n	aba8 <__aeabi_dadd+0x2cc>
    aba6:	e093      	b.n	acd0 <__aeabi_dadd+0x3f4>
    aba8:	001d      	movs	r5, r3
    abaa:	e6d0      	b.n	a94e <__aeabi_dadd+0x72>
    abac:	0029      	movs	r1, r5
    abae:	3e1f      	subs	r6, #31
    abb0:	40f1      	lsrs	r1, r6
    abb2:	2b20      	cmp	r3, #32
    abb4:	d100      	bne.n	abb8 <__aeabi_dadd+0x2dc>
    abb6:	e08d      	b.n	acd4 <__aeabi_dadd+0x3f8>
    abb8:	2240      	movs	r2, #64	; 0x40
    abba:	1ad3      	subs	r3, r2, r3
    abbc:	409d      	lsls	r5, r3
    abbe:	432f      	orrs	r7, r5
    abc0:	1e7d      	subs	r5, r7, #1
    abc2:	41af      	sbcs	r7, r5
    abc4:	2400      	movs	r4, #0
    abc6:	430f      	orrs	r7, r1
    abc8:	2600      	movs	r6, #0
    abca:	e744      	b.n	aa56 <__aeabi_dadd+0x17a>
    abcc:	002b      	movs	r3, r5
    abce:	0008      	movs	r0, r1
    abd0:	3b20      	subs	r3, #32
    abd2:	40d8      	lsrs	r0, r3
    abd4:	0003      	movs	r3, r0
    abd6:	2d20      	cmp	r5, #32
    abd8:	d100      	bne.n	abdc <__aeabi_dadd+0x300>
    abda:	e07d      	b.n	acd8 <__aeabi_dadd+0x3fc>
    abdc:	2040      	movs	r0, #64	; 0x40
    abde:	1b45      	subs	r5, r0, r5
    abe0:	40a9      	lsls	r1, r5
    abe2:	430a      	orrs	r2, r1
    abe4:	1e51      	subs	r1, r2, #1
    abe6:	418a      	sbcs	r2, r1
    abe8:	2100      	movs	r1, #0
    abea:	431a      	orrs	r2, r3
    abec:	e6c7      	b.n	a97e <__aeabi_dadd+0xa2>
    abee:	2e00      	cmp	r6, #0
    abf0:	d050      	beq.n	ac94 <__aeabi_dadd+0x3b8>
    abf2:	4e1a      	ldr	r6, [pc, #104]	; (ac5c <__aeabi_dadd+0x380>)
    abf4:	42b0      	cmp	r0, r6
    abf6:	d057      	beq.n	aca8 <__aeabi_dadd+0x3cc>
    abf8:	2680      	movs	r6, #128	; 0x80
    abfa:	426b      	negs	r3, r5
    abfc:	4699      	mov	r9, r3
    abfe:	0436      	lsls	r6, r6, #16
    ac00:	4334      	orrs	r4, r6
    ac02:	464b      	mov	r3, r9
    ac04:	2b38      	cmp	r3, #56	; 0x38
    ac06:	dd00      	ble.n	ac0a <__aeabi_dadd+0x32e>
    ac08:	e0d6      	b.n	adb8 <__aeabi_dadd+0x4dc>
    ac0a:	2b1f      	cmp	r3, #31
    ac0c:	dd00      	ble.n	ac10 <__aeabi_dadd+0x334>
    ac0e:	e135      	b.n	ae7c <__aeabi_dadd+0x5a0>
    ac10:	2620      	movs	r6, #32
    ac12:	1af5      	subs	r5, r6, r3
    ac14:	0026      	movs	r6, r4
    ac16:	40ae      	lsls	r6, r5
    ac18:	46b2      	mov	sl, r6
    ac1a:	003e      	movs	r6, r7
    ac1c:	40de      	lsrs	r6, r3
    ac1e:	46ac      	mov	ip, r5
    ac20:	0035      	movs	r5, r6
    ac22:	4656      	mov	r6, sl
    ac24:	432e      	orrs	r6, r5
    ac26:	4665      	mov	r5, ip
    ac28:	40af      	lsls	r7, r5
    ac2a:	1e7d      	subs	r5, r7, #1
    ac2c:	41af      	sbcs	r7, r5
    ac2e:	40dc      	lsrs	r4, r3
    ac30:	4337      	orrs	r7, r6
    ac32:	1bd7      	subs	r7, r2, r7
    ac34:	42ba      	cmp	r2, r7
    ac36:	4192      	sbcs	r2, r2
    ac38:	1b0c      	subs	r4, r1, r4
    ac3a:	4252      	negs	r2, r2
    ac3c:	1aa4      	subs	r4, r4, r2
    ac3e:	0006      	movs	r6, r0
    ac40:	46d8      	mov	r8, fp
    ac42:	e6a3      	b.n	a98c <__aeabi_dadd+0xb0>
    ac44:	4664      	mov	r4, ip
    ac46:	4667      	mov	r7, ip
    ac48:	432c      	orrs	r4, r5
    ac4a:	d000      	beq.n	ac4e <__aeabi_dadd+0x372>
    ac4c:	e6a2      	b.n	a994 <__aeabi_dadd+0xb8>
    ac4e:	2500      	movs	r5, #0
    ac50:	2600      	movs	r6, #0
    ac52:	2700      	movs	r7, #0
    ac54:	e706      	b.n	aa64 <__aeabi_dadd+0x188>
    ac56:	001e      	movs	r6, r3
    ac58:	e6c4      	b.n	a9e4 <__aeabi_dadd+0x108>
    ac5a:	46c0      	nop			; (mov r8, r8)
    ac5c:	000007ff 	.word	0x000007ff
    ac60:	ff7fffff 	.word	0xff7fffff
    ac64:	800fffff 	.word	0x800fffff
    ac68:	2b1f      	cmp	r3, #31
    ac6a:	dc63      	bgt.n	ad34 <__aeabi_dadd+0x458>
    ac6c:	2020      	movs	r0, #32
    ac6e:	1ac3      	subs	r3, r0, r3
    ac70:	0008      	movs	r0, r1
    ac72:	4098      	lsls	r0, r3
    ac74:	469c      	mov	ip, r3
    ac76:	4683      	mov	fp, r0
    ac78:	4653      	mov	r3, sl
    ac7a:	0010      	movs	r0, r2
    ac7c:	40d8      	lsrs	r0, r3
    ac7e:	0003      	movs	r3, r0
    ac80:	4658      	mov	r0, fp
    ac82:	4318      	orrs	r0, r3
    ac84:	4663      	mov	r3, ip
    ac86:	409a      	lsls	r2, r3
    ac88:	1e53      	subs	r3, r2, #1
    ac8a:	419a      	sbcs	r2, r3
    ac8c:	4653      	mov	r3, sl
    ac8e:	4302      	orrs	r2, r0
    ac90:	40d9      	lsrs	r1, r3
    ac92:	e703      	b.n	aa9c <__aeabi_dadd+0x1c0>
    ac94:	0026      	movs	r6, r4
    ac96:	433e      	orrs	r6, r7
    ac98:	d006      	beq.n	aca8 <__aeabi_dadd+0x3cc>
    ac9a:	43eb      	mvns	r3, r5
    ac9c:	4699      	mov	r9, r3
    ac9e:	2b00      	cmp	r3, #0
    aca0:	d0c7      	beq.n	ac32 <__aeabi_dadd+0x356>
    aca2:	4e94      	ldr	r6, [pc, #592]	; (aef4 <__aeabi_dadd+0x618>)
    aca4:	42b0      	cmp	r0, r6
    aca6:	d1ac      	bne.n	ac02 <__aeabi_dadd+0x326>
    aca8:	000c      	movs	r4, r1
    acaa:	0017      	movs	r7, r2
    acac:	0006      	movs	r6, r0
    acae:	46d8      	mov	r8, fp
    acb0:	e698      	b.n	a9e4 <__aeabi_dadd+0x108>
    acb2:	4b90      	ldr	r3, [pc, #576]	; (aef4 <__aeabi_dadd+0x618>)
    acb4:	459a      	cmp	sl, r3
    acb6:	d00b      	beq.n	acd0 <__aeabi_dadd+0x3f4>
    acb8:	4682      	mov	sl, r0
    acba:	e6e7      	b.n	aa8c <__aeabi_dadd+0x1b0>
    acbc:	2800      	cmp	r0, #0
    acbe:	d000      	beq.n	acc2 <__aeabi_dadd+0x3e6>
    acc0:	e09e      	b.n	ae00 <__aeabi_dadd+0x524>
    acc2:	0018      	movs	r0, r3
    acc4:	4310      	orrs	r0, r2
    acc6:	d100      	bne.n	acca <__aeabi_dadd+0x3ee>
    acc8:	e0e9      	b.n	ae9e <__aeabi_dadd+0x5c2>
    acca:	001c      	movs	r4, r3
    accc:	0017      	movs	r7, r2
    acce:	46d8      	mov	r8, fp
    acd0:	4e88      	ldr	r6, [pc, #544]	; (aef4 <__aeabi_dadd+0x618>)
    acd2:	e687      	b.n	a9e4 <__aeabi_dadd+0x108>
    acd4:	2500      	movs	r5, #0
    acd6:	e772      	b.n	abbe <__aeabi_dadd+0x2e2>
    acd8:	2100      	movs	r1, #0
    acda:	e782      	b.n	abe2 <__aeabi_dadd+0x306>
    acdc:	0023      	movs	r3, r4
    acde:	433b      	orrs	r3, r7
    ace0:	2e00      	cmp	r6, #0
    ace2:	d000      	beq.n	ace6 <__aeabi_dadd+0x40a>
    ace4:	e0ab      	b.n	ae3e <__aeabi_dadd+0x562>
    ace6:	2b00      	cmp	r3, #0
    ace8:	d100      	bne.n	acec <__aeabi_dadd+0x410>
    acea:	e0e7      	b.n	aebc <__aeabi_dadd+0x5e0>
    acec:	000b      	movs	r3, r1
    acee:	4313      	orrs	r3, r2
    acf0:	d100      	bne.n	acf4 <__aeabi_dadd+0x418>
    acf2:	e677      	b.n	a9e4 <__aeabi_dadd+0x108>
    acf4:	18ba      	adds	r2, r7, r2
    acf6:	42ba      	cmp	r2, r7
    acf8:	41bf      	sbcs	r7, r7
    acfa:	1864      	adds	r4, r4, r1
    acfc:	427f      	negs	r7, r7
    acfe:	19e4      	adds	r4, r4, r7
    ad00:	0223      	lsls	r3, r4, #8
    ad02:	d400      	bmi.n	ad06 <__aeabi_dadd+0x42a>
    ad04:	e0f2      	b.n	aeec <__aeabi_dadd+0x610>
    ad06:	4b7c      	ldr	r3, [pc, #496]	; (aef8 <__aeabi_dadd+0x61c>)
    ad08:	0017      	movs	r7, r2
    ad0a:	401c      	ands	r4, r3
    ad0c:	0006      	movs	r6, r0
    ad0e:	e669      	b.n	a9e4 <__aeabi_dadd+0x108>
    ad10:	0020      	movs	r0, r4
    ad12:	4338      	orrs	r0, r7
    ad14:	2e00      	cmp	r6, #0
    ad16:	d1d1      	bne.n	acbc <__aeabi_dadd+0x3e0>
    ad18:	2800      	cmp	r0, #0
    ad1a:	d15b      	bne.n	add4 <__aeabi_dadd+0x4f8>
    ad1c:	001c      	movs	r4, r3
    ad1e:	4314      	orrs	r4, r2
    ad20:	d100      	bne.n	ad24 <__aeabi_dadd+0x448>
    ad22:	e0a8      	b.n	ae76 <__aeabi_dadd+0x59a>
    ad24:	001c      	movs	r4, r3
    ad26:	0017      	movs	r7, r2
    ad28:	46d8      	mov	r8, fp
    ad2a:	e65b      	b.n	a9e4 <__aeabi_dadd+0x108>
    ad2c:	0006      	movs	r6, r0
    ad2e:	2400      	movs	r4, #0
    ad30:	2700      	movs	r7, #0
    ad32:	e697      	b.n	aa64 <__aeabi_dadd+0x188>
    ad34:	4650      	mov	r0, sl
    ad36:	000b      	movs	r3, r1
    ad38:	3820      	subs	r0, #32
    ad3a:	40c3      	lsrs	r3, r0
    ad3c:	4699      	mov	r9, r3
    ad3e:	4653      	mov	r3, sl
    ad40:	2b20      	cmp	r3, #32
    ad42:	d100      	bne.n	ad46 <__aeabi_dadd+0x46a>
    ad44:	e095      	b.n	ae72 <__aeabi_dadd+0x596>
    ad46:	2340      	movs	r3, #64	; 0x40
    ad48:	4650      	mov	r0, sl
    ad4a:	1a1b      	subs	r3, r3, r0
    ad4c:	4099      	lsls	r1, r3
    ad4e:	430a      	orrs	r2, r1
    ad50:	1e51      	subs	r1, r2, #1
    ad52:	418a      	sbcs	r2, r1
    ad54:	464b      	mov	r3, r9
    ad56:	2100      	movs	r1, #0
    ad58:	431a      	orrs	r2, r3
    ad5a:	e69f      	b.n	aa9c <__aeabi_dadd+0x1c0>
    ad5c:	2e00      	cmp	r6, #0
    ad5e:	d130      	bne.n	adc2 <__aeabi_dadd+0x4e6>
    ad60:	0026      	movs	r6, r4
    ad62:	433e      	orrs	r6, r7
    ad64:	d067      	beq.n	ae36 <__aeabi_dadd+0x55a>
    ad66:	43db      	mvns	r3, r3
    ad68:	469a      	mov	sl, r3
    ad6a:	2b00      	cmp	r3, #0
    ad6c:	d01c      	beq.n	ada8 <__aeabi_dadd+0x4cc>
    ad6e:	4e61      	ldr	r6, [pc, #388]	; (aef4 <__aeabi_dadd+0x618>)
    ad70:	42b0      	cmp	r0, r6
    ad72:	d060      	beq.n	ae36 <__aeabi_dadd+0x55a>
    ad74:	4653      	mov	r3, sl
    ad76:	2b38      	cmp	r3, #56	; 0x38
    ad78:	dd00      	ble.n	ad7c <__aeabi_dadd+0x4a0>
    ad7a:	e096      	b.n	aeaa <__aeabi_dadd+0x5ce>
    ad7c:	2b1f      	cmp	r3, #31
    ad7e:	dd00      	ble.n	ad82 <__aeabi_dadd+0x4a6>
    ad80:	e09f      	b.n	aec2 <__aeabi_dadd+0x5e6>
    ad82:	2620      	movs	r6, #32
    ad84:	1af3      	subs	r3, r6, r3
    ad86:	0026      	movs	r6, r4
    ad88:	409e      	lsls	r6, r3
    ad8a:	469c      	mov	ip, r3
    ad8c:	46b3      	mov	fp, r6
    ad8e:	4653      	mov	r3, sl
    ad90:	003e      	movs	r6, r7
    ad92:	40de      	lsrs	r6, r3
    ad94:	0033      	movs	r3, r6
    ad96:	465e      	mov	r6, fp
    ad98:	431e      	orrs	r6, r3
    ad9a:	4663      	mov	r3, ip
    ad9c:	409f      	lsls	r7, r3
    ad9e:	1e7b      	subs	r3, r7, #1
    ada0:	419f      	sbcs	r7, r3
    ada2:	4653      	mov	r3, sl
    ada4:	40dc      	lsrs	r4, r3
    ada6:	4337      	orrs	r7, r6
    ada8:	18bf      	adds	r7, r7, r2
    adaa:	4297      	cmp	r7, r2
    adac:	4192      	sbcs	r2, r2
    adae:	1864      	adds	r4, r4, r1
    adb0:	4252      	negs	r2, r2
    adb2:	18a4      	adds	r4, r4, r2
    adb4:	0006      	movs	r6, r0
    adb6:	e678      	b.n	aaaa <__aeabi_dadd+0x1ce>
    adb8:	4327      	orrs	r7, r4
    adba:	1e7c      	subs	r4, r7, #1
    adbc:	41a7      	sbcs	r7, r4
    adbe:	2400      	movs	r4, #0
    adc0:	e737      	b.n	ac32 <__aeabi_dadd+0x356>
    adc2:	4e4c      	ldr	r6, [pc, #304]	; (aef4 <__aeabi_dadd+0x618>)
    adc4:	42b0      	cmp	r0, r6
    adc6:	d036      	beq.n	ae36 <__aeabi_dadd+0x55a>
    adc8:	2680      	movs	r6, #128	; 0x80
    adca:	425b      	negs	r3, r3
    adcc:	0436      	lsls	r6, r6, #16
    adce:	469a      	mov	sl, r3
    add0:	4334      	orrs	r4, r6
    add2:	e7cf      	b.n	ad74 <__aeabi_dadd+0x498>
    add4:	0018      	movs	r0, r3
    add6:	4310      	orrs	r0, r2
    add8:	d100      	bne.n	addc <__aeabi_dadd+0x500>
    adda:	e603      	b.n	a9e4 <__aeabi_dadd+0x108>
    addc:	1ab8      	subs	r0, r7, r2
    adde:	4684      	mov	ip, r0
    ade0:	4567      	cmp	r7, ip
    ade2:	41ad      	sbcs	r5, r5
    ade4:	1ae0      	subs	r0, r4, r3
    ade6:	426d      	negs	r5, r5
    ade8:	1b40      	subs	r0, r0, r5
    adea:	0205      	lsls	r5, r0, #8
    adec:	d400      	bmi.n	adf0 <__aeabi_dadd+0x514>
    adee:	e62c      	b.n	aa4a <__aeabi_dadd+0x16e>
    adf0:	1bd7      	subs	r7, r2, r7
    adf2:	42ba      	cmp	r2, r7
    adf4:	4192      	sbcs	r2, r2
    adf6:	1b1c      	subs	r4, r3, r4
    adf8:	4252      	negs	r2, r2
    adfa:	1aa4      	subs	r4, r4, r2
    adfc:	46d8      	mov	r8, fp
    adfe:	e5f1      	b.n	a9e4 <__aeabi_dadd+0x108>
    ae00:	0018      	movs	r0, r3
    ae02:	4310      	orrs	r0, r2
    ae04:	d100      	bne.n	ae08 <__aeabi_dadd+0x52c>
    ae06:	e763      	b.n	acd0 <__aeabi_dadd+0x3f4>
    ae08:	08f8      	lsrs	r0, r7, #3
    ae0a:	0767      	lsls	r7, r4, #29
    ae0c:	4307      	orrs	r7, r0
    ae0e:	2080      	movs	r0, #128	; 0x80
    ae10:	08e4      	lsrs	r4, r4, #3
    ae12:	0300      	lsls	r0, r0, #12
    ae14:	4204      	tst	r4, r0
    ae16:	d008      	beq.n	ae2a <__aeabi_dadd+0x54e>
    ae18:	08dd      	lsrs	r5, r3, #3
    ae1a:	4205      	tst	r5, r0
    ae1c:	d105      	bne.n	ae2a <__aeabi_dadd+0x54e>
    ae1e:	08d2      	lsrs	r2, r2, #3
    ae20:	0759      	lsls	r1, r3, #29
    ae22:	4311      	orrs	r1, r2
    ae24:	000f      	movs	r7, r1
    ae26:	002c      	movs	r4, r5
    ae28:	46d8      	mov	r8, fp
    ae2a:	0f7b      	lsrs	r3, r7, #29
    ae2c:	00e4      	lsls	r4, r4, #3
    ae2e:	431c      	orrs	r4, r3
    ae30:	00ff      	lsls	r7, r7, #3
    ae32:	4e30      	ldr	r6, [pc, #192]	; (aef4 <__aeabi_dadd+0x618>)
    ae34:	e5d6      	b.n	a9e4 <__aeabi_dadd+0x108>
    ae36:	000c      	movs	r4, r1
    ae38:	0017      	movs	r7, r2
    ae3a:	0006      	movs	r6, r0
    ae3c:	e5d2      	b.n	a9e4 <__aeabi_dadd+0x108>
    ae3e:	2b00      	cmp	r3, #0
    ae40:	d038      	beq.n	aeb4 <__aeabi_dadd+0x5d8>
    ae42:	000b      	movs	r3, r1
    ae44:	4313      	orrs	r3, r2
    ae46:	d100      	bne.n	ae4a <__aeabi_dadd+0x56e>
    ae48:	e742      	b.n	acd0 <__aeabi_dadd+0x3f4>
    ae4a:	08f8      	lsrs	r0, r7, #3
    ae4c:	0767      	lsls	r7, r4, #29
    ae4e:	4307      	orrs	r7, r0
    ae50:	2080      	movs	r0, #128	; 0x80
    ae52:	08e4      	lsrs	r4, r4, #3
    ae54:	0300      	lsls	r0, r0, #12
    ae56:	4204      	tst	r4, r0
    ae58:	d0e7      	beq.n	ae2a <__aeabi_dadd+0x54e>
    ae5a:	08cb      	lsrs	r3, r1, #3
    ae5c:	4203      	tst	r3, r0
    ae5e:	d1e4      	bne.n	ae2a <__aeabi_dadd+0x54e>
    ae60:	08d2      	lsrs	r2, r2, #3
    ae62:	0749      	lsls	r1, r1, #29
    ae64:	4311      	orrs	r1, r2
    ae66:	000f      	movs	r7, r1
    ae68:	001c      	movs	r4, r3
    ae6a:	e7de      	b.n	ae2a <__aeabi_dadd+0x54e>
    ae6c:	2700      	movs	r7, #0
    ae6e:	2400      	movs	r4, #0
    ae70:	e5d5      	b.n	aa1e <__aeabi_dadd+0x142>
    ae72:	2100      	movs	r1, #0
    ae74:	e76b      	b.n	ad4e <__aeabi_dadd+0x472>
    ae76:	2500      	movs	r5, #0
    ae78:	2700      	movs	r7, #0
    ae7a:	e5f3      	b.n	aa64 <__aeabi_dadd+0x188>
    ae7c:	464e      	mov	r6, r9
    ae7e:	0025      	movs	r5, r4
    ae80:	3e20      	subs	r6, #32
    ae82:	40f5      	lsrs	r5, r6
    ae84:	464b      	mov	r3, r9
    ae86:	002e      	movs	r6, r5
    ae88:	2b20      	cmp	r3, #32
    ae8a:	d02d      	beq.n	aee8 <__aeabi_dadd+0x60c>
    ae8c:	2540      	movs	r5, #64	; 0x40
    ae8e:	1aed      	subs	r5, r5, r3
    ae90:	40ac      	lsls	r4, r5
    ae92:	4327      	orrs	r7, r4
    ae94:	1e7c      	subs	r4, r7, #1
    ae96:	41a7      	sbcs	r7, r4
    ae98:	2400      	movs	r4, #0
    ae9a:	4337      	orrs	r7, r6
    ae9c:	e6c9      	b.n	ac32 <__aeabi_dadd+0x356>
    ae9e:	2480      	movs	r4, #128	; 0x80
    aea0:	2500      	movs	r5, #0
    aea2:	0324      	lsls	r4, r4, #12
    aea4:	4e13      	ldr	r6, [pc, #76]	; (aef4 <__aeabi_dadd+0x618>)
    aea6:	2700      	movs	r7, #0
    aea8:	e5dc      	b.n	aa64 <__aeabi_dadd+0x188>
    aeaa:	4327      	orrs	r7, r4
    aeac:	1e7c      	subs	r4, r7, #1
    aeae:	41a7      	sbcs	r7, r4
    aeb0:	2400      	movs	r4, #0
    aeb2:	e779      	b.n	ada8 <__aeabi_dadd+0x4cc>
    aeb4:	000c      	movs	r4, r1
    aeb6:	0017      	movs	r7, r2
    aeb8:	4e0e      	ldr	r6, [pc, #56]	; (aef4 <__aeabi_dadd+0x618>)
    aeba:	e593      	b.n	a9e4 <__aeabi_dadd+0x108>
    aebc:	000c      	movs	r4, r1
    aebe:	0017      	movs	r7, r2
    aec0:	e590      	b.n	a9e4 <__aeabi_dadd+0x108>
    aec2:	4656      	mov	r6, sl
    aec4:	0023      	movs	r3, r4
    aec6:	3e20      	subs	r6, #32
    aec8:	40f3      	lsrs	r3, r6
    aeca:	4699      	mov	r9, r3
    aecc:	4653      	mov	r3, sl
    aece:	2b20      	cmp	r3, #32
    aed0:	d00e      	beq.n	aef0 <__aeabi_dadd+0x614>
    aed2:	2340      	movs	r3, #64	; 0x40
    aed4:	4656      	mov	r6, sl
    aed6:	1b9b      	subs	r3, r3, r6
    aed8:	409c      	lsls	r4, r3
    aeda:	4327      	orrs	r7, r4
    aedc:	1e7c      	subs	r4, r7, #1
    aede:	41a7      	sbcs	r7, r4
    aee0:	464b      	mov	r3, r9
    aee2:	2400      	movs	r4, #0
    aee4:	431f      	orrs	r7, r3
    aee6:	e75f      	b.n	ada8 <__aeabi_dadd+0x4cc>
    aee8:	2400      	movs	r4, #0
    aeea:	e7d2      	b.n	ae92 <__aeabi_dadd+0x5b6>
    aeec:	0017      	movs	r7, r2
    aeee:	e5b2      	b.n	aa56 <__aeabi_dadd+0x17a>
    aef0:	2400      	movs	r4, #0
    aef2:	e7f2      	b.n	aeda <__aeabi_dadd+0x5fe>
    aef4:	000007ff 	.word	0x000007ff
    aef8:	ff7fffff 	.word	0xff7fffff

0000aefc <__aeabi_ddiv>:
    aefc:	b5f0      	push	{r4, r5, r6, r7, lr}
    aefe:	4657      	mov	r7, sl
    af00:	4645      	mov	r5, r8
    af02:	46de      	mov	lr, fp
    af04:	464e      	mov	r6, r9
    af06:	b5e0      	push	{r5, r6, r7, lr}
    af08:	004c      	lsls	r4, r1, #1
    af0a:	030e      	lsls	r6, r1, #12
    af0c:	b087      	sub	sp, #28
    af0e:	4683      	mov	fp, r0
    af10:	4692      	mov	sl, r2
    af12:	001d      	movs	r5, r3
    af14:	4680      	mov	r8, r0
    af16:	0b36      	lsrs	r6, r6, #12
    af18:	0d64      	lsrs	r4, r4, #21
    af1a:	0fcf      	lsrs	r7, r1, #31
    af1c:	2c00      	cmp	r4, #0
    af1e:	d04f      	beq.n	afc0 <__aeabi_ddiv+0xc4>
    af20:	4b6f      	ldr	r3, [pc, #444]	; (b0e0 <__aeabi_ddiv+0x1e4>)
    af22:	429c      	cmp	r4, r3
    af24:	d035      	beq.n	af92 <__aeabi_ddiv+0x96>
    af26:	2380      	movs	r3, #128	; 0x80
    af28:	0f42      	lsrs	r2, r0, #29
    af2a:	041b      	lsls	r3, r3, #16
    af2c:	00f6      	lsls	r6, r6, #3
    af2e:	4313      	orrs	r3, r2
    af30:	4333      	orrs	r3, r6
    af32:	4699      	mov	r9, r3
    af34:	00c3      	lsls	r3, r0, #3
    af36:	4698      	mov	r8, r3
    af38:	4b6a      	ldr	r3, [pc, #424]	; (b0e4 <__aeabi_ddiv+0x1e8>)
    af3a:	2600      	movs	r6, #0
    af3c:	469c      	mov	ip, r3
    af3e:	2300      	movs	r3, #0
    af40:	4464      	add	r4, ip
    af42:	9303      	str	r3, [sp, #12]
    af44:	032b      	lsls	r3, r5, #12
    af46:	0b1b      	lsrs	r3, r3, #12
    af48:	469b      	mov	fp, r3
    af4a:	006b      	lsls	r3, r5, #1
    af4c:	0fed      	lsrs	r5, r5, #31
    af4e:	4650      	mov	r0, sl
    af50:	0d5b      	lsrs	r3, r3, #21
    af52:	9501      	str	r5, [sp, #4]
    af54:	d05e      	beq.n	b014 <__aeabi_ddiv+0x118>
    af56:	4a62      	ldr	r2, [pc, #392]	; (b0e0 <__aeabi_ddiv+0x1e4>)
    af58:	4293      	cmp	r3, r2
    af5a:	d053      	beq.n	b004 <__aeabi_ddiv+0x108>
    af5c:	465a      	mov	r2, fp
    af5e:	00d1      	lsls	r1, r2, #3
    af60:	2280      	movs	r2, #128	; 0x80
    af62:	0f40      	lsrs	r0, r0, #29
    af64:	0412      	lsls	r2, r2, #16
    af66:	4302      	orrs	r2, r0
    af68:	430a      	orrs	r2, r1
    af6a:	4693      	mov	fp, r2
    af6c:	4652      	mov	r2, sl
    af6e:	00d1      	lsls	r1, r2, #3
    af70:	4a5c      	ldr	r2, [pc, #368]	; (b0e4 <__aeabi_ddiv+0x1e8>)
    af72:	4694      	mov	ip, r2
    af74:	2200      	movs	r2, #0
    af76:	4463      	add	r3, ip
    af78:	0038      	movs	r0, r7
    af7a:	4068      	eors	r0, r5
    af7c:	4684      	mov	ip, r0
    af7e:	9002      	str	r0, [sp, #8]
    af80:	1ae4      	subs	r4, r4, r3
    af82:	4316      	orrs	r6, r2
    af84:	2e0f      	cmp	r6, #15
    af86:	d900      	bls.n	af8a <__aeabi_ddiv+0x8e>
    af88:	e0b4      	b.n	b0f4 <__aeabi_ddiv+0x1f8>
    af8a:	4b57      	ldr	r3, [pc, #348]	; (b0e8 <__aeabi_ddiv+0x1ec>)
    af8c:	00b6      	lsls	r6, r6, #2
    af8e:	599b      	ldr	r3, [r3, r6]
    af90:	469f      	mov	pc, r3
    af92:	0003      	movs	r3, r0
    af94:	4333      	orrs	r3, r6
    af96:	4699      	mov	r9, r3
    af98:	d16c      	bne.n	b074 <__aeabi_ddiv+0x178>
    af9a:	2300      	movs	r3, #0
    af9c:	4698      	mov	r8, r3
    af9e:	3302      	adds	r3, #2
    afa0:	2608      	movs	r6, #8
    afa2:	9303      	str	r3, [sp, #12]
    afa4:	e7ce      	b.n	af44 <__aeabi_ddiv+0x48>
    afa6:	46cb      	mov	fp, r9
    afa8:	4641      	mov	r1, r8
    afaa:	9a03      	ldr	r2, [sp, #12]
    afac:	9701      	str	r7, [sp, #4]
    afae:	2a02      	cmp	r2, #2
    afb0:	d165      	bne.n	b07e <__aeabi_ddiv+0x182>
    afb2:	9b01      	ldr	r3, [sp, #4]
    afb4:	4c4a      	ldr	r4, [pc, #296]	; (b0e0 <__aeabi_ddiv+0x1e4>)
    afb6:	469c      	mov	ip, r3
    afb8:	2300      	movs	r3, #0
    afba:	2200      	movs	r2, #0
    afbc:	4698      	mov	r8, r3
    afbe:	e06b      	b.n	b098 <__aeabi_ddiv+0x19c>
    afc0:	0003      	movs	r3, r0
    afc2:	4333      	orrs	r3, r6
    afc4:	4699      	mov	r9, r3
    afc6:	d04e      	beq.n	b066 <__aeabi_ddiv+0x16a>
    afc8:	2e00      	cmp	r6, #0
    afca:	d100      	bne.n	afce <__aeabi_ddiv+0xd2>
    afcc:	e1bc      	b.n	b348 <__aeabi_ddiv+0x44c>
    afce:	0030      	movs	r0, r6
    afd0:	f7fe fc44 	bl	985c <__clzsi2>
    afd4:	0003      	movs	r3, r0
    afd6:	3b0b      	subs	r3, #11
    afd8:	2b1c      	cmp	r3, #28
    afda:	dd00      	ble.n	afde <__aeabi_ddiv+0xe2>
    afdc:	e1ac      	b.n	b338 <__aeabi_ddiv+0x43c>
    afde:	221d      	movs	r2, #29
    afe0:	1ad3      	subs	r3, r2, r3
    afe2:	465a      	mov	r2, fp
    afe4:	0001      	movs	r1, r0
    afe6:	40da      	lsrs	r2, r3
    afe8:	3908      	subs	r1, #8
    afea:	408e      	lsls	r6, r1
    afec:	0013      	movs	r3, r2
    afee:	4333      	orrs	r3, r6
    aff0:	4699      	mov	r9, r3
    aff2:	465b      	mov	r3, fp
    aff4:	408b      	lsls	r3, r1
    aff6:	4698      	mov	r8, r3
    aff8:	2300      	movs	r3, #0
    affa:	4c3c      	ldr	r4, [pc, #240]	; (b0ec <__aeabi_ddiv+0x1f0>)
    affc:	2600      	movs	r6, #0
    affe:	1a24      	subs	r4, r4, r0
    b000:	9303      	str	r3, [sp, #12]
    b002:	e79f      	b.n	af44 <__aeabi_ddiv+0x48>
    b004:	4651      	mov	r1, sl
    b006:	465a      	mov	r2, fp
    b008:	4311      	orrs	r1, r2
    b00a:	d129      	bne.n	b060 <__aeabi_ddiv+0x164>
    b00c:	2200      	movs	r2, #0
    b00e:	4693      	mov	fp, r2
    b010:	3202      	adds	r2, #2
    b012:	e7b1      	b.n	af78 <__aeabi_ddiv+0x7c>
    b014:	4659      	mov	r1, fp
    b016:	4301      	orrs	r1, r0
    b018:	d01e      	beq.n	b058 <__aeabi_ddiv+0x15c>
    b01a:	465b      	mov	r3, fp
    b01c:	2b00      	cmp	r3, #0
    b01e:	d100      	bne.n	b022 <__aeabi_ddiv+0x126>
    b020:	e19e      	b.n	b360 <__aeabi_ddiv+0x464>
    b022:	4658      	mov	r0, fp
    b024:	f7fe fc1a 	bl	985c <__clzsi2>
    b028:	0003      	movs	r3, r0
    b02a:	3b0b      	subs	r3, #11
    b02c:	2b1c      	cmp	r3, #28
    b02e:	dd00      	ble.n	b032 <__aeabi_ddiv+0x136>
    b030:	e18f      	b.n	b352 <__aeabi_ddiv+0x456>
    b032:	0002      	movs	r2, r0
    b034:	4659      	mov	r1, fp
    b036:	3a08      	subs	r2, #8
    b038:	4091      	lsls	r1, r2
    b03a:	468b      	mov	fp, r1
    b03c:	211d      	movs	r1, #29
    b03e:	1acb      	subs	r3, r1, r3
    b040:	4651      	mov	r1, sl
    b042:	40d9      	lsrs	r1, r3
    b044:	000b      	movs	r3, r1
    b046:	4659      	mov	r1, fp
    b048:	430b      	orrs	r3, r1
    b04a:	4651      	mov	r1, sl
    b04c:	469b      	mov	fp, r3
    b04e:	4091      	lsls	r1, r2
    b050:	4b26      	ldr	r3, [pc, #152]	; (b0ec <__aeabi_ddiv+0x1f0>)
    b052:	2200      	movs	r2, #0
    b054:	1a1b      	subs	r3, r3, r0
    b056:	e78f      	b.n	af78 <__aeabi_ddiv+0x7c>
    b058:	2300      	movs	r3, #0
    b05a:	2201      	movs	r2, #1
    b05c:	469b      	mov	fp, r3
    b05e:	e78b      	b.n	af78 <__aeabi_ddiv+0x7c>
    b060:	4651      	mov	r1, sl
    b062:	2203      	movs	r2, #3
    b064:	e788      	b.n	af78 <__aeabi_ddiv+0x7c>
    b066:	2300      	movs	r3, #0
    b068:	4698      	mov	r8, r3
    b06a:	3301      	adds	r3, #1
    b06c:	2604      	movs	r6, #4
    b06e:	2400      	movs	r4, #0
    b070:	9303      	str	r3, [sp, #12]
    b072:	e767      	b.n	af44 <__aeabi_ddiv+0x48>
    b074:	2303      	movs	r3, #3
    b076:	46b1      	mov	r9, r6
    b078:	9303      	str	r3, [sp, #12]
    b07a:	260c      	movs	r6, #12
    b07c:	e762      	b.n	af44 <__aeabi_ddiv+0x48>
    b07e:	2a03      	cmp	r2, #3
    b080:	d100      	bne.n	b084 <__aeabi_ddiv+0x188>
    b082:	e25c      	b.n	b53e <__aeabi_ddiv+0x642>
    b084:	9b01      	ldr	r3, [sp, #4]
    b086:	2a01      	cmp	r2, #1
    b088:	d000      	beq.n	b08c <__aeabi_ddiv+0x190>
    b08a:	e1e4      	b.n	b456 <__aeabi_ddiv+0x55a>
    b08c:	4013      	ands	r3, r2
    b08e:	469c      	mov	ip, r3
    b090:	2300      	movs	r3, #0
    b092:	2400      	movs	r4, #0
    b094:	2200      	movs	r2, #0
    b096:	4698      	mov	r8, r3
    b098:	2100      	movs	r1, #0
    b09a:	0312      	lsls	r2, r2, #12
    b09c:	0b13      	lsrs	r3, r2, #12
    b09e:	0d0a      	lsrs	r2, r1, #20
    b0a0:	0512      	lsls	r2, r2, #20
    b0a2:	431a      	orrs	r2, r3
    b0a4:	0523      	lsls	r3, r4, #20
    b0a6:	4c12      	ldr	r4, [pc, #72]	; (b0f0 <__aeabi_ddiv+0x1f4>)
    b0a8:	4640      	mov	r0, r8
    b0aa:	4022      	ands	r2, r4
    b0ac:	4313      	orrs	r3, r2
    b0ae:	4662      	mov	r2, ip
    b0b0:	005b      	lsls	r3, r3, #1
    b0b2:	07d2      	lsls	r2, r2, #31
    b0b4:	085b      	lsrs	r3, r3, #1
    b0b6:	4313      	orrs	r3, r2
    b0b8:	0019      	movs	r1, r3
    b0ba:	b007      	add	sp, #28
    b0bc:	bc3c      	pop	{r2, r3, r4, r5}
    b0be:	4690      	mov	r8, r2
    b0c0:	4699      	mov	r9, r3
    b0c2:	46a2      	mov	sl, r4
    b0c4:	46ab      	mov	fp, r5
    b0c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b0c8:	2300      	movs	r3, #0
    b0ca:	2280      	movs	r2, #128	; 0x80
    b0cc:	469c      	mov	ip, r3
    b0ce:	0312      	lsls	r2, r2, #12
    b0d0:	4698      	mov	r8, r3
    b0d2:	4c03      	ldr	r4, [pc, #12]	; (b0e0 <__aeabi_ddiv+0x1e4>)
    b0d4:	e7e0      	b.n	b098 <__aeabi_ddiv+0x19c>
    b0d6:	2300      	movs	r3, #0
    b0d8:	4c01      	ldr	r4, [pc, #4]	; (b0e0 <__aeabi_ddiv+0x1e4>)
    b0da:	2200      	movs	r2, #0
    b0dc:	4698      	mov	r8, r3
    b0de:	e7db      	b.n	b098 <__aeabi_ddiv+0x19c>
    b0e0:	000007ff 	.word	0x000007ff
    b0e4:	fffffc01 	.word	0xfffffc01
    b0e8:	0000cbdc 	.word	0x0000cbdc
    b0ec:	fffffc0d 	.word	0xfffffc0d
    b0f0:	800fffff 	.word	0x800fffff
    b0f4:	45d9      	cmp	r9, fp
    b0f6:	d900      	bls.n	b0fa <__aeabi_ddiv+0x1fe>
    b0f8:	e139      	b.n	b36e <__aeabi_ddiv+0x472>
    b0fa:	d100      	bne.n	b0fe <__aeabi_ddiv+0x202>
    b0fc:	e134      	b.n	b368 <__aeabi_ddiv+0x46c>
    b0fe:	2300      	movs	r3, #0
    b100:	4646      	mov	r6, r8
    b102:	464d      	mov	r5, r9
    b104:	469a      	mov	sl, r3
    b106:	3c01      	subs	r4, #1
    b108:	465b      	mov	r3, fp
    b10a:	0e0a      	lsrs	r2, r1, #24
    b10c:	021b      	lsls	r3, r3, #8
    b10e:	431a      	orrs	r2, r3
    b110:	020b      	lsls	r3, r1, #8
    b112:	0c17      	lsrs	r7, r2, #16
    b114:	9303      	str	r3, [sp, #12]
    b116:	0413      	lsls	r3, r2, #16
    b118:	0c1b      	lsrs	r3, r3, #16
    b11a:	0039      	movs	r1, r7
    b11c:	0028      	movs	r0, r5
    b11e:	4690      	mov	r8, r2
    b120:	9301      	str	r3, [sp, #4]
    b122:	f7fe f9eb 	bl	94fc <__udivsi3>
    b126:	0002      	movs	r2, r0
    b128:	9b01      	ldr	r3, [sp, #4]
    b12a:	4683      	mov	fp, r0
    b12c:	435a      	muls	r2, r3
    b12e:	0028      	movs	r0, r5
    b130:	0039      	movs	r1, r7
    b132:	4691      	mov	r9, r2
    b134:	f7fe fa68 	bl	9608 <__aeabi_uidivmod>
    b138:	0c35      	lsrs	r5, r6, #16
    b13a:	0409      	lsls	r1, r1, #16
    b13c:	430d      	orrs	r5, r1
    b13e:	45a9      	cmp	r9, r5
    b140:	d90d      	bls.n	b15e <__aeabi_ddiv+0x262>
    b142:	465b      	mov	r3, fp
    b144:	4445      	add	r5, r8
    b146:	3b01      	subs	r3, #1
    b148:	45a8      	cmp	r8, r5
    b14a:	d900      	bls.n	b14e <__aeabi_ddiv+0x252>
    b14c:	e13a      	b.n	b3c4 <__aeabi_ddiv+0x4c8>
    b14e:	45a9      	cmp	r9, r5
    b150:	d800      	bhi.n	b154 <__aeabi_ddiv+0x258>
    b152:	e137      	b.n	b3c4 <__aeabi_ddiv+0x4c8>
    b154:	2302      	movs	r3, #2
    b156:	425b      	negs	r3, r3
    b158:	469c      	mov	ip, r3
    b15a:	4445      	add	r5, r8
    b15c:	44e3      	add	fp, ip
    b15e:	464b      	mov	r3, r9
    b160:	1aeb      	subs	r3, r5, r3
    b162:	0039      	movs	r1, r7
    b164:	0018      	movs	r0, r3
    b166:	9304      	str	r3, [sp, #16]
    b168:	f7fe f9c8 	bl	94fc <__udivsi3>
    b16c:	9b01      	ldr	r3, [sp, #4]
    b16e:	0005      	movs	r5, r0
    b170:	4343      	muls	r3, r0
    b172:	0039      	movs	r1, r7
    b174:	9804      	ldr	r0, [sp, #16]
    b176:	4699      	mov	r9, r3
    b178:	f7fe fa46 	bl	9608 <__aeabi_uidivmod>
    b17c:	0433      	lsls	r3, r6, #16
    b17e:	0409      	lsls	r1, r1, #16
    b180:	0c1b      	lsrs	r3, r3, #16
    b182:	430b      	orrs	r3, r1
    b184:	4599      	cmp	r9, r3
    b186:	d909      	bls.n	b19c <__aeabi_ddiv+0x2a0>
    b188:	4443      	add	r3, r8
    b18a:	1e6a      	subs	r2, r5, #1
    b18c:	4598      	cmp	r8, r3
    b18e:	d900      	bls.n	b192 <__aeabi_ddiv+0x296>
    b190:	e11a      	b.n	b3c8 <__aeabi_ddiv+0x4cc>
    b192:	4599      	cmp	r9, r3
    b194:	d800      	bhi.n	b198 <__aeabi_ddiv+0x29c>
    b196:	e117      	b.n	b3c8 <__aeabi_ddiv+0x4cc>
    b198:	3d02      	subs	r5, #2
    b19a:	4443      	add	r3, r8
    b19c:	464a      	mov	r2, r9
    b19e:	1a9b      	subs	r3, r3, r2
    b1a0:	465a      	mov	r2, fp
    b1a2:	0412      	lsls	r2, r2, #16
    b1a4:	432a      	orrs	r2, r5
    b1a6:	9903      	ldr	r1, [sp, #12]
    b1a8:	4693      	mov	fp, r2
    b1aa:	0c10      	lsrs	r0, r2, #16
    b1ac:	0c0a      	lsrs	r2, r1, #16
    b1ae:	4691      	mov	r9, r2
    b1b0:	0409      	lsls	r1, r1, #16
    b1b2:	465a      	mov	r2, fp
    b1b4:	0c09      	lsrs	r1, r1, #16
    b1b6:	464e      	mov	r6, r9
    b1b8:	000d      	movs	r5, r1
    b1ba:	0412      	lsls	r2, r2, #16
    b1bc:	0c12      	lsrs	r2, r2, #16
    b1be:	4345      	muls	r5, r0
    b1c0:	9105      	str	r1, [sp, #20]
    b1c2:	4351      	muls	r1, r2
    b1c4:	4372      	muls	r2, r6
    b1c6:	4370      	muls	r0, r6
    b1c8:	1952      	adds	r2, r2, r5
    b1ca:	0c0e      	lsrs	r6, r1, #16
    b1cc:	18b2      	adds	r2, r6, r2
    b1ce:	4295      	cmp	r5, r2
    b1d0:	d903      	bls.n	b1da <__aeabi_ddiv+0x2de>
    b1d2:	2580      	movs	r5, #128	; 0x80
    b1d4:	026d      	lsls	r5, r5, #9
    b1d6:	46ac      	mov	ip, r5
    b1d8:	4460      	add	r0, ip
    b1da:	0c15      	lsrs	r5, r2, #16
    b1dc:	0409      	lsls	r1, r1, #16
    b1de:	0412      	lsls	r2, r2, #16
    b1e0:	0c09      	lsrs	r1, r1, #16
    b1e2:	1828      	adds	r0, r5, r0
    b1e4:	1852      	adds	r2, r2, r1
    b1e6:	4283      	cmp	r3, r0
    b1e8:	d200      	bcs.n	b1ec <__aeabi_ddiv+0x2f0>
    b1ea:	e0ce      	b.n	b38a <__aeabi_ddiv+0x48e>
    b1ec:	d100      	bne.n	b1f0 <__aeabi_ddiv+0x2f4>
    b1ee:	e0c8      	b.n	b382 <__aeabi_ddiv+0x486>
    b1f0:	1a1d      	subs	r5, r3, r0
    b1f2:	4653      	mov	r3, sl
    b1f4:	1a9e      	subs	r6, r3, r2
    b1f6:	45b2      	cmp	sl, r6
    b1f8:	4192      	sbcs	r2, r2
    b1fa:	4252      	negs	r2, r2
    b1fc:	1aab      	subs	r3, r5, r2
    b1fe:	469a      	mov	sl, r3
    b200:	4598      	cmp	r8, r3
    b202:	d100      	bne.n	b206 <__aeabi_ddiv+0x30a>
    b204:	e117      	b.n	b436 <__aeabi_ddiv+0x53a>
    b206:	0039      	movs	r1, r7
    b208:	0018      	movs	r0, r3
    b20a:	f7fe f977 	bl	94fc <__udivsi3>
    b20e:	9b01      	ldr	r3, [sp, #4]
    b210:	0005      	movs	r5, r0
    b212:	4343      	muls	r3, r0
    b214:	0039      	movs	r1, r7
    b216:	4650      	mov	r0, sl
    b218:	9304      	str	r3, [sp, #16]
    b21a:	f7fe f9f5 	bl	9608 <__aeabi_uidivmod>
    b21e:	9804      	ldr	r0, [sp, #16]
    b220:	040b      	lsls	r3, r1, #16
    b222:	0c31      	lsrs	r1, r6, #16
    b224:	4319      	orrs	r1, r3
    b226:	4288      	cmp	r0, r1
    b228:	d909      	bls.n	b23e <__aeabi_ddiv+0x342>
    b22a:	4441      	add	r1, r8
    b22c:	1e6b      	subs	r3, r5, #1
    b22e:	4588      	cmp	r8, r1
    b230:	d900      	bls.n	b234 <__aeabi_ddiv+0x338>
    b232:	e107      	b.n	b444 <__aeabi_ddiv+0x548>
    b234:	4288      	cmp	r0, r1
    b236:	d800      	bhi.n	b23a <__aeabi_ddiv+0x33e>
    b238:	e104      	b.n	b444 <__aeabi_ddiv+0x548>
    b23a:	3d02      	subs	r5, #2
    b23c:	4441      	add	r1, r8
    b23e:	9b04      	ldr	r3, [sp, #16]
    b240:	1acb      	subs	r3, r1, r3
    b242:	0018      	movs	r0, r3
    b244:	0039      	movs	r1, r7
    b246:	9304      	str	r3, [sp, #16]
    b248:	f7fe f958 	bl	94fc <__udivsi3>
    b24c:	9b01      	ldr	r3, [sp, #4]
    b24e:	4682      	mov	sl, r0
    b250:	4343      	muls	r3, r0
    b252:	0039      	movs	r1, r7
    b254:	9804      	ldr	r0, [sp, #16]
    b256:	9301      	str	r3, [sp, #4]
    b258:	f7fe f9d6 	bl	9608 <__aeabi_uidivmod>
    b25c:	9801      	ldr	r0, [sp, #4]
    b25e:	040b      	lsls	r3, r1, #16
    b260:	0431      	lsls	r1, r6, #16
    b262:	0c09      	lsrs	r1, r1, #16
    b264:	4319      	orrs	r1, r3
    b266:	4288      	cmp	r0, r1
    b268:	d90d      	bls.n	b286 <__aeabi_ddiv+0x38a>
    b26a:	4653      	mov	r3, sl
    b26c:	4441      	add	r1, r8
    b26e:	3b01      	subs	r3, #1
    b270:	4588      	cmp	r8, r1
    b272:	d900      	bls.n	b276 <__aeabi_ddiv+0x37a>
    b274:	e0e8      	b.n	b448 <__aeabi_ddiv+0x54c>
    b276:	4288      	cmp	r0, r1
    b278:	d800      	bhi.n	b27c <__aeabi_ddiv+0x380>
    b27a:	e0e5      	b.n	b448 <__aeabi_ddiv+0x54c>
    b27c:	2302      	movs	r3, #2
    b27e:	425b      	negs	r3, r3
    b280:	469c      	mov	ip, r3
    b282:	4441      	add	r1, r8
    b284:	44e2      	add	sl, ip
    b286:	9b01      	ldr	r3, [sp, #4]
    b288:	042d      	lsls	r5, r5, #16
    b28a:	1ace      	subs	r6, r1, r3
    b28c:	4651      	mov	r1, sl
    b28e:	4329      	orrs	r1, r5
    b290:	9d05      	ldr	r5, [sp, #20]
    b292:	464f      	mov	r7, r9
    b294:	002a      	movs	r2, r5
    b296:	040b      	lsls	r3, r1, #16
    b298:	0c08      	lsrs	r0, r1, #16
    b29a:	0c1b      	lsrs	r3, r3, #16
    b29c:	435a      	muls	r2, r3
    b29e:	4345      	muls	r5, r0
    b2a0:	437b      	muls	r3, r7
    b2a2:	4378      	muls	r0, r7
    b2a4:	195b      	adds	r3, r3, r5
    b2a6:	0c17      	lsrs	r7, r2, #16
    b2a8:	18fb      	adds	r3, r7, r3
    b2aa:	429d      	cmp	r5, r3
    b2ac:	d903      	bls.n	b2b6 <__aeabi_ddiv+0x3ba>
    b2ae:	2580      	movs	r5, #128	; 0x80
    b2b0:	026d      	lsls	r5, r5, #9
    b2b2:	46ac      	mov	ip, r5
    b2b4:	4460      	add	r0, ip
    b2b6:	0c1d      	lsrs	r5, r3, #16
    b2b8:	0412      	lsls	r2, r2, #16
    b2ba:	041b      	lsls	r3, r3, #16
    b2bc:	0c12      	lsrs	r2, r2, #16
    b2be:	1828      	adds	r0, r5, r0
    b2c0:	189b      	adds	r3, r3, r2
    b2c2:	4286      	cmp	r6, r0
    b2c4:	d200      	bcs.n	b2c8 <__aeabi_ddiv+0x3cc>
    b2c6:	e093      	b.n	b3f0 <__aeabi_ddiv+0x4f4>
    b2c8:	d100      	bne.n	b2cc <__aeabi_ddiv+0x3d0>
    b2ca:	e08e      	b.n	b3ea <__aeabi_ddiv+0x4ee>
    b2cc:	2301      	movs	r3, #1
    b2ce:	4319      	orrs	r1, r3
    b2d0:	4ba0      	ldr	r3, [pc, #640]	; (b554 <__aeabi_ddiv+0x658>)
    b2d2:	18e3      	adds	r3, r4, r3
    b2d4:	2b00      	cmp	r3, #0
    b2d6:	dc00      	bgt.n	b2da <__aeabi_ddiv+0x3de>
    b2d8:	e099      	b.n	b40e <__aeabi_ddiv+0x512>
    b2da:	074a      	lsls	r2, r1, #29
    b2dc:	d000      	beq.n	b2e0 <__aeabi_ddiv+0x3e4>
    b2de:	e09e      	b.n	b41e <__aeabi_ddiv+0x522>
    b2e0:	465a      	mov	r2, fp
    b2e2:	01d2      	lsls	r2, r2, #7
    b2e4:	d506      	bpl.n	b2f4 <__aeabi_ddiv+0x3f8>
    b2e6:	465a      	mov	r2, fp
    b2e8:	4b9b      	ldr	r3, [pc, #620]	; (b558 <__aeabi_ddiv+0x65c>)
    b2ea:	401a      	ands	r2, r3
    b2ec:	2380      	movs	r3, #128	; 0x80
    b2ee:	4693      	mov	fp, r2
    b2f0:	00db      	lsls	r3, r3, #3
    b2f2:	18e3      	adds	r3, r4, r3
    b2f4:	4a99      	ldr	r2, [pc, #612]	; (b55c <__aeabi_ddiv+0x660>)
    b2f6:	4293      	cmp	r3, r2
    b2f8:	dd68      	ble.n	b3cc <__aeabi_ddiv+0x4d0>
    b2fa:	2301      	movs	r3, #1
    b2fc:	9a02      	ldr	r2, [sp, #8]
    b2fe:	4c98      	ldr	r4, [pc, #608]	; (b560 <__aeabi_ddiv+0x664>)
    b300:	401a      	ands	r2, r3
    b302:	2300      	movs	r3, #0
    b304:	4694      	mov	ip, r2
    b306:	4698      	mov	r8, r3
    b308:	2200      	movs	r2, #0
    b30a:	e6c5      	b.n	b098 <__aeabi_ddiv+0x19c>
    b30c:	2280      	movs	r2, #128	; 0x80
    b30e:	464b      	mov	r3, r9
    b310:	0312      	lsls	r2, r2, #12
    b312:	4213      	tst	r3, r2
    b314:	d00a      	beq.n	b32c <__aeabi_ddiv+0x430>
    b316:	465b      	mov	r3, fp
    b318:	4213      	tst	r3, r2
    b31a:	d106      	bne.n	b32a <__aeabi_ddiv+0x42e>
    b31c:	431a      	orrs	r2, r3
    b31e:	0312      	lsls	r2, r2, #12
    b320:	0b12      	lsrs	r2, r2, #12
    b322:	46ac      	mov	ip, r5
    b324:	4688      	mov	r8, r1
    b326:	4c8e      	ldr	r4, [pc, #568]	; (b560 <__aeabi_ddiv+0x664>)
    b328:	e6b6      	b.n	b098 <__aeabi_ddiv+0x19c>
    b32a:	464b      	mov	r3, r9
    b32c:	431a      	orrs	r2, r3
    b32e:	0312      	lsls	r2, r2, #12
    b330:	0b12      	lsrs	r2, r2, #12
    b332:	46bc      	mov	ip, r7
    b334:	4c8a      	ldr	r4, [pc, #552]	; (b560 <__aeabi_ddiv+0x664>)
    b336:	e6af      	b.n	b098 <__aeabi_ddiv+0x19c>
    b338:	0003      	movs	r3, r0
    b33a:	465a      	mov	r2, fp
    b33c:	3b28      	subs	r3, #40	; 0x28
    b33e:	409a      	lsls	r2, r3
    b340:	2300      	movs	r3, #0
    b342:	4691      	mov	r9, r2
    b344:	4698      	mov	r8, r3
    b346:	e657      	b.n	aff8 <__aeabi_ddiv+0xfc>
    b348:	4658      	mov	r0, fp
    b34a:	f7fe fa87 	bl	985c <__clzsi2>
    b34e:	3020      	adds	r0, #32
    b350:	e640      	b.n	afd4 <__aeabi_ddiv+0xd8>
    b352:	0003      	movs	r3, r0
    b354:	4652      	mov	r2, sl
    b356:	3b28      	subs	r3, #40	; 0x28
    b358:	409a      	lsls	r2, r3
    b35a:	2100      	movs	r1, #0
    b35c:	4693      	mov	fp, r2
    b35e:	e677      	b.n	b050 <__aeabi_ddiv+0x154>
    b360:	f7fe fa7c 	bl	985c <__clzsi2>
    b364:	3020      	adds	r0, #32
    b366:	e65f      	b.n	b028 <__aeabi_ddiv+0x12c>
    b368:	4588      	cmp	r8, r1
    b36a:	d200      	bcs.n	b36e <__aeabi_ddiv+0x472>
    b36c:	e6c7      	b.n	b0fe <__aeabi_ddiv+0x202>
    b36e:	464b      	mov	r3, r9
    b370:	07de      	lsls	r6, r3, #31
    b372:	085d      	lsrs	r5, r3, #1
    b374:	4643      	mov	r3, r8
    b376:	085b      	lsrs	r3, r3, #1
    b378:	431e      	orrs	r6, r3
    b37a:	4643      	mov	r3, r8
    b37c:	07db      	lsls	r3, r3, #31
    b37e:	469a      	mov	sl, r3
    b380:	e6c2      	b.n	b108 <__aeabi_ddiv+0x20c>
    b382:	2500      	movs	r5, #0
    b384:	4592      	cmp	sl, r2
    b386:	d300      	bcc.n	b38a <__aeabi_ddiv+0x48e>
    b388:	e733      	b.n	b1f2 <__aeabi_ddiv+0x2f6>
    b38a:	9e03      	ldr	r6, [sp, #12]
    b38c:	4659      	mov	r1, fp
    b38e:	46b4      	mov	ip, r6
    b390:	44e2      	add	sl, ip
    b392:	45b2      	cmp	sl, r6
    b394:	41ad      	sbcs	r5, r5
    b396:	426d      	negs	r5, r5
    b398:	4445      	add	r5, r8
    b39a:	18eb      	adds	r3, r5, r3
    b39c:	3901      	subs	r1, #1
    b39e:	4598      	cmp	r8, r3
    b3a0:	d207      	bcs.n	b3b2 <__aeabi_ddiv+0x4b6>
    b3a2:	4298      	cmp	r0, r3
    b3a4:	d900      	bls.n	b3a8 <__aeabi_ddiv+0x4ac>
    b3a6:	e07f      	b.n	b4a8 <__aeabi_ddiv+0x5ac>
    b3a8:	d100      	bne.n	b3ac <__aeabi_ddiv+0x4b0>
    b3aa:	e0bc      	b.n	b526 <__aeabi_ddiv+0x62a>
    b3ac:	1a1d      	subs	r5, r3, r0
    b3ae:	468b      	mov	fp, r1
    b3b0:	e71f      	b.n	b1f2 <__aeabi_ddiv+0x2f6>
    b3b2:	4598      	cmp	r8, r3
    b3b4:	d1fa      	bne.n	b3ac <__aeabi_ddiv+0x4b0>
    b3b6:	9d03      	ldr	r5, [sp, #12]
    b3b8:	4555      	cmp	r5, sl
    b3ba:	d9f2      	bls.n	b3a2 <__aeabi_ddiv+0x4a6>
    b3bc:	4643      	mov	r3, r8
    b3be:	468b      	mov	fp, r1
    b3c0:	1a1d      	subs	r5, r3, r0
    b3c2:	e716      	b.n	b1f2 <__aeabi_ddiv+0x2f6>
    b3c4:	469b      	mov	fp, r3
    b3c6:	e6ca      	b.n	b15e <__aeabi_ddiv+0x262>
    b3c8:	0015      	movs	r5, r2
    b3ca:	e6e7      	b.n	b19c <__aeabi_ddiv+0x2a0>
    b3cc:	465a      	mov	r2, fp
    b3ce:	08c9      	lsrs	r1, r1, #3
    b3d0:	0752      	lsls	r2, r2, #29
    b3d2:	430a      	orrs	r2, r1
    b3d4:	055b      	lsls	r3, r3, #21
    b3d6:	4690      	mov	r8, r2
    b3d8:	0d5c      	lsrs	r4, r3, #21
    b3da:	465a      	mov	r2, fp
    b3dc:	2301      	movs	r3, #1
    b3de:	9902      	ldr	r1, [sp, #8]
    b3e0:	0252      	lsls	r2, r2, #9
    b3e2:	4019      	ands	r1, r3
    b3e4:	0b12      	lsrs	r2, r2, #12
    b3e6:	468c      	mov	ip, r1
    b3e8:	e656      	b.n	b098 <__aeabi_ddiv+0x19c>
    b3ea:	2b00      	cmp	r3, #0
    b3ec:	d100      	bne.n	b3f0 <__aeabi_ddiv+0x4f4>
    b3ee:	e76f      	b.n	b2d0 <__aeabi_ddiv+0x3d4>
    b3f0:	4446      	add	r6, r8
    b3f2:	1e4a      	subs	r2, r1, #1
    b3f4:	45b0      	cmp	r8, r6
    b3f6:	d929      	bls.n	b44c <__aeabi_ddiv+0x550>
    b3f8:	0011      	movs	r1, r2
    b3fa:	4286      	cmp	r6, r0
    b3fc:	d000      	beq.n	b400 <__aeabi_ddiv+0x504>
    b3fe:	e765      	b.n	b2cc <__aeabi_ddiv+0x3d0>
    b400:	9a03      	ldr	r2, [sp, #12]
    b402:	4293      	cmp	r3, r2
    b404:	d000      	beq.n	b408 <__aeabi_ddiv+0x50c>
    b406:	e761      	b.n	b2cc <__aeabi_ddiv+0x3d0>
    b408:	e762      	b.n	b2d0 <__aeabi_ddiv+0x3d4>
    b40a:	2101      	movs	r1, #1
    b40c:	4249      	negs	r1, r1
    b40e:	2001      	movs	r0, #1
    b410:	1ac2      	subs	r2, r0, r3
    b412:	2a38      	cmp	r2, #56	; 0x38
    b414:	dd21      	ble.n	b45a <__aeabi_ddiv+0x55e>
    b416:	9b02      	ldr	r3, [sp, #8]
    b418:	4003      	ands	r3, r0
    b41a:	469c      	mov	ip, r3
    b41c:	e638      	b.n	b090 <__aeabi_ddiv+0x194>
    b41e:	220f      	movs	r2, #15
    b420:	400a      	ands	r2, r1
    b422:	2a04      	cmp	r2, #4
    b424:	d100      	bne.n	b428 <__aeabi_ddiv+0x52c>
    b426:	e75b      	b.n	b2e0 <__aeabi_ddiv+0x3e4>
    b428:	000a      	movs	r2, r1
    b42a:	1d11      	adds	r1, r2, #4
    b42c:	4291      	cmp	r1, r2
    b42e:	4192      	sbcs	r2, r2
    b430:	4252      	negs	r2, r2
    b432:	4493      	add	fp, r2
    b434:	e754      	b.n	b2e0 <__aeabi_ddiv+0x3e4>
    b436:	4b47      	ldr	r3, [pc, #284]	; (b554 <__aeabi_ddiv+0x658>)
    b438:	18e3      	adds	r3, r4, r3
    b43a:	2b00      	cmp	r3, #0
    b43c:	dde5      	ble.n	b40a <__aeabi_ddiv+0x50e>
    b43e:	2201      	movs	r2, #1
    b440:	4252      	negs	r2, r2
    b442:	e7f2      	b.n	b42a <__aeabi_ddiv+0x52e>
    b444:	001d      	movs	r5, r3
    b446:	e6fa      	b.n	b23e <__aeabi_ddiv+0x342>
    b448:	469a      	mov	sl, r3
    b44a:	e71c      	b.n	b286 <__aeabi_ddiv+0x38a>
    b44c:	42b0      	cmp	r0, r6
    b44e:	d839      	bhi.n	b4c4 <__aeabi_ddiv+0x5c8>
    b450:	d06e      	beq.n	b530 <__aeabi_ddiv+0x634>
    b452:	0011      	movs	r1, r2
    b454:	e73a      	b.n	b2cc <__aeabi_ddiv+0x3d0>
    b456:	9302      	str	r3, [sp, #8]
    b458:	e73a      	b.n	b2d0 <__aeabi_ddiv+0x3d4>
    b45a:	2a1f      	cmp	r2, #31
    b45c:	dc3c      	bgt.n	b4d8 <__aeabi_ddiv+0x5dc>
    b45e:	2320      	movs	r3, #32
    b460:	1a9b      	subs	r3, r3, r2
    b462:	000c      	movs	r4, r1
    b464:	4658      	mov	r0, fp
    b466:	4099      	lsls	r1, r3
    b468:	4098      	lsls	r0, r3
    b46a:	1e4b      	subs	r3, r1, #1
    b46c:	4199      	sbcs	r1, r3
    b46e:	465b      	mov	r3, fp
    b470:	40d4      	lsrs	r4, r2
    b472:	40d3      	lsrs	r3, r2
    b474:	4320      	orrs	r0, r4
    b476:	4308      	orrs	r0, r1
    b478:	001a      	movs	r2, r3
    b47a:	0743      	lsls	r3, r0, #29
    b47c:	d009      	beq.n	b492 <__aeabi_ddiv+0x596>
    b47e:	230f      	movs	r3, #15
    b480:	4003      	ands	r3, r0
    b482:	2b04      	cmp	r3, #4
    b484:	d005      	beq.n	b492 <__aeabi_ddiv+0x596>
    b486:	0001      	movs	r1, r0
    b488:	1d08      	adds	r0, r1, #4
    b48a:	4288      	cmp	r0, r1
    b48c:	419b      	sbcs	r3, r3
    b48e:	425b      	negs	r3, r3
    b490:	18d2      	adds	r2, r2, r3
    b492:	0213      	lsls	r3, r2, #8
    b494:	d53a      	bpl.n	b50c <__aeabi_ddiv+0x610>
    b496:	2301      	movs	r3, #1
    b498:	9a02      	ldr	r2, [sp, #8]
    b49a:	2401      	movs	r4, #1
    b49c:	401a      	ands	r2, r3
    b49e:	2300      	movs	r3, #0
    b4a0:	4694      	mov	ip, r2
    b4a2:	4698      	mov	r8, r3
    b4a4:	2200      	movs	r2, #0
    b4a6:	e5f7      	b.n	b098 <__aeabi_ddiv+0x19c>
    b4a8:	2102      	movs	r1, #2
    b4aa:	4249      	negs	r1, r1
    b4ac:	468c      	mov	ip, r1
    b4ae:	9d03      	ldr	r5, [sp, #12]
    b4b0:	44e3      	add	fp, ip
    b4b2:	46ac      	mov	ip, r5
    b4b4:	44e2      	add	sl, ip
    b4b6:	45aa      	cmp	sl, r5
    b4b8:	41ad      	sbcs	r5, r5
    b4ba:	426d      	negs	r5, r5
    b4bc:	4445      	add	r5, r8
    b4be:	18ed      	adds	r5, r5, r3
    b4c0:	1a2d      	subs	r5, r5, r0
    b4c2:	e696      	b.n	b1f2 <__aeabi_ddiv+0x2f6>
    b4c4:	1e8a      	subs	r2, r1, #2
    b4c6:	9903      	ldr	r1, [sp, #12]
    b4c8:	004d      	lsls	r5, r1, #1
    b4ca:	428d      	cmp	r5, r1
    b4cc:	4189      	sbcs	r1, r1
    b4ce:	4249      	negs	r1, r1
    b4d0:	4441      	add	r1, r8
    b4d2:	1876      	adds	r6, r6, r1
    b4d4:	9503      	str	r5, [sp, #12]
    b4d6:	e78f      	b.n	b3f8 <__aeabi_ddiv+0x4fc>
    b4d8:	201f      	movs	r0, #31
    b4da:	4240      	negs	r0, r0
    b4dc:	1ac3      	subs	r3, r0, r3
    b4de:	4658      	mov	r0, fp
    b4e0:	40d8      	lsrs	r0, r3
    b4e2:	0003      	movs	r3, r0
    b4e4:	2a20      	cmp	r2, #32
    b4e6:	d028      	beq.n	b53a <__aeabi_ddiv+0x63e>
    b4e8:	2040      	movs	r0, #64	; 0x40
    b4ea:	465d      	mov	r5, fp
    b4ec:	1a82      	subs	r2, r0, r2
    b4ee:	4095      	lsls	r5, r2
    b4f0:	4329      	orrs	r1, r5
    b4f2:	1e4a      	subs	r2, r1, #1
    b4f4:	4191      	sbcs	r1, r2
    b4f6:	4319      	orrs	r1, r3
    b4f8:	2307      	movs	r3, #7
    b4fa:	2200      	movs	r2, #0
    b4fc:	400b      	ands	r3, r1
    b4fe:	d009      	beq.n	b514 <__aeabi_ddiv+0x618>
    b500:	230f      	movs	r3, #15
    b502:	2200      	movs	r2, #0
    b504:	400b      	ands	r3, r1
    b506:	0008      	movs	r0, r1
    b508:	2b04      	cmp	r3, #4
    b50a:	d1bd      	bne.n	b488 <__aeabi_ddiv+0x58c>
    b50c:	0001      	movs	r1, r0
    b50e:	0753      	lsls	r3, r2, #29
    b510:	0252      	lsls	r2, r2, #9
    b512:	0b12      	lsrs	r2, r2, #12
    b514:	08c9      	lsrs	r1, r1, #3
    b516:	4319      	orrs	r1, r3
    b518:	2301      	movs	r3, #1
    b51a:	4688      	mov	r8, r1
    b51c:	9902      	ldr	r1, [sp, #8]
    b51e:	2400      	movs	r4, #0
    b520:	4019      	ands	r1, r3
    b522:	468c      	mov	ip, r1
    b524:	e5b8      	b.n	b098 <__aeabi_ddiv+0x19c>
    b526:	4552      	cmp	r2, sl
    b528:	d8be      	bhi.n	b4a8 <__aeabi_ddiv+0x5ac>
    b52a:	468b      	mov	fp, r1
    b52c:	2500      	movs	r5, #0
    b52e:	e660      	b.n	b1f2 <__aeabi_ddiv+0x2f6>
    b530:	9d03      	ldr	r5, [sp, #12]
    b532:	429d      	cmp	r5, r3
    b534:	d3c6      	bcc.n	b4c4 <__aeabi_ddiv+0x5c8>
    b536:	0011      	movs	r1, r2
    b538:	e762      	b.n	b400 <__aeabi_ddiv+0x504>
    b53a:	2500      	movs	r5, #0
    b53c:	e7d8      	b.n	b4f0 <__aeabi_ddiv+0x5f4>
    b53e:	2280      	movs	r2, #128	; 0x80
    b540:	465b      	mov	r3, fp
    b542:	0312      	lsls	r2, r2, #12
    b544:	431a      	orrs	r2, r3
    b546:	9b01      	ldr	r3, [sp, #4]
    b548:	0312      	lsls	r2, r2, #12
    b54a:	0b12      	lsrs	r2, r2, #12
    b54c:	469c      	mov	ip, r3
    b54e:	4688      	mov	r8, r1
    b550:	4c03      	ldr	r4, [pc, #12]	; (b560 <__aeabi_ddiv+0x664>)
    b552:	e5a1      	b.n	b098 <__aeabi_ddiv+0x19c>
    b554:	000003ff 	.word	0x000003ff
    b558:	feffffff 	.word	0xfeffffff
    b55c:	000007fe 	.word	0x000007fe
    b560:	000007ff 	.word	0x000007ff

0000b564 <__aeabi_dmul>:
    b564:	b5f0      	push	{r4, r5, r6, r7, lr}
    b566:	4657      	mov	r7, sl
    b568:	4645      	mov	r5, r8
    b56a:	46de      	mov	lr, fp
    b56c:	464e      	mov	r6, r9
    b56e:	b5e0      	push	{r5, r6, r7, lr}
    b570:	030c      	lsls	r4, r1, #12
    b572:	4698      	mov	r8, r3
    b574:	004e      	lsls	r6, r1, #1
    b576:	0b23      	lsrs	r3, r4, #12
    b578:	b087      	sub	sp, #28
    b57a:	0007      	movs	r7, r0
    b57c:	4692      	mov	sl, r2
    b57e:	469b      	mov	fp, r3
    b580:	0d76      	lsrs	r6, r6, #21
    b582:	0fcd      	lsrs	r5, r1, #31
    b584:	2e00      	cmp	r6, #0
    b586:	d06b      	beq.n	b660 <__aeabi_dmul+0xfc>
    b588:	4b6d      	ldr	r3, [pc, #436]	; (b740 <__aeabi_dmul+0x1dc>)
    b58a:	429e      	cmp	r6, r3
    b58c:	d035      	beq.n	b5fa <__aeabi_dmul+0x96>
    b58e:	2480      	movs	r4, #128	; 0x80
    b590:	465b      	mov	r3, fp
    b592:	0f42      	lsrs	r2, r0, #29
    b594:	0424      	lsls	r4, r4, #16
    b596:	00db      	lsls	r3, r3, #3
    b598:	4314      	orrs	r4, r2
    b59a:	431c      	orrs	r4, r3
    b59c:	00c3      	lsls	r3, r0, #3
    b59e:	4699      	mov	r9, r3
    b5a0:	4b68      	ldr	r3, [pc, #416]	; (b744 <__aeabi_dmul+0x1e0>)
    b5a2:	46a3      	mov	fp, r4
    b5a4:	469c      	mov	ip, r3
    b5a6:	2300      	movs	r3, #0
    b5a8:	2700      	movs	r7, #0
    b5aa:	4466      	add	r6, ip
    b5ac:	9302      	str	r3, [sp, #8]
    b5ae:	4643      	mov	r3, r8
    b5b0:	031c      	lsls	r4, r3, #12
    b5b2:	005a      	lsls	r2, r3, #1
    b5b4:	0fdb      	lsrs	r3, r3, #31
    b5b6:	4650      	mov	r0, sl
    b5b8:	0b24      	lsrs	r4, r4, #12
    b5ba:	0d52      	lsrs	r2, r2, #21
    b5bc:	4698      	mov	r8, r3
    b5be:	d100      	bne.n	b5c2 <__aeabi_dmul+0x5e>
    b5c0:	e076      	b.n	b6b0 <__aeabi_dmul+0x14c>
    b5c2:	4b5f      	ldr	r3, [pc, #380]	; (b740 <__aeabi_dmul+0x1dc>)
    b5c4:	429a      	cmp	r2, r3
    b5c6:	d06d      	beq.n	b6a4 <__aeabi_dmul+0x140>
    b5c8:	2380      	movs	r3, #128	; 0x80
    b5ca:	0f41      	lsrs	r1, r0, #29
    b5cc:	041b      	lsls	r3, r3, #16
    b5ce:	430b      	orrs	r3, r1
    b5d0:	495c      	ldr	r1, [pc, #368]	; (b744 <__aeabi_dmul+0x1e0>)
    b5d2:	00e4      	lsls	r4, r4, #3
    b5d4:	468c      	mov	ip, r1
    b5d6:	431c      	orrs	r4, r3
    b5d8:	00c3      	lsls	r3, r0, #3
    b5da:	2000      	movs	r0, #0
    b5dc:	4462      	add	r2, ip
    b5de:	4641      	mov	r1, r8
    b5e0:	18b6      	adds	r6, r6, r2
    b5e2:	4069      	eors	r1, r5
    b5e4:	1c72      	adds	r2, r6, #1
    b5e6:	9101      	str	r1, [sp, #4]
    b5e8:	4694      	mov	ip, r2
    b5ea:	4307      	orrs	r7, r0
    b5ec:	2f0f      	cmp	r7, #15
    b5ee:	d900      	bls.n	b5f2 <__aeabi_dmul+0x8e>
    b5f0:	e0b0      	b.n	b754 <__aeabi_dmul+0x1f0>
    b5f2:	4a55      	ldr	r2, [pc, #340]	; (b748 <__aeabi_dmul+0x1e4>)
    b5f4:	00bf      	lsls	r7, r7, #2
    b5f6:	59d2      	ldr	r2, [r2, r7]
    b5f8:	4697      	mov	pc, r2
    b5fa:	465b      	mov	r3, fp
    b5fc:	4303      	orrs	r3, r0
    b5fe:	4699      	mov	r9, r3
    b600:	d000      	beq.n	b604 <__aeabi_dmul+0xa0>
    b602:	e087      	b.n	b714 <__aeabi_dmul+0x1b0>
    b604:	2300      	movs	r3, #0
    b606:	469b      	mov	fp, r3
    b608:	3302      	adds	r3, #2
    b60a:	2708      	movs	r7, #8
    b60c:	9302      	str	r3, [sp, #8]
    b60e:	e7ce      	b.n	b5ae <__aeabi_dmul+0x4a>
    b610:	4642      	mov	r2, r8
    b612:	9201      	str	r2, [sp, #4]
    b614:	2802      	cmp	r0, #2
    b616:	d067      	beq.n	b6e8 <__aeabi_dmul+0x184>
    b618:	2803      	cmp	r0, #3
    b61a:	d100      	bne.n	b61e <__aeabi_dmul+0xba>
    b61c:	e20e      	b.n	ba3c <__aeabi_dmul+0x4d8>
    b61e:	2801      	cmp	r0, #1
    b620:	d000      	beq.n	b624 <__aeabi_dmul+0xc0>
    b622:	e162      	b.n	b8ea <__aeabi_dmul+0x386>
    b624:	2300      	movs	r3, #0
    b626:	2400      	movs	r4, #0
    b628:	2200      	movs	r2, #0
    b62a:	4699      	mov	r9, r3
    b62c:	9901      	ldr	r1, [sp, #4]
    b62e:	4001      	ands	r1, r0
    b630:	b2cd      	uxtb	r5, r1
    b632:	2100      	movs	r1, #0
    b634:	0312      	lsls	r2, r2, #12
    b636:	0d0b      	lsrs	r3, r1, #20
    b638:	0b12      	lsrs	r2, r2, #12
    b63a:	051b      	lsls	r3, r3, #20
    b63c:	4313      	orrs	r3, r2
    b63e:	4a43      	ldr	r2, [pc, #268]	; (b74c <__aeabi_dmul+0x1e8>)
    b640:	0524      	lsls	r4, r4, #20
    b642:	4013      	ands	r3, r2
    b644:	431c      	orrs	r4, r3
    b646:	0064      	lsls	r4, r4, #1
    b648:	07ed      	lsls	r5, r5, #31
    b64a:	0864      	lsrs	r4, r4, #1
    b64c:	432c      	orrs	r4, r5
    b64e:	4648      	mov	r0, r9
    b650:	0021      	movs	r1, r4
    b652:	b007      	add	sp, #28
    b654:	bc3c      	pop	{r2, r3, r4, r5}
    b656:	4690      	mov	r8, r2
    b658:	4699      	mov	r9, r3
    b65a:	46a2      	mov	sl, r4
    b65c:	46ab      	mov	fp, r5
    b65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b660:	4303      	orrs	r3, r0
    b662:	4699      	mov	r9, r3
    b664:	d04f      	beq.n	b706 <__aeabi_dmul+0x1a2>
    b666:	465b      	mov	r3, fp
    b668:	2b00      	cmp	r3, #0
    b66a:	d100      	bne.n	b66e <__aeabi_dmul+0x10a>
    b66c:	e189      	b.n	b982 <__aeabi_dmul+0x41e>
    b66e:	4658      	mov	r0, fp
    b670:	f7fe f8f4 	bl	985c <__clzsi2>
    b674:	0003      	movs	r3, r0
    b676:	3b0b      	subs	r3, #11
    b678:	2b1c      	cmp	r3, #28
    b67a:	dd00      	ble.n	b67e <__aeabi_dmul+0x11a>
    b67c:	e17a      	b.n	b974 <__aeabi_dmul+0x410>
    b67e:	221d      	movs	r2, #29
    b680:	1ad3      	subs	r3, r2, r3
    b682:	003a      	movs	r2, r7
    b684:	0001      	movs	r1, r0
    b686:	465c      	mov	r4, fp
    b688:	40da      	lsrs	r2, r3
    b68a:	3908      	subs	r1, #8
    b68c:	408c      	lsls	r4, r1
    b68e:	0013      	movs	r3, r2
    b690:	408f      	lsls	r7, r1
    b692:	4323      	orrs	r3, r4
    b694:	469b      	mov	fp, r3
    b696:	46b9      	mov	r9, r7
    b698:	2300      	movs	r3, #0
    b69a:	4e2d      	ldr	r6, [pc, #180]	; (b750 <__aeabi_dmul+0x1ec>)
    b69c:	2700      	movs	r7, #0
    b69e:	1a36      	subs	r6, r6, r0
    b6a0:	9302      	str	r3, [sp, #8]
    b6a2:	e784      	b.n	b5ae <__aeabi_dmul+0x4a>
    b6a4:	4653      	mov	r3, sl
    b6a6:	4323      	orrs	r3, r4
    b6a8:	d12a      	bne.n	b700 <__aeabi_dmul+0x19c>
    b6aa:	2400      	movs	r4, #0
    b6ac:	2002      	movs	r0, #2
    b6ae:	e796      	b.n	b5de <__aeabi_dmul+0x7a>
    b6b0:	4653      	mov	r3, sl
    b6b2:	4323      	orrs	r3, r4
    b6b4:	d020      	beq.n	b6f8 <__aeabi_dmul+0x194>
    b6b6:	2c00      	cmp	r4, #0
    b6b8:	d100      	bne.n	b6bc <__aeabi_dmul+0x158>
    b6ba:	e157      	b.n	b96c <__aeabi_dmul+0x408>
    b6bc:	0020      	movs	r0, r4
    b6be:	f7fe f8cd 	bl	985c <__clzsi2>
    b6c2:	0003      	movs	r3, r0
    b6c4:	3b0b      	subs	r3, #11
    b6c6:	2b1c      	cmp	r3, #28
    b6c8:	dd00      	ble.n	b6cc <__aeabi_dmul+0x168>
    b6ca:	e149      	b.n	b960 <__aeabi_dmul+0x3fc>
    b6cc:	211d      	movs	r1, #29
    b6ce:	1acb      	subs	r3, r1, r3
    b6d0:	4651      	mov	r1, sl
    b6d2:	0002      	movs	r2, r0
    b6d4:	40d9      	lsrs	r1, r3
    b6d6:	4653      	mov	r3, sl
    b6d8:	3a08      	subs	r2, #8
    b6da:	4094      	lsls	r4, r2
    b6dc:	4093      	lsls	r3, r2
    b6de:	430c      	orrs	r4, r1
    b6e0:	4a1b      	ldr	r2, [pc, #108]	; (b750 <__aeabi_dmul+0x1ec>)
    b6e2:	1a12      	subs	r2, r2, r0
    b6e4:	2000      	movs	r0, #0
    b6e6:	e77a      	b.n	b5de <__aeabi_dmul+0x7a>
    b6e8:	2501      	movs	r5, #1
    b6ea:	9b01      	ldr	r3, [sp, #4]
    b6ec:	4c14      	ldr	r4, [pc, #80]	; (b740 <__aeabi_dmul+0x1dc>)
    b6ee:	401d      	ands	r5, r3
    b6f0:	2300      	movs	r3, #0
    b6f2:	2200      	movs	r2, #0
    b6f4:	4699      	mov	r9, r3
    b6f6:	e79c      	b.n	b632 <__aeabi_dmul+0xce>
    b6f8:	2400      	movs	r4, #0
    b6fa:	2200      	movs	r2, #0
    b6fc:	2001      	movs	r0, #1
    b6fe:	e76e      	b.n	b5de <__aeabi_dmul+0x7a>
    b700:	4653      	mov	r3, sl
    b702:	2003      	movs	r0, #3
    b704:	e76b      	b.n	b5de <__aeabi_dmul+0x7a>
    b706:	2300      	movs	r3, #0
    b708:	469b      	mov	fp, r3
    b70a:	3301      	adds	r3, #1
    b70c:	2704      	movs	r7, #4
    b70e:	2600      	movs	r6, #0
    b710:	9302      	str	r3, [sp, #8]
    b712:	e74c      	b.n	b5ae <__aeabi_dmul+0x4a>
    b714:	2303      	movs	r3, #3
    b716:	4681      	mov	r9, r0
    b718:	270c      	movs	r7, #12
    b71a:	9302      	str	r3, [sp, #8]
    b71c:	e747      	b.n	b5ae <__aeabi_dmul+0x4a>
    b71e:	2280      	movs	r2, #128	; 0x80
    b720:	2300      	movs	r3, #0
    b722:	2500      	movs	r5, #0
    b724:	0312      	lsls	r2, r2, #12
    b726:	4699      	mov	r9, r3
    b728:	4c05      	ldr	r4, [pc, #20]	; (b740 <__aeabi_dmul+0x1dc>)
    b72a:	e782      	b.n	b632 <__aeabi_dmul+0xce>
    b72c:	465c      	mov	r4, fp
    b72e:	464b      	mov	r3, r9
    b730:	9802      	ldr	r0, [sp, #8]
    b732:	e76f      	b.n	b614 <__aeabi_dmul+0xb0>
    b734:	465c      	mov	r4, fp
    b736:	464b      	mov	r3, r9
    b738:	9501      	str	r5, [sp, #4]
    b73a:	9802      	ldr	r0, [sp, #8]
    b73c:	e76a      	b.n	b614 <__aeabi_dmul+0xb0>
    b73e:	46c0      	nop			; (mov r8, r8)
    b740:	000007ff 	.word	0x000007ff
    b744:	fffffc01 	.word	0xfffffc01
    b748:	0000cc1c 	.word	0x0000cc1c
    b74c:	800fffff 	.word	0x800fffff
    b750:	fffffc0d 	.word	0xfffffc0d
    b754:	464a      	mov	r2, r9
    b756:	4649      	mov	r1, r9
    b758:	0c17      	lsrs	r7, r2, #16
    b75a:	0c1a      	lsrs	r2, r3, #16
    b75c:	041b      	lsls	r3, r3, #16
    b75e:	0c1b      	lsrs	r3, r3, #16
    b760:	0408      	lsls	r0, r1, #16
    b762:	0019      	movs	r1, r3
    b764:	0c00      	lsrs	r0, r0, #16
    b766:	4341      	muls	r1, r0
    b768:	0015      	movs	r5, r2
    b76a:	4688      	mov	r8, r1
    b76c:	0019      	movs	r1, r3
    b76e:	437d      	muls	r5, r7
    b770:	4379      	muls	r1, r7
    b772:	9503      	str	r5, [sp, #12]
    b774:	4689      	mov	r9, r1
    b776:	0029      	movs	r1, r5
    b778:	0015      	movs	r5, r2
    b77a:	4345      	muls	r5, r0
    b77c:	444d      	add	r5, r9
    b77e:	9502      	str	r5, [sp, #8]
    b780:	4645      	mov	r5, r8
    b782:	0c2d      	lsrs	r5, r5, #16
    b784:	46aa      	mov	sl, r5
    b786:	9d02      	ldr	r5, [sp, #8]
    b788:	4455      	add	r5, sl
    b78a:	45a9      	cmp	r9, r5
    b78c:	d906      	bls.n	b79c <__aeabi_dmul+0x238>
    b78e:	468a      	mov	sl, r1
    b790:	2180      	movs	r1, #128	; 0x80
    b792:	0249      	lsls	r1, r1, #9
    b794:	4689      	mov	r9, r1
    b796:	44ca      	add	sl, r9
    b798:	4651      	mov	r1, sl
    b79a:	9103      	str	r1, [sp, #12]
    b79c:	0c29      	lsrs	r1, r5, #16
    b79e:	9104      	str	r1, [sp, #16]
    b7a0:	4641      	mov	r1, r8
    b7a2:	0409      	lsls	r1, r1, #16
    b7a4:	042d      	lsls	r5, r5, #16
    b7a6:	0c09      	lsrs	r1, r1, #16
    b7a8:	4688      	mov	r8, r1
    b7aa:	0029      	movs	r1, r5
    b7ac:	0c25      	lsrs	r5, r4, #16
    b7ae:	0424      	lsls	r4, r4, #16
    b7b0:	4441      	add	r1, r8
    b7b2:	0c24      	lsrs	r4, r4, #16
    b7b4:	9105      	str	r1, [sp, #20]
    b7b6:	0021      	movs	r1, r4
    b7b8:	4341      	muls	r1, r0
    b7ba:	4688      	mov	r8, r1
    b7bc:	0021      	movs	r1, r4
    b7be:	4379      	muls	r1, r7
    b7c0:	468a      	mov	sl, r1
    b7c2:	4368      	muls	r0, r5
    b7c4:	4641      	mov	r1, r8
    b7c6:	4450      	add	r0, sl
    b7c8:	4681      	mov	r9, r0
    b7ca:	0c08      	lsrs	r0, r1, #16
    b7cc:	4448      	add	r0, r9
    b7ce:	436f      	muls	r7, r5
    b7d0:	4582      	cmp	sl, r0
    b7d2:	d903      	bls.n	b7dc <__aeabi_dmul+0x278>
    b7d4:	2180      	movs	r1, #128	; 0x80
    b7d6:	0249      	lsls	r1, r1, #9
    b7d8:	4689      	mov	r9, r1
    b7da:	444f      	add	r7, r9
    b7dc:	0c01      	lsrs	r1, r0, #16
    b7de:	4689      	mov	r9, r1
    b7e0:	0039      	movs	r1, r7
    b7e2:	4449      	add	r1, r9
    b7e4:	9102      	str	r1, [sp, #8]
    b7e6:	4641      	mov	r1, r8
    b7e8:	040f      	lsls	r7, r1, #16
    b7ea:	9904      	ldr	r1, [sp, #16]
    b7ec:	0c3f      	lsrs	r7, r7, #16
    b7ee:	4688      	mov	r8, r1
    b7f0:	0400      	lsls	r0, r0, #16
    b7f2:	19c0      	adds	r0, r0, r7
    b7f4:	4480      	add	r8, r0
    b7f6:	4641      	mov	r1, r8
    b7f8:	9104      	str	r1, [sp, #16]
    b7fa:	4659      	mov	r1, fp
    b7fc:	0c0f      	lsrs	r7, r1, #16
    b7fe:	0409      	lsls	r1, r1, #16
    b800:	0c09      	lsrs	r1, r1, #16
    b802:	4688      	mov	r8, r1
    b804:	4359      	muls	r1, r3
    b806:	468a      	mov	sl, r1
    b808:	0039      	movs	r1, r7
    b80a:	4351      	muls	r1, r2
    b80c:	4689      	mov	r9, r1
    b80e:	4641      	mov	r1, r8
    b810:	434a      	muls	r2, r1
    b812:	4651      	mov	r1, sl
    b814:	0c09      	lsrs	r1, r1, #16
    b816:	468b      	mov	fp, r1
    b818:	437b      	muls	r3, r7
    b81a:	18d2      	adds	r2, r2, r3
    b81c:	445a      	add	r2, fp
    b81e:	4293      	cmp	r3, r2
    b820:	d903      	bls.n	b82a <__aeabi_dmul+0x2c6>
    b822:	2380      	movs	r3, #128	; 0x80
    b824:	025b      	lsls	r3, r3, #9
    b826:	469b      	mov	fp, r3
    b828:	44d9      	add	r9, fp
    b82a:	4651      	mov	r1, sl
    b82c:	0409      	lsls	r1, r1, #16
    b82e:	0c09      	lsrs	r1, r1, #16
    b830:	468a      	mov	sl, r1
    b832:	4641      	mov	r1, r8
    b834:	4361      	muls	r1, r4
    b836:	437c      	muls	r4, r7
    b838:	0c13      	lsrs	r3, r2, #16
    b83a:	0412      	lsls	r2, r2, #16
    b83c:	444b      	add	r3, r9
    b83e:	4452      	add	r2, sl
    b840:	46a1      	mov	r9, r4
    b842:	468a      	mov	sl, r1
    b844:	003c      	movs	r4, r7
    b846:	4641      	mov	r1, r8
    b848:	436c      	muls	r4, r5
    b84a:	434d      	muls	r5, r1
    b84c:	4651      	mov	r1, sl
    b84e:	444d      	add	r5, r9
    b850:	0c0f      	lsrs	r7, r1, #16
    b852:	197d      	adds	r5, r7, r5
    b854:	45a9      	cmp	r9, r5
    b856:	d903      	bls.n	b860 <__aeabi_dmul+0x2fc>
    b858:	2180      	movs	r1, #128	; 0x80
    b85a:	0249      	lsls	r1, r1, #9
    b85c:	4688      	mov	r8, r1
    b85e:	4444      	add	r4, r8
    b860:	9f04      	ldr	r7, [sp, #16]
    b862:	9903      	ldr	r1, [sp, #12]
    b864:	46b8      	mov	r8, r7
    b866:	4441      	add	r1, r8
    b868:	468b      	mov	fp, r1
    b86a:	4583      	cmp	fp, r0
    b86c:	4180      	sbcs	r0, r0
    b86e:	4241      	negs	r1, r0
    b870:	4688      	mov	r8, r1
    b872:	4651      	mov	r1, sl
    b874:	0408      	lsls	r0, r1, #16
    b876:	042f      	lsls	r7, r5, #16
    b878:	0c00      	lsrs	r0, r0, #16
    b87a:	183f      	adds	r7, r7, r0
    b87c:	4658      	mov	r0, fp
    b87e:	9902      	ldr	r1, [sp, #8]
    b880:	1810      	adds	r0, r2, r0
    b882:	4689      	mov	r9, r1
    b884:	4290      	cmp	r0, r2
    b886:	4192      	sbcs	r2, r2
    b888:	444f      	add	r7, r9
    b88a:	46ba      	mov	sl, r7
    b88c:	4252      	negs	r2, r2
    b88e:	4699      	mov	r9, r3
    b890:	4693      	mov	fp, r2
    b892:	44c2      	add	sl, r8
    b894:	44d1      	add	r9, sl
    b896:	44cb      	add	fp, r9
    b898:	428f      	cmp	r7, r1
    b89a:	41bf      	sbcs	r7, r7
    b89c:	45c2      	cmp	sl, r8
    b89e:	4189      	sbcs	r1, r1
    b8a0:	4599      	cmp	r9, r3
    b8a2:	419b      	sbcs	r3, r3
    b8a4:	4593      	cmp	fp, r2
    b8a6:	4192      	sbcs	r2, r2
    b8a8:	427f      	negs	r7, r7
    b8aa:	4249      	negs	r1, r1
    b8ac:	0c2d      	lsrs	r5, r5, #16
    b8ae:	4252      	negs	r2, r2
    b8b0:	430f      	orrs	r7, r1
    b8b2:	425b      	negs	r3, r3
    b8b4:	4313      	orrs	r3, r2
    b8b6:	197f      	adds	r7, r7, r5
    b8b8:	18ff      	adds	r7, r7, r3
    b8ba:	465b      	mov	r3, fp
    b8bc:	193c      	adds	r4, r7, r4
    b8be:	0ddb      	lsrs	r3, r3, #23
    b8c0:	9a05      	ldr	r2, [sp, #20]
    b8c2:	0264      	lsls	r4, r4, #9
    b8c4:	431c      	orrs	r4, r3
    b8c6:	0243      	lsls	r3, r0, #9
    b8c8:	4313      	orrs	r3, r2
    b8ca:	1e5d      	subs	r5, r3, #1
    b8cc:	41ab      	sbcs	r3, r5
    b8ce:	465a      	mov	r2, fp
    b8d0:	0dc0      	lsrs	r0, r0, #23
    b8d2:	4303      	orrs	r3, r0
    b8d4:	0252      	lsls	r2, r2, #9
    b8d6:	4313      	orrs	r3, r2
    b8d8:	01e2      	lsls	r2, r4, #7
    b8da:	d556      	bpl.n	b98a <__aeabi_dmul+0x426>
    b8dc:	2001      	movs	r0, #1
    b8de:	085a      	lsrs	r2, r3, #1
    b8e0:	4003      	ands	r3, r0
    b8e2:	4313      	orrs	r3, r2
    b8e4:	07e2      	lsls	r2, r4, #31
    b8e6:	4313      	orrs	r3, r2
    b8e8:	0864      	lsrs	r4, r4, #1
    b8ea:	485a      	ldr	r0, [pc, #360]	; (ba54 <__aeabi_dmul+0x4f0>)
    b8ec:	4460      	add	r0, ip
    b8ee:	2800      	cmp	r0, #0
    b8f0:	dd4d      	ble.n	b98e <__aeabi_dmul+0x42a>
    b8f2:	075a      	lsls	r2, r3, #29
    b8f4:	d009      	beq.n	b90a <__aeabi_dmul+0x3a6>
    b8f6:	220f      	movs	r2, #15
    b8f8:	401a      	ands	r2, r3
    b8fa:	2a04      	cmp	r2, #4
    b8fc:	d005      	beq.n	b90a <__aeabi_dmul+0x3a6>
    b8fe:	1d1a      	adds	r2, r3, #4
    b900:	429a      	cmp	r2, r3
    b902:	419b      	sbcs	r3, r3
    b904:	425b      	negs	r3, r3
    b906:	18e4      	adds	r4, r4, r3
    b908:	0013      	movs	r3, r2
    b90a:	01e2      	lsls	r2, r4, #7
    b90c:	d504      	bpl.n	b918 <__aeabi_dmul+0x3b4>
    b90e:	2080      	movs	r0, #128	; 0x80
    b910:	4a51      	ldr	r2, [pc, #324]	; (ba58 <__aeabi_dmul+0x4f4>)
    b912:	00c0      	lsls	r0, r0, #3
    b914:	4014      	ands	r4, r2
    b916:	4460      	add	r0, ip
    b918:	4a50      	ldr	r2, [pc, #320]	; (ba5c <__aeabi_dmul+0x4f8>)
    b91a:	4290      	cmp	r0, r2
    b91c:	dd00      	ble.n	b920 <__aeabi_dmul+0x3bc>
    b91e:	e6e3      	b.n	b6e8 <__aeabi_dmul+0x184>
    b920:	2501      	movs	r5, #1
    b922:	08db      	lsrs	r3, r3, #3
    b924:	0762      	lsls	r2, r4, #29
    b926:	431a      	orrs	r2, r3
    b928:	0264      	lsls	r4, r4, #9
    b92a:	9b01      	ldr	r3, [sp, #4]
    b92c:	4691      	mov	r9, r2
    b92e:	0b22      	lsrs	r2, r4, #12
    b930:	0544      	lsls	r4, r0, #21
    b932:	0d64      	lsrs	r4, r4, #21
    b934:	401d      	ands	r5, r3
    b936:	e67c      	b.n	b632 <__aeabi_dmul+0xce>
    b938:	2280      	movs	r2, #128	; 0x80
    b93a:	4659      	mov	r1, fp
    b93c:	0312      	lsls	r2, r2, #12
    b93e:	4211      	tst	r1, r2
    b940:	d008      	beq.n	b954 <__aeabi_dmul+0x3f0>
    b942:	4214      	tst	r4, r2
    b944:	d106      	bne.n	b954 <__aeabi_dmul+0x3f0>
    b946:	4322      	orrs	r2, r4
    b948:	0312      	lsls	r2, r2, #12
    b94a:	0b12      	lsrs	r2, r2, #12
    b94c:	4645      	mov	r5, r8
    b94e:	4699      	mov	r9, r3
    b950:	4c43      	ldr	r4, [pc, #268]	; (ba60 <__aeabi_dmul+0x4fc>)
    b952:	e66e      	b.n	b632 <__aeabi_dmul+0xce>
    b954:	465b      	mov	r3, fp
    b956:	431a      	orrs	r2, r3
    b958:	0312      	lsls	r2, r2, #12
    b95a:	0b12      	lsrs	r2, r2, #12
    b95c:	4c40      	ldr	r4, [pc, #256]	; (ba60 <__aeabi_dmul+0x4fc>)
    b95e:	e668      	b.n	b632 <__aeabi_dmul+0xce>
    b960:	0003      	movs	r3, r0
    b962:	4654      	mov	r4, sl
    b964:	3b28      	subs	r3, #40	; 0x28
    b966:	409c      	lsls	r4, r3
    b968:	2300      	movs	r3, #0
    b96a:	e6b9      	b.n	b6e0 <__aeabi_dmul+0x17c>
    b96c:	f7fd ff76 	bl	985c <__clzsi2>
    b970:	3020      	adds	r0, #32
    b972:	e6a6      	b.n	b6c2 <__aeabi_dmul+0x15e>
    b974:	0003      	movs	r3, r0
    b976:	3b28      	subs	r3, #40	; 0x28
    b978:	409f      	lsls	r7, r3
    b97a:	2300      	movs	r3, #0
    b97c:	46bb      	mov	fp, r7
    b97e:	4699      	mov	r9, r3
    b980:	e68a      	b.n	b698 <__aeabi_dmul+0x134>
    b982:	f7fd ff6b 	bl	985c <__clzsi2>
    b986:	3020      	adds	r0, #32
    b988:	e674      	b.n	b674 <__aeabi_dmul+0x110>
    b98a:	46b4      	mov	ip, r6
    b98c:	e7ad      	b.n	b8ea <__aeabi_dmul+0x386>
    b98e:	2501      	movs	r5, #1
    b990:	1a2a      	subs	r2, r5, r0
    b992:	2a38      	cmp	r2, #56	; 0x38
    b994:	dd06      	ble.n	b9a4 <__aeabi_dmul+0x440>
    b996:	9b01      	ldr	r3, [sp, #4]
    b998:	2400      	movs	r4, #0
    b99a:	401d      	ands	r5, r3
    b99c:	2300      	movs	r3, #0
    b99e:	2200      	movs	r2, #0
    b9a0:	4699      	mov	r9, r3
    b9a2:	e646      	b.n	b632 <__aeabi_dmul+0xce>
    b9a4:	2a1f      	cmp	r2, #31
    b9a6:	dc21      	bgt.n	b9ec <__aeabi_dmul+0x488>
    b9a8:	2520      	movs	r5, #32
    b9aa:	0020      	movs	r0, r4
    b9ac:	1aad      	subs	r5, r5, r2
    b9ae:	001e      	movs	r6, r3
    b9b0:	40ab      	lsls	r3, r5
    b9b2:	40a8      	lsls	r0, r5
    b9b4:	40d6      	lsrs	r6, r2
    b9b6:	1e5d      	subs	r5, r3, #1
    b9b8:	41ab      	sbcs	r3, r5
    b9ba:	4330      	orrs	r0, r6
    b9bc:	4318      	orrs	r0, r3
    b9be:	40d4      	lsrs	r4, r2
    b9c0:	0743      	lsls	r3, r0, #29
    b9c2:	d009      	beq.n	b9d8 <__aeabi_dmul+0x474>
    b9c4:	230f      	movs	r3, #15
    b9c6:	4003      	ands	r3, r0
    b9c8:	2b04      	cmp	r3, #4
    b9ca:	d005      	beq.n	b9d8 <__aeabi_dmul+0x474>
    b9cc:	0003      	movs	r3, r0
    b9ce:	1d18      	adds	r0, r3, #4
    b9d0:	4298      	cmp	r0, r3
    b9d2:	419b      	sbcs	r3, r3
    b9d4:	425b      	negs	r3, r3
    b9d6:	18e4      	adds	r4, r4, r3
    b9d8:	0223      	lsls	r3, r4, #8
    b9da:	d521      	bpl.n	ba20 <__aeabi_dmul+0x4bc>
    b9dc:	2501      	movs	r5, #1
    b9de:	9b01      	ldr	r3, [sp, #4]
    b9e0:	2401      	movs	r4, #1
    b9e2:	401d      	ands	r5, r3
    b9e4:	2300      	movs	r3, #0
    b9e6:	2200      	movs	r2, #0
    b9e8:	4699      	mov	r9, r3
    b9ea:	e622      	b.n	b632 <__aeabi_dmul+0xce>
    b9ec:	251f      	movs	r5, #31
    b9ee:	0021      	movs	r1, r4
    b9f0:	426d      	negs	r5, r5
    b9f2:	1a28      	subs	r0, r5, r0
    b9f4:	40c1      	lsrs	r1, r0
    b9f6:	0008      	movs	r0, r1
    b9f8:	2a20      	cmp	r2, #32
    b9fa:	d01d      	beq.n	ba38 <__aeabi_dmul+0x4d4>
    b9fc:	355f      	adds	r5, #95	; 0x5f
    b9fe:	1aaa      	subs	r2, r5, r2
    ba00:	4094      	lsls	r4, r2
    ba02:	4323      	orrs	r3, r4
    ba04:	1e5c      	subs	r4, r3, #1
    ba06:	41a3      	sbcs	r3, r4
    ba08:	2507      	movs	r5, #7
    ba0a:	4303      	orrs	r3, r0
    ba0c:	401d      	ands	r5, r3
    ba0e:	2200      	movs	r2, #0
    ba10:	2d00      	cmp	r5, #0
    ba12:	d009      	beq.n	ba28 <__aeabi_dmul+0x4c4>
    ba14:	220f      	movs	r2, #15
    ba16:	2400      	movs	r4, #0
    ba18:	401a      	ands	r2, r3
    ba1a:	0018      	movs	r0, r3
    ba1c:	2a04      	cmp	r2, #4
    ba1e:	d1d6      	bne.n	b9ce <__aeabi_dmul+0x46a>
    ba20:	0003      	movs	r3, r0
    ba22:	0765      	lsls	r5, r4, #29
    ba24:	0264      	lsls	r4, r4, #9
    ba26:	0b22      	lsrs	r2, r4, #12
    ba28:	08db      	lsrs	r3, r3, #3
    ba2a:	432b      	orrs	r3, r5
    ba2c:	2501      	movs	r5, #1
    ba2e:	4699      	mov	r9, r3
    ba30:	9b01      	ldr	r3, [sp, #4]
    ba32:	2400      	movs	r4, #0
    ba34:	401d      	ands	r5, r3
    ba36:	e5fc      	b.n	b632 <__aeabi_dmul+0xce>
    ba38:	2400      	movs	r4, #0
    ba3a:	e7e2      	b.n	ba02 <__aeabi_dmul+0x49e>
    ba3c:	2280      	movs	r2, #128	; 0x80
    ba3e:	2501      	movs	r5, #1
    ba40:	0312      	lsls	r2, r2, #12
    ba42:	4322      	orrs	r2, r4
    ba44:	9901      	ldr	r1, [sp, #4]
    ba46:	0312      	lsls	r2, r2, #12
    ba48:	0b12      	lsrs	r2, r2, #12
    ba4a:	400d      	ands	r5, r1
    ba4c:	4699      	mov	r9, r3
    ba4e:	4c04      	ldr	r4, [pc, #16]	; (ba60 <__aeabi_dmul+0x4fc>)
    ba50:	e5ef      	b.n	b632 <__aeabi_dmul+0xce>
    ba52:	46c0      	nop			; (mov r8, r8)
    ba54:	000003ff 	.word	0x000003ff
    ba58:	feffffff 	.word	0xfeffffff
    ba5c:	000007fe 	.word	0x000007fe
    ba60:	000007ff 	.word	0x000007ff

0000ba64 <__aeabi_dsub>:
    ba64:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba66:	4646      	mov	r6, r8
    ba68:	46d6      	mov	lr, sl
    ba6a:	464f      	mov	r7, r9
    ba6c:	030c      	lsls	r4, r1, #12
    ba6e:	b5c0      	push	{r6, r7, lr}
    ba70:	0fcd      	lsrs	r5, r1, #31
    ba72:	004e      	lsls	r6, r1, #1
    ba74:	0a61      	lsrs	r1, r4, #9
    ba76:	0f44      	lsrs	r4, r0, #29
    ba78:	430c      	orrs	r4, r1
    ba7a:	00c1      	lsls	r1, r0, #3
    ba7c:	0058      	lsls	r0, r3, #1
    ba7e:	0d40      	lsrs	r0, r0, #21
    ba80:	4684      	mov	ip, r0
    ba82:	468a      	mov	sl, r1
    ba84:	000f      	movs	r7, r1
    ba86:	0319      	lsls	r1, r3, #12
    ba88:	0f50      	lsrs	r0, r2, #29
    ba8a:	0a49      	lsrs	r1, r1, #9
    ba8c:	4301      	orrs	r1, r0
    ba8e:	48c6      	ldr	r0, [pc, #792]	; (bda8 <__aeabi_dsub+0x344>)
    ba90:	0d76      	lsrs	r6, r6, #21
    ba92:	46a8      	mov	r8, r5
    ba94:	0fdb      	lsrs	r3, r3, #31
    ba96:	00d2      	lsls	r2, r2, #3
    ba98:	4584      	cmp	ip, r0
    ba9a:	d100      	bne.n	ba9e <__aeabi_dsub+0x3a>
    ba9c:	e0d8      	b.n	bc50 <__aeabi_dsub+0x1ec>
    ba9e:	2001      	movs	r0, #1
    baa0:	4043      	eors	r3, r0
    baa2:	42ab      	cmp	r3, r5
    baa4:	d100      	bne.n	baa8 <__aeabi_dsub+0x44>
    baa6:	e0a6      	b.n	bbf6 <__aeabi_dsub+0x192>
    baa8:	4660      	mov	r0, ip
    baaa:	1a35      	subs	r5, r6, r0
    baac:	2d00      	cmp	r5, #0
    baae:	dc00      	bgt.n	bab2 <__aeabi_dsub+0x4e>
    bab0:	e105      	b.n	bcbe <__aeabi_dsub+0x25a>
    bab2:	2800      	cmp	r0, #0
    bab4:	d110      	bne.n	bad8 <__aeabi_dsub+0x74>
    bab6:	000b      	movs	r3, r1
    bab8:	4313      	orrs	r3, r2
    baba:	d100      	bne.n	babe <__aeabi_dsub+0x5a>
    babc:	e0d7      	b.n	bc6e <__aeabi_dsub+0x20a>
    babe:	1e6b      	subs	r3, r5, #1
    bac0:	2b00      	cmp	r3, #0
    bac2:	d000      	beq.n	bac6 <__aeabi_dsub+0x62>
    bac4:	e14b      	b.n	bd5e <__aeabi_dsub+0x2fa>
    bac6:	4653      	mov	r3, sl
    bac8:	1a9f      	subs	r7, r3, r2
    baca:	45ba      	cmp	sl, r7
    bacc:	4180      	sbcs	r0, r0
    bace:	1a64      	subs	r4, r4, r1
    bad0:	4240      	negs	r0, r0
    bad2:	1a24      	subs	r4, r4, r0
    bad4:	2601      	movs	r6, #1
    bad6:	e01e      	b.n	bb16 <__aeabi_dsub+0xb2>
    bad8:	4bb3      	ldr	r3, [pc, #716]	; (bda8 <__aeabi_dsub+0x344>)
    bada:	429e      	cmp	r6, r3
    badc:	d048      	beq.n	bb70 <__aeabi_dsub+0x10c>
    bade:	2380      	movs	r3, #128	; 0x80
    bae0:	041b      	lsls	r3, r3, #16
    bae2:	4319      	orrs	r1, r3
    bae4:	2d38      	cmp	r5, #56	; 0x38
    bae6:	dd00      	ble.n	baea <__aeabi_dsub+0x86>
    bae8:	e119      	b.n	bd1e <__aeabi_dsub+0x2ba>
    baea:	2d1f      	cmp	r5, #31
    baec:	dd00      	ble.n	baf0 <__aeabi_dsub+0x8c>
    baee:	e14c      	b.n	bd8a <__aeabi_dsub+0x326>
    baf0:	2320      	movs	r3, #32
    baf2:	000f      	movs	r7, r1
    baf4:	1b5b      	subs	r3, r3, r5
    baf6:	0010      	movs	r0, r2
    baf8:	409a      	lsls	r2, r3
    bafa:	409f      	lsls	r7, r3
    bafc:	40e8      	lsrs	r0, r5
    bafe:	1e53      	subs	r3, r2, #1
    bb00:	419a      	sbcs	r2, r3
    bb02:	40e9      	lsrs	r1, r5
    bb04:	4307      	orrs	r7, r0
    bb06:	4317      	orrs	r7, r2
    bb08:	4653      	mov	r3, sl
    bb0a:	1bdf      	subs	r7, r3, r7
    bb0c:	1a61      	subs	r1, r4, r1
    bb0e:	45ba      	cmp	sl, r7
    bb10:	41a4      	sbcs	r4, r4
    bb12:	4264      	negs	r4, r4
    bb14:	1b0c      	subs	r4, r1, r4
    bb16:	0223      	lsls	r3, r4, #8
    bb18:	d400      	bmi.n	bb1c <__aeabi_dsub+0xb8>
    bb1a:	e0c5      	b.n	bca8 <__aeabi_dsub+0x244>
    bb1c:	0264      	lsls	r4, r4, #9
    bb1e:	0a65      	lsrs	r5, r4, #9
    bb20:	2d00      	cmp	r5, #0
    bb22:	d100      	bne.n	bb26 <__aeabi_dsub+0xc2>
    bb24:	e0f6      	b.n	bd14 <__aeabi_dsub+0x2b0>
    bb26:	0028      	movs	r0, r5
    bb28:	f7fd fe98 	bl	985c <__clzsi2>
    bb2c:	0003      	movs	r3, r0
    bb2e:	3b08      	subs	r3, #8
    bb30:	2b1f      	cmp	r3, #31
    bb32:	dd00      	ble.n	bb36 <__aeabi_dsub+0xd2>
    bb34:	e0e9      	b.n	bd0a <__aeabi_dsub+0x2a6>
    bb36:	2220      	movs	r2, #32
    bb38:	003c      	movs	r4, r7
    bb3a:	1ad2      	subs	r2, r2, r3
    bb3c:	409d      	lsls	r5, r3
    bb3e:	40d4      	lsrs	r4, r2
    bb40:	409f      	lsls	r7, r3
    bb42:	4325      	orrs	r5, r4
    bb44:	429e      	cmp	r6, r3
    bb46:	dd00      	ble.n	bb4a <__aeabi_dsub+0xe6>
    bb48:	e0db      	b.n	bd02 <__aeabi_dsub+0x29e>
    bb4a:	1b9e      	subs	r6, r3, r6
    bb4c:	1c73      	adds	r3, r6, #1
    bb4e:	2b1f      	cmp	r3, #31
    bb50:	dd00      	ble.n	bb54 <__aeabi_dsub+0xf0>
    bb52:	e10a      	b.n	bd6a <__aeabi_dsub+0x306>
    bb54:	2220      	movs	r2, #32
    bb56:	0038      	movs	r0, r7
    bb58:	1ad2      	subs	r2, r2, r3
    bb5a:	0029      	movs	r1, r5
    bb5c:	4097      	lsls	r7, r2
    bb5e:	002c      	movs	r4, r5
    bb60:	4091      	lsls	r1, r2
    bb62:	40d8      	lsrs	r0, r3
    bb64:	1e7a      	subs	r2, r7, #1
    bb66:	4197      	sbcs	r7, r2
    bb68:	40dc      	lsrs	r4, r3
    bb6a:	2600      	movs	r6, #0
    bb6c:	4301      	orrs	r1, r0
    bb6e:	430f      	orrs	r7, r1
    bb70:	077b      	lsls	r3, r7, #29
    bb72:	d009      	beq.n	bb88 <__aeabi_dsub+0x124>
    bb74:	230f      	movs	r3, #15
    bb76:	403b      	ands	r3, r7
    bb78:	2b04      	cmp	r3, #4
    bb7a:	d005      	beq.n	bb88 <__aeabi_dsub+0x124>
    bb7c:	1d3b      	adds	r3, r7, #4
    bb7e:	42bb      	cmp	r3, r7
    bb80:	41bf      	sbcs	r7, r7
    bb82:	427f      	negs	r7, r7
    bb84:	19e4      	adds	r4, r4, r7
    bb86:	001f      	movs	r7, r3
    bb88:	0223      	lsls	r3, r4, #8
    bb8a:	d525      	bpl.n	bbd8 <__aeabi_dsub+0x174>
    bb8c:	4b86      	ldr	r3, [pc, #536]	; (bda8 <__aeabi_dsub+0x344>)
    bb8e:	3601      	adds	r6, #1
    bb90:	429e      	cmp	r6, r3
    bb92:	d100      	bne.n	bb96 <__aeabi_dsub+0x132>
    bb94:	e0af      	b.n	bcf6 <__aeabi_dsub+0x292>
    bb96:	4b85      	ldr	r3, [pc, #532]	; (bdac <__aeabi_dsub+0x348>)
    bb98:	2501      	movs	r5, #1
    bb9a:	401c      	ands	r4, r3
    bb9c:	4643      	mov	r3, r8
    bb9e:	0762      	lsls	r2, r4, #29
    bba0:	08ff      	lsrs	r7, r7, #3
    bba2:	0264      	lsls	r4, r4, #9
    bba4:	0576      	lsls	r6, r6, #21
    bba6:	4317      	orrs	r7, r2
    bba8:	0b24      	lsrs	r4, r4, #12
    bbaa:	0d76      	lsrs	r6, r6, #21
    bbac:	401d      	ands	r5, r3
    bbae:	2100      	movs	r1, #0
    bbb0:	0324      	lsls	r4, r4, #12
    bbb2:	0b23      	lsrs	r3, r4, #12
    bbb4:	0d0c      	lsrs	r4, r1, #20
    bbb6:	4a7e      	ldr	r2, [pc, #504]	; (bdb0 <__aeabi_dsub+0x34c>)
    bbb8:	0524      	lsls	r4, r4, #20
    bbba:	431c      	orrs	r4, r3
    bbbc:	4014      	ands	r4, r2
    bbbe:	0533      	lsls	r3, r6, #20
    bbc0:	4323      	orrs	r3, r4
    bbc2:	005b      	lsls	r3, r3, #1
    bbc4:	07ed      	lsls	r5, r5, #31
    bbc6:	085b      	lsrs	r3, r3, #1
    bbc8:	432b      	orrs	r3, r5
    bbca:	0038      	movs	r0, r7
    bbcc:	0019      	movs	r1, r3
    bbce:	bc1c      	pop	{r2, r3, r4}
    bbd0:	4690      	mov	r8, r2
    bbd2:	4699      	mov	r9, r3
    bbd4:	46a2      	mov	sl, r4
    bbd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bbd8:	2501      	movs	r5, #1
    bbda:	4643      	mov	r3, r8
    bbdc:	0762      	lsls	r2, r4, #29
    bbde:	08ff      	lsrs	r7, r7, #3
    bbe0:	4317      	orrs	r7, r2
    bbe2:	08e4      	lsrs	r4, r4, #3
    bbe4:	401d      	ands	r5, r3
    bbe6:	4b70      	ldr	r3, [pc, #448]	; (bda8 <__aeabi_dsub+0x344>)
    bbe8:	429e      	cmp	r6, r3
    bbea:	d036      	beq.n	bc5a <__aeabi_dsub+0x1f6>
    bbec:	0324      	lsls	r4, r4, #12
    bbee:	0576      	lsls	r6, r6, #21
    bbf0:	0b24      	lsrs	r4, r4, #12
    bbf2:	0d76      	lsrs	r6, r6, #21
    bbf4:	e7db      	b.n	bbae <__aeabi_dsub+0x14a>
    bbf6:	4663      	mov	r3, ip
    bbf8:	1af3      	subs	r3, r6, r3
    bbfa:	2b00      	cmp	r3, #0
    bbfc:	dc00      	bgt.n	bc00 <__aeabi_dsub+0x19c>
    bbfe:	e094      	b.n	bd2a <__aeabi_dsub+0x2c6>
    bc00:	4660      	mov	r0, ip
    bc02:	2800      	cmp	r0, #0
    bc04:	d035      	beq.n	bc72 <__aeabi_dsub+0x20e>
    bc06:	4868      	ldr	r0, [pc, #416]	; (bda8 <__aeabi_dsub+0x344>)
    bc08:	4286      	cmp	r6, r0
    bc0a:	d0b1      	beq.n	bb70 <__aeabi_dsub+0x10c>
    bc0c:	2780      	movs	r7, #128	; 0x80
    bc0e:	043f      	lsls	r7, r7, #16
    bc10:	4339      	orrs	r1, r7
    bc12:	2b38      	cmp	r3, #56	; 0x38
    bc14:	dc00      	bgt.n	bc18 <__aeabi_dsub+0x1b4>
    bc16:	e0fd      	b.n	be14 <__aeabi_dsub+0x3b0>
    bc18:	430a      	orrs	r2, r1
    bc1a:	0017      	movs	r7, r2
    bc1c:	2100      	movs	r1, #0
    bc1e:	1e7a      	subs	r2, r7, #1
    bc20:	4197      	sbcs	r7, r2
    bc22:	4457      	add	r7, sl
    bc24:	4557      	cmp	r7, sl
    bc26:	4180      	sbcs	r0, r0
    bc28:	1909      	adds	r1, r1, r4
    bc2a:	4244      	negs	r4, r0
    bc2c:	190c      	adds	r4, r1, r4
    bc2e:	0223      	lsls	r3, r4, #8
    bc30:	d53a      	bpl.n	bca8 <__aeabi_dsub+0x244>
    bc32:	4b5d      	ldr	r3, [pc, #372]	; (bda8 <__aeabi_dsub+0x344>)
    bc34:	3601      	adds	r6, #1
    bc36:	429e      	cmp	r6, r3
    bc38:	d100      	bne.n	bc3c <__aeabi_dsub+0x1d8>
    bc3a:	e14b      	b.n	bed4 <__aeabi_dsub+0x470>
    bc3c:	2201      	movs	r2, #1
    bc3e:	4b5b      	ldr	r3, [pc, #364]	; (bdac <__aeabi_dsub+0x348>)
    bc40:	401c      	ands	r4, r3
    bc42:	087b      	lsrs	r3, r7, #1
    bc44:	4017      	ands	r7, r2
    bc46:	431f      	orrs	r7, r3
    bc48:	07e2      	lsls	r2, r4, #31
    bc4a:	4317      	orrs	r7, r2
    bc4c:	0864      	lsrs	r4, r4, #1
    bc4e:	e78f      	b.n	bb70 <__aeabi_dsub+0x10c>
    bc50:	0008      	movs	r0, r1
    bc52:	4310      	orrs	r0, r2
    bc54:	d000      	beq.n	bc58 <__aeabi_dsub+0x1f4>
    bc56:	e724      	b.n	baa2 <__aeabi_dsub+0x3e>
    bc58:	e721      	b.n	ba9e <__aeabi_dsub+0x3a>
    bc5a:	0023      	movs	r3, r4
    bc5c:	433b      	orrs	r3, r7
    bc5e:	d100      	bne.n	bc62 <__aeabi_dsub+0x1fe>
    bc60:	e1b9      	b.n	bfd6 <__aeabi_dsub+0x572>
    bc62:	2280      	movs	r2, #128	; 0x80
    bc64:	0312      	lsls	r2, r2, #12
    bc66:	4314      	orrs	r4, r2
    bc68:	0324      	lsls	r4, r4, #12
    bc6a:	0b24      	lsrs	r4, r4, #12
    bc6c:	e79f      	b.n	bbae <__aeabi_dsub+0x14a>
    bc6e:	002e      	movs	r6, r5
    bc70:	e77e      	b.n	bb70 <__aeabi_dsub+0x10c>
    bc72:	0008      	movs	r0, r1
    bc74:	4310      	orrs	r0, r2
    bc76:	d100      	bne.n	bc7a <__aeabi_dsub+0x216>
    bc78:	e0ca      	b.n	be10 <__aeabi_dsub+0x3ac>
    bc7a:	1e58      	subs	r0, r3, #1
    bc7c:	4684      	mov	ip, r0
    bc7e:	2800      	cmp	r0, #0
    bc80:	d000      	beq.n	bc84 <__aeabi_dsub+0x220>
    bc82:	e0e7      	b.n	be54 <__aeabi_dsub+0x3f0>
    bc84:	4452      	add	r2, sl
    bc86:	4552      	cmp	r2, sl
    bc88:	4180      	sbcs	r0, r0
    bc8a:	1864      	adds	r4, r4, r1
    bc8c:	4240      	negs	r0, r0
    bc8e:	1824      	adds	r4, r4, r0
    bc90:	0017      	movs	r7, r2
    bc92:	2601      	movs	r6, #1
    bc94:	0223      	lsls	r3, r4, #8
    bc96:	d507      	bpl.n	bca8 <__aeabi_dsub+0x244>
    bc98:	2602      	movs	r6, #2
    bc9a:	e7cf      	b.n	bc3c <__aeabi_dsub+0x1d8>
    bc9c:	4664      	mov	r4, ip
    bc9e:	432c      	orrs	r4, r5
    bca0:	d100      	bne.n	bca4 <__aeabi_dsub+0x240>
    bca2:	e1b3      	b.n	c00c <__aeabi_dsub+0x5a8>
    bca4:	002c      	movs	r4, r5
    bca6:	4667      	mov	r7, ip
    bca8:	077b      	lsls	r3, r7, #29
    bcaa:	d000      	beq.n	bcae <__aeabi_dsub+0x24a>
    bcac:	e762      	b.n	bb74 <__aeabi_dsub+0x110>
    bcae:	0763      	lsls	r3, r4, #29
    bcb0:	08ff      	lsrs	r7, r7, #3
    bcb2:	431f      	orrs	r7, r3
    bcb4:	2501      	movs	r5, #1
    bcb6:	4643      	mov	r3, r8
    bcb8:	08e4      	lsrs	r4, r4, #3
    bcba:	401d      	ands	r5, r3
    bcbc:	e793      	b.n	bbe6 <__aeabi_dsub+0x182>
    bcbe:	2d00      	cmp	r5, #0
    bcc0:	d178      	bne.n	bdb4 <__aeabi_dsub+0x350>
    bcc2:	1c75      	adds	r5, r6, #1
    bcc4:	056d      	lsls	r5, r5, #21
    bcc6:	0d6d      	lsrs	r5, r5, #21
    bcc8:	2d01      	cmp	r5, #1
    bcca:	dc00      	bgt.n	bcce <__aeabi_dsub+0x26a>
    bccc:	e0f2      	b.n	beb4 <__aeabi_dsub+0x450>
    bcce:	4650      	mov	r0, sl
    bcd0:	1a80      	subs	r0, r0, r2
    bcd2:	4582      	cmp	sl, r0
    bcd4:	41bf      	sbcs	r7, r7
    bcd6:	1a65      	subs	r5, r4, r1
    bcd8:	427f      	negs	r7, r7
    bcda:	1bed      	subs	r5, r5, r7
    bcdc:	4684      	mov	ip, r0
    bcde:	0228      	lsls	r0, r5, #8
    bce0:	d400      	bmi.n	bce4 <__aeabi_dsub+0x280>
    bce2:	e08c      	b.n	bdfe <__aeabi_dsub+0x39a>
    bce4:	4650      	mov	r0, sl
    bce6:	1a17      	subs	r7, r2, r0
    bce8:	42ba      	cmp	r2, r7
    bcea:	4192      	sbcs	r2, r2
    bcec:	1b0c      	subs	r4, r1, r4
    bcee:	4255      	negs	r5, r2
    bcf0:	1b65      	subs	r5, r4, r5
    bcf2:	4698      	mov	r8, r3
    bcf4:	e714      	b.n	bb20 <__aeabi_dsub+0xbc>
    bcf6:	2501      	movs	r5, #1
    bcf8:	4643      	mov	r3, r8
    bcfa:	2400      	movs	r4, #0
    bcfc:	401d      	ands	r5, r3
    bcfe:	2700      	movs	r7, #0
    bd00:	e755      	b.n	bbae <__aeabi_dsub+0x14a>
    bd02:	4c2a      	ldr	r4, [pc, #168]	; (bdac <__aeabi_dsub+0x348>)
    bd04:	1af6      	subs	r6, r6, r3
    bd06:	402c      	ands	r4, r5
    bd08:	e732      	b.n	bb70 <__aeabi_dsub+0x10c>
    bd0a:	003d      	movs	r5, r7
    bd0c:	3828      	subs	r0, #40	; 0x28
    bd0e:	4085      	lsls	r5, r0
    bd10:	2700      	movs	r7, #0
    bd12:	e717      	b.n	bb44 <__aeabi_dsub+0xe0>
    bd14:	0038      	movs	r0, r7
    bd16:	f7fd fda1 	bl	985c <__clzsi2>
    bd1a:	3020      	adds	r0, #32
    bd1c:	e706      	b.n	bb2c <__aeabi_dsub+0xc8>
    bd1e:	430a      	orrs	r2, r1
    bd20:	0017      	movs	r7, r2
    bd22:	2100      	movs	r1, #0
    bd24:	1e7a      	subs	r2, r7, #1
    bd26:	4197      	sbcs	r7, r2
    bd28:	e6ee      	b.n	bb08 <__aeabi_dsub+0xa4>
    bd2a:	2b00      	cmp	r3, #0
    bd2c:	d000      	beq.n	bd30 <__aeabi_dsub+0x2cc>
    bd2e:	e0e5      	b.n	befc <__aeabi_dsub+0x498>
    bd30:	1c73      	adds	r3, r6, #1
    bd32:	469c      	mov	ip, r3
    bd34:	055b      	lsls	r3, r3, #21
    bd36:	0d5b      	lsrs	r3, r3, #21
    bd38:	2b01      	cmp	r3, #1
    bd3a:	dc00      	bgt.n	bd3e <__aeabi_dsub+0x2da>
    bd3c:	e09f      	b.n	be7e <__aeabi_dsub+0x41a>
    bd3e:	4b1a      	ldr	r3, [pc, #104]	; (bda8 <__aeabi_dsub+0x344>)
    bd40:	459c      	cmp	ip, r3
    bd42:	d100      	bne.n	bd46 <__aeabi_dsub+0x2e2>
    bd44:	e0c5      	b.n	bed2 <__aeabi_dsub+0x46e>
    bd46:	4452      	add	r2, sl
    bd48:	4552      	cmp	r2, sl
    bd4a:	4180      	sbcs	r0, r0
    bd4c:	1864      	adds	r4, r4, r1
    bd4e:	4240      	negs	r0, r0
    bd50:	1824      	adds	r4, r4, r0
    bd52:	07e7      	lsls	r7, r4, #31
    bd54:	0852      	lsrs	r2, r2, #1
    bd56:	4317      	orrs	r7, r2
    bd58:	0864      	lsrs	r4, r4, #1
    bd5a:	4666      	mov	r6, ip
    bd5c:	e708      	b.n	bb70 <__aeabi_dsub+0x10c>
    bd5e:	4812      	ldr	r0, [pc, #72]	; (bda8 <__aeabi_dsub+0x344>)
    bd60:	4285      	cmp	r5, r0
    bd62:	d100      	bne.n	bd66 <__aeabi_dsub+0x302>
    bd64:	e085      	b.n	be72 <__aeabi_dsub+0x40e>
    bd66:	001d      	movs	r5, r3
    bd68:	e6bc      	b.n	bae4 <__aeabi_dsub+0x80>
    bd6a:	0029      	movs	r1, r5
    bd6c:	3e1f      	subs	r6, #31
    bd6e:	40f1      	lsrs	r1, r6
    bd70:	2b20      	cmp	r3, #32
    bd72:	d100      	bne.n	bd76 <__aeabi_dsub+0x312>
    bd74:	e07f      	b.n	be76 <__aeabi_dsub+0x412>
    bd76:	2240      	movs	r2, #64	; 0x40
    bd78:	1ad3      	subs	r3, r2, r3
    bd7a:	409d      	lsls	r5, r3
    bd7c:	432f      	orrs	r7, r5
    bd7e:	1e7d      	subs	r5, r7, #1
    bd80:	41af      	sbcs	r7, r5
    bd82:	2400      	movs	r4, #0
    bd84:	430f      	orrs	r7, r1
    bd86:	2600      	movs	r6, #0
    bd88:	e78e      	b.n	bca8 <__aeabi_dsub+0x244>
    bd8a:	002b      	movs	r3, r5
    bd8c:	000f      	movs	r7, r1
    bd8e:	3b20      	subs	r3, #32
    bd90:	40df      	lsrs	r7, r3
    bd92:	2d20      	cmp	r5, #32
    bd94:	d071      	beq.n	be7a <__aeabi_dsub+0x416>
    bd96:	2340      	movs	r3, #64	; 0x40
    bd98:	1b5d      	subs	r5, r3, r5
    bd9a:	40a9      	lsls	r1, r5
    bd9c:	430a      	orrs	r2, r1
    bd9e:	1e51      	subs	r1, r2, #1
    bda0:	418a      	sbcs	r2, r1
    bda2:	2100      	movs	r1, #0
    bda4:	4317      	orrs	r7, r2
    bda6:	e6af      	b.n	bb08 <__aeabi_dsub+0xa4>
    bda8:	000007ff 	.word	0x000007ff
    bdac:	ff7fffff 	.word	0xff7fffff
    bdb0:	800fffff 	.word	0x800fffff
    bdb4:	2e00      	cmp	r6, #0
    bdb6:	d03e      	beq.n	be36 <__aeabi_dsub+0x3d2>
    bdb8:	4eb3      	ldr	r6, [pc, #716]	; (c088 <__aeabi_dsub+0x624>)
    bdba:	45b4      	cmp	ip, r6
    bdbc:	d045      	beq.n	be4a <__aeabi_dsub+0x3e6>
    bdbe:	2680      	movs	r6, #128	; 0x80
    bdc0:	0436      	lsls	r6, r6, #16
    bdc2:	426d      	negs	r5, r5
    bdc4:	4334      	orrs	r4, r6
    bdc6:	2d38      	cmp	r5, #56	; 0x38
    bdc8:	dd00      	ble.n	bdcc <__aeabi_dsub+0x368>
    bdca:	e0a8      	b.n	bf1e <__aeabi_dsub+0x4ba>
    bdcc:	2d1f      	cmp	r5, #31
    bdce:	dd00      	ble.n	bdd2 <__aeabi_dsub+0x36e>
    bdd0:	e11f      	b.n	c012 <__aeabi_dsub+0x5ae>
    bdd2:	2620      	movs	r6, #32
    bdd4:	0027      	movs	r7, r4
    bdd6:	4650      	mov	r0, sl
    bdd8:	1b76      	subs	r6, r6, r5
    bdda:	40b7      	lsls	r7, r6
    bddc:	40e8      	lsrs	r0, r5
    bdde:	4307      	orrs	r7, r0
    bde0:	4650      	mov	r0, sl
    bde2:	40b0      	lsls	r0, r6
    bde4:	1e46      	subs	r6, r0, #1
    bde6:	41b0      	sbcs	r0, r6
    bde8:	40ec      	lsrs	r4, r5
    bdea:	4338      	orrs	r0, r7
    bdec:	1a17      	subs	r7, r2, r0
    bdee:	42ba      	cmp	r2, r7
    bdf0:	4192      	sbcs	r2, r2
    bdf2:	1b0c      	subs	r4, r1, r4
    bdf4:	4252      	negs	r2, r2
    bdf6:	1aa4      	subs	r4, r4, r2
    bdf8:	4666      	mov	r6, ip
    bdfa:	4698      	mov	r8, r3
    bdfc:	e68b      	b.n	bb16 <__aeabi_dsub+0xb2>
    bdfe:	4664      	mov	r4, ip
    be00:	4667      	mov	r7, ip
    be02:	432c      	orrs	r4, r5
    be04:	d000      	beq.n	be08 <__aeabi_dsub+0x3a4>
    be06:	e68b      	b.n	bb20 <__aeabi_dsub+0xbc>
    be08:	2500      	movs	r5, #0
    be0a:	2600      	movs	r6, #0
    be0c:	2700      	movs	r7, #0
    be0e:	e6ea      	b.n	bbe6 <__aeabi_dsub+0x182>
    be10:	001e      	movs	r6, r3
    be12:	e6ad      	b.n	bb70 <__aeabi_dsub+0x10c>
    be14:	2b1f      	cmp	r3, #31
    be16:	dc60      	bgt.n	beda <__aeabi_dsub+0x476>
    be18:	2720      	movs	r7, #32
    be1a:	1af8      	subs	r0, r7, r3
    be1c:	000f      	movs	r7, r1
    be1e:	4684      	mov	ip, r0
    be20:	4087      	lsls	r7, r0
    be22:	0010      	movs	r0, r2
    be24:	40d8      	lsrs	r0, r3
    be26:	4307      	orrs	r7, r0
    be28:	4660      	mov	r0, ip
    be2a:	4082      	lsls	r2, r0
    be2c:	1e50      	subs	r0, r2, #1
    be2e:	4182      	sbcs	r2, r0
    be30:	40d9      	lsrs	r1, r3
    be32:	4317      	orrs	r7, r2
    be34:	e6f5      	b.n	bc22 <__aeabi_dsub+0x1be>
    be36:	0026      	movs	r6, r4
    be38:	4650      	mov	r0, sl
    be3a:	4306      	orrs	r6, r0
    be3c:	d005      	beq.n	be4a <__aeabi_dsub+0x3e6>
    be3e:	43ed      	mvns	r5, r5
    be40:	2d00      	cmp	r5, #0
    be42:	d0d3      	beq.n	bdec <__aeabi_dsub+0x388>
    be44:	4e90      	ldr	r6, [pc, #576]	; (c088 <__aeabi_dsub+0x624>)
    be46:	45b4      	cmp	ip, r6
    be48:	d1bd      	bne.n	bdc6 <__aeabi_dsub+0x362>
    be4a:	000c      	movs	r4, r1
    be4c:	0017      	movs	r7, r2
    be4e:	4666      	mov	r6, ip
    be50:	4698      	mov	r8, r3
    be52:	e68d      	b.n	bb70 <__aeabi_dsub+0x10c>
    be54:	488c      	ldr	r0, [pc, #560]	; (c088 <__aeabi_dsub+0x624>)
    be56:	4283      	cmp	r3, r0
    be58:	d00b      	beq.n	be72 <__aeabi_dsub+0x40e>
    be5a:	4663      	mov	r3, ip
    be5c:	e6d9      	b.n	bc12 <__aeabi_dsub+0x1ae>
    be5e:	2d00      	cmp	r5, #0
    be60:	d000      	beq.n	be64 <__aeabi_dsub+0x400>
    be62:	e096      	b.n	bf92 <__aeabi_dsub+0x52e>
    be64:	0008      	movs	r0, r1
    be66:	4310      	orrs	r0, r2
    be68:	d100      	bne.n	be6c <__aeabi_dsub+0x408>
    be6a:	e0e2      	b.n	c032 <__aeabi_dsub+0x5ce>
    be6c:	000c      	movs	r4, r1
    be6e:	0017      	movs	r7, r2
    be70:	4698      	mov	r8, r3
    be72:	4e85      	ldr	r6, [pc, #532]	; (c088 <__aeabi_dsub+0x624>)
    be74:	e67c      	b.n	bb70 <__aeabi_dsub+0x10c>
    be76:	2500      	movs	r5, #0
    be78:	e780      	b.n	bd7c <__aeabi_dsub+0x318>
    be7a:	2100      	movs	r1, #0
    be7c:	e78e      	b.n	bd9c <__aeabi_dsub+0x338>
    be7e:	0023      	movs	r3, r4
    be80:	4650      	mov	r0, sl
    be82:	4303      	orrs	r3, r0
    be84:	2e00      	cmp	r6, #0
    be86:	d000      	beq.n	be8a <__aeabi_dsub+0x426>
    be88:	e0a8      	b.n	bfdc <__aeabi_dsub+0x578>
    be8a:	2b00      	cmp	r3, #0
    be8c:	d100      	bne.n	be90 <__aeabi_dsub+0x42c>
    be8e:	e0de      	b.n	c04e <__aeabi_dsub+0x5ea>
    be90:	000b      	movs	r3, r1
    be92:	4313      	orrs	r3, r2
    be94:	d100      	bne.n	be98 <__aeabi_dsub+0x434>
    be96:	e66b      	b.n	bb70 <__aeabi_dsub+0x10c>
    be98:	4452      	add	r2, sl
    be9a:	4552      	cmp	r2, sl
    be9c:	4180      	sbcs	r0, r0
    be9e:	1864      	adds	r4, r4, r1
    bea0:	4240      	negs	r0, r0
    bea2:	1824      	adds	r4, r4, r0
    bea4:	0017      	movs	r7, r2
    bea6:	0223      	lsls	r3, r4, #8
    bea8:	d400      	bmi.n	beac <__aeabi_dsub+0x448>
    beaa:	e6fd      	b.n	bca8 <__aeabi_dsub+0x244>
    beac:	4b77      	ldr	r3, [pc, #476]	; (c08c <__aeabi_dsub+0x628>)
    beae:	4666      	mov	r6, ip
    beb0:	401c      	ands	r4, r3
    beb2:	e65d      	b.n	bb70 <__aeabi_dsub+0x10c>
    beb4:	0025      	movs	r5, r4
    beb6:	4650      	mov	r0, sl
    beb8:	4305      	orrs	r5, r0
    beba:	2e00      	cmp	r6, #0
    bebc:	d1cf      	bne.n	be5e <__aeabi_dsub+0x3fa>
    bebe:	2d00      	cmp	r5, #0
    bec0:	d14f      	bne.n	bf62 <__aeabi_dsub+0x4fe>
    bec2:	000c      	movs	r4, r1
    bec4:	4314      	orrs	r4, r2
    bec6:	d100      	bne.n	beca <__aeabi_dsub+0x466>
    bec8:	e0a0      	b.n	c00c <__aeabi_dsub+0x5a8>
    beca:	000c      	movs	r4, r1
    becc:	0017      	movs	r7, r2
    bece:	4698      	mov	r8, r3
    bed0:	e64e      	b.n	bb70 <__aeabi_dsub+0x10c>
    bed2:	4666      	mov	r6, ip
    bed4:	2400      	movs	r4, #0
    bed6:	2700      	movs	r7, #0
    bed8:	e685      	b.n	bbe6 <__aeabi_dsub+0x182>
    beda:	001f      	movs	r7, r3
    bedc:	0008      	movs	r0, r1
    bede:	3f20      	subs	r7, #32
    bee0:	40f8      	lsrs	r0, r7
    bee2:	0007      	movs	r7, r0
    bee4:	2b20      	cmp	r3, #32
    bee6:	d100      	bne.n	beea <__aeabi_dsub+0x486>
    bee8:	e08e      	b.n	c008 <__aeabi_dsub+0x5a4>
    beea:	2040      	movs	r0, #64	; 0x40
    beec:	1ac3      	subs	r3, r0, r3
    beee:	4099      	lsls	r1, r3
    bef0:	430a      	orrs	r2, r1
    bef2:	1e51      	subs	r1, r2, #1
    bef4:	418a      	sbcs	r2, r1
    bef6:	2100      	movs	r1, #0
    bef8:	4317      	orrs	r7, r2
    befa:	e692      	b.n	bc22 <__aeabi_dsub+0x1be>
    befc:	2e00      	cmp	r6, #0
    befe:	d114      	bne.n	bf2a <__aeabi_dsub+0x4c6>
    bf00:	0026      	movs	r6, r4
    bf02:	4650      	mov	r0, sl
    bf04:	4306      	orrs	r6, r0
    bf06:	d062      	beq.n	bfce <__aeabi_dsub+0x56a>
    bf08:	43db      	mvns	r3, r3
    bf0a:	2b00      	cmp	r3, #0
    bf0c:	d15c      	bne.n	bfc8 <__aeabi_dsub+0x564>
    bf0e:	1887      	adds	r7, r0, r2
    bf10:	4297      	cmp	r7, r2
    bf12:	4192      	sbcs	r2, r2
    bf14:	1864      	adds	r4, r4, r1
    bf16:	4252      	negs	r2, r2
    bf18:	18a4      	adds	r4, r4, r2
    bf1a:	4666      	mov	r6, ip
    bf1c:	e687      	b.n	bc2e <__aeabi_dsub+0x1ca>
    bf1e:	4650      	mov	r0, sl
    bf20:	4320      	orrs	r0, r4
    bf22:	1e44      	subs	r4, r0, #1
    bf24:	41a0      	sbcs	r0, r4
    bf26:	2400      	movs	r4, #0
    bf28:	e760      	b.n	bdec <__aeabi_dsub+0x388>
    bf2a:	4e57      	ldr	r6, [pc, #348]	; (c088 <__aeabi_dsub+0x624>)
    bf2c:	45b4      	cmp	ip, r6
    bf2e:	d04e      	beq.n	bfce <__aeabi_dsub+0x56a>
    bf30:	2680      	movs	r6, #128	; 0x80
    bf32:	0436      	lsls	r6, r6, #16
    bf34:	425b      	negs	r3, r3
    bf36:	4334      	orrs	r4, r6
    bf38:	2b38      	cmp	r3, #56	; 0x38
    bf3a:	dd00      	ble.n	bf3e <__aeabi_dsub+0x4da>
    bf3c:	e07f      	b.n	c03e <__aeabi_dsub+0x5da>
    bf3e:	2b1f      	cmp	r3, #31
    bf40:	dd00      	ble.n	bf44 <__aeabi_dsub+0x4e0>
    bf42:	e08b      	b.n	c05c <__aeabi_dsub+0x5f8>
    bf44:	2620      	movs	r6, #32
    bf46:	0027      	movs	r7, r4
    bf48:	4650      	mov	r0, sl
    bf4a:	1af6      	subs	r6, r6, r3
    bf4c:	40b7      	lsls	r7, r6
    bf4e:	40d8      	lsrs	r0, r3
    bf50:	4307      	orrs	r7, r0
    bf52:	4650      	mov	r0, sl
    bf54:	40b0      	lsls	r0, r6
    bf56:	1e46      	subs	r6, r0, #1
    bf58:	41b0      	sbcs	r0, r6
    bf5a:	4307      	orrs	r7, r0
    bf5c:	40dc      	lsrs	r4, r3
    bf5e:	18bf      	adds	r7, r7, r2
    bf60:	e7d6      	b.n	bf10 <__aeabi_dsub+0x4ac>
    bf62:	000d      	movs	r5, r1
    bf64:	4315      	orrs	r5, r2
    bf66:	d100      	bne.n	bf6a <__aeabi_dsub+0x506>
    bf68:	e602      	b.n	bb70 <__aeabi_dsub+0x10c>
    bf6a:	4650      	mov	r0, sl
    bf6c:	1a80      	subs	r0, r0, r2
    bf6e:	4582      	cmp	sl, r0
    bf70:	41bf      	sbcs	r7, r7
    bf72:	1a65      	subs	r5, r4, r1
    bf74:	427f      	negs	r7, r7
    bf76:	1bed      	subs	r5, r5, r7
    bf78:	4684      	mov	ip, r0
    bf7a:	0228      	lsls	r0, r5, #8
    bf7c:	d400      	bmi.n	bf80 <__aeabi_dsub+0x51c>
    bf7e:	e68d      	b.n	bc9c <__aeabi_dsub+0x238>
    bf80:	4650      	mov	r0, sl
    bf82:	1a17      	subs	r7, r2, r0
    bf84:	42ba      	cmp	r2, r7
    bf86:	4192      	sbcs	r2, r2
    bf88:	1b0c      	subs	r4, r1, r4
    bf8a:	4252      	negs	r2, r2
    bf8c:	1aa4      	subs	r4, r4, r2
    bf8e:	4698      	mov	r8, r3
    bf90:	e5ee      	b.n	bb70 <__aeabi_dsub+0x10c>
    bf92:	000d      	movs	r5, r1
    bf94:	4315      	orrs	r5, r2
    bf96:	d100      	bne.n	bf9a <__aeabi_dsub+0x536>
    bf98:	e76b      	b.n	be72 <__aeabi_dsub+0x40e>
    bf9a:	4650      	mov	r0, sl
    bf9c:	0767      	lsls	r7, r4, #29
    bf9e:	08c0      	lsrs	r0, r0, #3
    bfa0:	4307      	orrs	r7, r0
    bfa2:	2080      	movs	r0, #128	; 0x80
    bfa4:	08e4      	lsrs	r4, r4, #3
    bfa6:	0300      	lsls	r0, r0, #12
    bfa8:	4204      	tst	r4, r0
    bfaa:	d007      	beq.n	bfbc <__aeabi_dsub+0x558>
    bfac:	08cd      	lsrs	r5, r1, #3
    bfae:	4205      	tst	r5, r0
    bfb0:	d104      	bne.n	bfbc <__aeabi_dsub+0x558>
    bfb2:	002c      	movs	r4, r5
    bfb4:	4698      	mov	r8, r3
    bfb6:	08d7      	lsrs	r7, r2, #3
    bfb8:	0749      	lsls	r1, r1, #29
    bfba:	430f      	orrs	r7, r1
    bfbc:	0f7b      	lsrs	r3, r7, #29
    bfbe:	00e4      	lsls	r4, r4, #3
    bfc0:	431c      	orrs	r4, r3
    bfc2:	00ff      	lsls	r7, r7, #3
    bfc4:	4e30      	ldr	r6, [pc, #192]	; (c088 <__aeabi_dsub+0x624>)
    bfc6:	e5d3      	b.n	bb70 <__aeabi_dsub+0x10c>
    bfc8:	4e2f      	ldr	r6, [pc, #188]	; (c088 <__aeabi_dsub+0x624>)
    bfca:	45b4      	cmp	ip, r6
    bfcc:	d1b4      	bne.n	bf38 <__aeabi_dsub+0x4d4>
    bfce:	000c      	movs	r4, r1
    bfd0:	0017      	movs	r7, r2
    bfd2:	4666      	mov	r6, ip
    bfd4:	e5cc      	b.n	bb70 <__aeabi_dsub+0x10c>
    bfd6:	2700      	movs	r7, #0
    bfd8:	2400      	movs	r4, #0
    bfda:	e5e8      	b.n	bbae <__aeabi_dsub+0x14a>
    bfdc:	2b00      	cmp	r3, #0
    bfde:	d039      	beq.n	c054 <__aeabi_dsub+0x5f0>
    bfe0:	000b      	movs	r3, r1
    bfe2:	4313      	orrs	r3, r2
    bfe4:	d100      	bne.n	bfe8 <__aeabi_dsub+0x584>
    bfe6:	e744      	b.n	be72 <__aeabi_dsub+0x40e>
    bfe8:	08c0      	lsrs	r0, r0, #3
    bfea:	0767      	lsls	r7, r4, #29
    bfec:	4307      	orrs	r7, r0
    bfee:	2080      	movs	r0, #128	; 0x80
    bff0:	08e4      	lsrs	r4, r4, #3
    bff2:	0300      	lsls	r0, r0, #12
    bff4:	4204      	tst	r4, r0
    bff6:	d0e1      	beq.n	bfbc <__aeabi_dsub+0x558>
    bff8:	08cb      	lsrs	r3, r1, #3
    bffa:	4203      	tst	r3, r0
    bffc:	d1de      	bne.n	bfbc <__aeabi_dsub+0x558>
    bffe:	08d7      	lsrs	r7, r2, #3
    c000:	0749      	lsls	r1, r1, #29
    c002:	430f      	orrs	r7, r1
    c004:	001c      	movs	r4, r3
    c006:	e7d9      	b.n	bfbc <__aeabi_dsub+0x558>
    c008:	2100      	movs	r1, #0
    c00a:	e771      	b.n	bef0 <__aeabi_dsub+0x48c>
    c00c:	2500      	movs	r5, #0
    c00e:	2700      	movs	r7, #0
    c010:	e5e9      	b.n	bbe6 <__aeabi_dsub+0x182>
    c012:	002e      	movs	r6, r5
    c014:	0027      	movs	r7, r4
    c016:	3e20      	subs	r6, #32
    c018:	40f7      	lsrs	r7, r6
    c01a:	2d20      	cmp	r5, #32
    c01c:	d02f      	beq.n	c07e <__aeabi_dsub+0x61a>
    c01e:	2640      	movs	r6, #64	; 0x40
    c020:	1b75      	subs	r5, r6, r5
    c022:	40ac      	lsls	r4, r5
    c024:	4650      	mov	r0, sl
    c026:	4320      	orrs	r0, r4
    c028:	1e44      	subs	r4, r0, #1
    c02a:	41a0      	sbcs	r0, r4
    c02c:	2400      	movs	r4, #0
    c02e:	4338      	orrs	r0, r7
    c030:	e6dc      	b.n	bdec <__aeabi_dsub+0x388>
    c032:	2480      	movs	r4, #128	; 0x80
    c034:	2500      	movs	r5, #0
    c036:	0324      	lsls	r4, r4, #12
    c038:	4e13      	ldr	r6, [pc, #76]	; (c088 <__aeabi_dsub+0x624>)
    c03a:	2700      	movs	r7, #0
    c03c:	e5d3      	b.n	bbe6 <__aeabi_dsub+0x182>
    c03e:	4650      	mov	r0, sl
    c040:	4320      	orrs	r0, r4
    c042:	0007      	movs	r7, r0
    c044:	1e78      	subs	r0, r7, #1
    c046:	4187      	sbcs	r7, r0
    c048:	2400      	movs	r4, #0
    c04a:	18bf      	adds	r7, r7, r2
    c04c:	e760      	b.n	bf10 <__aeabi_dsub+0x4ac>
    c04e:	000c      	movs	r4, r1
    c050:	0017      	movs	r7, r2
    c052:	e58d      	b.n	bb70 <__aeabi_dsub+0x10c>
    c054:	000c      	movs	r4, r1
    c056:	0017      	movs	r7, r2
    c058:	4e0b      	ldr	r6, [pc, #44]	; (c088 <__aeabi_dsub+0x624>)
    c05a:	e589      	b.n	bb70 <__aeabi_dsub+0x10c>
    c05c:	001e      	movs	r6, r3
    c05e:	0027      	movs	r7, r4
    c060:	3e20      	subs	r6, #32
    c062:	40f7      	lsrs	r7, r6
    c064:	2b20      	cmp	r3, #32
    c066:	d00c      	beq.n	c082 <__aeabi_dsub+0x61e>
    c068:	2640      	movs	r6, #64	; 0x40
    c06a:	1af3      	subs	r3, r6, r3
    c06c:	409c      	lsls	r4, r3
    c06e:	4650      	mov	r0, sl
    c070:	4320      	orrs	r0, r4
    c072:	1e44      	subs	r4, r0, #1
    c074:	41a0      	sbcs	r0, r4
    c076:	4307      	orrs	r7, r0
    c078:	2400      	movs	r4, #0
    c07a:	18bf      	adds	r7, r7, r2
    c07c:	e748      	b.n	bf10 <__aeabi_dsub+0x4ac>
    c07e:	2400      	movs	r4, #0
    c080:	e7d0      	b.n	c024 <__aeabi_dsub+0x5c0>
    c082:	2400      	movs	r4, #0
    c084:	e7f3      	b.n	c06e <__aeabi_dsub+0x60a>
    c086:	46c0      	nop			; (mov r8, r8)
    c088:	000007ff 	.word	0x000007ff
    c08c:	ff7fffff 	.word	0xff7fffff

0000c090 <__aeabi_d2iz>:
    c090:	b530      	push	{r4, r5, lr}
    c092:	4d13      	ldr	r5, [pc, #76]	; (c0e0 <__aeabi_d2iz+0x50>)
    c094:	030a      	lsls	r2, r1, #12
    c096:	004b      	lsls	r3, r1, #1
    c098:	0b12      	lsrs	r2, r2, #12
    c09a:	0d5b      	lsrs	r3, r3, #21
    c09c:	0fc9      	lsrs	r1, r1, #31
    c09e:	2400      	movs	r4, #0
    c0a0:	42ab      	cmp	r3, r5
    c0a2:	dd10      	ble.n	c0c6 <__aeabi_d2iz+0x36>
    c0a4:	4c0f      	ldr	r4, [pc, #60]	; (c0e4 <__aeabi_d2iz+0x54>)
    c0a6:	42a3      	cmp	r3, r4
    c0a8:	dc0f      	bgt.n	c0ca <__aeabi_d2iz+0x3a>
    c0aa:	2480      	movs	r4, #128	; 0x80
    c0ac:	4d0e      	ldr	r5, [pc, #56]	; (c0e8 <__aeabi_d2iz+0x58>)
    c0ae:	0364      	lsls	r4, r4, #13
    c0b0:	4322      	orrs	r2, r4
    c0b2:	1aed      	subs	r5, r5, r3
    c0b4:	2d1f      	cmp	r5, #31
    c0b6:	dd0b      	ble.n	c0d0 <__aeabi_d2iz+0x40>
    c0b8:	480c      	ldr	r0, [pc, #48]	; (c0ec <__aeabi_d2iz+0x5c>)
    c0ba:	1ac3      	subs	r3, r0, r3
    c0bc:	40da      	lsrs	r2, r3
    c0be:	4254      	negs	r4, r2
    c0c0:	2900      	cmp	r1, #0
    c0c2:	d100      	bne.n	c0c6 <__aeabi_d2iz+0x36>
    c0c4:	0014      	movs	r4, r2
    c0c6:	0020      	movs	r0, r4
    c0c8:	bd30      	pop	{r4, r5, pc}
    c0ca:	4b09      	ldr	r3, [pc, #36]	; (c0f0 <__aeabi_d2iz+0x60>)
    c0cc:	18cc      	adds	r4, r1, r3
    c0ce:	e7fa      	b.n	c0c6 <__aeabi_d2iz+0x36>
    c0d0:	4c08      	ldr	r4, [pc, #32]	; (c0f4 <__aeabi_d2iz+0x64>)
    c0d2:	40e8      	lsrs	r0, r5
    c0d4:	46a4      	mov	ip, r4
    c0d6:	4463      	add	r3, ip
    c0d8:	409a      	lsls	r2, r3
    c0da:	4302      	orrs	r2, r0
    c0dc:	e7ef      	b.n	c0be <__aeabi_d2iz+0x2e>
    c0de:	46c0      	nop			; (mov r8, r8)
    c0e0:	000003fe 	.word	0x000003fe
    c0e4:	0000041d 	.word	0x0000041d
    c0e8:	00000433 	.word	0x00000433
    c0ec:	00000413 	.word	0x00000413
    c0f0:	7fffffff 	.word	0x7fffffff
    c0f4:	fffffbed 	.word	0xfffffbed

0000c0f8 <__aeabi_ui2d>:
    c0f8:	b510      	push	{r4, lr}
    c0fa:	1e04      	subs	r4, r0, #0
    c0fc:	d028      	beq.n	c150 <__aeabi_ui2d+0x58>
    c0fe:	f7fd fbad 	bl	985c <__clzsi2>
    c102:	4b15      	ldr	r3, [pc, #84]	; (c158 <__aeabi_ui2d+0x60>)
    c104:	4a15      	ldr	r2, [pc, #84]	; (c15c <__aeabi_ui2d+0x64>)
    c106:	1a1b      	subs	r3, r3, r0
    c108:	1ad2      	subs	r2, r2, r3
    c10a:	2a1f      	cmp	r2, #31
    c10c:	dd15      	ble.n	c13a <__aeabi_ui2d+0x42>
    c10e:	4a14      	ldr	r2, [pc, #80]	; (c160 <__aeabi_ui2d+0x68>)
    c110:	1ad2      	subs	r2, r2, r3
    c112:	4094      	lsls	r4, r2
    c114:	2200      	movs	r2, #0
    c116:	0324      	lsls	r4, r4, #12
    c118:	055b      	lsls	r3, r3, #21
    c11a:	0b24      	lsrs	r4, r4, #12
    c11c:	0d5b      	lsrs	r3, r3, #21
    c11e:	2100      	movs	r1, #0
    c120:	0010      	movs	r0, r2
    c122:	0324      	lsls	r4, r4, #12
    c124:	0d0a      	lsrs	r2, r1, #20
    c126:	0b24      	lsrs	r4, r4, #12
    c128:	0512      	lsls	r2, r2, #20
    c12a:	4322      	orrs	r2, r4
    c12c:	4c0d      	ldr	r4, [pc, #52]	; (c164 <__aeabi_ui2d+0x6c>)
    c12e:	051b      	lsls	r3, r3, #20
    c130:	4022      	ands	r2, r4
    c132:	4313      	orrs	r3, r2
    c134:	005b      	lsls	r3, r3, #1
    c136:	0859      	lsrs	r1, r3, #1
    c138:	bd10      	pop	{r4, pc}
    c13a:	0021      	movs	r1, r4
    c13c:	4091      	lsls	r1, r2
    c13e:	000a      	movs	r2, r1
    c140:	210b      	movs	r1, #11
    c142:	1a08      	subs	r0, r1, r0
    c144:	40c4      	lsrs	r4, r0
    c146:	055b      	lsls	r3, r3, #21
    c148:	0324      	lsls	r4, r4, #12
    c14a:	0b24      	lsrs	r4, r4, #12
    c14c:	0d5b      	lsrs	r3, r3, #21
    c14e:	e7e6      	b.n	c11e <__aeabi_ui2d+0x26>
    c150:	2300      	movs	r3, #0
    c152:	2400      	movs	r4, #0
    c154:	2200      	movs	r2, #0
    c156:	e7e2      	b.n	c11e <__aeabi_ui2d+0x26>
    c158:	0000041e 	.word	0x0000041e
    c15c:	00000433 	.word	0x00000433
    c160:	00000413 	.word	0x00000413
    c164:	800fffff 	.word	0x800fffff

0000c168 <__aeabi_f2d>:
    c168:	0041      	lsls	r1, r0, #1
    c16a:	0e09      	lsrs	r1, r1, #24
    c16c:	1c4b      	adds	r3, r1, #1
    c16e:	b570      	push	{r4, r5, r6, lr}
    c170:	b2db      	uxtb	r3, r3
    c172:	0246      	lsls	r6, r0, #9
    c174:	0a75      	lsrs	r5, r6, #9
    c176:	0fc4      	lsrs	r4, r0, #31
    c178:	2b01      	cmp	r3, #1
    c17a:	dd14      	ble.n	c1a6 <__aeabi_f2d+0x3e>
    c17c:	23e0      	movs	r3, #224	; 0xe0
    c17e:	009b      	lsls	r3, r3, #2
    c180:	076d      	lsls	r5, r5, #29
    c182:	0b36      	lsrs	r6, r6, #12
    c184:	18cb      	adds	r3, r1, r3
    c186:	2100      	movs	r1, #0
    c188:	0d0a      	lsrs	r2, r1, #20
    c18a:	0028      	movs	r0, r5
    c18c:	0512      	lsls	r2, r2, #20
    c18e:	4d1c      	ldr	r5, [pc, #112]	; (c200 <__aeabi_f2d+0x98>)
    c190:	4332      	orrs	r2, r6
    c192:	055b      	lsls	r3, r3, #21
    c194:	402a      	ands	r2, r5
    c196:	085b      	lsrs	r3, r3, #1
    c198:	4313      	orrs	r3, r2
    c19a:	005b      	lsls	r3, r3, #1
    c19c:	07e4      	lsls	r4, r4, #31
    c19e:	085b      	lsrs	r3, r3, #1
    c1a0:	4323      	orrs	r3, r4
    c1a2:	0019      	movs	r1, r3
    c1a4:	bd70      	pop	{r4, r5, r6, pc}
    c1a6:	2900      	cmp	r1, #0
    c1a8:	d114      	bne.n	c1d4 <__aeabi_f2d+0x6c>
    c1aa:	2d00      	cmp	r5, #0
    c1ac:	d01e      	beq.n	c1ec <__aeabi_f2d+0x84>
    c1ae:	0028      	movs	r0, r5
    c1b0:	f7fd fb54 	bl	985c <__clzsi2>
    c1b4:	280a      	cmp	r0, #10
    c1b6:	dc1c      	bgt.n	c1f2 <__aeabi_f2d+0x8a>
    c1b8:	230b      	movs	r3, #11
    c1ba:	002a      	movs	r2, r5
    c1bc:	1a1b      	subs	r3, r3, r0
    c1be:	40da      	lsrs	r2, r3
    c1c0:	0003      	movs	r3, r0
    c1c2:	3315      	adds	r3, #21
    c1c4:	409d      	lsls	r5, r3
    c1c6:	4b0f      	ldr	r3, [pc, #60]	; (c204 <__aeabi_f2d+0x9c>)
    c1c8:	0312      	lsls	r2, r2, #12
    c1ca:	1a1b      	subs	r3, r3, r0
    c1cc:	055b      	lsls	r3, r3, #21
    c1ce:	0b16      	lsrs	r6, r2, #12
    c1d0:	0d5b      	lsrs	r3, r3, #21
    c1d2:	e7d8      	b.n	c186 <__aeabi_f2d+0x1e>
    c1d4:	2d00      	cmp	r5, #0
    c1d6:	d006      	beq.n	c1e6 <__aeabi_f2d+0x7e>
    c1d8:	0b32      	lsrs	r2, r6, #12
    c1da:	2680      	movs	r6, #128	; 0x80
    c1dc:	0336      	lsls	r6, r6, #12
    c1de:	076d      	lsls	r5, r5, #29
    c1e0:	4316      	orrs	r6, r2
    c1e2:	4b09      	ldr	r3, [pc, #36]	; (c208 <__aeabi_f2d+0xa0>)
    c1e4:	e7cf      	b.n	c186 <__aeabi_f2d+0x1e>
    c1e6:	4b08      	ldr	r3, [pc, #32]	; (c208 <__aeabi_f2d+0xa0>)
    c1e8:	2600      	movs	r6, #0
    c1ea:	e7cc      	b.n	c186 <__aeabi_f2d+0x1e>
    c1ec:	2300      	movs	r3, #0
    c1ee:	2600      	movs	r6, #0
    c1f0:	e7c9      	b.n	c186 <__aeabi_f2d+0x1e>
    c1f2:	0003      	movs	r3, r0
    c1f4:	002a      	movs	r2, r5
    c1f6:	3b0b      	subs	r3, #11
    c1f8:	409a      	lsls	r2, r3
    c1fa:	2500      	movs	r5, #0
    c1fc:	e7e3      	b.n	c1c6 <__aeabi_f2d+0x5e>
    c1fe:	46c0      	nop			; (mov r8, r8)
    c200:	800fffff 	.word	0x800fffff
    c204:	00000389 	.word	0x00000389
    c208:	000007ff 	.word	0x000007ff

0000c20c <__aeabi_d2f>:
    c20c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c20e:	004c      	lsls	r4, r1, #1
    c210:	0d64      	lsrs	r4, r4, #21
    c212:	030b      	lsls	r3, r1, #12
    c214:	1c62      	adds	r2, r4, #1
    c216:	0f45      	lsrs	r5, r0, #29
    c218:	0a5b      	lsrs	r3, r3, #9
    c21a:	0552      	lsls	r2, r2, #21
    c21c:	432b      	orrs	r3, r5
    c21e:	0fc9      	lsrs	r1, r1, #31
    c220:	00c5      	lsls	r5, r0, #3
    c222:	0d52      	lsrs	r2, r2, #21
    c224:	2a01      	cmp	r2, #1
    c226:	dd28      	ble.n	c27a <__aeabi_d2f+0x6e>
    c228:	4a3a      	ldr	r2, [pc, #232]	; (c314 <__aeabi_d2f+0x108>)
    c22a:	18a6      	adds	r6, r4, r2
    c22c:	2efe      	cmp	r6, #254	; 0xfe
    c22e:	dc1b      	bgt.n	c268 <__aeabi_d2f+0x5c>
    c230:	2e00      	cmp	r6, #0
    c232:	dd3e      	ble.n	c2b2 <__aeabi_d2f+0xa6>
    c234:	0180      	lsls	r0, r0, #6
    c236:	0002      	movs	r2, r0
    c238:	1e50      	subs	r0, r2, #1
    c23a:	4182      	sbcs	r2, r0
    c23c:	0f6d      	lsrs	r5, r5, #29
    c23e:	432a      	orrs	r2, r5
    c240:	00db      	lsls	r3, r3, #3
    c242:	4313      	orrs	r3, r2
    c244:	075a      	lsls	r2, r3, #29
    c246:	d004      	beq.n	c252 <__aeabi_d2f+0x46>
    c248:	220f      	movs	r2, #15
    c24a:	401a      	ands	r2, r3
    c24c:	2a04      	cmp	r2, #4
    c24e:	d000      	beq.n	c252 <__aeabi_d2f+0x46>
    c250:	3304      	adds	r3, #4
    c252:	2280      	movs	r2, #128	; 0x80
    c254:	04d2      	lsls	r2, r2, #19
    c256:	401a      	ands	r2, r3
    c258:	d05a      	beq.n	c310 <__aeabi_d2f+0x104>
    c25a:	3601      	adds	r6, #1
    c25c:	2eff      	cmp	r6, #255	; 0xff
    c25e:	d003      	beq.n	c268 <__aeabi_d2f+0x5c>
    c260:	019b      	lsls	r3, r3, #6
    c262:	0a5b      	lsrs	r3, r3, #9
    c264:	b2f4      	uxtb	r4, r6
    c266:	e001      	b.n	c26c <__aeabi_d2f+0x60>
    c268:	24ff      	movs	r4, #255	; 0xff
    c26a:	2300      	movs	r3, #0
    c26c:	0258      	lsls	r0, r3, #9
    c26e:	05e4      	lsls	r4, r4, #23
    c270:	0a40      	lsrs	r0, r0, #9
    c272:	07c9      	lsls	r1, r1, #31
    c274:	4320      	orrs	r0, r4
    c276:	4308      	orrs	r0, r1
    c278:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c27a:	2c00      	cmp	r4, #0
    c27c:	d007      	beq.n	c28e <__aeabi_d2f+0x82>
    c27e:	431d      	orrs	r5, r3
    c280:	d0f2      	beq.n	c268 <__aeabi_d2f+0x5c>
    c282:	2080      	movs	r0, #128	; 0x80
    c284:	00db      	lsls	r3, r3, #3
    c286:	0480      	lsls	r0, r0, #18
    c288:	4303      	orrs	r3, r0
    c28a:	26ff      	movs	r6, #255	; 0xff
    c28c:	e7da      	b.n	c244 <__aeabi_d2f+0x38>
    c28e:	432b      	orrs	r3, r5
    c290:	d003      	beq.n	c29a <__aeabi_d2f+0x8e>
    c292:	2305      	movs	r3, #5
    c294:	08db      	lsrs	r3, r3, #3
    c296:	2cff      	cmp	r4, #255	; 0xff
    c298:	d003      	beq.n	c2a2 <__aeabi_d2f+0x96>
    c29a:	025b      	lsls	r3, r3, #9
    c29c:	0a5b      	lsrs	r3, r3, #9
    c29e:	b2e4      	uxtb	r4, r4
    c2a0:	e7e4      	b.n	c26c <__aeabi_d2f+0x60>
    c2a2:	2b00      	cmp	r3, #0
    c2a4:	d032      	beq.n	c30c <__aeabi_d2f+0x100>
    c2a6:	2080      	movs	r0, #128	; 0x80
    c2a8:	03c0      	lsls	r0, r0, #15
    c2aa:	4303      	orrs	r3, r0
    c2ac:	025b      	lsls	r3, r3, #9
    c2ae:	0a5b      	lsrs	r3, r3, #9
    c2b0:	e7dc      	b.n	c26c <__aeabi_d2f+0x60>
    c2b2:	0032      	movs	r2, r6
    c2b4:	3217      	adds	r2, #23
    c2b6:	db14      	blt.n	c2e2 <__aeabi_d2f+0xd6>
    c2b8:	2280      	movs	r2, #128	; 0x80
    c2ba:	271e      	movs	r7, #30
    c2bc:	0412      	lsls	r2, r2, #16
    c2be:	4313      	orrs	r3, r2
    c2c0:	1bbf      	subs	r7, r7, r6
    c2c2:	2f1f      	cmp	r7, #31
    c2c4:	dc0f      	bgt.n	c2e6 <__aeabi_d2f+0xda>
    c2c6:	4a14      	ldr	r2, [pc, #80]	; (c318 <__aeabi_d2f+0x10c>)
    c2c8:	4694      	mov	ip, r2
    c2ca:	4464      	add	r4, ip
    c2cc:	002a      	movs	r2, r5
    c2ce:	40a5      	lsls	r5, r4
    c2d0:	002e      	movs	r6, r5
    c2d2:	40a3      	lsls	r3, r4
    c2d4:	1e75      	subs	r5, r6, #1
    c2d6:	41ae      	sbcs	r6, r5
    c2d8:	40fa      	lsrs	r2, r7
    c2da:	4333      	orrs	r3, r6
    c2dc:	4313      	orrs	r3, r2
    c2de:	2600      	movs	r6, #0
    c2e0:	e7b0      	b.n	c244 <__aeabi_d2f+0x38>
    c2e2:	2400      	movs	r4, #0
    c2e4:	e7d5      	b.n	c292 <__aeabi_d2f+0x86>
    c2e6:	2202      	movs	r2, #2
    c2e8:	4252      	negs	r2, r2
    c2ea:	1b96      	subs	r6, r2, r6
    c2ec:	001a      	movs	r2, r3
    c2ee:	40f2      	lsrs	r2, r6
    c2f0:	2f20      	cmp	r7, #32
    c2f2:	d009      	beq.n	c308 <__aeabi_d2f+0xfc>
    c2f4:	4809      	ldr	r0, [pc, #36]	; (c31c <__aeabi_d2f+0x110>)
    c2f6:	4684      	mov	ip, r0
    c2f8:	4464      	add	r4, ip
    c2fa:	40a3      	lsls	r3, r4
    c2fc:	432b      	orrs	r3, r5
    c2fe:	1e5d      	subs	r5, r3, #1
    c300:	41ab      	sbcs	r3, r5
    c302:	2600      	movs	r6, #0
    c304:	4313      	orrs	r3, r2
    c306:	e79d      	b.n	c244 <__aeabi_d2f+0x38>
    c308:	2300      	movs	r3, #0
    c30a:	e7f7      	b.n	c2fc <__aeabi_d2f+0xf0>
    c30c:	2300      	movs	r3, #0
    c30e:	e7ad      	b.n	c26c <__aeabi_d2f+0x60>
    c310:	0034      	movs	r4, r6
    c312:	e7bf      	b.n	c294 <__aeabi_d2f+0x88>
    c314:	fffffc80 	.word	0xfffffc80
    c318:	fffffc82 	.word	0xfffffc82
    c31c:	fffffca2 	.word	0xfffffca2

0000c320 <__clzdi2>:
    c320:	b510      	push	{r4, lr}
    c322:	2900      	cmp	r1, #0
    c324:	d103      	bne.n	c32e <__clzdi2+0xe>
    c326:	f7fd fa99 	bl	985c <__clzsi2>
    c32a:	3020      	adds	r0, #32
    c32c:	e002      	b.n	c334 <__clzdi2+0x14>
    c32e:	1c08      	adds	r0, r1, #0
    c330:	f7fd fa94 	bl	985c <__clzsi2>
    c334:	bd10      	pop	{r4, pc}
    c336:	46c0      	nop			; (mov r8, r8)

0000c338 <__errno>:
    c338:	4b01      	ldr	r3, [pc, #4]	; (c340 <__errno+0x8>)
    c33a:	6818      	ldr	r0, [r3, #0]
    c33c:	4770      	bx	lr
    c33e:	46c0      	nop			; (mov r8, r8)
    c340:	2000010c 	.word	0x2000010c

0000c344 <__libc_init_array>:
    c344:	b570      	push	{r4, r5, r6, lr}
    c346:	2600      	movs	r6, #0
    c348:	4d0c      	ldr	r5, [pc, #48]	; (c37c <__libc_init_array+0x38>)
    c34a:	4c0d      	ldr	r4, [pc, #52]	; (c380 <__libc_init_array+0x3c>)
    c34c:	1b64      	subs	r4, r4, r5
    c34e:	10a4      	asrs	r4, r4, #2
    c350:	42a6      	cmp	r6, r4
    c352:	d109      	bne.n	c368 <__libc_init_array+0x24>
    c354:	2600      	movs	r6, #0
    c356:	f000 fc81 	bl	cc5c <_init>
    c35a:	4d0a      	ldr	r5, [pc, #40]	; (c384 <__libc_init_array+0x40>)
    c35c:	4c0a      	ldr	r4, [pc, #40]	; (c388 <__libc_init_array+0x44>)
    c35e:	1b64      	subs	r4, r4, r5
    c360:	10a4      	asrs	r4, r4, #2
    c362:	42a6      	cmp	r6, r4
    c364:	d105      	bne.n	c372 <__libc_init_array+0x2e>
    c366:	bd70      	pop	{r4, r5, r6, pc}
    c368:	00b3      	lsls	r3, r6, #2
    c36a:	58eb      	ldr	r3, [r5, r3]
    c36c:	4798      	blx	r3
    c36e:	3601      	adds	r6, #1
    c370:	e7ee      	b.n	c350 <__libc_init_array+0xc>
    c372:	00b3      	lsls	r3, r6, #2
    c374:	58eb      	ldr	r3, [r5, r3]
    c376:	4798      	blx	r3
    c378:	3601      	adds	r6, #1
    c37a:	e7f2      	b.n	c362 <__libc_init_array+0x1e>
    c37c:	0000cc68 	.word	0x0000cc68
    c380:	0000cc68 	.word	0x0000cc68
    c384:	0000cc68 	.word	0x0000cc68
    c388:	0000cc6c 	.word	0x0000cc6c

0000c38c <memcpy>:
    c38c:	2300      	movs	r3, #0
    c38e:	b510      	push	{r4, lr}
    c390:	429a      	cmp	r2, r3
    c392:	d100      	bne.n	c396 <memcpy+0xa>
    c394:	bd10      	pop	{r4, pc}
    c396:	5ccc      	ldrb	r4, [r1, r3]
    c398:	54c4      	strb	r4, [r0, r3]
    c39a:	3301      	adds	r3, #1
    c39c:	e7f8      	b.n	c390 <memcpy+0x4>

0000c39e <memset>:
    c39e:	0003      	movs	r3, r0
    c3a0:	1882      	adds	r2, r0, r2
    c3a2:	4293      	cmp	r3, r2
    c3a4:	d100      	bne.n	c3a8 <memset+0xa>
    c3a6:	4770      	bx	lr
    c3a8:	7019      	strb	r1, [r3, #0]
    c3aa:	3301      	adds	r3, #1
    c3ac:	e7f9      	b.n	c3a2 <memset+0x4>
    c3ae:	0000      	movs	r0, r0
    c3b0:	00000c94 	.word	0x00000c94
    c3b4:	00000f56 	.word	0x00000f56
    c3b8:	00000f56 	.word	0x00000f56
    c3bc:	00000f56 	.word	0x00000f56
    c3c0:	00000f56 	.word	0x00000f56
    c3c4:	00000f56 	.word	0x00000f56
    c3c8:	00000f56 	.word	0x00000f56
    c3cc:	00000f56 	.word	0x00000f56
    c3d0:	00000f56 	.word	0x00000f56
    c3d4:	00000f56 	.word	0x00000f56
    c3d8:	00000f56 	.word	0x00000f56
    c3dc:	00000f56 	.word	0x00000f56
    c3e0:	00000f56 	.word	0x00000f56
    c3e4:	00000f56 	.word	0x00000f56
    c3e8:	00000f56 	.word	0x00000f56
    c3ec:	00000f56 	.word	0x00000f56
    c3f0:	00000c7c 	.word	0x00000c7c
    c3f4:	00000f56 	.word	0x00000f56
    c3f8:	00000f56 	.word	0x00000f56
    c3fc:	00000f56 	.word	0x00000f56
    c400:	00000f56 	.word	0x00000f56
    c404:	00000f56 	.word	0x00000f56
    c408:	00000f56 	.word	0x00000f56
    c40c:	00000f56 	.word	0x00000f56
    c410:	00000f56 	.word	0x00000f56
    c414:	00000f56 	.word	0x00000f56
    c418:	00000f56 	.word	0x00000f56
    c41c:	00000f56 	.word	0x00000f56
    c420:	00000f56 	.word	0x00000f56
    c424:	00000f56 	.word	0x00000f56
    c428:	00000f56 	.word	0x00000f56
    c42c:	00000f56 	.word	0x00000f56
    c430:	00000c8c 	.word	0x00000c8c
    c434:	00000f56 	.word	0x00000f56
    c438:	00000f56 	.word	0x00000f56
    c43c:	00000f56 	.word	0x00000f56
    c440:	00000f56 	.word	0x00000f56
    c444:	00000f56 	.word	0x00000f56
    c448:	00000f56 	.word	0x00000f56
    c44c:	00000f56 	.word	0x00000f56
    c450:	00000f56 	.word	0x00000f56
    c454:	00000f56 	.word	0x00000f56
    c458:	00000f56 	.word	0x00000f56
    c45c:	00000f56 	.word	0x00000f56
    c460:	00000f56 	.word	0x00000f56
    c464:	00000f56 	.word	0x00000f56
    c468:	00000f56 	.word	0x00000f56
    c46c:	00000f56 	.word	0x00000f56
    c470:	00000c84 	.word	0x00000c84
    c474:	00000c64 	.word	0x00000c64
    c478:	00000c9c 	.word	0x00000c9c
    c47c:	00000c74 	.word	0x00000c74
    c480:	00000c6c 	.word	0x00000c6c
    c484:	00000002 	.word	0x00000002
    c488:	00000003 	.word	0x00000003
    c48c:	00000028 	.word	0x00000028
    c490:	00000029 	.word	0x00000029
    c494:	00000004 	.word	0x00000004
    c498:	00000005 	.word	0x00000005
    c49c:	00000006 	.word	0x00000006
    c4a0:	00000007 	.word	0x00000007
    c4a4:	0000ffff 	.word	0x0000ffff
    c4a8:	0000ffff 	.word	0x0000ffff
    c4ac:	00000022 	.word	0x00000022
    c4b0:	00000023 	.word	0x00000023
    c4b4:	0000ffff 	.word	0x0000ffff
    c4b8:	0000ffff 	.word	0x0000ffff
    c4bc:	0000ffff 	.word	0x0000ffff
    c4c0:	0000ffff 	.word	0x0000ffff
    c4c4:	00000008 	.word	0x00000008
    c4c8:	00000009 	.word	0x00000009
    c4cc:	0000000a 	.word	0x0000000a
    c4d0:	0000000b 	.word	0x0000000b

0000c4d4 <_tcc_intflag>:
    c4d4:	00000001 00000002 00000004 00000008     ................
    c4e4:	00001000 00002000 00004000 00008000     ..... ...@......
    c4f4:	00010000 00020000 00040000 00080000     ................
    c504:	80050000 000a800f 001e801b 80110014     ................
    c514:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
    c524:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
    c534:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
    c544:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
    c554:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
    c564:	80a500a0 00aa80af 00be80bb 80b100b4     ................
    c574:	00968093 8099009c 808d0088 00828087     ................
    c584:	01868183 8189018c 819d0198 01928197     ................
    c594:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
    c5a4:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
    c5b4:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
    c5c4:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
    c5d4:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
    c5e4:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
    c5f4:	81150110 011a811f 010e810b 81010104     ................
    c604:	03068303 8309030c 831d0318 03128317     ................
    c614:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
    c624:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
    c634:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
    c644:	83c503c0 03ca83cf 03de83db 83d103d4     ................
    c654:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
    c664:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
    c674:	83950390 039a839f 038e838b 83810384     ................
    c684:	82850280 028a828f 029e829b 82910294     ................
    c694:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
    c6a4:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
    c6b4:	82d502d0 02da82df 02ce82cb 82c102c4     ................
    c6c4:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
    c6d4:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
    c6e4:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
    c6f4:	02168213 8219021c 820d0208 02028207     ................
    c704:	0000209a 000026a6 000026a6 000026a6     . ...&...&...&..
    c714:	000020be 000020f2 00002112 00002134     . ... ...!..4!..
    c724:	000026a6 000026a6 00002158 00002186     .&...&..X!...!..
    c734:	000022d0 000022d0 00002322 0000232a     ."...".."#..*#..
    c744:	00002372 0000239c 000021ea 0000220a     r#...#...!..."..
    c754:	000022ae 000026a6 00002416 00002416     ."...&...$...$..
    c764:	00002486 00002486 00002486 00002486     .$...$...$...$..
    c774:	00002542 00002416 00002416 00002416     B%...$...$...$..
    c784:	000026a6 000026a6 000026a6 000026a6     .&...&...&...&..
    c794:	000026a6 000026a6 000026a6 000026a6     .&...&...&...&..
    c7a4:	000026a6 000026a6 000026a6 000026a6     .&...&...&...&..
    c7b4:	000026a6 000026a6 000026a6 000024da     .&...&...&...$..
    c7c4:	000024da 000022d0 000022d0 00002256     .$..."..."..V"..
    c7d4:	000026a6 000026a6 000026a6 000026a6     .&...&...&...&..
    c7e4:	000026a6 000026a6 000026a6 000026a6     .&...&...&...&..
    c7f4:	000026a6 000026a6 000026a6 000026a6     .&...&...&...&..
    c804:	000026a6 00002634 00002654 000026a6     .&..4&..T&...&..
    c814:	000026a6 00002594 000025c2 000025f4     .&...%...%...%..
    c824:	00002614 000026a6 000026a6 000026a6     .&...&...&...&..
    c834:	000026a6 000026a6 000026a6 000026a6     .&...&...&...&..
    c844:	00002674 00002454 00002436 00002442     t&..T$..6$..B$..
    c854:	00002442 00002442 00002442 00002442     B$..B$..B$..B$..
    c864:	00002450 0000243a 0000243e 0000feff     P$..:$..>$......

0000c874 <pearsondata>:
    c874:	99ee7700 9ee97007 97e0790e 90e77e09     .w...p...y...~..
    c884:	84f36a1d 83f46d1a 8afd6413 8dfa6314     .j...m...d...c..
    c894:	a2d54c3b a5d24b3c acdb4235 abdc4532     ;L..<K..5B..2E..
    c8a4:	bfc85126 b8cf5621 b1c65f28 b6c1582f     &Q..!V..(_../X..
    c8b4:	ef980176 e89f0671 e1960f78 e691087f     v...q...x.......
    c8c4:	f2851c6b f5821b6c fc8b1265 fb8c1562     k...l...e...b...
    c8d4:	d4a33a4d d3a43d4a daad3443 ddaa3344     M:..J=..C4..D3..
    c8e4:	c9be2750 ceb92057 c7b0295e c0b72e59     P'..W ..^)..Y...
    c8f4:	74039aed 73049dea 7a0d94e3 7d0a93e4     ...t...s...z...}
    c904:	691e87f0 6e1980f7 671089fe 60178ef9     ...i...n...g...`
    c914:	4f38a1d6 483fa6d1 4136afd8 4631a8df     ..8O..?H..6A..1F
    c924:	5225bccb 5522bbcc 5c2bb2c5 5b2cb5c2     ..%R.."U..+\..,[
    c934:	0275ec9b 0572eb9c 0c7be295 0b7ce592     ..u...r...{...|.
    c944:	1f68f186 186ff681 1166ff88 1661f88f     ..h...o...f...a.
    c954:	394ed7a0 3e49d0a7 3740d9ae 3047dea9     ..N9..I>..@7..G0
    c964:	2453cabd 2354cdba 2a5dc4b3 2d5ac3b4     ..S$..T#..]*..Z-
    c974:	000034e4 000034e4 000034e0 000034e0     .4...4...4...4..
    c984:	000034e0 000034e0 000034e4 000034e4     .4...4...4...4..
    c994:	000034e4 000034e4 000034e4 000034e0     .4...4...4...4..
    c9a4:	000034e0 000034e0 000034e0 000034e4     .4...4...4...4..
    c9b4:	000034e4 000034e0 000034e0 000034e4     .4...4...4...4..
    c9c4:	000034e4 000034e4 000034e4 000034e4     .4...4...4...4..
    c9d4:	000034e0 000034e0 000034e4 000034e0     .4...4...4...4..
    c9e4:	000034e0 000034e0 000034e4 000034e4     .4...4...4...4..
    c9f4:	000034e4 000034e4 000034e4 000034e4     .4...4...4...4..
    ca04:	000034e4 000034e4 000034e4 000034e4     .4...4...4...4..
    ca14:	000034e4 000034e4 000034e4 000034e4     .4...4...4...4..
    ca24:	000034e4 000034e0 000034e0 000034e0     .4...4...4...4..
    ca34:	000034e4 000034e0 000034e0 00002423     .4...4...4..#$..
    ca44:	42002c00 42003000 42003400 001c1c1b     .,.B.0.B.4.B....
    ca54:	10000800 00002000 01020300 00006444     ..... ......Dd..
    ca64:	00006452 000064ee 00006582 000065e0     Rd...d...e...e..

0000ca74 <_usb_device_irq_bits>:
    ca74:	00080004 00800070 01000001 00000200     ....p...........

0000ca84 <_usb_endpoint_irq_bits>:
    ca84:	60100c03 42000800 42000c00 42001000     ...`...B...B...B
    ca94:	42001400 42001800 42001c00 0c0b0a09     ...B...B...B....
    caa4:	00000e0d 00008894 000088ec 000088ec     ................
    cab4:	0000888e 0000888e 000088a8 0000889a     ................
    cac4:	000088ae 000088dc 00008a94 00008b02     ................
    cad4:	00008b02 00008a74 00008a86 00008aa4     ....t...........
    cae4:	00008a78 00008ab4 00008af0 00008b24     x...........$...
    caf4:	00008b58 00008b58 00008b20 00008b48     X...X... ...H...
    cb04:	00008b28 00008b44 00008b2c 00008b30     (...D...,...0...
    cb14:	74727173 00000066 0000a014 00009fe4     sqrtf...........
    cb24:	00009ff6 00009f38 00009ff6 00009fda     ....8...........
    cb34:	00009ff6 00009f38 00009fe4 00009fe4     ....8...........
    cb44:	00009fda 00009f38 00009f40 00009f40     ....8...@...@...
    cb54:	00009f40 00009ffc 00009fe4 00009fe4     @...............
    cb64:	00009fb8 0000a09c 00009fb8 00009fda     ................
    cb74:	00009fb8 0000a09c 00009fe4 00009fe4     ................
    cb84:	00009fda 0000a09c 00009f40 00009f40     ........@...@...
    cb94:	00009f40 0000a0a6 0000a394 0000a2e4     @...............
    cba4:	0000a2e4 0000a2e2 0000a386 0000a386     ................
    cbb4:	0000a37c 0000a2e2 0000a386 0000a37c     |...........|...
    cbc4:	0000a386 0000a2e2 0000a38c 0000a38c     ................
    cbd4:	0000a38c 0000a41c 0000b0f4 0000b0d6     ................
    cbe4:	0000b090 0000afae 0000b090 0000b0c8     ................
    cbf4:	0000b090 0000afae 0000b0d6 0000b0d6     ................
    cc04:	0000b0c8 0000afae 0000afa6 0000afa6     ................
    cc14:	0000afa6 0000b30c 0000b754 0000b614     ........T.......
    cc24:	0000b614 0000b610 0000b72c 0000b72c     ........,...,...
    cc34:	0000b71e 0000b610 0000b72c 0000b71e     ........,.......
    cc44:	0000b72c 0000b610 0000b734 0000b734     ,.......4...4...
    cc54:	0000b734 0000b938                       4...8...

0000cc5c <_init>:
    cc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc5e:	46c0      	nop			; (mov r8, r8)
    cc60:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cc62:	bc08      	pop	{r3}
    cc64:	469e      	mov	lr, r3
    cc66:	4770      	bx	lr

0000cc68 <__init_array_start>:
    cc68:	000000dd 	.word	0x000000dd

0000cc6c <_fini>:
    cc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc6e:	46c0      	nop			; (mov r8, r8)
    cc70:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cc72:	bc08      	pop	{r3}
    cc74:	469e      	mov	lr, r3
    cc76:	4770      	bx	lr

0000cc78 <__fini_array_start>:
    cc78:	000000b5 	.word	0x000000b5
